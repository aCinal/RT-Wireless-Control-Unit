
RT12e-WCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a338  0800a338  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a338  0800a338  0001a338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a340  0800a340  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a340  0800a340  0001a340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a344  0800a344  0001a344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a348  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048c8  20000010  0800a358  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200048d8  0800a358  000248d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3f6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004197  00000000  00000000  0003e436  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a08  00000000  00000000  000425d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001810  00000000  00000000  00043fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023f93  00000000  00000000  000457e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015ad8  00000000  00000000  0006977b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3611  00000000  00000000  0007f253  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152864  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c58  00000000  00000000  001528e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a16c 	.word	0x0800a16c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800a16c 	.word	0x0800a16c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b0c6      	sub	sp, #280	; 0x118
 8000508:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800050a:	f001 fb09 	bl	8001b20 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800050e:	f000 f919 	bl	8000744 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000512:	f000 fb03 	bl	8000b1c <MX_GPIO_Init>
	MX_DMA_Init();
 8000516:	f000 fae1 	bl	8000adc <MX_DMA_Init>
	MX_CAN1_Init();
 800051a:	f000 f97d 	bl	8000818 <MX_CAN1_Init>
	MX_CRC_Init();
 800051e:	f000 f9b1 	bl	8000884 <MX_CRC_Init>
	MX_IWDG_Init();
 8000522:	f000 f9c3 	bl	80008ac <MX_IWDG_Init>
	MX_SDIO_SD_Init();
 8000526:	f000 f9db 	bl	80008e0 <MX_SDIO_SD_Init>
	MX_SPI1_Init();
 800052a:	f000 f9f9 	bl	8000920 <MX_SPI1_Init>
	MX_UART4_Init();
 800052e:	f000 fa2d 	bl	800098c <MX_UART4_Init>
	MX_USART1_UART_Init();
 8000532:	f000 fa55 	bl	80009e0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000536:	f000 fa7d 	bl	8000a34 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800053a:	f000 faa5 	bl	8000a88 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 800053e:	f006 fc27 	bl	8006d90 <MX_FATFS_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of crcMutex */
	osMutexDef(crcMutex);
 8000542:	2300      	movs	r3, #0
 8000544:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000548:	2300      	movs	r3, #0
 800054a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	crcMutexHandle = osMutexCreate(osMutex(crcMutex));
 800054e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000552:	4618      	mov	r0, r3
 8000554:	f006 ff82 	bl	800745c <osMutexCreate>
 8000558:	4602      	mov	r2, r0
 800055a:	4b64      	ldr	r3, [pc, #400]	; (80006ec <main+0x1e8>)
 800055c:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of reportToWatchdogQueue */
	osMessageQDef(reportToWatchdogQueue, 16, osThreadId);
 800055e:	4b64      	ldr	r3, [pc, #400]	; (80006f0 <main+0x1ec>)
 8000560:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	reportToWatchdogQueueHandle = osMessageCreate(
 800056a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f007 f80f 	bl	8007594 <osMessageCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b5e      	ldr	r3, [pc, #376]	; (80006f4 <main+0x1f0>)
 800057a:	601a      	str	r2, [r3, #0]
			osMessageQ(reportToWatchdogQueue), NULL);

	/* definition and creation of canTransmitQueue */
	osMessageQDef(canTransmitQueue, 16, CanFrameTypedef);
 800057c:	4b5e      	ldr	r3, [pc, #376]	; (80006f8 <main+0x1f4>)
 800057e:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	canTransmitQueueHandle = osMessageCreate(osMessageQ(canTransmitQueue),
 8000588:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f007 f800 	bl	8007594 <osMessageCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <main+0x1f8>)
 8000598:	601a      	str	r2, [r3, #0]
			NULL);

	/* definition and creation of canReceiveQueue */
	osMessageQDef(canReceiveQueue, 16, CanFrameTypedef);
 800059a:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <main+0x1f4>)
 800059c:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	canReceiveQueueHandle = osMessageCreate(osMessageQ(canReceiveQueue), NULL);
 80005a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f006 fff1 	bl	8007594 <osMessageCreate>
 80005b2:	4602      	mov	r2, r0
 80005b4:	4b52      	ldr	r3, [pc, #328]	; (8000700 <main+0x1fc>)
 80005b6:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of watchdog */
	osThreadDef(watchdog, StartWatchdogTask, osPriorityNormal, 0, 128);
 80005b8:	4b52      	ldr	r3, [pc, #328]	; (8000704 <main+0x200>)
 80005ba:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 80005cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 fee2 	bl	800739c <osThreadCreate>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <main+0x204>)
 80005dc:	601a      	str	r2, [r3, #0]

	/* definition and creation of btReceive */
	osThreadDef(btReceive, StartBtReceiveTask, osPriorityLow, 0, 128);
 80005de:	4b4b      	ldr	r3, [pc, #300]	; (800070c <main+0x208>)
 80005e0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	btReceiveHandle = osThreadCreate(osThread(btReceive), NULL);
 80005f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f006 fecf 	bl	800739c <osThreadCreate>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b43      	ldr	r3, [pc, #268]	; (8000710 <main+0x20c>)
 8000602:	601a      	str	r2, [r3, #0]

	/* definition and creation of xbeeSend */
	osThreadDef(xbeeSend, StartXbeeSendTask, osPriorityIdle, 0, 128);
 8000604:	4b43      	ldr	r3, [pc, #268]	; (8000714 <main+0x210>)
 8000606:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xbeeSendHandle = osThreadCreate(osThread(xbeeSend), NULL);
 8000618:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 febc 	bl	800739c <osThreadCreate>
 8000624:	4602      	mov	r2, r0
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <main+0x214>)
 8000628:	601a      	str	r2, [r3, #0]

	/* definition and creation of xbeeReceive */
	osThreadDef(xbeeReceive, StartXbeeReceiveTask, osPriorityIdle, 0, 128);
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <main+0x218>)
 800062c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xbeeReceiveHandle = osThreadCreate(osThread(xbeeReceive), NULL);
 800063e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f006 fea9 	bl	800739c <osThreadCreate>
 800064a:	4602      	mov	r2, r0
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <main+0x21c>)
 800064e:	601a      	str	r2, [r3, #0]

	/* definition and creation of gnssReceive */
	osThreadDef(gnssReceive, StartGnssReceiveTask, osPriorityIdle, 0, 128);
 8000650:	4b34      	ldr	r3, [pc, #208]	; (8000724 <main+0x220>)
 8000652:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gnssReceiveHandle = osThreadCreate(osThread(gnssReceive), NULL);
 8000664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fe96 	bl	800739c <osThreadCreate>
 8000670:	4602      	mov	r2, r0
 8000672:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <main+0x224>)
 8000674:	601a      	str	r2, [r3, #0]

	/* definition and creation of rfReceive */
	osThreadDef(rfReceive, StartRfReceiveTask, osPriorityIdle, 0, 128);
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <main+0x228>)
 8000678:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rfReceiveHandle = osThreadCreate(osThread(rfReceive), NULL);
 800068a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fe83 	bl	800739c <osThreadCreate>
 8000696:	4602      	mov	r2, r0
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <main+0x22c>)
 800069a:	601a      	str	r2, [r3, #0]

	/* definition and creation of canGatekeeper */
	osThreadDef(canGatekeeper, StartCanGatekeeperTask, osPriorityIdle, 0, 128);
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <main+0x230>)
 800069e:	f107 041c 	add.w	r4, r7, #28
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canGatekeeperHandle = osThreadCreate(osThread(canGatekeeper), NULL);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fe70 	bl	800739c <osThreadCreate>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <main+0x234>)
 80006c0:	601a      	str	r2, [r3, #0]

	/* definition and creation of sdGatekeeper */
	osThreadDef(sdGatekeeper, StartSdGatekeeperTask, osPriorityIdle, 0, 128);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4a1d      	ldr	r2, [pc, #116]	; (800073c <main+0x238>)
 80006c6:	461c      	mov	r4, r3
 80006c8:	4615      	mov	r5, r2
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sdGatekeeperHandle = osThreadCreate(osThread(sdGatekeeper), NULL);
 80006d6:	463b      	mov	r3, r7
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fe5e 	bl	800739c <osThreadCreate>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <main+0x23c>)
 80006e4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006e6:	f006 fe36 	bl	8007356 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006ea:	e7fe      	b.n	80006ea <main+0x1e6>
 80006ec:	20004284 	.word	0x20004284
 80006f0:	0800a184 	.word	0x0800a184
 80006f4:	200041dc 	.word	0x200041dc
 80006f8:	0800a194 	.word	0x0800a194
 80006fc:	200043b0 	.word	0x200043b0
 8000700:	200043ac 	.word	0x200043ac
 8000704:	0800a1b0 	.word	0x0800a1b0
 8000708:	20004180 	.word	0x20004180
 800070c:	0800a1d8 	.word	0x0800a1d8
 8000710:	20004310 	.word	0x20004310
 8000714:	0800a200 	.word	0x0800a200
 8000718:	200041d8 	.word	0x200041d8
 800071c:	0800a228 	.word	0x0800a228
 8000720:	200041e0 	.word	0x200041e0
 8000724:	0800a250 	.word	0x0800a250
 8000728:	20004288 	.word	0x20004288
 800072c:	0800a278 	.word	0x0800a278
 8000730:	20004424 	.word	0x20004424
 8000734:	0800a2a4 	.word	0x0800a2a4
 8000738:	200043b4 	.word	0x200043b4
 800073c:	0800a2d0 	.word	0x0800a2d0
 8000740:	20004420 	.word	0x20004420

08000744 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f009 fd01 	bl	800a15a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd0>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80007a0:	230a      	movs	r3, #10
 80007a2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007b8:	2310      	movs	r3, #16
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fcc7 	bl	8003160 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
		Error_Handler();
 80007d8:	f000 fddc 	bl	8001394 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 ff22 	bl	8003640 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc2>
		Error_Handler();
 8000802:	f000 fdc7 	bl	8001394 <Error_Handler>
	}
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_CAN1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_CAN1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 2;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_CAN1_Init+0x64>)
 8000824:	2202      	movs	r2, #2
 8000826:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_CAN1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_CAN1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_CAN1_Init+0x64>)
 8000836:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800083a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_CAN1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_CAN1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_CAN1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_CAN1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_CAN1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_CAN1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_CAN1_Init+0x64>)
 8000868:	f001 f9be 	bl	8001be8 <HAL_CAN_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_CAN1_Init+0x5e>
		Error_Handler();
 8000872:	f000 fd8f 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200043f8 	.word	0x200043f8
 8000880:	40006400 	.word	0x40006400

08000884 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_CRC_Init+0x20>)
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <MX_CRC_Init+0x24>)
 800088c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_CRC_Init+0x20>)
 8000890:	f001 fe7e 	bl	8002590 <HAL_CRC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_CRC_Init+0x1a>
		Error_Handler();
 800089a:	f000 fd7b 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200041d0 	.word	0x200041d0
 80008a8:	40023000 	.word	0x40023000

080008ac <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <MX_IWDG_Init+0x30>)
 80008b4:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 4095;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008c2:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008c6:	f002 fc02 	bl	80030ce <HAL_IWDG_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_IWDG_Init+0x28>
		Error_Handler();
 80008d0:	f000 fd60 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200041c4 	.word	0x200041c4
 80008dc:	40003000 	.word	0x40003000

080008e0 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <MX_SDIO_SD_Init+0x3c>)
 80008e8:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	2000428c 	.word	0x2000428c
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_SPI1_Init+0x64>)
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <MX_SPI1_Init+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000930:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_SPI1_Init+0x64>)
 800094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000950:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SPI1_Init+0x64>)
 800096c:	220a      	movs	r2, #10
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_SPI1_Init+0x64>)
 8000972:	f004 fb61 	bl	8005038 <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI1_Init+0x60>
		Error_Handler();
 800097c:	f000 fd0a 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20004354 	.word	0x20004354
 8000988:	40013000 	.word	0x40013000

0800098c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_UART4_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_UART4_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_UART4_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009c4:	f004 fdda 	bl	800557c <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_UART4_Init+0x46>
		Error_Handler();
 80009ce:	f000 fce1 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20004314 	.word	0x20004314
 80009dc:	40004c00 	.word	0x40004c00

080009e0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART1_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a18:	f004 fdb0 	bl	800557c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a22:	f000 fcb7 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20004244 	.word	0x20004244
 8000a30:	40011000 	.word	0x40011000

08000a34 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART2_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f004 fd86 	bl	800557c <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a76:	f000 fc8d 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200043b8 	.word	0x200043b8
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART3_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	f004 fd5c 	bl	800557c <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000aca:	f000 fc63 	bl	8001394 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20004184 	.word	0x20004184
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a0b      	ldr	r2, [pc, #44]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <MX_DMA_Init+0x3c>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	203a      	movs	r0, #58	; 0x3a
 8000b04:	f001 fd1a 	bl	800253c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b08:	203a      	movs	r0, #58	; 0x3a
 8000b0a:	f001 fd33 	bl	8002574 <HAL_NVIC_EnableIRQ>

}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]
 8000b2c:	609a      	str	r2, [r3, #8]
 8000b2e:	60da      	str	r2, [r3, #12]
 8000b30:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	4b46      	ldr	r3, [pc, #280]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a45      	ldr	r2, [pc, #276]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b3c:	f043 0304 	orr.w	r3, r3, #4
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b43      	ldr	r3, [pc, #268]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0304 	and.w	r3, r3, #4
 8000b4a:	613b      	str	r3, [r7, #16]
 8000b4c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	4b3f      	ldr	r3, [pc, #252]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60fb      	str	r3, [r7, #12]
 8000b68:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	4b38      	ldr	r3, [pc, #224]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a37      	ldr	r2, [pc, #220]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b31      	ldr	r3, [pc, #196]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a30      	ldr	r2, [pc, #192]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b2e      	ldr	r3, [pc, #184]	; (8000c50 <MX_GPIO_Init+0x134>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_RESET);
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	2108      	movs	r1, #8
 8000ba6:	482b      	ldr	r0, [pc, #172]	; (8000c54 <MX_GPIO_Init+0x138>)
 8000ba8:	f002 fa78 	bl	800309c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RF_SPI1_CSN_GPIO_Port, RF_SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2110      	movs	r1, #16
 8000bb0:	4829      	ldr	r0, [pc, #164]	; (8000c58 <MX_GPIO_Init+0x13c>)
 8000bb2:	f002 fa73 	bl	800309c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f243 0134 	movw	r1, #12340	; 0x3034
 8000bbc:	4827      	ldr	r0, [pc, #156]	; (8000c5c <MX_GPIO_Init+0x140>)
 8000bbe:	f002 fa6d 	bl	800309c <HAL_GPIO_WritePin>
			RF_PWR_UP_Pin | RF_TRX_CE_Pin | RF_TX_EN_Pin | GNSS_FORCE_ON_Pin
					| GNSS_RESET_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : XBEE_RSSI_Pin RF_DR_Pin RF_AM_Pin */
	GPIO_InitStruct.Pin = XBEE_RSSI_Pin | RF_DR_Pin | RF_AM_Pin;
 8000bc2:	2334      	movs	r3, #52	; 0x34
 8000bc4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481f      	ldr	r0, [pc, #124]	; (8000c54 <MX_GPIO_Init+0x138>)
 8000bd6:	f002 f8c7 	bl	8002d68 <HAL_GPIO_Init>

	/*Configure GPIO pin : XBEE_RESET_Pin */
	GPIO_InitStruct.Pin = XBEE_RESET_Pin;
 8000bda:	2308      	movs	r3, #8
 8000bdc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(XBEE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4818      	ldr	r0, [pc, #96]	; (8000c54 <MX_GPIO_Init+0x138>)
 8000bf2:	f002 f8b9 	bl	8002d68 <HAL_GPIO_Init>

	/*Configure GPIO pin : RF_SPI1_CSN_Pin */
	GPIO_InitStruct.Pin = RF_SPI1_CSN_Pin;
 8000bf6:	2310      	movs	r3, #16
 8000bf8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RF_SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 0314 	add.w	r3, r7, #20
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4812      	ldr	r0, [pc, #72]	; (8000c58 <MX_GPIO_Init+0x13c>)
 8000c0e:	f002 f8ab 	bl	8002d68 <HAL_GPIO_Init>

	/*Configure GPIO pins : RF_CD_Pin RF_uPCLK_Pin GNSS_1PPS_Pin */
	GPIO_InitStruct.Pin = RF_CD_Pin | RF_uPCLK_Pin | GNSS_1PPS_Pin;
 8000c12:	230b      	movs	r3, #11
 8000c14:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_GPIO_Init+0x140>)
 8000c26:	f002 f89f 	bl	8002d68 <HAL_GPIO_Init>

	/*Configure GPIO pins : RF_PWR_UP_Pin RF_TRX_CE_Pin RF_TX_EN_Pin GNSS_FORCE_ON_Pin
	 GNSS_RESET_Pin */
	GPIO_InitStruct.Pin = RF_PWR_UP_Pin | RF_TRX_CE_Pin | RF_TX_EN_Pin
 8000c2a:	f243 0334 	movw	r3, #12340	; 0x3034
 8000c2e:	617b      	str	r3, [r7, #20]
			| GNSS_FORCE_ON_Pin | GNSS_RESET_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <MX_GPIO_Init+0x140>)
 8000c44:	f002 f890 	bl	8002d68 <HAL_GPIO_Init>

}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020800 	.word	0x40020800
 8000c58:	40020000 	.word	0x40020000
 8000c5c:	40020400 	.word	0x40020400

08000c60 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
	static BaseType_t dummy; /* Buffer for pxHigherPriorityTaskWoken flag */
	switch ((uint32_t) huart->Instance) {
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <HAL_UART_RxCpltCallback+0x40>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00a      	beq.n	8000c88 <HAL_UART_RxCpltCallback+0x28>
 8000c72:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <HAL_UART_RxCpltCallback+0x44>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d000      	beq.n	8000c7a <HAL_UART_RxCpltCallback+0x1a>
	case (uint32_t) GNSS_UART_INSTANCE:
		/* Notify gnssReceive task */
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
		break;
	}
}
 8000c78:	e00d      	b.n	8000c96 <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) btReceiveHandle, &dummy);
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <HAL_UART_RxCpltCallback+0x48>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	490b      	ldr	r1, [pc, #44]	; (8000cac <HAL_UART_RxCpltCallback+0x4c>)
 8000c80:	4618      	mov	r0, r3
 8000c82:	f008 fd2f 	bl	80096e4 <vTaskNotifyGiveFromISR>
		break;
 8000c86:	e006      	b.n	8000c96 <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <HAL_UART_RxCpltCallback+0x50>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4907      	ldr	r1, [pc, #28]	; (8000cac <HAL_UART_RxCpltCallback+0x4c>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 fd28 	bl	80096e4 <vTaskNotifyGiveFromISR>
		break;
 8000c94:	bf00      	nop
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40004800 	.word	0x40004800
 8000ca4:	40011000 	.word	0x40011000
 8000ca8:	20004310 	.word	0x20004310
 8000cac:	20000280 	.word	0x20000280
 8000cb0:	20004288 	.word	0x20004288

08000cb4 <StartWatchdogTask>:
 * @brief  Function implementing the watchdog thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdogTask */
void StartWatchdogTask(void const *argument) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Initialize the watchdog */
	HAL_IWDG_Init(&hiwdg);
 8000cbc:	4847      	ldr	r0, [pc, #284]	; (8000ddc <StartWatchdogTask+0x128>)
 8000cbe:	f002 fa06 	bl	80030ce <HAL_IWDG_Init>

	/* Define key-value pair array for testing threads activity */
	struct {
		osThreadId Id;
		bool Reported;
	} reportSheet[WCU_NUMBER_OF_WATCHED_THREADS ] = { { .Id = btReceiveHandle,
 8000cc2:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <StartWatchdogTask+0x12c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	2300      	movs	r3, #0
 8000cca:	743b      	strb	r3, [r7, #16]
 8000ccc:	4b45      	ldr	r3, [pc, #276]	; (8000de4 <StartWatchdogTask+0x130>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	617b      	str	r3, [r7, #20]
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	763b      	strb	r3, [r7, #24]
 8000cd6:	4b44      	ldr	r3, [pc, #272]	; (8000de8 <StartWatchdogTask+0x134>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	61fb      	str	r3, [r7, #28]
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f887 3020 	strb.w	r3, [r7, #32]
 8000ce2:	4b42      	ldr	r3, [pc, #264]	; (8000dec <StartWatchdogTask+0x138>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000cee:	4b40      	ldr	r3, [pc, #256]	; (8000df0 <StartWatchdogTask+0x13c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	bool allReported; /* Flag raised when all watched threads have reported to the watchdog */

	/* Infinite loop */
	for (;;) {
		/* Test for all threads' activity */
		if (xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <StartWatchdogTask+0x140>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f107 0108 	add.w	r1, r7, #8
 8000d02:	2200      	movs	r2, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f007 f975 	bl	8007ff4 <xQueueReceive>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d161      	bne.n	8000dd4 <StartWatchdogTask+0x120>
		WCU_REPORTTOWATCHDOG_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			/* Identify the thread that just reported and set the appropriate flag in the report sheet */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d16:	e018      	b.n	8000d4a <StartWatchdogTask+0x96>
				if (buff == reportSheet[i].Id) {
 8000d18:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d22:	4413      	add	r3, r2
 8000d24:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000d28:	68bb      	ldr	r3, [r7, #8]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d108      	bne.n	8000d40 <StartWatchdogTask+0x8c>
					reportSheet[i].Reported = true;
 8000d2e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d38:	4413      	add	r3, r2
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f803 2c28 	strb.w	r2, [r3, #-40]
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d44:	3301      	adds	r3, #1
 8000d46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d4a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	d9e2      	bls.n	8000d18 <StartWatchdogTask+0x64>
				}
			}

			/* Assume all threads reported to the watchdog */
			allReported = true;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			/* Test for threads that did not report */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000d5e:	e015      	b.n	8000d8c <StartWatchdogTask+0xd8>
				if (reportSheet[i].Reported == false) {
 8000d60:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000d70:	f083 0301 	eor.w	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <StartWatchdogTask+0xce>
					/* If a thread did not report to the watchdog, reset the flag and break */
					allReported = false;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8000d80:	e008      	b.n	8000d94 <StartWatchdogTask+0xe0>
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d82:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d86:	3301      	adds	r3, #1
 8000d88:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000d8c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d90:	2b04      	cmp	r3, #4
 8000d92:	d9e5      	bls.n	8000d60 <StartWatchdogTask+0xac>
				}
			}

			if (allReported == true) {
 8000d94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d01b      	beq.n	8000dd4 <StartWatchdogTask+0x120>
				/* If all threads have reported to the watchdog, refresh the timer */
				HAL_IWDG_Refresh(&hiwdg);
 8000d9c:	480f      	ldr	r0, [pc, #60]	; (8000ddc <StartWatchdogTask+0x128>)
 8000d9e:	f002 f9cf 	bl	8003140 <HAL_IWDG_Refresh>

				/* Reset the report sheet */
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000da8:	e00d      	b.n	8000dc6 <StartWatchdogTask+0x112>
						1U) {
					reportSheet[i].Reported = false;
 8000daa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000db4:	4413      	add	r3, r2
 8000db6:	2200      	movs	r2, #0
 8000db8:	f803 2c28 	strb.w	r2, [r3, #-40]
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000dbc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000dc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d9ed      	bls.n	8000daa <StartWatchdogTask+0xf6>
				}

				/* Reset the flag */
				allReported = false;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f006 fb2d 	bl	8007434 <osDelay>
		if (xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000dda:	e78e      	b.n	8000cfa <StartWatchdogTask+0x46>
 8000ddc:	200041c4 	.word	0x200041c4
 8000de0:	20004310 	.word	0x20004310
 8000de4:	200041d8 	.word	0x200041d8
 8000de8:	20004288 	.word	0x20004288
 8000dec:	20004424 	.word	0x20004424
 8000df0:	200043b4 	.word	0x200043b4
 8000df4:	200041dc 	.word	0x200041dc

08000df8 <StartBtReceiveTask>:
 * @brief Function implementing the btReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBtReceiveTask */
void StartBtReceiveTask(void const *argument) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	static uint16_t readCrc; /* Buffer for the transmitted CRC */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */

	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000e00:	2214      	movs	r2, #20
 8000e02:	494a      	ldr	r1, [pc, #296]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e04:	484a      	ldr	r0, [pc, #296]	; (8000f30 <StartBtReceiveTask+0x138>)
 8000e06:	f004 fd45 	bl	8005894 <HAL_UART_Receive_DMA>
		WCU_BT_UART_RX_BUFF_SIZE);

		/* Wait for notify from ISR/message received callback */
		if (ulTaskNotifyTake(pdTRUE, WCU_BT_UART_RX_NOTIFY_TAKE_TIMEOUT)
 8000e0a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f008 fc20 	bl	8009654 <ulTaskNotifyTake>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d073      	beq.n	8000f02 <StartBtReceiveTask+0x10a>
				> 0UL) {
			/* Validate the VER and RES/SEQ field */
			if (btUartRxBuff[0] != R3TP_VER0_VER_RES_SEQ_BYTE) {
 8000e1a:	4b44      	ldr	r3, [pc, #272]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d17b      	bne.n	8000f1a <StartBtReceiveTask+0x122>
				 */
				continue;
			}

			/* Validate the END SEQ field */
			if (btUartRxBuff[R3TP_VER0_FRAME_SIZE - 2U] != R3TP_END_SEQ_LOW_BYTE
 8000e22:	4b42      	ldr	r3, [pc, #264]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e24:	7c9b      	ldrb	r3, [r3, #18]
 8000e26:	2bde      	cmp	r3, #222	; 0xde
 8000e28:	d179      	bne.n	8000f1e <StartBtReceiveTask+0x126>
					|| btUartRxBuff[R3TP_VER0_FRAME_SIZE - 1U]
 8000e2a:	4b40      	ldr	r3, [pc, #256]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e2c:	7cdb      	ldrb	r3, [r3, #19]
 8000e2e:	2bed      	cmp	r3, #237	; 0xed
 8000e30:	d175      	bne.n	8000f1e <StartBtReceiveTask+0x126>
				 */
				continue;
			}

			/* Read CRC - note that the CRC is transmitted as little endian */
			readCrc = READAS16BIT(btUartRxBuff[3], btUartRxBuff[2]);
 8000e32:	4b3e      	ldr	r3, [pc, #248]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e34:	78db      	ldrb	r3, [r3, #3]
 8000e36:	021b      	lsls	r3, r3, #8
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	4b3c      	ldr	r3, [pc, #240]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e3c:	789b      	ldrb	r3, [r3, #2]
 8000e3e:	b21b      	sxth	r3, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	4b3b      	ldr	r3, [pc, #236]	; (8000f34 <StartBtReceiveTask+0x13c>)
 8000e48:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(btUartRxBuff + 2U, 0x00, 2U);
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <StartBtReceiveTask+0x140>)
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f009 f982 	bl	800a15a <memset>

			/* Calculate the CRC */
			if (osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT) == osOK) {
 8000e56:	4b39      	ldr	r3, [pc, #228]	; (8000f3c <StartBtReceiveTask+0x144>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f006 fb14 	bl	800748c <osMutexWait>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d15b      	bne.n	8000f22 <StartBtReceiveTask+0x12a>
				calculatedCrc =
						GET16LSBITS(
 8000e6a:	2205      	movs	r2, #5
 8000e6c:	492f      	ldr	r1, [pc, #188]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e6e:	4834      	ldr	r0, [pc, #208]	; (8000f40 <StartBtReceiveTask+0x148>)
 8000e70:	f001 fbaa 	bl	80025c8 <HAL_CRC_Calculate>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b29a      	uxth	r2, r3
				calculatedCrc =
 8000e78:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <StartBtReceiveTask+0x14c>)
 8000e7a:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t*)btUartRxBuff, WCU_BT_UART_RX_BUFF_SIZE / 4U));
				osMutexRelease(crcMutexHandle);
 8000e7c:	4b2f      	ldr	r3, [pc, #188]	; (8000f3c <StartBtReceiveTask+0x144>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f006 fb51 	bl	8007528 <osMutexRelease>
				 */
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <StartBtReceiveTask+0x13c>)
 8000e88:	881a      	ldrh	r2, [r3, #0]
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <StartBtReceiveTask+0x14c>)
 8000e8c:	881b      	ldrh	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d149      	bne.n	8000f26 <StartBtReceiveTask+0x12e>
				 */
				continue;
			}

			/* Read the CAN ID - note that the CAN ID is transmitted as little endian */
			canFrame.Header.Tx.StdId = READAS32BIT(btUartRxBuff[7],
 8000e92:	4b26      	ldr	r3, [pc, #152]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e94:	79db      	ldrb	r3, [r3, #7]
 8000e96:	061a      	lsls	r2, r3, #24
 8000e98:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000e9a:	799b      	ldrb	r3, [r3, #6]
 8000e9c:	041b      	lsls	r3, r3, #16
 8000e9e:	431a      	orrs	r2, r3
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000ea2:	795b      	ldrb	r3, [r3, #5]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000eaa:	7912      	ldrb	r2, [r2, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <StartBtReceiveTask+0x150>)
 8000eb2:	605a      	str	r2, [r3, #4]
					btUartRxBuff[6], btUartRxBuff[5], btUartRxBuff[4]);
			/* Read the Data Length Code */
			canFrame.Header.Tx.DLC = (uint32_t) (
					btUartRxBuff[8] < WCU_CAN_PAYLOAD_SIZE ?
 8000eb4:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000eb6:	7a1b      	ldrb	r3, [r3, #8]
			canFrame.Header.Tx.DLC = (uint32_t) (
 8000eb8:	2b08      	cmp	r3, #8
 8000eba:	bf28      	it	cs
 8000ebc:	2308      	movcs	r3, #8
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b21      	ldr	r3, [pc, #132]	; (8000f48 <StartBtReceiveTask+0x150>)
 8000ec4:	615a      	str	r2, [r3, #20]
							btUartRxBuff[8] : WCU_CAN_PAYLOAD_SIZE);

			/* Read the payload */
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e00d      	b.n	8000ee8 <StartBtReceiveTask+0xf0>
				canFrame.Payload[i] = btUartRxBuff[9 + i];
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	f103 0209 	add.w	r2, r3, #9
 8000ed2:	7bfb      	ldrb	r3, [r7, #15]
 8000ed4:	4915      	ldr	r1, [pc, #84]	; (8000f2c <StartBtReceiveTask+0x134>)
 8000ed6:	5c89      	ldrb	r1, [r1, r2]
 8000ed8:	4a1b      	ldr	r2, [pc, #108]	; (8000f48 <StartBtReceiveTask+0x150>)
 8000eda:	4413      	add	r3, r2
 8000edc:	460a      	mov	r2, r1
 8000ede:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	7bfa      	ldrb	r2, [r7, #15]
 8000eea:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <StartBtReceiveTask+0x150>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3ec      	bcc.n	8000ecc <StartBtReceiveTask+0xd4>
			}

			/* Push CAN frame to queue */
			if (xQueueSend(canTransmitQueueHandle, &canFrame,
 8000ef2:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <StartBtReceiveTask+0x154>)
 8000ef4:	6818      	ldr	r0, [r3, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8000efc:	4912      	ldr	r1, [pc, #72]	; (8000f48 <StartBtReceiveTask+0x150>)
 8000efe:	f006 fe61 	bl	8007bc4 <xQueueGenericSend>
				 */
			}
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &btReceiveHandle,
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <StartBtReceiveTask+0x158>)
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	2300      	movs	r3, #0
 8000f08:	f04f 32ff 	mov.w	r2, #4294967295
 8000f0c:	4911      	ldr	r1, [pc, #68]	; (8000f54 <StartBtReceiveTask+0x15c>)
 8000f0e:	f006 fe59 	bl	8007bc4 <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f006 fa8e 	bl	8007434 <osDelay>
 8000f18:	e772      	b.n	8000e00 <StartBtReceiveTask+0x8>
				continue;
 8000f1a:	bf00      	nop
 8000f1c:	e770      	b.n	8000e00 <StartBtReceiveTask+0x8>
				continue;
 8000f1e:	bf00      	nop
 8000f20:	e76e      	b.n	8000e00 <StartBtReceiveTask+0x8>
				continue;
 8000f22:	bf00      	nop
 8000f24:	e76c      	b.n	8000e00 <StartBtReceiveTask+0x8>
				continue;
 8000f26:	bf00      	nop
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000f28:	e76a      	b.n	8000e00 <StartBtReceiveTask+0x8>
 8000f2a:	bf00      	nop
 8000f2c:	20000284 	.word	0x20000284
 8000f30:	20004244 	.word	0x20004244
 8000f34:	20000298 	.word	0x20000298
 8000f38:	20000286 	.word	0x20000286
 8000f3c:	20004284 	.word	0x20004284
 8000f40:	200041d0 	.word	0x200041d0
 8000f44:	2000029a 	.word	0x2000029a
 8000f48:	2000029c 	.word	0x2000029c
 8000f4c:	200043b0 	.word	0x200043b0
 8000f50:	200041dc 	.word	0x200041dc
 8000f54:	20004310 	.word	0x20004310

08000f58 <StartXbeeSendTask>:
 * @brief Function implementing the xbeeSend thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeSendTask */
void StartXbeeSendTask(void const *argument) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	static uint8_t xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE]; /* UART Tx buffer */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */
	static uint8_t seqNum = 0U; /* Sequence number */

	/* Activate XBEE Pro by driving the XBEE_RESET pin high */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	2108      	movs	r1, #8
 8000f64:	4846      	ldr	r0, [pc, #280]	; (8001080 <StartXbeeSendTask+0x128>)
 8000f66:	f002 f899 	bl	800309c <HAL_GPIO_WritePin>

	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 8000f6a:	4b46      	ldr	r3, [pc, #280]	; (8001084 <StartXbeeSendTask+0x12c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	4945      	ldr	r1, [pc, #276]	; (8001088 <StartXbeeSendTask+0x130>)
 8000f72:	4618      	mov	r0, r3
 8000f74:	f007 f83e 	bl	8007ff4 <xQueueReceive>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d172      	bne.n	8001064 <StartXbeeSendTask+0x10c>
		WCU_CANSUBBEDFRAMES_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			if (frameBuff.DataDirection == RX) {
 8000f7e:	4b43      	ldr	r3, [pc, #268]	; (800108c <StartXbeeSendTask+0x134>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d16e      	bne.n	8001064 <StartXbeeSendTask+0x10c>
				/* Clear the buffer */
				memset(xbeeUartTxBuff, 0x00, R3TP_VER0_FRAME_SIZE);
 8000f86:	2214      	movs	r2, #20
 8000f88:	2100      	movs	r1, #0
 8000f8a:	483f      	ldr	r0, [pc, #252]	; (8001088 <StartXbeeSendTask+0x130>)
 8000f8c:	f009 f8e5 	bl	800a15a <memset>

				/* Set VER and RES/SEQ field */
				xbeeUartTxBuff[0] = R3TP_VER0_VER_RES_SEQ_BYTE;
 8000f90:	4b3d      	ldr	r3, [pc, #244]	; (8001088 <StartXbeeSendTask+0x130>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	701a      	strb	r2, [r3, #0]

				/* Set the SEQ NUM field */
				xbeeUartTxBuff[1] = seqNum;
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <StartXbeeSendTask+0x138>)
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	; (8001088 <StartXbeeSendTask+0x130>)
 8000f9c:	705a      	strb	r2, [r3, #1]
				/* Increment the sequence number */
				seqNum = (seqNum < 255U) ? seqNum + 1 : 0U;
 8000f9e:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <StartXbeeSendTask+0x138>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d004      	beq.n	8000fb0 <StartXbeeSendTask+0x58>
 8000fa6:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <StartXbeeSendTask+0x138>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	e000      	b.n	8000fb2 <StartXbeeSendTask+0x5a>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	4a37      	ldr	r2, [pc, #220]	; (8001090 <StartXbeeSendTask+0x138>)
 8000fb4:	7013      	strb	r3, [r2, #0]

				/* Set the END SEQ field */
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 2U] =
 8000fb6:	4b34      	ldr	r3, [pc, #208]	; (8001088 <StartXbeeSendTask+0x130>)
 8000fb8:	22de      	movs	r2, #222	; 0xde
 8000fba:	749a      	strb	r2, [r3, #18]
				R3TP_END_SEQ_LOW_BYTE;
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 1U] =
 8000fbc:	4b32      	ldr	r3, [pc, #200]	; (8001088 <StartXbeeSendTask+0x130>)
 8000fbe:	22ed      	movs	r2, #237	; 0xed
 8000fc0:	74da      	strb	r2, [r3, #19]
				R3TP_END_SEQ_HIGH_BYTE;

				/* Set CAN ID field - note that the CAN ID is transmitted as little endian */
				xbeeUartTxBuff[4] = GETLSBOF16(frameBuff.Header.Rx.StdId);
 8000fc2:	4b32      	ldr	r3, [pc, #200]	; (800108c <StartXbeeSendTask+0x134>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b2f      	ldr	r3, [pc, #188]	; (8001088 <StartXbeeSendTask+0x130>)
 8000fca:	711a      	strb	r2, [r3, #4]
				xbeeUartTxBuff[5] = GETMSBOF16(frameBuff.Header.Rx.StdId);
 8000fcc:	4b2f      	ldr	r3, [pc, #188]	; (800108c <StartXbeeSendTask+0x134>)
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <StartXbeeSendTask+0x130>)
 8000fda:	715a      	strb	r2, [r3, #5]

				/* Set the DLC field */
				xbeeUartTxBuff[8] = (uint8_t) frameBuff.Header.Rx.DLC;
 8000fdc:	4b2b      	ldr	r3, [pc, #172]	; (800108c <StartXbeeSendTask+0x134>)
 8000fde:	695b      	ldr	r3, [r3, #20]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b29      	ldr	r3, [pc, #164]	; (8001088 <StartXbeeSendTask+0x130>)
 8000fe4:	721a      	strb	r2, [r3, #8]

				/* Set the DATA field */
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
 8000fea:	e00b      	b.n	8001004 <StartXbeeSendTask+0xac>
					xbeeUartTxBuff[9 + i] = frameBuff.Payload[i];
 8000fec:	7bfa      	ldrb	r2, [r7, #15]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	3309      	adds	r3, #9
 8000ff2:	4926      	ldr	r1, [pc, #152]	; (800108c <StartXbeeSendTask+0x134>)
 8000ff4:	440a      	add	r2, r1
 8000ff6:	f892 1020 	ldrb.w	r1, [r2, #32]
 8000ffa:	4a23      	ldr	r2, [pc, #140]	; (8001088 <StartXbeeSendTask+0x130>)
 8000ffc:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3301      	adds	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
 8001004:	7bfa      	ldrb	r2, [r7, #15]
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <StartXbeeSendTask+0x134>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	429a      	cmp	r2, r3
 800100c:	d3ee      	bcc.n	8000fec <StartXbeeSendTask+0x94>
				}

				/* Calculate the CRC */
				if (osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT)
 800100e:	4b21      	ldr	r3, [pc, #132]	; (8001094 <StartXbeeSendTask+0x13c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f04f 31ff 	mov.w	r1, #4294967295
 8001016:	4618      	mov	r0, r3
 8001018:	f006 fa38 	bl	800748c <osMutexWait>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d12c      	bne.n	800107c <StartXbeeSendTask+0x124>
						== osOK) {
					calculatedCrc =
							GET16LSBITS(
 8001022:	2205      	movs	r2, #5
 8001024:	4918      	ldr	r1, [pc, #96]	; (8001088 <StartXbeeSendTask+0x130>)
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <StartXbeeSendTask+0x140>)
 8001028:	f001 face 	bl	80025c8 <HAL_CRC_Calculate>
 800102c:	4603      	mov	r3, r0
 800102e:	b29a      	uxth	r2, r3
					calculatedCrc =
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <StartXbeeSendTask+0x144>)
 8001032:	801a      	strh	r2, [r3, #0]
									HAL_CRC_Calculate(&hcrc, (uint32_t*)xbeeUartTxBuff, R3TP_VER0_FRAME_SIZE / 4));
					osMutexRelease(crcMutexHandle);
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <StartXbeeSendTask+0x13c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f006 fa75 	bl	8007528 <osMutexRelease>

					/* Set the CRC field - note that the CRC is transmitted as little endian */
					xbeeUartTxBuff[2] = GETLSBOF16(calculatedCrc);
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <StartXbeeSendTask+0x144>)
 8001040:	881b      	ldrh	r3, [r3, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b10      	ldr	r3, [pc, #64]	; (8001088 <StartXbeeSendTask+0x130>)
 8001046:	709a      	strb	r2, [r3, #2]
					xbeeUartTxBuff[3] = GETMSBOF16(calculatedCrc);
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <StartXbeeSendTask+0x144>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	0a1b      	lsrs	r3, r3, #8
 800104e:	b29b      	uxth	r3, r3
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b0d      	ldr	r3, [pc, #52]	; (8001088 <StartXbeeSendTask+0x130>)
 8001054:	70da      	strb	r2, [r3, #3]
					 */
					continue;
				}

				/* Transmit frame */
				HAL_UART_Transmit(&XBEE_UART_HANDLE, xbeeUartTxBuff,
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	2214      	movs	r2, #20
 800105c:	490a      	ldr	r1, [pc, #40]	; (8001088 <StartXbeeSendTask+0x130>)
 800105e:	4810      	ldr	r0, [pc, #64]	; (80010a0 <StartXbeeSendTask+0x148>)
 8001060:	f004 fad9 	bl	8005616 <HAL_UART_Transmit>
				 */
			}
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &xbeeSendHandle,
 8001064:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <StartXbeeSendTask+0x14c>)
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	2300      	movs	r3, #0
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	490e      	ldr	r1, [pc, #56]	; (80010a8 <StartXbeeSendTask+0x150>)
 8001070:	f006 fda8 	bl	8007bc4 <xQueueGenericSend>
			 * TODO:
			 * Log failed to push to queue
			 */
		}

		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001074:	2001      	movs	r0, #1
 8001076:	f006 f9dd 	bl	8007434 <osDelay>
 800107a:	e776      	b.n	8000f6a <StartXbeeSendTask+0x12>
					continue;
 800107c:	bf00      	nop
		if (xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 800107e:	e774      	b.n	8000f6a <StartXbeeSendTask+0x12>
 8001080:	40020800 	.word	0x40020800
 8001084:	200043ac 	.word	0x200043ac
 8001088:	200002c4 	.word	0x200002c4
 800108c:	200002d8 	.word	0x200002d8
 8001090:	20000300 	.word	0x20000300
 8001094:	20004284 	.word	0x20004284
 8001098:	200041d0 	.word	0x200041d0
 800109c:	20000302 	.word	0x20000302
 80010a0:	20004314 	.word	0x20004314
 80010a4:	200041dc 	.word	0x200041dc
 80010a8:	200041d8 	.word	0x200041d8

080010ac <StartXbeeReceiveTask>:
 * @brief Function implementing the xbeeReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeReceiveTask */
void StartXbeeReceiveTask(void const *argument) {
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	static uint32_t subscription[R3TP_VER1_MAX_FRAME_NUM]; /* Buffer for telemetry subscription CAN IDs */

	/* Infinite loop */
	for (;;) {
		/* Listen for the subscription (VER1) frame */
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	2201      	movs	r2, #1
 80010ba:	4962      	ldr	r1, [pc, #392]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80010bc:	4862      	ldr	r0, [pc, #392]	; (8001248 <StartXbeeReceiveTask+0x19c>)
 80010be:	f004 fb43 	bl	8005748 <HAL_UART_Receive>
		WCU_XBEE_UART_RX_TIMEOUT);
		/* Validate the VER and RES/SEQ field */
		if (xbeeUartRxBuff[0] == R3TP_VER1_VER_RES_SEQ_BYTE) {
 80010c2:	4b60      	ldr	r3, [pc, #384]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	2b20      	cmp	r3, #32
 80010c8:	f040 80b0 	bne.w	800122c <StartXbeeReceiveTask+0x180>
			/* On valid version byte, receive SEQ NUM, CHECKSUM and FRAME NUM */
			HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff + 1, 7,
 80010cc:	495f      	ldr	r1, [pc, #380]	; (800124c <StartXbeeReceiveTask+0x1a0>)
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295
 80010d2:	2207      	movs	r2, #7
 80010d4:	485c      	ldr	r0, [pc, #368]	; (8001248 <StartXbeeReceiveTask+0x19c>)
 80010d6:	f004 fb37 	bl	8005748 <HAL_UART_Receive>
			WCU_XBEE_UART_RX_TIMEOUT);

			/* Read the FRAME NUM field */
			frameNum = READAS32BIT(xbeeUartRxBuff[7], xbeeUartRxBuff[6],
 80010da:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80010dc:	79db      	ldrb	r3, [r3, #7]
 80010de:	061a      	lsls	r2, r3, #24
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80010e2:	799b      	ldrb	r3, [r3, #6]
 80010e4:	041b      	lsls	r3, r3, #16
 80010e6:	431a      	orrs	r2, r3
 80010e8:	4b56      	ldr	r3, [pc, #344]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80010ea:	795b      	ldrb	r3, [r3, #5]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	4313      	orrs	r3, r2
 80010f0:	4a54      	ldr	r2, [pc, #336]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80010f2:	7912      	ldrb	r2, [r2, #4]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b55      	ldr	r3, [pc, #340]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 80010fa:	601a      	str	r2, [r3, #0]
					xbeeUartRxBuff[5], xbeeUartRxBuff[4]);

			/* Assert the payload won't overflow the buffer */
			if (frameNum > R3TP_VER1_MAX_FRAME_NUM) {
 80010fc:	4b54      	ldr	r3, [pc, #336]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2b1c      	cmp	r3, #28
 8001102:	f200 8097 	bhi.w	8001234 <StartXbeeReceiveTask+0x188>
				 */
				continue;
			}

			/* Receive the payload */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 8001106:	4953      	ldr	r1, [pc, #332]	; (8001254 <StartXbeeReceiveTask+0x1a8>)
 8001108:	4b51      	ldr	r3, [pc, #324]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	b29a      	uxth	r2, r3
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
 8001116:	484c      	ldr	r0, [pc, #304]	; (8001248 <StartXbeeReceiveTask+0x19c>)
 8001118:	f004 fb16 	bl	8005748 <HAL_UART_Receive>
					R3TP_VER1_PAYLOAD_BEGIN(xbeeUartRxBuff), frameNum * 4,
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Receive the frame align bytes (two) and END SEQ (also two bytes) */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
					R3TP_VER1_EPILOGUE_BEGIN(xbeeUartRxBuff, frameNum), 4,
 800111c:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 800111e:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 8001120:	3302      	adds	r3, #2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4a47      	ldr	r2, [pc, #284]	; (8001244 <StartXbeeReceiveTask+0x198>)
 8001126:	1899      	adds	r1, r3, r2
 8001128:	f04f 33ff 	mov.w	r3, #4294967295
 800112c:	2204      	movs	r2, #4
 800112e:	4846      	ldr	r0, [pc, #280]	; (8001248 <StartXbeeReceiveTask+0x19c>)
 8001130:	f004 fb0a 	bl	8005748 <HAL_UART_Receive>
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Validate the END SEQ field */
			if (xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum) - 2U]
 8001134:	4b46      	ldr	r3, [pc, #280]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3303      	adds	r3, #3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	3b02      	subs	r3, #2
 800113e:	4a41      	ldr	r2, [pc, #260]	; (8001244 <StartXbeeReceiveTask+0x198>)
 8001140:	5cd3      	ldrb	r3, [r2, r3]
 8001142:	2bde      	cmp	r3, #222	; 0xde
 8001144:	d178      	bne.n	8001238 <StartXbeeReceiveTask+0x18c>
					!= R3TP_END_SEQ_LOW_BYTE
					|| xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum) - 1U]
 8001146:	4b42      	ldr	r3, [pc, #264]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3303      	adds	r3, #3
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	3b01      	subs	r3, #1
 8001150:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <StartXbeeReceiveTask+0x198>)
 8001152:	5cd3      	ldrb	r3, [r2, r3]
 8001154:	2bed      	cmp	r3, #237	; 0xed
 8001156:	d16f      	bne.n	8001238 <StartXbeeReceiveTask+0x18c>
				 */
				continue;
			}

			/* Read the CHECKSUM */
			readCrc = READAS16BIT(xbeeUartRxBuff[3], xbeeUartRxBuff[2]);
 8001158:	4b3a      	ldr	r3, [pc, #232]	; (8001244 <StartXbeeReceiveTask+0x198>)
 800115a:	78db      	ldrb	r3, [r3, #3]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	4b38      	ldr	r3, [pc, #224]	; (8001244 <StartXbeeReceiveTask+0x198>)
 8001162:	789b      	ldrb	r3, [r3, #2]
 8001164:	b21b      	sxth	r3, r3
 8001166:	4313      	orrs	r3, r2
 8001168:	b21b      	sxth	r3, r3
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b3a      	ldr	r3, [pc, #232]	; (8001258 <StartXbeeReceiveTask+0x1ac>)
 800116e:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(xbeeUartRxBuff + 2U, 0x00, 2U);
 8001170:	4b3a      	ldr	r3, [pc, #232]	; (800125c <StartXbeeReceiveTask+0x1b0>)
 8001172:	2202      	movs	r2, #2
 8001174:	2100      	movs	r1, #0
 8001176:	4618      	mov	r0, r3
 8001178:	f008 ffef 	bl	800a15a <memset>

			if (osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT) == osOK) {
 800117c:	4b38      	ldr	r3, [pc, #224]	; (8001260 <StartXbeeReceiveTask+0x1b4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f04f 31ff 	mov.w	r1, #4294967295
 8001184:	4618      	mov	r0, r3
 8001186:	f006 f981 	bl	800748c <osMutexWait>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d155      	bne.n	800123c <StartXbeeReceiveTask+0x190>
				/* Calculate the CRC */
				calculatedCrc =
						GET16LSBITS(
 8001190:	4b2f      	ldr	r3, [pc, #188]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3303      	adds	r3, #3
 8001196:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800119a:	461a      	mov	r2, r3
 800119c:	4929      	ldr	r1, [pc, #164]	; (8001244 <StartXbeeReceiveTask+0x198>)
 800119e:	4831      	ldr	r0, [pc, #196]	; (8001264 <StartXbeeReceiveTask+0x1b8>)
 80011a0:	f001 fa12 	bl	80025c8 <HAL_CRC_Calculate>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29a      	uxth	r2, r3
				calculatedCrc =
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <StartXbeeReceiveTask+0x1bc>)
 80011aa:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t* )xbeeUartRxBuff, R3TP_VER1_MESSAGE_LENGTH(frameNum)/4));
				osMutexRelease(crcMutexHandle);
 80011ac:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <StartXbeeReceiveTask+0x1b4>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 f9b9 	bl	8007528 <osMutexRelease>
				 */
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 80011b6:	4b28      	ldr	r3, [pc, #160]	; (8001258 <StartXbeeReceiveTask+0x1ac>)
 80011b8:	881a      	ldrh	r2, [r3, #0]
 80011ba:	4b2b      	ldr	r3, [pc, #172]	; (8001268 <StartXbeeReceiveTask+0x1bc>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d13e      	bne.n	8001240 <StartXbeeReceiveTask+0x194>
				 */
				continue;
			}

			/* Read the payload */
			for (uint32_t i = 0; i < frameNum; i += 1) {
 80011c2:	2300      	movs	r3, #0
 80011c4:	60fb      	str	r3, [r7, #12]
 80011c6:	e025      	b.n	8001214 <StartXbeeReceiveTask+0x168>
				subscription[i] =
						READAS32BIT(
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	330b      	adds	r3, #11
 80011ce:	4a1d      	ldr	r2, [pc, #116]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80011d0:	4413      	add	r3, r2
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	061a      	lsls	r2, r3, #24
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	330a      	adds	r3, #10
 80011dc:	4919      	ldr	r1, [pc, #100]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80011de:	440b      	add	r3, r1
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	041b      	lsls	r3, r3, #16
 80011e4:	431a      	orrs	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	3309      	adds	r3, #9
 80011ec:	4915      	ldr	r1, [pc, #84]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80011ee:	440b      	add	r3, r1
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	4313      	orrs	r3, r2
 80011f6:	68fa      	ldr	r2, [r7, #12]
 80011f8:	3202      	adds	r2, #2
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	4911      	ldr	r1, [pc, #68]	; (8001244 <StartXbeeReceiveTask+0x198>)
 80011fe:	440a      	add	r2, r1
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	4619      	mov	r1, r3
				subscription[i] =
 8001206:	4a19      	ldr	r2, [pc, #100]	; (800126c <StartXbeeReceiveTask+0x1c0>)
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint32_t i = 0; i < frameNum; i += 1) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	3301      	adds	r3, #1
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	4b0e      	ldr	r3, [pc, #56]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	429a      	cmp	r2, r3
 800121c:	d3d4      	bcc.n	80011c8 <StartXbeeReceiveTask+0x11c>
			 * TODO:
			 * Write subscription to SD
			 */

			/* Set the CAN filters */
			setCanFilterList(&hcan1, subscription, frameNum);
 800121e:	4b0c      	ldr	r3, [pc, #48]	; (8001250 <StartXbeeReceiveTask+0x1a4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4911      	ldr	r1, [pc, #68]	; (800126c <StartXbeeReceiveTask+0x1c0>)
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <StartXbeeReceiveTask+0x1c4>)
 8001228:	f000 f8bc 	bl	80013a4 <setCanFilterList>
			/**
			 * TODO:
			 * Log invalid VER/RES/SEQ octet
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800122c:	2001      	movs	r0, #1
 800122e:	f006 f901 	bl	8007434 <osDelay>
 8001232:	e73f      	b.n	80010b4 <StartXbeeReceiveTask+0x8>
				continue;
 8001234:	bf00      	nop
 8001236:	e73d      	b.n	80010b4 <StartXbeeReceiveTask+0x8>
				continue;
 8001238:	bf00      	nop
 800123a:	e73b      	b.n	80010b4 <StartXbeeReceiveTask+0x8>
				continue;
 800123c:	bf00      	nop
 800123e:	e739      	b.n	80010b4 <StartXbeeReceiveTask+0x8>
				continue;
 8001240:	bf00      	nop
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 8001242:	e737      	b.n	80010b4 <StartXbeeReceiveTask+0x8>
 8001244:	20000304 	.word	0x20000304
 8001248:	20004314 	.word	0x20004314
 800124c:	20000305 	.word	0x20000305
 8001250:	20000380 	.word	0x20000380
 8001254:	2000030c 	.word	0x2000030c
 8001258:	20000384 	.word	0x20000384
 800125c:	20000306 	.word	0x20000306
 8001260:	20004284 	.word	0x20004284
 8001264:	200041d0 	.word	0x200041d0
 8001268:	20000386 	.word	0x20000386
 800126c:	20000388 	.word	0x20000388
 8001270:	200043f8 	.word	0x200043f8

08001274 <StartGnssReceiveTask>:
 * @brief Function implementing the gnssReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGnssReceiveTask */
void StartGnssReceiveTask(void const *argument) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGnssReceiveTask */
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &gnssReceiveHandle,
 800127c:	4b05      	ldr	r3, [pc, #20]	; (8001294 <StartGnssReceiveTask+0x20>)
 800127e:	6818      	ldr	r0, [r3, #0]
 8001280:	2300      	movs	r3, #0
 8001282:	f04f 32ff 	mov.w	r2, #4294967295
 8001286:	4904      	ldr	r1, [pc, #16]	; (8001298 <StartGnssReceiveTask+0x24>)
 8001288:	f006 fc9c 	bl	8007bc4 <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800128c:	2001      	movs	r0, #1
 800128e:	f006 f8d1 	bl	8007434 <osDelay>
		if (xQueueSend(reportToWatchdogQueueHandle, &gnssReceiveHandle,
 8001292:	e7f3      	b.n	800127c <StartGnssReceiveTask+0x8>
 8001294:	200041dc 	.word	0x200041dc
 8001298:	20004288 	.word	0x20004288

0800129c <StartRfReceiveTask>:
 * @brief Function implementing the rfReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfReceiveTask */
void StartRfReceiveTask(void const *argument) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRfReceiveTask */
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &rfReceiveHandle,
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <StartRfReceiveTask+0x20>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	4904      	ldr	r1, [pc, #16]	; (80012c0 <StartRfReceiveTask+0x24>)
 80012b0:	f006 fc88 	bl	8007bc4 <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f006 f8bd 	bl	8007434 <osDelay>
		if (xQueueSend(reportToWatchdogQueueHandle, &rfReceiveHandle,
 80012ba:	e7f3      	b.n	80012a4 <StartRfReceiveTask+0x8>
 80012bc:	200041dc 	.word	0x200041dc
 80012c0:	20004424 	.word	0x20004424

080012c4 <StartCanGatekeeperTask>:
 * @brief Function implementing the canGatekeeper thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanGatekeeperTask */
void StartCanGatekeeperTask(void const *argument) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	static CanFrameTypedef frameBuff; /* CAN frame buffer */
	static uint32_t dummy; /* CAN Tx mailbox */
	/* Infinite loop */
	for (;;) {
		/* Check for outgoing messages */
		if (xQueueReceive(canTransmitQueueHandle, &frameBuff,
 80012cc:	4b1b      	ldr	r3, [pc, #108]	; (800133c <StartCanGatekeeperTask+0x78>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2200      	movs	r2, #0
 80012d2:	491b      	ldr	r1, [pc, #108]	; (8001340 <StartCanGatekeeperTask+0x7c>)
 80012d4:	4618      	mov	r0, r3
 80012d6:	f006 fe8d 	bl	8007ff4 <xQueueReceive>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d109      	bne.n	80012f4 <StartCanGatekeeperTask+0x30>
		WCU_CANTRANSMIT_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			/* Validate the DataDirection member */
			if (frameBuff.DataDirection == TX) {
 80012e0:	4b17      	ldr	r3, [pc, #92]	; (8001340 <StartCanGatekeeperTask+0x7c>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <StartCanGatekeeperTask+0x30>
				/* Send the message */
				HAL_CAN_AddTxMessage(&hcan1, &frameBuff.Header.Tx,
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <StartCanGatekeeperTask+0x80>)
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <StartCanGatekeeperTask+0x84>)
 80012ec:	4917      	ldr	r1, [pc, #92]	; (800134c <StartCanGatekeeperTask+0x88>)
 80012ee:	4818      	ldr	r0, [pc, #96]	; (8001350 <StartCanGatekeeperTask+0x8c>)
 80012f0:	f000 fe56 	bl	8001fa0 <HAL_CAN_AddTxMessage>
				 */
			}
		}

		/* Check for incoming messages */
		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0U) {
 80012f4:	2100      	movs	r1, #0
 80012f6:	4816      	ldr	r0, [pc, #88]	; (8001350 <StartCanGatekeeperTask+0x8c>)
 80012f8:	f001 f83f 	bl	800237a <HAL_CAN_GetRxFifoFillLevel>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <StartCanGatekeeperTask+0x60>
			/* Receive the message */
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &frameBuff.Header.Rx,
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <StartCanGatekeeperTask+0x84>)
 8001304:	4a11      	ldr	r2, [pc, #68]	; (800134c <StartCanGatekeeperTask+0x88>)
 8001306:	2100      	movs	r1, #0
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <StartCanGatekeeperTask+0x8c>)
 800130a:	f000 ff24 	bl	8002156 <HAL_CAN_GetRxMessage>
					frameBuff.Payload);
			/* Set the DataDirection member in the CAN frame struct */
			frameBuff.DataDirection = RX;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <StartCanGatekeeperTask+0x7c>)
 8001310:	2201      	movs	r2, #1
 8001312:	701a      	strb	r2, [r3, #0]
			/* Send the frame to the telemetry queue */
			if (xQueueSend(canReceiveQueueHandle, &frameBuff,
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <StartCanGatekeeperTask+0x90>)
 8001316:	6818      	ldr	r0, [r3, #0]
 8001318:	2300      	movs	r3, #0
 800131a:	f04f 32ff 	mov.w	r2, #4294967295
 800131e:	4908      	ldr	r1, [pc, #32]	; (8001340 <StartCanGatekeeperTask+0x7c>)
 8001320:	f006 fc50 	bl	8007bc4 <xQueueGenericSend>
				 */
			}
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &canGatekeeperHandle,
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <StartCanGatekeeperTask+0x94>)
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	2300      	movs	r3, #0
 800132a:	f04f 32ff 	mov.w	r2, #4294967295
 800132e:	490b      	ldr	r1, [pc, #44]	; (800135c <StartCanGatekeeperTask+0x98>)
 8001330:	f006 fc48 	bl	8007bc4 <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001334:	2001      	movs	r0, #1
 8001336:	f006 f87d 	bl	8007434 <osDelay>
		if (xQueueReceive(canTransmitQueueHandle, &frameBuff,
 800133a:	e7c7      	b.n	80012cc <StartCanGatekeeperTask+0x8>
 800133c:	200043b0 	.word	0x200043b0
 8001340:	200003f8 	.word	0x200003f8
 8001344:	20000420 	.word	0x20000420
 8001348:	20000418 	.word	0x20000418
 800134c:	200003fc 	.word	0x200003fc
 8001350:	200043f8 	.word	0x200043f8
 8001354:	200043ac 	.word	0x200043ac
 8001358:	200041dc 	.word	0x200041dc
 800135c:	200043b4 	.word	0x200043b4

08001360 <StartSdGatekeeperTask>:
 * @brief Function implementing the sdGatekeeper thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSdGatekeeperTask */
void StartSdGatekeeperTask(void const *argument) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSdGatekeeperTask */
	/* Infinite loop */
	for (;;) {
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001368:	2001      	movs	r0, #1
 800136a:	f006 f863 	bl	8007434 <osDelay>
 800136e:	e7fb      	b.n	8001368 <StartSdGatekeeperTask+0x8>

08001370 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a04      	ldr	r2, [pc, #16]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d101      	bne.n	8001386 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001382:	f000 fbef 	bl	8001b64 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40001000 	.word	0x40001000

08001394 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
	...

080013a4 <setCanFilterList>:
 * @param hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @param ids Pointer to an array of 32-bit CAN IDs to filter for
 * @param count Length of the ids array
 */
void setCanFilterList(CAN_HandleTypeDef *hcan, uint32_t* ids, uint32_t count) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b090      	sub	sp, #64	; 0x40
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	/* Assert valid ids array length */
	if(count <= CAN_FILTERBANKS_COUNT * 4) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b70      	cmp	r3, #112	; 0x70
 80013b4:	d878      	bhi.n	80014a8 <setCanFilterList+0x104>
		/* Prepare the filter configuration structure */
		CAN_FilterTypeDef filterConfig;
		/* Select the CAN FIFO to filter */
		filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
		/* Select the filter mode as IDLIST - CAN IDs will be stored in the filter bank registers */
		filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80013ba:	2301      	movs	r3, #1
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
		/* Set the filter scale as 16 bit, since only the standard 11-bit CAN IDs are used - this allows four IDs per bank */
		filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Clear the previous filter config */
		filterConfig.FilterIdHigh = 0x00000000U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
		filterConfig.FilterIdLow = 0x00000000U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	617b      	str	r3, [r7, #20]
		filterConfig.FilterMaskIdHigh = 0x00000000U;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
		filterConfig.FilterMaskIdLow = 0x00000000U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
		filterConfig.FilterActivation = DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013da:	e00a      	b.n	80013f2 <setCanFilterList+0x4e>
			filterConfig.FilterBank = i;
 80013dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_CAN_ConfigFilter(hcan, &filterConfig);
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4619      	mov	r1, r3
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 fcfa 	bl	8001de0 <HAL_CAN_ConfigFilter>
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 80013ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013ee:	3301      	adds	r3, #1
 80013f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013f4:	2b1b      	cmp	r3, #27
 80013f6:	d9f1      	bls.n	80013dc <setCanFilterList+0x38>
		}

		/* Set the new filter */
		filterConfig.FilterActivation = ENABLE;
 80013f8:	2301      	movs	r3, #1
 80013fa:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < count; i += 1) {
 80013fc:	2300      	movs	r3, #0
 80013fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8001400:	e04e      	b.n	80014a0 <setCanFilterList+0xfc>
			switch(i % 4) {
 8001402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001404:	f003 0303 	and.w	r3, r3, #3
 8001408:	2b03      	cmp	r3, #3
 800140a:	d82b      	bhi.n	8001464 <setCanFilterList+0xc0>
 800140c:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <setCanFilterList+0x70>)
 800140e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001412:	bf00      	nop
 8001414:	08001425 	.word	0x08001425
 8001418:	08001435 	.word	0x08001435
 800141c:	08001445 	.word	0x08001445
 8001420:	08001455 	.word	0x08001455
			case 0:
				filterConfig.FilterIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	68ba      	ldr	r2, [r7, #8]
 800142a:	4413      	add	r3, r2
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	015b      	lsls	r3, r3, #5
 8001430:	613b      	str	r3, [r7, #16]
				break;
 8001432:	e017      	b.n	8001464 <setCanFilterList+0xc0>
			case 1:
				filterConfig.FilterIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	4413      	add	r3, r2
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	015b      	lsls	r3, r3, #5
 8001440:	617b      	str	r3, [r7, #20]
				break;
 8001442:	e00f      	b.n	8001464 <setCanFilterList+0xc0>
			case 2:
				filterConfig.FilterMaskIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	015b      	lsls	r3, r3, #5
 8001450:	61bb      	str	r3, [r7, #24]
				break;
 8001452:	e007      	b.n	8001464 <setCanFilterList+0xc0>
			case 3:
				filterConfig.FilterMaskIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	68ba      	ldr	r2, [r7, #8]
 800145a:	4413      	add	r3, r2
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	015b      	lsls	r3, r3, #5
 8001460:	61fb      	str	r3, [r7, #28]
				break;
 8001462:	bf00      	nop
			}

			/* If the filter bank is fully configured or there are no more IDs, call HAL_CAN_ConfigFilter */
			if((i % 4 == 3) || (i + 1 == count)) {
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b03      	cmp	r3, #3
 800146c:	d004      	beq.n	8001478 <setCanFilterList+0xd4>
 800146e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001470:	3301      	adds	r3, #1
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d110      	bne.n	800149a <setCanFilterList+0xf6>
				/* Configure the filter */
				HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 fcae 	bl	8001de0 <HAL_CAN_ConfigFilter>
				/* On fully configured filter bank, proceed to the next one */
				filterConfig.FilterBank += 1;
 8001484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001486:	3301      	adds	r3, #1
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
				/* Clear the config structure ID members */
				filterConfig.FilterIdHigh = 0x00000000U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
				filterConfig.FilterIdLow = 0x00000000U;
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
				filterConfig.FilterMaskIdHigh = 0x00000000U;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
				filterConfig.FilterMaskIdLow = 0x00000000U;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < count; i += 1) {
 800149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800149c:	3301      	adds	r3, #1
 800149e:	63bb      	str	r3, [r7, #56]	; 0x38
 80014a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d3ac      	bcc.n	8001402 <setCanFilterList+0x5e>
			}
		}
	}
}
 80014a8:	bf00      	nop
 80014aa:	3740      	adds	r7, #64	; 0x40
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_MspInit+0x54>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a11      	ldr	r2, [pc, #68]	; (8001504 <HAL_MspInit+0x54>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_MspInit+0x54>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_MspInit+0x54>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_MspInit+0x54>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_MspInit+0x54>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	210f      	movs	r1, #15
 80014f2:	f06f 0001 	mvn.w	r0, #1
 80014f6:	f001 f821 	bl	800253c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a19      	ldr	r2, [pc, #100]	; (800158c <HAL_CAN_MspInit+0x84>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d12c      	bne.n	8001584 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_CAN_MspInit+0x88>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a17      	ldr	r2, [pc, #92]	; (8001590 <HAL_CAN_MspInit+0x88>)
 8001534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_CAN_MspInit+0x88>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_CAN_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a10      	ldr	r2, [pc, #64]	; (8001590 <HAL_CAN_MspInit+0x88>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_CAN_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001562:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001570:	2303      	movs	r3, #3
 8001572:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001574:	2309      	movs	r3, #9
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4619      	mov	r1, r3
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <HAL_CAN_MspInit+0x8c>)
 8001580:	f001 fbf2 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001584:	bf00      	nop
 8001586:	3728      	adds	r7, #40	; 0x28
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40006400 	.word	0x40006400
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400

08001598 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_CRC_MspInit+0x3c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d10d      	bne.n	80015c6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_CRC_MspInit+0x40>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <HAL_CRC_MspInit+0x40>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <HAL_CRC_MspInit+0x40>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015c6:	bf00      	nop
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023000 	.word	0x40023000
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a2c      	ldr	r2, [pc, #176]	; (80016ac <HAL_SD_MspInit+0xd0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d152      	bne.n	80016a4 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a2a      	ldr	r2, [pc, #168]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 8001608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60bb      	str	r3, [r7, #8]
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a1c      	ldr	r2, [pc, #112]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <HAL_SD_MspInit+0xd4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001652:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001656:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001664:	230c      	movs	r3, #12
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <HAL_SD_MspInit+0xd8>)
 8001670:	f001 fb7a 	bl	8002d68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001674:	2304      	movs	r3, #4
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001684:	230c      	movs	r3, #12
 8001686:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	480a      	ldr	r0, [pc, #40]	; (80016b8 <HAL_SD_MspInit+0xdc>)
 8001690:	f001 fb6a 	bl	8002d68 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001694:	2200      	movs	r2, #0
 8001696:	2105      	movs	r1, #5
 8001698:	2031      	movs	r0, #49	; 0x31
 800169a:	f000 ff4f 	bl	800253c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800169e:	2031      	movs	r0, #49	; 0x31
 80016a0:	f000 ff68 	bl	8002574 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016a4:	bf00      	nop
 80016a6:	3728      	adds	r7, #40	; 0x28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40012c00 	.word	0x40012c00
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00

080016bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	; (8001740 <HAL_SPI_MspInit+0x84>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12b      	bne.n	8001736 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <HAL_SPI_MspInit+0x88>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <HAL_SPI_MspInit+0x88>)
 80016e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ec:	6453      	str	r3, [r2, #68]	; 0x44
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <HAL_SPI_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_SPI_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	; (8001744 <HAL_SPI_MspInit+0x88>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <HAL_SPI_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SP1_SCK_Pin|RF_SPI1_MISO_Pin|RF_SPI1_MOSI_Pin;
 8001716:	23e0      	movs	r3, #224	; 0xe0
 8001718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001722:	2303      	movs	r3, #3
 8001724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001726:	2305      	movs	r3, #5
 8001728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	4619      	mov	r1, r3
 8001730:	4805      	ldr	r0, [pc, #20]	; (8001748 <HAL_SPI_MspInit+0x8c>)
 8001732:	f001 fb19 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40013000 	.word	0x40013000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b090      	sub	sp, #64	; 0x40
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a7c      	ldr	r2, [pc, #496]	; (800195c <HAL_UART_MspInit+0x210>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d12c      	bne.n	80017c8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
 8001772:	4b7b      	ldr	r3, [pc, #492]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	4a7a      	ldr	r2, [pc, #488]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800177c:	6413      	str	r3, [r2, #64]	; 0x40
 800177e:	4b78      	ldr	r3, [pc, #480]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001786:	62bb      	str	r3, [r7, #40]	; 0x28
 8001788:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	627b      	str	r3, [r7, #36]	; 0x24
 800178e:	4b74      	ldr	r3, [pc, #464]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a73      	ldr	r2, [pc, #460]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b71      	ldr	r3, [pc, #452]	; (8001960 <HAL_UART_MspInit+0x214>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	627b      	str	r3, [r7, #36]	; 0x24
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = XBEE_UART3_TX_Pin|XBEE_UART3_RX_Pin;
 80017a6:	2303      	movs	r3, #3
 80017a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ae:	2301      	movs	r3, #1
 80017b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017b6:	2308      	movs	r3, #8
 80017b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	4868      	ldr	r0, [pc, #416]	; (8001964 <HAL_UART_MspInit+0x218>)
 80017c2:	f001 fad1 	bl	8002d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017c6:	e0c5      	b.n	8001954 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a66      	ldr	r2, [pc, #408]	; (8001968 <HAL_UART_MspInit+0x21c>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d15c      	bne.n	800188c <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
 80017d6:	4b62      	ldr	r3, [pc, #392]	; (8001960 <HAL_UART_MspInit+0x214>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a61      	ldr	r2, [pc, #388]	; (8001960 <HAL_UART_MspInit+0x214>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b5f      	ldr	r3, [pc, #380]	; (8001960 <HAL_UART_MspInit+0x214>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f003 0310 	and.w	r3, r3, #16
 80017ea:	623b      	str	r3, [r7, #32]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
 80017f2:	4b5b      	ldr	r3, [pc, #364]	; (8001960 <HAL_UART_MspInit+0x214>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a5a      	ldr	r2, [pc, #360]	; (8001960 <HAL_UART_MspInit+0x214>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b58      	ldr	r3, [pc, #352]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
 8001808:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = BT_UART1_TX_Pin|BT_UART1_RX_Pin;
 800180a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001818:	2303      	movs	r3, #3
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800181c:	2307      	movs	r3, #7
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001824:	4619      	mov	r1, r3
 8001826:	484f      	ldr	r0, [pc, #316]	; (8001964 <HAL_UART_MspInit+0x218>)
 8001828:	f001 fa9e 	bl	8002d68 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800182c:	4b4f      	ldr	r3, [pc, #316]	; (800196c <HAL_UART_MspInit+0x220>)
 800182e:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_UART_MspInit+0x224>)
 8001830:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001832:	4b4e      	ldr	r3, [pc, #312]	; (800196c <HAL_UART_MspInit+0x220>)
 8001834:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001838:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183a:	4b4c      	ldr	r3, [pc, #304]	; (800196c <HAL_UART_MspInit+0x220>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001840:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_UART_MspInit+0x220>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001846:	4b49      	ldr	r3, [pc, #292]	; (800196c <HAL_UART_MspInit+0x220>)
 8001848:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_UART_MspInit+0x220>)
 8001850:	2200      	movs	r2, #0
 8001852:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001854:	4b45      	ldr	r3, [pc, #276]	; (800196c <HAL_UART_MspInit+0x220>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800185a:	4b44      	ldr	r3, [pc, #272]	; (800196c <HAL_UART_MspInit+0x220>)
 800185c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001860:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b42      	ldr	r3, [pc, #264]	; (800196c <HAL_UART_MspInit+0x220>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001868:	4b40      	ldr	r3, [pc, #256]	; (800196c <HAL_UART_MspInit+0x220>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <HAL_UART_MspInit+0x220>)
 8001870:	f000 fede 	bl	8002630 <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800187a:	f7ff fd8b 	bl	8001394 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a3a      	ldr	r2, [pc, #232]	; (800196c <HAL_UART_MspInit+0x220>)
 8001882:	635a      	str	r2, [r3, #52]	; 0x34
 8001884:	4a39      	ldr	r2, [pc, #228]	; (800196c <HAL_UART_MspInit+0x220>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6393      	str	r3, [r2, #56]	; 0x38
}
 800188a:	e063      	b.n	8001954 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a38      	ldr	r2, [pc, #224]	; (8001974 <HAL_UART_MspInit+0x228>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12c      	bne.n	80018f0 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	61bb      	str	r3, [r7, #24]
 800189a:	4b31      	ldr	r3, [pc, #196]	; (8001960 <HAL_UART_MspInit+0x214>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a30      	ldr	r2, [pc, #192]	; (8001960 <HAL_UART_MspInit+0x214>)
 80018a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	4b2e      	ldr	r3, [pc, #184]	; (8001960 <HAL_UART_MspInit+0x214>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
 80018b6:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <HAL_UART_MspInit+0x214>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a29      	ldr	r2, [pc, #164]	; (8001960 <HAL_UART_MspInit+0x214>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b27      	ldr	r3, [pc, #156]	; (8001960 <HAL_UART_MspInit+0x214>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018ce:	230c      	movs	r3, #12
 80018d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d2:	2302      	movs	r3, #2
 80018d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018de:	2307      	movs	r3, #7
 80018e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e6:	4619      	mov	r1, r3
 80018e8:	481e      	ldr	r0, [pc, #120]	; (8001964 <HAL_UART_MspInit+0x218>)
 80018ea:	f001 fa3d 	bl	8002d68 <HAL_GPIO_Init>
}
 80018ee:	e031      	b.n	8001954 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a20      	ldr	r2, [pc, #128]	; (8001978 <HAL_UART_MspInit+0x22c>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d12c      	bne.n	8001954 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a17      	ldr	r2, [pc, #92]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b15      	ldr	r3, [pc, #84]	; (8001960 <HAL_UART_MspInit+0x214>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001912:	613b      	str	r3, [r7, #16]
 8001914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	60fb      	str	r3, [r7, #12]
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_UART_MspInit+0x214>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	4a10      	ldr	r2, [pc, #64]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001920:	f043 0302 	orr.w	r3, r3, #2
 8001924:	6313      	str	r3, [r2, #48]	; 0x30
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <HAL_UART_MspInit+0x214>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_UART4_TX_Pin|GNSS_UART4_RX_Pin;
 8001932:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001944:	2307      	movs	r3, #7
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	4619      	mov	r1, r3
 800194e:	480b      	ldr	r0, [pc, #44]	; (800197c <HAL_UART_MspInit+0x230>)
 8001950:	f001 fa0a 	bl	8002d68 <HAL_GPIO_Init>
}
 8001954:	bf00      	nop
 8001956:	3740      	adds	r7, #64	; 0x40
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40004c00 	.word	0x40004c00
 8001960:	40023800 	.word	0x40023800
 8001964:	40020000 	.word	0x40020000
 8001968:	40011000 	.word	0x40011000
 800196c:	200041e4 	.word	0x200041e4
 8001970:	40026440 	.word	0x40026440
 8001974:	40004400 	.word	0x40004400
 8001978:	40004800 	.word	0x40004800
 800197c:	40020400 	.word	0x40020400

08001980 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08c      	sub	sp, #48	; 0x30
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	2036      	movs	r0, #54	; 0x36
 8001996:	f000 fdd1 	bl	800253c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 800199a:	2036      	movs	r0, #54	; 0x36
 800199c:	f000 fdea 	bl	8002574 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <HAL_InitTick+0xa0>)
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_InitTick+0xa0>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	6413      	str	r3, [r2, #64]	; 0x40
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <HAL_InitTick+0xa0>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b4:	f003 0310 	and.w	r3, r3, #16
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019bc:	f107 0210 	add.w	r2, r7, #16
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4611      	mov	r1, r2
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 f806 	bl	80039d8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019cc:	f001 ffdc 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 80019d0:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <HAL_InitTick+0xa4>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	3b01      	subs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <HAL_InitTick+0xa8>)
 80019e2:	4a12      	ldr	r2, [pc, #72]	; (8001a2c <HAL_InitTick+0xac>)
 80019e4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_InitTick+0xa8>)
 80019e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019ec:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80019ee:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_InitTick+0xa8>)
 80019f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_InitTick+0xa8>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_InitTick+0xa8>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a00:	4809      	ldr	r0, [pc, #36]	; (8001a28 <HAL_InitTick+0xa8>)
 8001a02:	f003 fb7d 	bl	8005100 <HAL_TIM_Base_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d104      	bne.n	8001a16 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a0c:	4806      	ldr	r0, [pc, #24]	; (8001a28 <HAL_InitTick+0xa8>)
 8001a0e:	f003 fbac 	bl	800516a <HAL_TIM_Base_Start_IT>
 8001a12:	4603      	mov	r3, r0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3730      	adds	r7, #48	; 0x30
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40023800 	.word	0x40023800
 8001a24:	431bde83 	.word	0x431bde83
 8001a28:	20004428 	.word	0x20004428
 8001a2c:	40001000 	.word	0x40001000

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <HardFault_Handler+0x4>

08001a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler+0x4>

08001a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <SDIO_IRQHandler+0x10>)
 8001a6a:	f002 fa51 	bl	8003f10 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000428c 	.word	0x2000428c

08001a78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <TIM6_DAC_IRQHandler+0x10>)
 8001a7e:	f003 fb98 	bl	80051b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20004428 	.word	0x20004428

08001a8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <DMA2_Stream2_IRQHandler+0x10>)
 8001a92:	f000 fef5 	bl	8002880 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200041e4 	.word	0x200041e4

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <SystemInit+0x28>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <SystemInit+0x28>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <SystemInit+0x28>)
 8001ab6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aba:	609a      	str	r2, [r3, #8]
#endif
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ad0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ad2:	e003      	b.n	8001adc <LoopCopyDataInit>

08001ad4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ad6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ad8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ada:	3104      	adds	r1, #4

08001adc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ae0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ae2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ae4:	d3f6      	bcc.n	8001ad4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ae8:	e002      	b.n	8001af0 <LoopFillZerobss>

08001aea <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001aea:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001aec:	f842 3b04 	str.w	r3, [r2], #4

08001af0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001af2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001af4:	d3f9      	bcc.n	8001aea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001af6:	f7ff ffd3 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f008 faff 	bl	800a0fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7fe fd01 	bl	8000504 <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b04:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b08:	0800a348 	.word	0x0800a348
  ldr  r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b10:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001b14:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001b18:	200048d8 	.word	0x200048d8

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>
	...

08001b20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <HAL_Init+0x40>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <HAL_Init+0x40>)
 8001b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <HAL_Init+0x40>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <HAL_Init+0x40>)
 8001b36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <HAL_Init+0x40>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <HAL_Init+0x40>)
 8001b42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b48:	2003      	movs	r0, #3
 8001b4a:	f000 fcec 	bl	8002526 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f7ff ff16 	bl	8001980 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b54:	f7ff fcac 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40023c00 	.word	0x40023c00

08001b64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b68:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_IncTick+0x20>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x24>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <HAL_IncTick+0x24>)
 8001b76:	6013      	str	r3, [r2, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20004468 	.word	0x20004468

08001b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_GetTick+0x14>)
 8001b92:	681b      	ldr	r3, [r3, #0]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	20004468 	.word	0x20004468

08001ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bac:	f7ff ffee 	bl	8001b8c <HAL_GetTick>
 8001bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbc:	d005      	beq.n	8001bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bbe:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_Delay+0x40>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4413      	add	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bca:	bf00      	nop
 8001bcc:	f7ff ffde 	bl	8001b8c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8f7      	bhi.n	8001bcc <HAL_Delay+0x28>
  {
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20000008 	.word	0x20000008

08001be8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0ed      	b.n	8001dd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d102      	bne.n	8001c0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff fc7e 	bl	8001508 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0202 	bic.w	r2, r2, #2
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c1c:	f7ff ffb6 	bl	8001b8c <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c22:	e012      	b.n	8001c4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c24:	f7ff ffb2 	bl	8001b8c <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b0a      	cmp	r3, #10
 8001c30:	d90b      	bls.n	8001c4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2205      	movs	r2, #5
 8001c42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e0c5      	b.n	8001dd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e5      	bne.n	8001c24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c68:	f7ff ff90 	bl	8001b8c <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c6e:	e012      	b.n	8001c96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c70:	f7ff ff8c 	bl	8001b8c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b0a      	cmp	r3, #10
 8001c7c:	d90b      	bls.n	8001c96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e09f      	b.n	8001dd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d0e5      	beq.n	8001c70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7e1b      	ldrb	r3, [r3, #24]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d108      	bne.n	8001cbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e007      	b.n	8001cce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ccc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7e5b      	ldrb	r3, [r3, #25]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d108      	bne.n	8001ce8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	e007      	b.n	8001cf8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7e9b      	ldrb	r3, [r3, #26]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d108      	bne.n	8001d12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0220 	orr.w	r2, r2, #32
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e007      	b.n	8001d22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f022 0220 	bic.w	r2, r2, #32
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7edb      	ldrb	r3, [r3, #27]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d108      	bne.n	8001d3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0210 	bic.w	r2, r2, #16
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	e007      	b.n	8001d4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0210 	orr.w	r2, r2, #16
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	7f1b      	ldrb	r3, [r3, #28]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d108      	bne.n	8001d66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0208 	orr.w	r2, r2, #8
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e007      	b.n	8001d76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0208 	bic.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	7f5b      	ldrb	r3, [r3, #29]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f042 0204 	orr.w	r2, r2, #4
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	e007      	b.n	8001da0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0204 	bic.w	r2, r2, #4
 8001d9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	695b      	ldr	r3, [r3, #20]
 8001db4:	ea42 0103 	orr.w	r1, r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001df6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001df8:	7cfb      	ldrb	r3, [r7, #19]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d003      	beq.n	8001e06 <HAL_CAN_ConfigFilter+0x26>
 8001dfe:	7cfb      	ldrb	r3, [r7, #19]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 80be 	bne.w	8001f82 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001e06:	4b65      	ldr	r3, [pc, #404]	; (8001f9c <HAL_CAN_ConfigFilter+0x1bc>)
 8001e08:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	021b      	lsls	r3, r3, #8
 8001e36:	431a      	orrs	r2, r3
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2201      	movs	r2, #1
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	401a      	ands	r2, r3
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d123      	bne.n	8001eb0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001e8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	3248      	adds	r2, #72	; 0x48
 8001e90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ea4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ea6:	6979      	ldr	r1, [r7, #20]
 8001ea8:	3348      	adds	r3, #72	; 0x48
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	440b      	add	r3, r1
 8001eae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	69db      	ldr	r3, [r3, #28]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d122      	bne.n	8001efe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ed8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3248      	adds	r2, #72	; 0x48
 8001ede:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ef2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ef4:	6979      	ldr	r1, [r7, #20]
 8001ef6:	3348      	adds	r3, #72	; 0x48
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	440b      	add	r3, r1
 8001efc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	401a      	ands	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f18:	e007      	b.n	8001f2a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d109      	bne.n	8001f46 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f44:	e007      	b.n	8001f56 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f74:	f023 0201 	bic.w	r2, r3, #1
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e006      	b.n	8001f90 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
  }
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40006400 	.word	0x40006400

08001fa0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fbe:	7ffb      	ldrb	r3, [r7, #31]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d003      	beq.n	8001fcc <HAL_CAN_AddTxMessage+0x2c>
 8001fc4:	7ffb      	ldrb	r3, [r7, #31]
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f040 80b8 	bne.w	800213c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10a      	bne.n	8001fec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d105      	bne.n	8001fec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 80a0 	beq.w	800212c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	0e1b      	lsrs	r3, r3, #24
 8001ff0:	f003 0303 	and.w	r3, r3, #3
 8001ff4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d907      	bls.n	800200c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e09e      	b.n	800214a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800200c:	2201      	movs	r2, #1
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	409a      	lsls	r2, r3
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10d      	bne.n	800203a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	6809      	ldr	r1, [r1, #0]
 800202c:	431a      	orrs	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	3318      	adds	r3, #24
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	e00f      	b.n	800205a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002044:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800204a:	68f9      	ldr	r1, [r7, #12]
 800204c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800204e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	3318      	adds	r3, #24
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	440b      	add	r3, r1
 8002058:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	3318      	adds	r3, #24
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	440b      	add	r3, r1
 800206a:	3304      	adds	r3, #4
 800206c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	7d1b      	ldrb	r3, [r3, #20]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d111      	bne.n	800209a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3318      	adds	r3, #24
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	4413      	add	r3, r2
 8002082:	3304      	adds	r3, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	6811      	ldr	r1, [r2, #0]
 800208a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	3318      	adds	r3, #24
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	440b      	add	r3, r1
 8002096:	3304      	adds	r3, #4
 8002098:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3307      	adds	r3, #7
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	061a      	lsls	r2, r3, #24
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3306      	adds	r3, #6
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	041b      	lsls	r3, r3, #16
 80020aa:	431a      	orrs	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	3305      	adds	r3, #5
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	021b      	lsls	r3, r3, #8
 80020b4:	4313      	orrs	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	3204      	adds	r2, #4
 80020ba:	7812      	ldrb	r2, [r2, #0]
 80020bc:	4610      	mov	r0, r2
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	6811      	ldr	r1, [r2, #0]
 80020c2:	ea43 0200 	orr.w	r2, r3, r0
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	440b      	add	r3, r1
 80020cc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3303      	adds	r3, #3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	061a      	lsls	r2, r3, #24
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3302      	adds	r3, #2
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	041b      	lsls	r3, r3, #16
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3301      	adds	r3, #1
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	4313      	orrs	r3, r2
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	4610      	mov	r0, r2
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	6811      	ldr	r1, [r2, #0]
 80020f8:	ea43 0200 	orr.w	r2, r3, r0
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	011b      	lsls	r3, r3, #4
 8002100:	440b      	add	r3, r1
 8002102:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002106:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	3318      	adds	r3, #24
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	4413      	add	r3, r2
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	6811      	ldr	r1, [r2, #0]
 800211a:	f043 0201 	orr.w	r2, r3, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3318      	adds	r3, #24
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	440b      	add	r3, r1
 8002126:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e00e      	b.n	800214a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e006      	b.n	800214a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
  }
}
 800214a:	4618      	mov	r0, r3
 800214c:	3724      	adds	r7, #36	; 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002156:	b480      	push	{r7}
 8002158:	b087      	sub	sp, #28
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	607a      	str	r2, [r7, #4]
 8002162:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f893 3020 	ldrb.w	r3, [r3, #32]
 800216a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800216c:	7dfb      	ldrb	r3, [r7, #23]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d003      	beq.n	800217a <HAL_CAN_GetRxMessage+0x24>
 8002172:	7dfb      	ldrb	r3, [r7, #23]
 8002174:	2b02      	cmp	r3, #2
 8002176:	f040 80f3 	bne.w	8002360 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d10e      	bne.n	800219e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0303 	and.w	r3, r3, #3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002192:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e0e7      	b.n	800236e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	691b      	ldr	r3, [r3, #16]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d107      	bne.n	80021bc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e0d8      	b.n	800236e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	331b      	adds	r3, #27
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4413      	add	r3, r2
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0204 	and.w	r2, r3, #4
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10c      	bne.n	80021f4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	331b      	adds	r3, #27
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	4413      	add	r3, r2
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0d5b      	lsrs	r3, r3, #21
 80021ea:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e00b      	b.n	800220c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	331b      	adds	r3, #27
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	4413      	add	r3, r2
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	08db      	lsrs	r3, r3, #3
 8002204:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	331b      	adds	r3, #27
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	4413      	add	r3, r2
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0202 	and.w	r2, r3, #2
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	331b      	adds	r3, #27
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	4413      	add	r3, r2
 800222e:	3304      	adds	r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 020f 	and.w	r2, r3, #15
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	331b      	adds	r3, #27
 8002242:	011b      	lsls	r3, r3, #4
 8002244:	4413      	add	r3, r2
 8002246:	3304      	adds	r3, #4
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b2da      	uxtb	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	331b      	adds	r3, #27
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	3304      	adds	r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	b29a      	uxth	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	4413      	add	r3, r2
 8002274:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	4413      	add	r3, r2
 800228a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0a1a      	lsrs	r2, r3, #8
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	3301      	adds	r3, #1
 8002296:	b2d2      	uxtb	r2, r2
 8002298:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	011b      	lsls	r3, r3, #4
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	0c1a      	lsrs	r2, r3, #16
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	3302      	adds	r3, #2
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	011b      	lsls	r3, r3, #4
 80022bc:	4413      	add	r3, r2
 80022be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e1a      	lsrs	r2, r3, #24
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	3303      	adds	r3, #3
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	011b      	lsls	r3, r3, #4
 80022d6:	4413      	add	r3, r2
 80022d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3304      	adds	r3, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	0a1a      	lsrs	r2, r3, #8
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	3305      	adds	r3, #5
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	4413      	add	r3, r2
 800230a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0c1a      	lsrs	r2, r3, #16
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	3306      	adds	r3, #6
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	0e1a      	lsrs	r2, r3, #24
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	3307      	adds	r3, #7
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d108      	bne.n	800234c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68da      	ldr	r2, [r3, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f042 0220 	orr.w	r2, r2, #32
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	e007      	b.n	800235c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691a      	ldr	r2, [r3, #16]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	e006      	b.n	800236e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
  }
}
 800236e:	4618      	mov	r0, r3
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800237a:	b480      	push	{r7}
 800237c:	b085      	sub	sp, #20
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238e:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002390:	7afb      	ldrb	r3, [r7, #11]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d002      	beq.n	800239c <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002396:	7afb      	ldrb	r3, [r7, #11]
 8002398:	2b02      	cmp	r3, #2
 800239a:	d10f      	bne.n	80023bc <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e005      	b.n	80023bc <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80023bc:	68fb      	ldr	r3, [r7, #12]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <__NVIC_EnableIRQ+0x38>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	; (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf28      	it	cs
 80024de:	2304      	movcs	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <NVIC_EncodePriority+0x30>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	e000      	b.n	80024f2 <NVIC_EncodePriority+0x32>
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43d9      	mvns	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	4313      	orrs	r3, r2
         );
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff ff4c 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253c:	b580      	push	{r7, lr}
 800253e:	b086      	sub	sp, #24
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
 8002548:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800254e:	f7ff ff61 	bl	8002414 <__NVIC_GetPriorityGrouping>
 8002552:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	68b9      	ldr	r1, [r7, #8]
 8002558:	6978      	ldr	r0, [r7, #20]
 800255a:	f7ff ffb1 	bl	80024c0 <NVIC_EncodePriority>
 800255e:	4602      	mov	r2, r0
 8002560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff ff80 	bl	800246c <__NVIC_SetPriority>
}
 800256c:	bf00      	nop
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff54 	bl	8002430 <__NVIC_EnableIRQ>
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00e      	b.n	80025c0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	795b      	ldrb	r3, [r3, #5]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fff0 	bl	8001598 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80025d4:	2300      	movs	r3, #0
 80025d6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2202      	movs	r2, #2
 80025dc:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e00a      	b.n	800260a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	441a      	add	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6812      	ldr	r2, [r2, #0]
 8002602:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	3301      	adds	r3, #1
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	429a      	cmp	r2, r3
 8002610:	d3f0      	bcc.n	80025f4 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002620:	693b      	ldr	r3, [r7, #16]
}
 8002622:	4618      	mov	r0, r3
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800263c:	f7ff faa6 	bl	8001b8c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d101      	bne.n	800264c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e099      	b.n	8002780 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2202      	movs	r2, #2
 8002658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0201 	bic.w	r2, r2, #1
 800266a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800266c:	e00f      	b.n	800268e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800266e:	f7ff fa8d 	bl	8001b8c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b05      	cmp	r3, #5
 800267a:	d908      	bls.n	800268e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2220      	movs	r2, #32
 8002680:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2203      	movs	r2, #3
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e078      	b.n	8002780 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d1e8      	bne.n	800266e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <HAL_DMA_Init+0x158>)
 80026a8:	4013      	ands	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d107      	bne.n	80026f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	4313      	orrs	r3, r2
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f023 0307 	bic.w	r3, r3, #7
 800270e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	697a      	ldr	r2, [r7, #20]
 8002716:	4313      	orrs	r3, r2
 8002718:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	2b04      	cmp	r3, #4
 8002720:	d117      	bne.n	8002752 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00e      	beq.n	8002752 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 fa9d 	bl	8002c74 <DMA_CheckFifoParam>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d008      	beq.n	8002752 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2240      	movs	r2, #64	; 0x40
 8002744:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800274e:	2301      	movs	r3, #1
 8002750:	e016      	b.n	8002780 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 fa54 	bl	8002c08 <DMA_CalcBaseAndBitshift>
 8002760:	4603      	mov	r3, r0
 8002762:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002768:	223f      	movs	r2, #63	; 0x3f
 800276a:	409a      	lsls	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	f010803f 	.word	0xf010803f

0800278c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
 8002798:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_DMA_Start_IT+0x26>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e040      	b.n	8002834 <HAL_DMA_Start_IT+0xa8>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d12f      	bne.n	8002826 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2202      	movs	r2, #2
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f9e6 	bl	8002bac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	223f      	movs	r2, #63	; 0x3f
 80027e6:	409a      	lsls	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0216 	orr.w	r2, r2, #22
 80027fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f042 0208 	orr.w	r2, r2, #8
 8002812:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	e005      	b.n	8002832 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800282e:	2302      	movs	r3, #2
 8002830:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002832:	7dfb      	ldrb	r3, [r7, #23]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d004      	beq.n	800285a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2280      	movs	r2, #128	; 0x80
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00c      	b.n	8002874 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2205      	movs	r2, #5
 800285e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0201 	bic.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800288c:	4b92      	ldr	r3, [pc, #584]	; (8002ad8 <HAL_DMA_IRQHandler+0x258>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a92      	ldr	r2, [pc, #584]	; (8002adc <HAL_DMA_IRQHandler+0x25c>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0a9b      	lsrs	r3, r3, #10
 8002898:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028aa:	2208      	movs	r2, #8
 80028ac:	409a      	lsls	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d01a      	beq.n	80028ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d013      	beq.n	80028ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0204 	bic.w	r2, r2, #4
 80028d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2208      	movs	r2, #8
 80028da:	409a      	lsls	r2, r3
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e4:	f043 0201 	orr.w	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2201      	movs	r2, #1
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d012      	beq.n	8002922 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2201      	movs	r2, #1
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291a:	f043 0202 	orr.w	r2, r3, #2
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	2204      	movs	r2, #4
 8002928:	409a      	lsls	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	4013      	ands	r3, r2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d012      	beq.n	8002958 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00b      	beq.n	8002958 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2204      	movs	r2, #4
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0204 	orr.w	r2, r3, #4
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2210      	movs	r2, #16
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d043      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d03c      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2210      	movs	r2, #16
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d018      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d108      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d024      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	4798      	blx	r3
 80029ae:	e01f      	b.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e016      	b.n	80029f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d107      	bne.n	80029e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0208 	bic.w	r2, r2, #8
 80029de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f4:	2220      	movs	r2, #32
 80029f6:	409a      	lsls	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 808e 	beq.w	8002b1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0310 	and.w	r3, r3, #16
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 8086 	beq.w	8002b1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	2220      	movs	r2, #32
 8002a18:	409a      	lsls	r2, r3
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b05      	cmp	r3, #5
 8002a28:	d136      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0216 	bic.w	r2, r2, #22
 8002a38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d103      	bne.n	8002a5a <HAL_DMA_IRQHandler+0x1da>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0208 	bic.w	r2, r2, #8
 8002a68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	223f      	movs	r2, #63	; 0x3f
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d07d      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	4798      	blx	r3
        }
        return;
 8002a96:	e078      	b.n	8002b8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d01c      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d030      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e02b      	b.n	8002b1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d027      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
 8002ad6:	e022      	b.n	8002b1e <HAL_DMA_IRQHandler+0x29e>
 8002ad8:	20000000 	.word	0x20000000
 8002adc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10f      	bne.n	8002b0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0210 	bic.w	r2, r2, #16
 8002afc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d032      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d022      	beq.n	8002b78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2205      	movs	r2, #5
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d307      	bcc.n	8002b66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1f2      	bne.n	8002b4a <HAL_DMA_IRQHandler+0x2ca>
 8002b64:	e000      	b.n	8002b68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d005      	beq.n	8002b8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e000      	b.n	8002b8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b8a:	bf00      	nop
    }
  }
}
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop

08002b94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
 8002bb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d108      	bne.n	8002bec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bea:	e007      	b.n	8002bfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68ba      	ldr	r2, [r7, #8]
 8002bf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	60da      	str	r2, [r3, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b085      	sub	sp, #20
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	3b10      	subs	r3, #16
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <DMA_CalcBaseAndBitshift+0x64>)
 8002c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c22:	4a13      	ldr	r2, [pc, #76]	; (8002c70 <DMA_CalcBaseAndBitshift+0x68>)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4413      	add	r3, r2
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d909      	bls.n	8002c4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c3e:	f023 0303 	bic.w	r3, r3, #3
 8002c42:	1d1a      	adds	r2, r3, #4
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	659a      	str	r2, [r3, #88]	; 0x58
 8002c48:	e007      	b.n	8002c5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	aaaaaaab 	.word	0xaaaaaaab
 8002c70:	0800a31c 	.word	0x0800a31c

08002c74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d11f      	bne.n	8002cce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d855      	bhi.n	8002d40 <DMA_CheckFifoParam+0xcc>
 8002c94:	a201      	add	r2, pc, #4	; (adr r2, 8002c9c <DMA_CheckFifoParam+0x28>)
 8002c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9a:	bf00      	nop
 8002c9c:	08002cad 	.word	0x08002cad
 8002ca0:	08002cbf 	.word	0x08002cbf
 8002ca4:	08002cad 	.word	0x08002cad
 8002ca8:	08002d41 	.word	0x08002d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d045      	beq.n	8002d44 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbc:	e042      	b.n	8002d44 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cc6:	d13f      	bne.n	8002d48 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ccc:	e03c      	b.n	8002d48 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cd6:	d121      	bne.n	8002d1c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	d836      	bhi.n	8002d4c <DMA_CheckFifoParam+0xd8>
 8002cde:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <DMA_CheckFifoParam+0x70>)
 8002ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002cfb 	.word	0x08002cfb
 8002cec:	08002cf5 	.word	0x08002cf5
 8002cf0:	08002d0d 	.word	0x08002d0d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e02f      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d024      	beq.n	8002d50 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0a:	e021      	b.n	8002d50 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d14:	d11e      	bne.n	8002d54 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d1a:	e01b      	b.n	8002d54 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d902      	bls.n	8002d28 <DMA_CheckFifoParam+0xb4>
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d003      	beq.n	8002d2e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d26:	e018      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e015      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00e      	beq.n	8002d58 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d3e:	e00b      	b.n	8002d58 <DMA_CheckFifoParam+0xe4>
      break;
 8002d40:	bf00      	nop
 8002d42:	e00a      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      break;
 8002d44:	bf00      	nop
 8002d46:	e008      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      break;
 8002d48:	bf00      	nop
 8002d4a:	e006      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      break;
 8002d4c:	bf00      	nop
 8002d4e:	e004      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      break;
 8002d50:	bf00      	nop
 8002d52:	e002      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      break;   
 8002d54:	bf00      	nop
 8002d56:	e000      	b.n	8002d5a <DMA_CheckFifoParam+0xe6>
      break;
 8002d58:	bf00      	nop
    }
  } 
  
  return status; 
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	; 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e16b      	b.n	800305c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 815a 	bne.w	8003056 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d00b      	beq.n	8002dc2 <HAL_GPIO_Init+0x5a>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b12      	cmp	r3, #18
 8002dc0:	d130      	bne.n	8002e24 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0xfc>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	2b12      	cmp	r3, #18
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80b4 	beq.w	8003056 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b5f      	ldr	r3, [pc, #380]	; (8003070 <HAL_GPIO_Init+0x308>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	4a5e      	ldr	r2, [pc, #376]	; (8003070 <HAL_GPIO_Init+0x308>)
 8002ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002efc:	6453      	str	r3, [r2, #68]	; 0x44
 8002efe:	4b5c      	ldr	r3, [pc, #368]	; (8003070 <HAL_GPIO_Init+0x308>)
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f0a:	4a5a      	ldr	r2, [pc, #360]	; (8003074 <HAL_GPIO_Init+0x30c>)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	3302      	adds	r3, #2
 8002f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	220f      	movs	r2, #15
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43db      	mvns	r3, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a51      	ldr	r2, [pc, #324]	; (8003078 <HAL_GPIO_Init+0x310>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02b      	beq.n	8002f8e <HAL_GPIO_Init+0x226>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a50      	ldr	r2, [pc, #320]	; (800307c <HAL_GPIO_Init+0x314>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d025      	beq.n	8002f8a <HAL_GPIO_Init+0x222>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4f      	ldr	r2, [pc, #316]	; (8003080 <HAL_GPIO_Init+0x318>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d01f      	beq.n	8002f86 <HAL_GPIO_Init+0x21e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4e      	ldr	r2, [pc, #312]	; (8003084 <HAL_GPIO_Init+0x31c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d019      	beq.n	8002f82 <HAL_GPIO_Init+0x21a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4d      	ldr	r2, [pc, #308]	; (8003088 <HAL_GPIO_Init+0x320>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d013      	beq.n	8002f7e <HAL_GPIO_Init+0x216>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4c      	ldr	r2, [pc, #304]	; (800308c <HAL_GPIO_Init+0x324>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d00d      	beq.n	8002f7a <HAL_GPIO_Init+0x212>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4b      	ldr	r2, [pc, #300]	; (8003090 <HAL_GPIO_Init+0x328>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d007      	beq.n	8002f76 <HAL_GPIO_Init+0x20e>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4a      	ldr	r2, [pc, #296]	; (8003094 <HAL_GPIO_Init+0x32c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d101      	bne.n	8002f72 <HAL_GPIO_Init+0x20a>
 8002f6e:	2307      	movs	r3, #7
 8002f70:	e00e      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f72:	2308      	movs	r3, #8
 8002f74:	e00c      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f76:	2306      	movs	r3, #6
 8002f78:	e00a      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f7a:	2305      	movs	r3, #5
 8002f7c:	e008      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	e006      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f82:	2303      	movs	r3, #3
 8002f84:	e004      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f86:	2302      	movs	r3, #2
 8002f88:	e002      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <HAL_GPIO_Init+0x228>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	f002 0203 	and.w	r2, r2, #3
 8002f96:	0092      	lsls	r2, r2, #2
 8002f98:	4093      	lsls	r3, r2
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa0:	4934      	ldr	r1, [pc, #208]	; (8003074 <HAL_GPIO_Init+0x30c>)
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	089b      	lsrs	r3, r3, #2
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fae:	4b3a      	ldr	r3, [pc, #232]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd2:	4a31      	ldr	r2, [pc, #196]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fd8:	4b2f      	ldr	r3, [pc, #188]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ffc:	4a26      	ldr	r2, [pc, #152]	; (8003098 <HAL_GPIO_Init+0x330>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003002:	4b25      	ldr	r3, [pc, #148]	; (8003098 <HAL_GPIO_Init+0x330>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4313      	orrs	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003026:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_GPIO_Init+0x330>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800302c:	4b1a      	ldr	r3, [pc, #104]	; (8003098 <HAL_GPIO_Init+0x330>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d003      	beq.n	8003050 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003050:	4a11      	ldr	r2, [pc, #68]	; (8003098 <HAL_GPIO_Init+0x330>)
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3301      	adds	r3, #1
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	2b0f      	cmp	r3, #15
 8003060:	f67f ae90 	bls.w	8002d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003064:	bf00      	nop
 8003066:	3724      	adds	r7, #36	; 0x24
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40023800 	.word	0x40023800
 8003074:	40013800 	.word	0x40013800
 8003078:	40020000 	.word	0x40020000
 800307c:	40020400 	.word	0x40020400
 8003080:	40020800 	.word	0x40020800
 8003084:	40020c00 	.word	0x40020c00
 8003088:	40021000 	.word	0x40021000
 800308c:	40021400 	.word	0x40021400
 8003090:	40021800 	.word	0x40021800
 8003094:	40021c00 	.word	0x40021c00
 8003098:	40013c00 	.word	0x40013c00

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030b8:	e003      	b.n	80030c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030ba:	887b      	ldrh	r3, [r7, #2]
 80030bc:	041a      	lsls	r2, r3, #16
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	619a      	str	r2, [r3, #24]
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b084      	sub	sp, #16
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e02b      	b.n	8003138 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80030e8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f245 5255 	movw	r2, #21845	; 0x5555
 80030f2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6852      	ldr	r2, [r2, #4]
 80030fc:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	6892      	ldr	r2, [r2, #8]
 8003106:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003108:	f7fe fd40 	bl	8001b8c <HAL_GetTick>
 800310c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800310e:	e008      	b.n	8003122 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003110:	f7fe fd3c 	bl	8001b8c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b30      	cmp	r3, #48	; 0x30
 800311c:	d901      	bls.n	8003122 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e00a      	b.n	8003138 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f1      	bne.n	8003110 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003134:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003150:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e25b      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	d075      	beq.n	800326a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800317e:	4ba3      	ldr	r3, [pc, #652]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b04      	cmp	r3, #4
 8003188:	d00c      	beq.n	80031a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318a:	4ba0      	ldr	r3, [pc, #640]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003192:	2b08      	cmp	r3, #8
 8003194:	d112      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003196:	4b9d      	ldr	r3, [pc, #628]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031a2:	d10b      	bne.n	80031bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a4:	4b99      	ldr	r3, [pc, #612]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d05b      	beq.n	8003268 <HAL_RCC_OscConfig+0x108>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d157      	bne.n	8003268 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e236      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031c4:	d106      	bne.n	80031d4 <HAL_RCC_OscConfig+0x74>
 80031c6:	4b91      	ldr	r3, [pc, #580]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a90      	ldr	r2, [pc, #576]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	e01d      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031dc:	d10c      	bne.n	80031f8 <HAL_RCC_OscConfig+0x98>
 80031de:	4b8b      	ldr	r3, [pc, #556]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a8a      	ldr	r2, [pc, #552]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e8:	6013      	str	r3, [r2, #0]
 80031ea:	4b88      	ldr	r3, [pc, #544]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a87      	ldr	r2, [pc, #540]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	e00b      	b.n	8003210 <HAL_RCC_OscConfig+0xb0>
 80031f8:	4b84      	ldr	r3, [pc, #528]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a83      	ldr	r2, [pc, #524]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	6013      	str	r3, [r2, #0]
 8003204:	4b81      	ldr	r3, [pc, #516]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a80      	ldr	r2, [pc, #512]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 800320a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800320e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d013      	beq.n	8003240 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fe fcb8 	bl	8001b8c <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003220:	f7fe fcb4 	bl	8001b8c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e1fb      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003232:	4b76      	ldr	r3, [pc, #472]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d0f0      	beq.n	8003220 <HAL_RCC_OscConfig+0xc0>
 800323e:	e014      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fca4 	bl	8001b8c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fca0 	bl	8001b8c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1e7      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	4b6c      	ldr	r3, [pc, #432]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0xe8>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d063      	beq.n	800333e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003282:	4b62      	ldr	r3, [pc, #392]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d11c      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800328e:	4b5f      	ldr	r3, [pc, #380]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	4b5c      	ldr	r3, [pc, #368]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d001      	beq.n	80032b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e1bb      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b2:	4b56      	ldr	r3, [pc, #344]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	4952      	ldr	r1, [pc, #328]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c6:	e03a      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d020      	beq.n	8003312 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032d0:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <HAL_RCC_OscConfig+0x2b0>)
 80032d2:	2201      	movs	r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d6:	f7fe fc59 	bl	8001b8c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032de:	f7fe fc55 	bl	8001b8c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e19c      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032f0:	4b46      	ldr	r3, [pc, #280]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4940      	ldr	r1, [pc, #256]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 800330c:	4313      	orrs	r3, r2
 800330e:	600b      	str	r3, [r1, #0]
 8003310:	e015      	b.n	800333e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_OscConfig+0x2b0>)
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003318:	f7fe fc38 	bl	8001b8c <HAL_GetTick>
 800331c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800331e:	e008      	b.n	8003332 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003320:	f7fe fc34 	bl	8001b8c <HAL_GetTick>
 8003324:	4602      	mov	r2, r0
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	2b02      	cmp	r3, #2
 800332c:	d901      	bls.n	8003332 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e17b      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003332:	4b36      	ldr	r3, [pc, #216]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f0      	bne.n	8003320 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0308 	and.w	r3, r3, #8
 8003346:	2b00      	cmp	r3, #0
 8003348:	d030      	beq.n	80033ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003352:	4b30      	ldr	r3, [pc, #192]	; (8003414 <HAL_RCC_OscConfig+0x2b4>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fe fc18 	bl	8001b8c <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003360:	f7fe fc14 	bl	8001b8c <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e15b      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003372:	4b26      	ldr	r3, [pc, #152]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 8003374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x200>
 800337e:	e015      	b.n	80033ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003380:	4b24      	ldr	r3, [pc, #144]	; (8003414 <HAL_RCC_OscConfig+0x2b4>)
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003386:	f7fe fc01 	bl	8001b8c <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800338e:	f7fe fbfd 	bl	8001b8c <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e144      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033a0:	4b1a      	ldr	r3, [pc, #104]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1f0      	bne.n	800338e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 80a0 	beq.w	80034fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ba:	2300      	movs	r3, #0
 80033bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
 80033ce:	4b0f      	ldr	r3, [pc, #60]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	4a0e      	ldr	r2, [pc, #56]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d8:	6413      	str	r3, [r2, #64]	; 0x40
 80033da:	4b0c      	ldr	r3, [pc, #48]	; (800340c <HAL_RCC_OscConfig+0x2ac>)
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e2:	60bb      	str	r3, [r7, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e6:	2301      	movs	r3, #1
 80033e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ea:	4b0b      	ldr	r3, [pc, #44]	; (8003418 <HAL_RCC_OscConfig+0x2b8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d121      	bne.n	800343a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033f6:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_RCC_OscConfig+0x2b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <HAL_RCC_OscConfig+0x2b8>)
 80033fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003402:	f7fe fbc3 	bl	8001b8c <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003408:	e011      	b.n	800342e <HAL_RCC_OscConfig+0x2ce>
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	42470000 	.word	0x42470000
 8003414:	42470e80 	.word	0x42470e80
 8003418:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800341c:	f7fe fbb6 	bl	8001b8c <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0fd      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800342e:	4b81      	ldr	r3, [pc, #516]	; (8003634 <HAL_RCC_OscConfig+0x4d4>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d0f0      	beq.n	800341c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d106      	bne.n	8003450 <HAL_RCC_OscConfig+0x2f0>
 8003442:	4b7d      	ldr	r3, [pc, #500]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003446:	4a7c      	ldr	r2, [pc, #496]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003448:	f043 0301 	orr.w	r3, r3, #1
 800344c:	6713      	str	r3, [r2, #112]	; 0x70
 800344e:	e01c      	b.n	800348a <HAL_RCC_OscConfig+0x32a>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b05      	cmp	r3, #5
 8003456:	d10c      	bne.n	8003472 <HAL_RCC_OscConfig+0x312>
 8003458:	4b77      	ldr	r3, [pc, #476]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 800345a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345c:	4a76      	ldr	r2, [pc, #472]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 800345e:	f043 0304 	orr.w	r3, r3, #4
 8003462:	6713      	str	r3, [r2, #112]	; 0x70
 8003464:	4b74      	ldr	r3, [pc, #464]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a73      	ldr	r2, [pc, #460]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	e00b      	b.n	800348a <HAL_RCC_OscConfig+0x32a>
 8003472:	4b71      	ldr	r3, [pc, #452]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003476:	4a70      	ldr	r2, [pc, #448]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	6713      	str	r3, [r2, #112]	; 0x70
 800347e:	4b6e      	ldr	r3, [pc, #440]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003482:	4a6d      	ldr	r2, [pc, #436]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003484:	f023 0304 	bic.w	r3, r3, #4
 8003488:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d015      	beq.n	80034be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003492:	f7fe fb7b 	bl	8001b8c <HAL_GetTick>
 8003496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003498:	e00a      	b.n	80034b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800349a:	f7fe fb77 	bl	8001b8c <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d901      	bls.n	80034b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e0bc      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034b0:	4b61      	ldr	r3, [pc, #388]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d0ee      	beq.n	800349a <HAL_RCC_OscConfig+0x33a>
 80034bc:	e014      	b.n	80034e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034be:	f7fe fb65 	bl	8001b8c <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c6:	f7fe fb61 	bl	8001b8c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e0a6      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034dc:	4b56      	ldr	r3, [pc, #344]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d105      	bne.n	80034fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034ee:	4b52      	ldr	r3, [pc, #328]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a51      	ldr	r2, [pc, #324]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 80034f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 8092 	beq.w	8003628 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003504:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b08      	cmp	r3, #8
 800350e:	d05c      	beq.n	80035ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	2b02      	cmp	r3, #2
 8003516:	d141      	bne.n	800359c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003518:	4b48      	ldr	r3, [pc, #288]	; (800363c <HAL_RCC_OscConfig+0x4dc>)
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351e:	f7fe fb35 	bl	8001b8c <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003526:	f7fe fb31 	bl	8001b8c <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e078      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003538:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69da      	ldr	r2, [r3, #28]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	019b      	lsls	r3, r3, #6
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	061b      	lsls	r3, r3, #24
 8003568:	4933      	ldr	r1, [pc, #204]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800356e:	4b33      	ldr	r3, [pc, #204]	; (800363c <HAL_RCC_OscConfig+0x4dc>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe fb0a 	bl	8001b8c <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe fb06 	bl	8001b8c <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e04d      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b2a      	ldr	r3, [pc, #168]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x41c>
 800359a:	e045      	b.n	8003628 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <HAL_RCC_OscConfig+0x4dc>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a2:	f7fe faf3 	bl	8001b8c <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035aa:	f7fe faef 	bl	8001b8c <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e036      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035bc:	4b1e      	ldr	r3, [pc, #120]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x44a>
 80035c8:	e02e      	b.n	8003628 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e029      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035d6:	4b18      	ldr	r3, [pc, #96]	; (8003638 <HAL_RCC_OscConfig+0x4d8>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d11c      	bne.n	8003624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d115      	bne.n	8003624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035fe:	4013      	ands	r3, r2
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003604:	4293      	cmp	r3, r2
 8003606:	d10d      	bne.n	8003624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003612:	429a      	cmp	r2, r3
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40007000 	.word	0x40007000
 8003638:	40023800 	.word	0x40023800
 800363c:	42470060 	.word	0x42470060

08003640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0cc      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003654:	4b68      	ldr	r3, [pc, #416]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	429a      	cmp	r2, r3
 8003660:	d90c      	bls.n	800367c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003662:	4b65      	ldr	r3, [pc, #404]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366a:	4b63      	ldr	r3, [pc, #396]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 030f 	and.w	r3, r3, #15
 8003672:	683a      	ldr	r2, [r7, #0]
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0b8      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d005      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	4a58      	ldr	r2, [pc, #352]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800369e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0308 	and.w	r3, r3, #8
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036ac:	4b53      	ldr	r3, [pc, #332]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	4a52      	ldr	r2, [pc, #328]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b8:	4b50      	ldr	r3, [pc, #320]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	494d      	ldr	r1, [pc, #308]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d044      	beq.n	8003760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d107      	bne.n	80036ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036de:	4b47      	ldr	r3, [pc, #284]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d119      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e07f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d003      	beq.n	80036fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b3f      	ldr	r3, [pc, #252]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d109      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e06f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d101      	bne.n	800371e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e067      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800371e:	4b37      	ldr	r3, [pc, #220]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f023 0203 	bic.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4934      	ldr	r1, [pc, #208]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 800372c:	4313      	orrs	r3, r2
 800372e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003730:	f7fe fa2c 	bl	8001b8c <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	e00a      	b.n	800374e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003738:	f7fe fa28 	bl	8001b8c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e04f      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800374e:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 020c 	and.w	r2, r3, #12
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	429a      	cmp	r2, r3
 800375e:	d1eb      	bne.n	8003738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003760:	4b25      	ldr	r3, [pc, #148]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d20c      	bcs.n	8003788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376e:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	b2d2      	uxtb	r2, r2
 8003774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003776:	4b20      	ldr	r3, [pc, #128]	; (80037f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	683a      	ldr	r2, [r7, #0]
 8003780:	429a      	cmp	r2, r3
 8003782:	d001      	beq.n	8003788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e032      	b.n	80037ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d008      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003794:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	4916      	ldr	r1, [pc, #88]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d009      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037b2:	4b12      	ldr	r3, [pc, #72]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	490e      	ldr	r1, [pc, #56]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037c6:	f000 f821 	bl	800380c <HAL_RCC_GetSysClockFreq>
 80037ca:	4601      	mov	r1, r0
 80037cc:	4b0b      	ldr	r3, [pc, #44]	; (80037fc <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	4a0a      	ldr	r2, [pc, #40]	; (8003800 <HAL_RCC_ClockConfig+0x1c0>)
 80037d8:	5cd3      	ldrb	r3, [r2, r3]
 80037da:	fa21 f303 	lsr.w	r3, r1, r3
 80037de:	4a09      	ldr	r2, [pc, #36]	; (8003804 <HAL_RCC_ClockConfig+0x1c4>)
 80037e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_ClockConfig+0x1c8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fe f8ca 	bl	8001980 <HAL_InitTick>

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40023c00 	.word	0x40023c00
 80037fc:	40023800 	.word	0x40023800
 8003800:	0800a304 	.word	0x0800a304
 8003804:	20000000 	.word	0x20000000
 8003808:	20000004 	.word	0x20000004

0800380c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800380c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	2300      	movs	r3, #0
 800381c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003822:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_GetSysClockFreq+0x158>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f003 030c 	and.w	r3, r3, #12
 800382a:	2b04      	cmp	r3, #4
 800382c:	d007      	beq.n	800383e <HAL_RCC_GetSysClockFreq+0x32>
 800382e:	2b08      	cmp	r3, #8
 8003830:	d008      	beq.n	8003844 <HAL_RCC_GetSysClockFreq+0x38>
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 808d 	bne.w	8003952 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003838:	4b4b      	ldr	r3, [pc, #300]	; (8003968 <HAL_RCC_GetSysClockFreq+0x15c>)
 800383a:	60bb      	str	r3, [r7, #8]
       break;
 800383c:	e08c      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800383e:	4b4b      	ldr	r3, [pc, #300]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 8003840:	60bb      	str	r3, [r7, #8]
      break;
 8003842:	e089      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003844:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_GetSysClockFreq+0x158>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800384c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800384e:	4b45      	ldr	r3, [pc, #276]	; (8003964 <HAL_RCC_GetSysClockFreq+0x158>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d023      	beq.n	80038a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800385a:	4b42      	ldr	r3, [pc, #264]	; (8003964 <HAL_RCC_GetSysClockFreq+0x158>)
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	099b      	lsrs	r3, r3, #6
 8003860:	f04f 0400 	mov.w	r4, #0
 8003864:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003868:	f04f 0200 	mov.w	r2, #0
 800386c:	ea03 0501 	and.w	r5, r3, r1
 8003870:	ea04 0602 	and.w	r6, r4, r2
 8003874:	4a3d      	ldr	r2, [pc, #244]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 8003876:	fb02 f106 	mul.w	r1, r2, r6
 800387a:	2200      	movs	r2, #0
 800387c:	fb02 f205 	mul.w	r2, r2, r5
 8003880:	440a      	add	r2, r1
 8003882:	493a      	ldr	r1, [pc, #232]	; (800396c <HAL_RCC_GetSysClockFreq+0x160>)
 8003884:	fba5 0101 	umull	r0, r1, r5, r1
 8003888:	1853      	adds	r3, r2, r1
 800388a:	4619      	mov	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	461a      	mov	r2, r3
 8003894:	4623      	mov	r3, r4
 8003896:	f7fc fc9b 	bl	80001d0 <__aeabi_uldivmod>
 800389a:	4603      	mov	r3, r0
 800389c:	460c      	mov	r4, r1
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	e049      	b.n	8003936 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038a2:	4b30      	ldr	r3, [pc, #192]	; (8003964 <HAL_RCC_GetSysClockFreq+0x158>)
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	099b      	lsrs	r3, r3, #6
 80038a8:	f04f 0400 	mov.w	r4, #0
 80038ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	ea03 0501 	and.w	r5, r3, r1
 80038b8:	ea04 0602 	and.w	r6, r4, r2
 80038bc:	4629      	mov	r1, r5
 80038be:	4632      	mov	r2, r6
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	f04f 0400 	mov.w	r4, #0
 80038c8:	0154      	lsls	r4, r2, #5
 80038ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038ce:	014b      	lsls	r3, r1, #5
 80038d0:	4619      	mov	r1, r3
 80038d2:	4622      	mov	r2, r4
 80038d4:	1b49      	subs	r1, r1, r5
 80038d6:	eb62 0206 	sbc.w	r2, r2, r6
 80038da:	f04f 0300 	mov.w	r3, #0
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	0194      	lsls	r4, r2, #6
 80038e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80038e8:	018b      	lsls	r3, r1, #6
 80038ea:	1a5b      	subs	r3, r3, r1
 80038ec:	eb64 0402 	sbc.w	r4, r4, r2
 80038f0:	f04f 0100 	mov.w	r1, #0
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	00e2      	lsls	r2, r4, #3
 80038fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038fe:	00d9      	lsls	r1, r3, #3
 8003900:	460b      	mov	r3, r1
 8003902:	4614      	mov	r4, r2
 8003904:	195b      	adds	r3, r3, r5
 8003906:	eb44 0406 	adc.w	r4, r4, r6
 800390a:	f04f 0100 	mov.w	r1, #0
 800390e:	f04f 0200 	mov.w	r2, #0
 8003912:	02a2      	lsls	r2, r4, #10
 8003914:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003918:	0299      	lsls	r1, r3, #10
 800391a:	460b      	mov	r3, r1
 800391c:	4614      	mov	r4, r2
 800391e:	4618      	mov	r0, r3
 8003920:	4621      	mov	r1, r4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	f04f 0400 	mov.w	r4, #0
 8003928:	461a      	mov	r2, r3
 800392a:	4623      	mov	r3, r4
 800392c:	f7fc fc50 	bl	80001d0 <__aeabi_uldivmod>
 8003930:	4603      	mov	r3, r0
 8003932:	460c      	mov	r4, r1
 8003934:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_GetSysClockFreq+0x158>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0c1b      	lsrs	r3, r3, #16
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	3301      	adds	r3, #1
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	fbb2 f3f3 	udiv	r3, r2, r3
 800394e:	60bb      	str	r3, [r7, #8]
      break;
 8003950:	e002      	b.n	8003958 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003952:	4b05      	ldr	r3, [pc, #20]	; (8003968 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003954:	60bb      	str	r3, [r7, #8]
      break;
 8003956:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003958:	68bb      	ldr	r3, [r7, #8]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3714      	adds	r7, #20
 800395e:	46bd      	mov	sp, r7
 8003960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003962:	bf00      	nop
 8003964:	40023800 	.word	0x40023800
 8003968:	00f42400 	.word	0x00f42400
 800396c:	017d7840 	.word	0x017d7840

08003970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <HAL_RCC_GetHCLKFreq+0x14>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000000 	.word	0x20000000

08003988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800398c:	f7ff fff0 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 8003990:	4601      	mov	r1, r0
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	0a9b      	lsrs	r3, r3, #10
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	4a03      	ldr	r2, [pc, #12]	; (80039ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800399e:	5cd3      	ldrb	r3, [r2, r3]
 80039a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	0800a314 	.word	0x0800a314

080039b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039b4:	f7ff ffdc 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 80039b8:	4601      	mov	r1, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0b5b      	lsrs	r3, r3, #13
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4a03      	ldr	r2, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c6:	5cd3      	ldrb	r3, [r2, r3]
 80039c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	0800a314 	.word	0x0800a314

080039d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	220f      	movs	r2, #15
 80039e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80039e8:	4b12      	ldr	r3, [pc, #72]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a00:	4b0c      	ldr	r3, [pc, #48]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a0c:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_GetClockConfig+0x5c>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	08db      	lsrs	r3, r3, #3
 8003a12:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_RCC_GetClockConfig+0x60>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 020f 	and.w	r2, r3, #15
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	601a      	str	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40023c00 	.word	0x40023c00

08003a3c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e022      	b.n	8003a94 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fd fdbb 	bl	80015dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2203      	movs	r2, #3
 8003a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f814 	bl	8003a9c <HAL_SD_InitCard>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e00a      	b.n	8003a94 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003a9c:	b5b0      	push	{r4, r5, r7, lr}
 8003a9e:	b08e      	sub	sp, #56	; 0x38
 8003aa0:	af04      	add	r7, sp, #16
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003ab8:	2376      	movs	r3, #118	; 0x76
 8003aba:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681d      	ldr	r5, [r3, #0]
 8003ac0:	466c      	mov	r4, sp
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ace:	f107 0308 	add.w	r3, r7, #8
 8003ad2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f002 fbf7 	bl	80062c8 <SDIO_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e031      	b.n	8003b50 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003aec:	4b1a      	ldr	r3, [pc, #104]	; (8003b58 <HAL_SD_InitCard+0xbc>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f002 fc2f 	bl	800635a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_SD_InitCard+0xbc>)
 8003afe:	2201      	movs	r2, #1
 8003b00:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 ffdc 	bl	8004ac0 <SD_PowerON>
 8003b08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00b      	beq.n	8003b28 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e013      	b.n	8003b50 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 fefb 	bl	8004924 <SD_InitCard>
 8003b2e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e000      	b.n	8003b50 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bdb0      	pop	{r4, r5, r7, pc}
 8003b58:	422580a0 	.word	0x422580a0

08003b5c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b08c      	sub	sp, #48	; 0x30
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
 8003b68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0c9      	b.n	8003d18 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	f040 80c2 	bne.w	8003d16 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d907      	bls.n	8003bb6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e0b0      	b.n	8003d18 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003bd4:	f043 0302 	orr.w	r3, r3, #2
 8003bd8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a50      	ldr	r2, [pc, #320]	; (8003d20 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8003be0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	4a4f      	ldr	r2, [pc, #316]	; (8003d24 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003be8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	2200      	movs	r2, #0
 8003bf0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	3380      	adds	r3, #128	; 0x80
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	025b      	lsls	r3, r3, #9
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	f7fe fdc1 	bl	800278c <HAL_DMA_Start_IT>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d017      	beq.n	8003c40 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a40      	ldr	r2, [pc, #256]	; (8003d28 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e06b      	b.n	8003d18 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003c40:	4b3a      	ldr	r3, [pc, #232]	; (8003d2c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d002      	beq.n	8003c54 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8003c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c50:	025b      	lsls	r3, r3, #9
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 fc0f 	bl	8006480 <SDMMC_CmdBlockLength>
 8003c62:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a2e      	ldr	r2, [pc, #184]	; (8003d28 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003c70:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e046      	b.n	8003d18 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	025b      	lsls	r3, r3, #9
 8003c94:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003c96:	2390      	movs	r3, #144	; 0x90
 8003c98:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f107 0210 	add.w	r2, r7, #16
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f002 fbb9 	bl	8006428 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d90a      	bls.n	8003cd2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2282      	movs	r2, #130	; 0x82
 8003cc0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f002 fc1d 	bl	8006508 <SDMMC_CmdReadMultiBlock>
 8003cce:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003cd0:	e009      	b.n	8003ce6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2281      	movs	r2, #129	; 0x81
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f002 fbf0 	bl	80064c4 <SDMMC_CmdReadSingleBlock>
 8003ce4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d012      	beq.n	8003d12 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a0d      	ldr	r2, [pc, #52]	; (8003d28 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e002      	b.n	8003d18 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d16:	2302      	movs	r3, #2
  }
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3730      	adds	r7, #48	; 0x30
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	08004733 	.word	0x08004733
 8003d24:	080047a5 	.word	0x080047a5
 8003d28:	004005ff 	.word	0x004005ff
 8003d2c:	4225858c 	.word	0x4225858c

08003d30 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0ce      	b.n	8003ef6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 80c7 	bne.w	8003ef4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d907      	bls.n	8003d8a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0b5      	b.n	8003ef6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	4a53      	ldr	r2, [pc, #332]	; (8003f00 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	4a52      	ldr	r2, [pc, #328]	; (8003f04 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8003dbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d002      	beq.n	8003dd4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd0:	025b      	lsls	r3, r3, #9
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 fb4f 	bl	8006480 <SDMMC_CmdBlockLength>
 8003de2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00f      	beq.n	8003e0a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a46      	ldr	r2, [pc, #280]	; (8003f08 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e075      	b.n	8003ef6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d90a      	bls.n	8003e26 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	22a0      	movs	r2, #160	; 0xa0
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f002 fbb7 	bl	8006590 <SDMMC_CmdWriteMultiBlock>
 8003e22:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e24:	e009      	b.n	8003e3a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2290      	movs	r2, #144	; 0x90
 8003e2a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e32:	4618      	mov	r0, r3
 8003e34:	f002 fb8a 	bl	800654c <SDMMC_CmdWriteSingleBlock>
 8003e38:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a30      	ldr	r2, [pc, #192]	; (8003f08 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e047      	b.n	8003ef6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003e66:	4b29      	ldr	r3, [pc, #164]	; (8003f0c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8003e68:	2201      	movs	r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3380      	adds	r3, #128	; 0x80
 8003e78:	461a      	mov	r2, r3
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	025b      	lsls	r3, r3, #9
 8003e7e:	089b      	lsrs	r3, r3, #2
 8003e80:	f7fe fc84 	bl	800278c <HAL_DMA_Start_IT>
 8003e84:	4603      	mov	r3, r0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d01c      	beq.n	8003ec4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003e98:	f023 0302 	bic.w	r3, r3, #2
 8003e9c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a19      	ldr	r2, [pc, #100]	; (8003f08 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e018      	b.n	8003ef6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	025b      	lsls	r3, r3, #9
 8003ece:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ed0:	2390      	movs	r3, #144	; 0x90
 8003ed2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f107 0210 	add.w	r2, r7, #16
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fa9c 	bl	8006428 <SDIO_ConfigData>

      return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3730      	adds	r7, #48	; 0x30
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	08004709 	.word	0x08004709
 8003f04:	080047a5 	.word	0x080047a5
 8003f08:	004005ff 	.word	0x004005ff
 8003f0c:	4225858c 	.word	0x4225858c

08003f10 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d008      	beq.n	8003f3e <HAL_SD_IRQHandler+0x2e>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 ffd8 	bl	8004eec <SD_Read_IT>
 8003f3c:	e165      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 808f 	beq.w	800406c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f56:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	6812      	ldr	r2, [r2, #0]
 8003f62:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003f66:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003f6a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f022 0201 	bic.w	r2, r2, #1
 8003f7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d039      	beq.n	8003ffa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d104      	bne.n	8003f9a <HAL_SD_IRQHandler+0x8a>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d011      	beq.n	8003fbe <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f002 fb18 	bl	80065d4 <SDMMC_CmdStopTransfer>
 8003fa4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f92f 	bl	800421c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d104      	bne.n	8003fea <HAL_SD_IRQHandler+0xda>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f002 ff6e 	bl	8006ecc <HAL_SD_RxCpltCallback>
 8003ff0:	e10b      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f002 ff60 	bl	8006eb8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ff8:	e107      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8102 	beq.w	800420a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d011      	beq.n	8004034 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f002 fadd 	bl	80065d4 <SDMMC_CmdStopTransfer>
 800401a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d008      	beq.n	8004034 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f8f4 	bl	800421c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	f040 80e5 	bne.w	800420a <HAL_SD_IRQHandler+0x2fa>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	f040 80df 	bne.w	800420a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0208 	bic.w	r2, r2, #8
 800405a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f002 ff27 	bl	8006eb8 <HAL_SD_TxCpltCallback>
}
 800406a:	e0ce      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d008      	beq.n	800408c <HAL_SD_IRQHandler+0x17c>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 ff82 	bl	8004f8e <SD_Write_IT>
 800408a:	e0be      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004092:	f240 233a 	movw	r3, #570	; 0x23a
 8004096:	4013      	ands	r3, r2
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80b6 	beq.w	800420a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b0:	f043 0202 	orr.w	r2, r3, #2
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	f043 0208 	orr.w	r2, r3, #8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	f003 0320 	and.w	r3, r3, #32
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d005      	beq.n	80040ec <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e4:	f043 0220 	orr.w	r2, r3, #32
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	f003 0310 	and.w	r3, r3, #16
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d005      	beq.n	8004106 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	f043 0210 	orr.w	r2, r3, #16
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004118:	f043 0208 	orr.w	r2, r3, #8
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f240 723a 	movw	r2, #1850	; 0x73a
 8004128:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6812      	ldr	r2, [r2, #0]
 8004134:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004138:	f023 0302 	bic.w	r3, r3, #2
 800413c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f002 fa46 	bl	80065d4 <SDMMC_CmdStopTransfer>
 8004148:	4602      	mov	r2, r0
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f855 	bl	800421c <HAL_SD_ErrorCallback>
}
 8004172:	e04a      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d045      	beq.n	800420a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d104      	bne.n	8004192 <HAL_SD_IRQHandler+0x282>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b00      	cmp	r3, #0
 8004190:	d011      	beq.n	80041b6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004196:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_SD_IRQHandler+0x304>)
 8004198:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419e:	4618      	mov	r0, r3
 80041a0:	f7fe fb4c 	bl	800283c <HAL_DMA_Abort_IT>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02f      	beq.n	800420a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fb4a 	bl	8004848 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80041b4:	e029      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d104      	bne.n	80041ca <HAL_SD_IRQHandler+0x2ba>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d011      	beq.n	80041ee <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	4a12      	ldr	r2, [pc, #72]	; (8004218 <HAL_SD_IRQHandler+0x308>)
 80041d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7fe fb30 	bl	800283c <HAL_DMA_Abort_IT>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d013      	beq.n	800420a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fb65 	bl	80048b6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041ec:	e00d      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f002 fe4e 	bl	8006ea4 <HAL_SD_AbortCallback>
}
 8004208:	e7ff      	b.n	800420a <HAL_SD_IRQHandler+0x2fa>
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	08004849 	.word	0x08004849
 8004218:	080048b7 	.word	0x080048b7

0800421c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423e:	0f9b      	lsrs	r3, r3, #30
 8004240:	b2da      	uxtb	r2, r3
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800424a:	0e9b      	lsrs	r3, r3, #26
 800424c:	b2db      	uxtb	r3, r3
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	b2da      	uxtb	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800425c:	0e1b      	lsrs	r3, r3, #24
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	b2da      	uxtb	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800426e:	0c1b      	lsrs	r3, r3, #16
 8004270:	b2da      	uxtb	r2, r3
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427a:	0a1b      	lsrs	r3, r3, #8
 800427c:	b2da      	uxtb	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004286:	b2da      	uxtb	r2, r3
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004290:	0d1b      	lsrs	r3, r3, #20
 8004292:	b29a      	uxth	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800429c:	0c1b      	lsrs	r3, r3, #16
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ae:	0bdb      	lsrs	r3, r3, #15
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	b2da      	uxtb	r2, r3
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c0:	0b9b      	lsrs	r3, r3, #14
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f003 0301 	and.w	r3, r3, #1
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d2:	0b5b      	lsrs	r3, r3, #13
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e4:	0b1b      	lsrs	r3, r3, #12
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	2200      	movs	r2, #0
 80042f6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d163      	bne.n	80043c8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004304:	009a      	lsls	r2, r3, #2
 8004306:	f640 73fc 	movw	r3, #4092	; 0xffc
 800430a:	4013      	ands	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004310:	0f92      	lsrs	r2, r2, #30
 8004312:	431a      	orrs	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800431c:	0edb      	lsrs	r3, r3, #27
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 0307 	and.w	r3, r3, #7
 8004324:	b2da      	uxtb	r2, r3
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800432e:	0e1b      	lsrs	r3, r3, #24
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	b2da      	uxtb	r2, r3
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004340:	0d5b      	lsrs	r3, r3, #21
 8004342:	b2db      	uxtb	r3, r3
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	b2da      	uxtb	r2, r3
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004352:	0c9b      	lsrs	r3, r3, #18
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	b2da      	uxtb	r2, r3
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004364:	0bdb      	lsrs	r3, r3, #15
 8004366:	b2db      	uxtb	r3, r3
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	b2da      	uxtb	r2, r3
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	1c5a      	adds	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	7e1b      	ldrb	r3, [r3, #24]
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f003 0307 	and.w	r3, r3, #7
 8004386:	3302      	adds	r3, #2
 8004388:	2201      	movs	r2, #1
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004392:	fb02 f203 	mul.w	r2, r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	7a1b      	ldrb	r3, [r3, #8]
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	2201      	movs	r2, #1
 80043a6:	409a      	lsls	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043b4:	0a52      	lsrs	r2, r2, #9
 80043b6:	fb02 f203 	mul.w	r2, r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c4:	661a      	str	r2, [r3, #96]	; 0x60
 80043c6:	e031      	b.n	800442c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d11d      	bne.n	800440c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043d4:	041b      	lsls	r3, r3, #16
 80043d6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043de:	0c1b      	lsrs	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	3301      	adds	r3, #1
 80043ec:	029a      	lsls	r2, r3, #10
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004400:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	661a      	str	r2, [r3, #96]	; 0x60
 800440a:	e00f      	b.n	800442c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a58      	ldr	r2, [pc, #352]	; (8004574 <HAL_SD_GetCardCSD+0x344>)
 8004412:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e09d      	b.n	8004568 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004430:	0b9b      	lsrs	r3, r3, #14
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	b2da      	uxtb	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004442:	09db      	lsrs	r3, r3, #7
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800444a:	b2da      	uxtb	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800445a:	b2da      	uxtb	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004464:	0fdb      	lsrs	r3, r3, #31
 8004466:	b2da      	uxtb	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	0f5b      	lsrs	r3, r3, #29
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	b2da      	uxtb	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	0e9b      	lsrs	r3, r3, #26
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	0d9b      	lsrs	r3, r3, #22
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 030f 	and.w	r3, r3, #15
 800449c:	b2da      	uxtb	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a6:	0d5b      	lsrs	r3, r3, #21
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	0c1b      	lsrs	r3, r3, #16
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	0bdb      	lsrs	r3, r3, #15
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	0b9b      	lsrs	r3, r3, #14
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	0b5b      	lsrs	r3, r3, #13
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	0b1b      	lsrs	r3, r3, #12
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	b2da      	uxtb	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	0a9b      	lsrs	r3, r3, #10
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	0a1b      	lsrs	r3, r3, #8
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	b2da      	uxtb	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	085b      	lsrs	r3, r3, #1
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004556:	b2da      	uxtb	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2201      	movs	r2, #1
 8004562:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004566:	2300      	movs	r3, #0
}
 8004568:	4618      	mov	r0, r3
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	004005ff 	.word	0x004005ff

08004578 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80045d0:	b5b0      	push	{r4, r5, r7, lr}
 80045d2:	b08e      	sub	sp, #56	; 0x38
 80045d4:	af04      	add	r7, sp, #16
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2203      	movs	r2, #3
 80045de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d02e      	beq.n	8004648 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f0:	d106      	bne.n	8004600 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38
 80045fe:	e029      	b.n	8004654 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004606:	d10a      	bne.n	800461e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fb0f 	bl	8004c2c <SD_WideBus_Enable>
 800460e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	639a      	str	r2, [r3, #56]	; 0x38
 800461c:	e01a      	b.n	8004654 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb4c 	bl	8004cc2 <SD_WideBus_Disable>
 800462a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	639a      	str	r2, [r3, #56]	; 0x38
 8004638:	e00c      	b.n	8004654 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	639a      	str	r2, [r3, #56]	; 0x38
 8004646:	e005      	b.n	8004654 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004658:	2b00      	cmp	r3, #0
 800465a:	d009      	beq.n	8004670 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a18      	ldr	r2, [pc, #96]	; (80046c4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e024      	b.n	80046ba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681d      	ldr	r5, [r3, #0]
 8004696:	466c      	mov	r4, sp
 8004698:	f107 0318 	add.w	r3, r7, #24
 800469c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046a4:	f107 030c 	add.w	r3, r7, #12
 80046a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046aa:	4628      	mov	r0, r5
 80046ac:	f001 fe0c 	bl	80062c8 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3728      	adds	r7, #40	; 0x28
 80046be:	46bd      	mov	sp, r7
 80046c0:	bdb0      	pop	{r4, r5, r7, pc}
 80046c2:	bf00      	nop
 80046c4:	004005ff 	.word	0x004005ff

080046c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80046d0:	2300      	movs	r3, #0
 80046d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80046d4:	f107 030c 	add.w	r3, r7, #12
 80046d8:	4619      	mov	r1, r3
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fa7e 	bl	8004bdc <SD_SendStatus>
 80046e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	0a5b      	lsrs	r3, r3, #9
 80046f8:	f003 030f 	and.w	r3, r3, #15
 80046fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80046fe:	693b      	ldr	r3, [r7, #16]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004724:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004726:	bf00      	nop
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b084      	sub	sp, #16
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	2b82      	cmp	r3, #130	; 0x82
 8004746:	d111      	bne.n	800476c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f001 ff41 	bl	80065d4 <SDMMC_CmdStopTransfer>
 8004752:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	431a      	orrs	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f7ff fd58 	bl	800421c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f022 0208 	bic.w	r2, r2, #8
 800477a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f240 523a 	movw	r2, #1338	; 0x53a
 8004784:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2200      	movs	r2, #0
 8004792:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f002 fb99 	bl	8006ecc <HAL_SD_RxCpltCallback>
#endif
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe f9ee 	bl	8002b94 <HAL_DMA_GetError>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d03e      	beq.n	800483c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047cc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d002      	beq.n	80047da <SD_DMAError+0x36>
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d12d      	bne.n	8004836 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a19      	ldr	r2, [pc, #100]	; (8004844 <SD_DMAError+0xa0>)
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80047f0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80047fe:	6978      	ldr	r0, [r7, #20]
 8004800:	f7ff ff62 	bl	80046c8 <HAL_SD_GetCardState>
 8004804:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d002      	beq.n	8004812 <SD_DMAError+0x6e>
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b05      	cmp	r3, #5
 8004810:	d10a      	bne.n	8004828 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f001 fedc 	bl	80065d4 <SDMMC_CmdStopTransfer>
 800481c:	4602      	mov	r2, r0
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	431a      	orrs	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2200      	movs	r2, #0
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004836:	6978      	ldr	r0, [r7, #20]
 8004838:	f7ff fcf0 	bl	800421c <HAL_SD_ErrorCallback>
#endif
  }
}
 800483c:	bf00      	nop
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	004005ff 	.word	0x004005ff

08004848 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004854:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f240 523a 	movw	r2, #1338	; 0x53a
 800485e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff ff31 	bl	80046c8 <HAL_SD_GetCardState>
 8004866:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b06      	cmp	r3, #6
 800487a:	d002      	beq.n	8004882 <SD_DMATxAbort+0x3a>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b05      	cmp	r3, #5
 8004880:	d10a      	bne.n	8004898 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fea4 	bl	80065d4 <SDMMC_CmdStopTransfer>
 800488c:	4602      	mov	r2, r0
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	431a      	orrs	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800489c:	2b00      	cmp	r3, #0
 800489e:	d103      	bne.n	80048a8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f002 faff 	bl	8006ea4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80048a6:	e002      	b.n	80048ae <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f7ff fcb7 	bl	800421c <HAL_SD_ErrorCallback>
}
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b084      	sub	sp, #16
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f240 523a 	movw	r2, #1338	; 0x53a
 80048cc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff fefa 	bl	80046c8 <HAL_SD_GetCardState>
 80048d4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	2b06      	cmp	r3, #6
 80048e8:	d002      	beq.n	80048f0 <SD_DMARxAbort+0x3a>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d10a      	bne.n	8004906 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 fe6d 	bl	80065d4 <SDMMC_CmdStopTransfer>
 80048fa:	4602      	mov	r2, r0
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	431a      	orrs	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f002 fac8 	bl	8006ea4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004914:	e002      	b.n	800491c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	f7ff fc80 	bl	800421c <HAL_SD_ErrorCallback>
}
 800491c:	bf00      	nop
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}

08004924 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004924:	b5b0      	push	{r4, r5, r7, lr}
 8004926:	b094      	sub	sp, #80	; 0x50
 8004928:	af04      	add	r7, sp, #16
 800492a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800492c:	2301      	movs	r3, #1
 800492e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	f001 fd1f 	bl	8006378 <SDIO_GetPowerState>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004940:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004944:	e0b7      	b.n	8004ab6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	2b03      	cmp	r3, #3
 800494c:	d02f      	beq.n	80049ae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f001 ff48 	bl	80067e8 <SDMMC_CmdSendCID>
 8004958:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800495a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495c:	2b00      	cmp	r3, #0
 800495e:	d001      	beq.n	8004964 <SD_InitCard+0x40>
    {
      return errorstate;
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	e0a8      	b.n	8004ab6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2100      	movs	r1, #0
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fd49 	bl	8006402 <SDIO_GetResponse>
 8004970:	4602      	mov	r2, r0
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2104      	movs	r1, #4
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fd40 	bl	8006402 <SDIO_GetResponse>
 8004982:	4602      	mov	r2, r0
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2108      	movs	r1, #8
 800498e:	4618      	mov	r0, r3
 8004990:	f001 fd37 	bl	8006402 <SDIO_GetResponse>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	210c      	movs	r1, #12
 80049a0:	4618      	mov	r0, r3
 80049a2:	f001 fd2e 	bl	8006402 <SDIO_GetResponse>
 80049a6:	4602      	mov	r2, r0
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d00d      	beq.n	80049d2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f107 020e 	add.w	r2, r7, #14
 80049be:	4611      	mov	r1, r2
 80049c0:	4618      	mov	r0, r3
 80049c2:	f001 ff4e 	bl	8006862 <SDMMC_CmdSetRelAdd>
 80049c6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <SD_InitCard+0xae>
    {
      return errorstate;
 80049ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d0:	e071      	b.n	8004ab6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d036      	beq.n	8004a48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80049da:	89fb      	ldrh	r3, [r7, #14]
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	041b      	lsls	r3, r3, #16
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f001 ff18 	bl	8006824 <SDMMC_CmdSendCSD>
 80049f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <SD_InitCard+0xdc>
    {
      return errorstate;
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fe:	e05a      	b.n	8004ab6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2100      	movs	r1, #0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f001 fcfb 	bl	8006402 <SDIO_GetResponse>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2104      	movs	r1, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f001 fcf2 	bl	8006402 <SDIO_GetResponse>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2108      	movs	r1, #8
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fce9 	bl	8006402 <SDIO_GetResponse>
 8004a30:	4602      	mov	r2, r0
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	210c      	movs	r1, #12
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f001 fce0 	bl	8006402 <SDIO_GetResponse>
 8004a42:	4602      	mov	r2, r0
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2104      	movs	r1, #4
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f001 fcd7 	bl	8006402 <SDIO_GetResponse>
 8004a54:	4603      	mov	r3, r0
 8004a56:	0d1a      	lsrs	r2, r3, #20
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a5c:	f107 0310 	add.w	r3, r7, #16
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff fbe4 	bl	8004230 <HAL_SD_GetCardCSD>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a72:	e020      	b.n	8004ab6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6819      	ldr	r1, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	041b      	lsls	r3, r3, #16
 8004a7e:	f04f 0400 	mov.w	r4, #0
 8004a82:	461a      	mov	r2, r3
 8004a84:	4623      	mov	r3, r4
 8004a86:	4608      	mov	r0, r1
 8004a88:	f001 fdc6 	bl	8006618 <SDMMC_CmdSelDesel>
 8004a8c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <SD_InitCard+0x174>
  {
    return errorstate;
 8004a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a96:	e00e      	b.n	8004ab6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681d      	ldr	r5, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	466c      	mov	r4, sp
 8004aa0:	f103 0210 	add.w	r2, r3, #16
 8004aa4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004aa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004aaa:	3304      	adds	r3, #4
 8004aac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f001 fc0a 	bl	80062c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3740      	adds	r7, #64	; 0x40
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004ac0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004acc:	2300      	movs	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f001 fdc0 	bl	800665e <SDMMC_CmdGoIdleState>
 8004ade:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <SD_PowerON+0x2a>
  {
    return errorstate;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	e072      	b.n	8004bd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 fdd3 	bl	800669a <SDMMC_CmdOperCond>
 8004af4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f001 fda9 	bl	800665e <SDMMC_CmdGoIdleState>
 8004b0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d004      	beq.n	8004b1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	e05b      	b.n	8004bd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d137      	bne.n	8004b96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fdd3 	bl	80066d8 <SDMMC_CmdAppCommand>
 8004b32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d02d      	beq.n	8004b96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b3e:	e047      	b.n	8004bd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2100      	movs	r1, #0
 8004b46:	4618      	mov	r0, r3
 8004b48:	f001 fdc6 	bl	80066d8 <SDMMC_CmdAppCommand>
 8004b4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d001      	beq.n	8004b58 <SD_PowerON+0x98>
    {
      return errorstate;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	e03b      	b.n	8004bd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	491e      	ldr	r1, [pc, #120]	; (8004bd8 <SD_PowerON+0x118>)
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 fddc 	bl	800671c <SDMMC_CmdAppOperCommand>
 8004b64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b70:	e02e      	b.n	8004bd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f001 fc42 	bl	8006402 <SDIO_GetResponse>
 8004b7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	0fdb      	lsrs	r3, r3, #31
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <SD_PowerON+0xcc>
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e000      	b.n	8004b8e <SD_PowerON+0xce>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]

    count++;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	3301      	adds	r3, #1
 8004b94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d802      	bhi.n	8004ba6 <SD_PowerON+0xe6>
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0cc      	beq.n	8004b40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d902      	bls.n	8004bb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004bb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bb4:	e00c      	b.n	8004bd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d003      	beq.n	8004bc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
 8004bc6:	e002      	b.n	8004bce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	c1100000 	.word	0xc1100000

08004bdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bf0:	e018      	b.n	8004c24 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bfa:	041b      	lsls	r3, r3, #16
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f001 fe50 	bl	80068a4 <SDMMC_CmdSendStatus>
 8004c04:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	e009      	b.n	8004c24 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fbf3 	bl	8006402 <SDIO_GetResponse>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c34:	2300      	movs	r3, #0
 8004c36:	60fb      	str	r3, [r7, #12]
 8004c38:	2300      	movs	r3, #0
 8004c3a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2100      	movs	r1, #0
 8004c42:	4618      	mov	r0, r3
 8004c44:	f001 fbdd 	bl	8006402 <SDIO_GetResponse>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c52:	d102      	bne.n	8004c5a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c58:	e02f      	b.n	8004cba <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c5a:	f107 030c 	add.w	r3, r7, #12
 8004c5e:	4619      	mov	r1, r3
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f879 	bl	8004d58 <SD_FindSCR>
 8004c66:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d001      	beq.n	8004c72 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	e023      	b.n	8004cba <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01c      	beq.n	8004cb6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c84:	041b      	lsls	r3, r3, #16
 8004c86:	4619      	mov	r1, r3
 8004c88:	4610      	mov	r0, r2
 8004c8a:	f001 fd25 	bl	80066d8 <SDMMC_CmdAppCommand>
 8004c8e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	e00f      	b.n	8004cba <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 fd5e 	bl	8006762 <SDMMC_CmdBusWidth>
 8004ca6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	e003      	b.n	8004cba <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	e001      	b.n	8004cba <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cb6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3718      	adds	r7, #24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b086      	sub	sp, #24
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f001 fb92 	bl	8006402 <SDIO_GetResponse>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ce8:	d102      	bne.n	8004cf0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004cea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cee:	e02f      	b.n	8004d50 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004cf0:	f107 030c 	add.w	r3, r7, #12
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f82e 	bl	8004d58 <SD_FindSCR>
 8004cfc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	e023      	b.n	8004d50 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d01c      	beq.n	8004d4c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1a:	041b      	lsls	r3, r3, #16
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	f001 fcda 	bl	80066d8 <SDMMC_CmdAppCommand>
 8004d24:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	e00f      	b.n	8004d50 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f001 fd13 	bl	8006762 <SDMMC_CmdBusWidth>
 8004d3c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	e003      	b.n	8004d50 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	e001      	b.n	8004d50 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d58:	b590      	push	{r4, r7, lr}
 8004d5a:	b08f      	sub	sp, #60	; 0x3c
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d62:	f7fc ff13 	bl	8001b8c <HAL_GetTick>
 8004d66:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	2300      	movs	r3, #0
 8004d72:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2108      	movs	r1, #8
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f001 fb7e 	bl	8006480 <SDMMC_CmdBlockLength>
 8004d84:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8e:	e0a9      	b.n	8004ee4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d98:	041b      	lsls	r3, r3, #16
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	f001 fc9b 	bl	80066d8 <SDMMC_CmdAppCommand>
 8004da2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <SD_FindSCR+0x56>
  {
    return errorstate;
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	e09a      	b.n	8004ee4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004db4:	2308      	movs	r3, #8
 8004db6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004db8:	2330      	movs	r3, #48	; 0x30
 8004dba:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f107 0210 	add.w	r2, r7, #16
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f001 fb28 	bl	8006428 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 fce2 	bl	80067a6 <SDMMC_CmdSendSCR>
 8004de2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d022      	beq.n	8004e30 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	e07a      	b.n	8004ee4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00e      	beq.n	8004e1a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6819      	ldr	r1, [r3, #0]
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	f107 0208 	add.w	r2, r7, #8
 8004e08:	18d4      	adds	r4, r2, r3
 8004e0a:	4608      	mov	r0, r1
 8004e0c:	f001 fa87 	bl	800631e <SDIO_ReadFIFO>
 8004e10:	4603      	mov	r3, r0
 8004e12:	6023      	str	r3, [r4, #0]
      index++;
 8004e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e16:	3301      	adds	r3, #1
 8004e18:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e1a:	f7fc feb7 	bl	8001b8c <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d102      	bne.n	8004e30 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004e2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e2e:	e059      	b.n	8004ee4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e36:	f240 432a 	movw	r3, #1066	; 0x42a
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0d6      	beq.n	8004dee <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e46:	f003 0308 	and.w	r3, r3, #8
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d005      	beq.n	8004e5a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2208      	movs	r2, #8
 8004e54:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e56:	2308      	movs	r3, #8
 8004e58:	e044      	b.n	8004ee4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e70:	2302      	movs	r3, #2
 8004e72:	e037      	b.n	8004ee4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2220      	movs	r2, #32
 8004e88:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e8a:	2320      	movs	r3, #32
 8004e8c:	e02a      	b.n	8004ee4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	061a      	lsls	r2, r3, #24
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ea4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	0a1b      	lsrs	r3, r3, #8
 8004eaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004eae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	0e1b      	lsrs	r3, r3, #24
 8004eb4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	601a      	str	r2, [r3, #0]
    scr++;
 8004eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	061a      	lsls	r2, r3, #24
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ecc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ed6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	0e1b      	lsrs	r3, r3, #24
 8004edc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	373c      	adds	r7, #60	; 0x3c
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd90      	pop	{r4, r7, pc}

08004eec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b086      	sub	sp, #24
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d03f      	beq.n	8004f86 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f06:	2300      	movs	r3, #0
 8004f08:	617b      	str	r3, [r7, #20]
 8004f0a:	e033      	b.n	8004f74 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f001 fa04 	bl	800631e <SDIO_ReadFIFO>
 8004f16:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	0a1b      	lsrs	r3, r3, #8
 8004f30:	b2da      	uxtb	r2, r3
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	0c1b      	lsrs	r3, r3, #16
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3301      	adds	r3, #1
 8004f50:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	0e1b      	lsrs	r3, r3, #24
 8004f5c:	b2da      	uxtb	r2, r3
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	3301      	adds	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b07      	cmp	r3, #7
 8004f78:	d9c8      	bls.n	8004f0c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68fa      	ldr	r2, [r7, #12]
 8004f7e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004f86:	bf00      	nop
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b086      	sub	sp, #24
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d043      	beq.n	8005030 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e037      	b.n	800501e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	021a      	lsls	r2, r3, #8
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	041a      	lsls	r2, r3, #16
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3b01      	subs	r3, #1
 8004fee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	781b      	ldrb	r3, [r3, #0]
 8004ff4:	061a      	lsls	r2, r3, #24
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	3301      	adds	r3, #1
 8005000:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	3b01      	subs	r3, #1
 8005006:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f107 0208 	add.w	r2, r7, #8
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f001 f990 	bl	8006338 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	3301      	adds	r3, #1
 800501c:	617b      	str	r3, [r7, #20]
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b07      	cmp	r3, #7
 8005022:	d9c4      	bls.n	8004fae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e056      	b.n	80050f8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7fc fb29 	bl	80016bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2202      	movs	r2, #2
 800506e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005080:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685a      	ldr	r2, [r3, #4]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	431a      	orrs	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	695b      	ldr	r3, [r3, #20]
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	ea42 0103 	orr.w	r1, r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	699b      	ldr	r3, [r3, #24]
 80050c6:	0c1b      	lsrs	r3, r3, #16
 80050c8:	f003 0104 	and.w	r1, r3, #4
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	69da      	ldr	r2, [r3, #28]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2200      	movs	r2, #0
 80050ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e01d      	b.n	800514e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005118:	b2db      	uxtb	r3, r3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d106      	bne.n	800512c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f815 	bl	8005156 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	4619      	mov	r1, r3
 800513e:	4610      	mov	r0, r2
 8005140:	f000 f968 	bl	8005414 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68da      	ldr	r2, [r3, #12]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f042 0201 	orr.w	r2, r2, #1
 8005180:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 0307 	and.w	r3, r3, #7
 800518c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2b06      	cmp	r3, #6
 8005192:	d007      	beq.n	80051a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	691b      	ldr	r3, [r3, #16]
 80051c0:	f003 0302 	and.w	r3, r3, #2
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d122      	bne.n	800520e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d11b      	bne.n	800520e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f06f 0202 	mvn.w	r2, #2
 80051de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f003 0303 	and.w	r3, r3, #3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f8ee 	bl	80053d6 <HAL_TIM_IC_CaptureCallback>
 80051fa:	e005      	b.n	8005208 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f000 f8e0 	bl	80053c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f8f1 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b04      	cmp	r3, #4
 800521a:	d122      	bne.n	8005262 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68db      	ldr	r3, [r3, #12]
 8005222:	f003 0304 	and.w	r3, r3, #4
 8005226:	2b04      	cmp	r3, #4
 8005228:	d11b      	bne.n	8005262 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f06f 0204 	mvn.w	r2, #4
 8005232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f8c4 	bl	80053d6 <HAL_TIM_IC_CaptureCallback>
 800524e:	e005      	b.n	800525c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f8b6 	bl	80053c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f8c7 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b08      	cmp	r3, #8
 800526e:	d122      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b08      	cmp	r3, #8
 800527c:	d11b      	bne.n	80052b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f06f 0208 	mvn.w	r2, #8
 8005286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2204      	movs	r2, #4
 800528c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	f003 0303 	and.w	r3, r3, #3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d003      	beq.n	80052a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f89a 	bl	80053d6 <HAL_TIM_IC_CaptureCallback>
 80052a2:	e005      	b.n	80052b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f88c 	bl	80053c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f89d 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	f003 0310 	and.w	r3, r3, #16
 80052c0:	2b10      	cmp	r3, #16
 80052c2:	d122      	bne.n	800530a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b10      	cmp	r3, #16
 80052d0:	d11b      	bne.n	800530a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f06f 0210 	mvn.w	r2, #16
 80052da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2208      	movs	r2, #8
 80052e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d003      	beq.n	80052f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f870 	bl	80053d6 <HAL_TIM_IC_CaptureCallback>
 80052f6:	e005      	b.n	8005304 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f862 	bl	80053c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f873 	bl	80053ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b01      	cmp	r3, #1
 8005316:	d10e      	bne.n	8005336 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	2b01      	cmp	r3, #1
 8005324:	d107      	bne.n	8005336 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f06f 0201 	mvn.w	r2, #1
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7fc f81d 	bl	8001370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534e:	2b80      	cmp	r3, #128	; 0x80
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 f903 	bl	8005568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d10e      	bne.n	800538e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537a:	2b40      	cmp	r3, #64	; 0x40
 800537c:	d107      	bne.n	800538e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f838 	bl	80053fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0320 	and.w	r3, r3, #32
 8005398:	2b20      	cmp	r3, #32
 800539a:	d10e      	bne.n	80053ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b20      	cmp	r3, #32
 80053a8:	d107      	bne.n	80053ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0220 	mvn.w	r2, #32
 80053b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 f8cd 	bl	8005554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ba:	bf00      	nop
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a40      	ldr	r2, [pc, #256]	; (8005528 <TIM_Base_SetConfig+0x114>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005432:	d00f      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a3d      	ldr	r2, [pc, #244]	; (800552c <TIM_Base_SetConfig+0x118>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3c      	ldr	r2, [pc, #240]	; (8005530 <TIM_Base_SetConfig+0x11c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3b      	ldr	r2, [pc, #236]	; (8005534 <TIM_Base_SetConfig+0x120>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3a      	ldr	r2, [pc, #232]	; (8005538 <TIM_Base_SetConfig+0x124>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d108      	bne.n	8005466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a2f      	ldr	r2, [pc, #188]	; (8005528 <TIM_Base_SetConfig+0x114>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d02b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005474:	d027      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a2c      	ldr	r2, [pc, #176]	; (800552c <TIM_Base_SetConfig+0x118>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d023      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2b      	ldr	r2, [pc, #172]	; (8005530 <TIM_Base_SetConfig+0x11c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d01f      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2a      	ldr	r2, [pc, #168]	; (8005534 <TIM_Base_SetConfig+0x120>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a29      	ldr	r2, [pc, #164]	; (8005538 <TIM_Base_SetConfig+0x124>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d017      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a28      	ldr	r2, [pc, #160]	; (800553c <TIM_Base_SetConfig+0x128>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a27      	ldr	r2, [pc, #156]	; (8005540 <TIM_Base_SetConfig+0x12c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00f      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a26      	ldr	r2, [pc, #152]	; (8005544 <TIM_Base_SetConfig+0x130>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00b      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a25      	ldr	r2, [pc, #148]	; (8005548 <TIM_Base_SetConfig+0x134>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d007      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a24      	ldr	r2, [pc, #144]	; (800554c <TIM_Base_SetConfig+0x138>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d003      	beq.n	80054c6 <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a23      	ldr	r2, [pc, #140]	; (8005550 <TIM_Base_SetConfig+0x13c>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d108      	bne.n	80054d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	689a      	ldr	r2, [r3, #8]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a0a      	ldr	r2, [pc, #40]	; (8005528 <TIM_Base_SetConfig+0x114>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <TIM_Base_SetConfig+0xf8>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0c      	ldr	r2, [pc, #48]	; (8005538 <TIM_Base_SetConfig+0x124>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d103      	bne.n	8005514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	691a      	ldr	r2, [r3, #16]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	615a      	str	r2, [r3, #20]
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	40010000 	.word	0x40010000
 800552c:	40000400 	.word	0x40000400
 8005530:	40000800 	.word	0x40000800
 8005534:	40000c00 	.word	0x40000c00
 8005538:	40010400 	.word	0x40010400
 800553c:	40014000 	.word	0x40014000
 8005540:	40014400 	.word	0x40014400
 8005544:	40014800 	.word	0x40014800
 8005548:	40001800 	.word	0x40001800
 800554c:	40001c00 	.word	0x40001c00
 8005550:	40002000 	.word	0x40002000

08005554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005570:	bf00      	nop
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e03f      	b.n	800560e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d106      	bne.n	80055a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fc f8d2 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	; 0x24
 80055ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68da      	ldr	r2, [r3, #12]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb05 	bl	8005bd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	695a      	ldr	r2, [r3, #20]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005616:	b580      	push	{r7, lr}
 8005618:	b088      	sub	sp, #32
 800561a:	af02      	add	r7, sp, #8
 800561c:	60f8      	str	r0, [r7, #12]
 800561e:	60b9      	str	r1, [r7, #8]
 8005620:	603b      	str	r3, [r7, #0]
 8005622:	4613      	mov	r3, r2
 8005624:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b20      	cmp	r3, #32
 8005634:	f040 8083 	bne.w	800573e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <HAL_UART_Transmit+0x2e>
 800563e:	88fb      	ldrh	r3, [r7, #6]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e07b      	b.n	8005740 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_UART_Transmit+0x40>
 8005652:	2302      	movs	r3, #2
 8005654:	e074      	b.n	8005740 <HAL_UART_Transmit+0x12a>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2221      	movs	r2, #33	; 0x21
 8005668:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800566c:	f7fc fa8e 	bl	8001b8c <HAL_GetTick>
 8005670:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	88fa      	ldrh	r2, [r7, #6]
 8005676:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	88fa      	ldrh	r2, [r7, #6]
 800567c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005686:	e042      	b.n	800570e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800568c:	b29b      	uxth	r3, r3
 800568e:	3b01      	subs	r3, #1
 8005690:	b29a      	uxth	r2, r3
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800569e:	d122      	bne.n	80056e6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2200      	movs	r2, #0
 80056a8:	2180      	movs	r1, #128	; 0x80
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 fa12 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056b6:	2303      	movs	r3, #3
 80056b8:	e042      	b.n	8005740 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	461a      	mov	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056cc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	3302      	adds	r3, #2
 80056da:	60bb      	str	r3, [r7, #8]
 80056dc:	e017      	b.n	800570e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3301      	adds	r3, #1
 80056e2:	60bb      	str	r3, [r7, #8]
 80056e4:	e013      	b.n	800570e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	2200      	movs	r2, #0
 80056ee:	2180      	movs	r1, #128	; 0x80
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 f9ef 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e01f      	b.n	8005740 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	60ba      	str	r2, [r7, #8]
 8005706:	781a      	ldrb	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1b7      	bne.n	8005688 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2200      	movs	r2, #0
 8005720:	2140      	movs	r1, #64	; 0x40
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f000 f9d6 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e006      	b.n	8005740 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	e000      	b.n	8005740 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800573e:	2302      	movs	r3, #2
  }
}
 8005740:	4618      	mov	r0, r3
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af02      	add	r7, sp, #8
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	603b      	str	r3, [r7, #0]
 8005754:	4613      	mov	r3, r2
 8005756:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005762:	b2db      	uxtb	r3, r3
 8005764:	2b20      	cmp	r3, #32
 8005766:	f040 8090 	bne.w	800588a <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_UART_Receive+0x2e>
 8005770:	88fb      	ldrh	r3, [r7, #6]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e088      	b.n	800588c <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_UART_Receive+0x40>
 8005784:	2302      	movs	r3, #2
 8005786:	e081      	b.n	800588c <HAL_UART_Receive+0x144>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2222      	movs	r2, #34	; 0x22
 800579a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800579e:	f7fc f9f5 	bl	8001b8c <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	88fa      	ldrh	r2, [r7, #6]
 80057a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057b8:	e05c      	b.n	8005874 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057be:	b29b      	uxth	r3, r3
 80057c0:	3b01      	subs	r3, #1
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d0:	d12b      	bne.n	800582a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	9300      	str	r3, [sp, #0]
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2200      	movs	r2, #0
 80057da:	2120      	movs	r1, #32
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 f979 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d001      	beq.n	80057ec <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e04f      	b.n	800588c <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d10c      	bne.n	8005812 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	b29b      	uxth	r3, r3
 8005800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005804:	b29a      	uxth	r2, r3
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	3302      	adds	r3, #2
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	e030      	b.n	8005874 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	b29b      	uxth	r3, r3
 800581a:	b2db      	uxtb	r3, r3
 800581c:	b29a      	uxth	r2, r3
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	3301      	adds	r3, #1
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	e024      	b.n	8005874 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	2120      	movs	r1, #32
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f94d 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e023      	b.n	800588c <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d108      	bne.n	800585e <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	60ba      	str	r2, [r7, #8]
 8005858:	b2ca      	uxtb	r2, r1
 800585a:	701a      	strb	r2, [r3, #0]
 800585c:	e00a      	b.n	8005874 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	60b9      	str	r1, [r7, #8]
 800586c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005878:	b29b      	uxth	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d19d      	bne.n	80057ba <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	e000      	b.n	800588c <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
  }
}
 800588c:	4618      	mov	r0, r3
 800588e:	3718      	adds	r7, #24
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b20      	cmp	r3, #32
 80058ac:	d166      	bne.n	800597c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <HAL_UART_Receive_DMA+0x26>
 80058b4:	88fb      	ldrh	r3, [r7, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e05f      	b.n	800597e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d101      	bne.n	80058cc <HAL_UART_Receive_DMA+0x38>
 80058c8:	2302      	movs	r3, #2
 80058ca:	e058      	b.n	800597e <HAL_UART_Receive_DMA+0xea>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	88fa      	ldrh	r2, [r7, #6]
 80058de:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2222      	movs	r2, #34	; 0x22
 80058ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	4a25      	ldr	r2, [pc, #148]	; (8005988 <HAL_UART_Receive_DMA+0xf4>)
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	4a24      	ldr	r2, [pc, #144]	; (800598c <HAL_UART_Receive_DMA+0xf8>)
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005902:	4a23      	ldr	r2, [pc, #140]	; (8005990 <HAL_UART_Receive_DMA+0xfc>)
 8005904:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590a:	2200      	movs	r2, #0
 800590c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3304      	adds	r3, #4
 800591e:	4619      	mov	r1, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	88fb      	ldrh	r3, [r7, #6]
 8005926:	f7fc ff31 	bl	800278c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800592a:	2300      	movs	r3, #0
 800592c:	613b      	str	r3, [r7, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	613b      	str	r3, [r7, #16]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005956:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f042 0201 	orr.w	r2, r2, #1
 8005966:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695a      	ldr	r2, [r3, #20]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005976:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005978:	2300      	movs	r3, #0
 800597a:	e000      	b.n	800597e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800597c:	2302      	movs	r3, #2
  }
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	080059bd 	.word	0x080059bd
 800598c:	08005a25 	.word	0x08005a25
 8005990:	08005a41 	.word	0x08005a41

08005994 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d11e      	bne.n	8005a16 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68da      	ldr	r2, [r3, #12]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059ec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695a      	ldr	r2, [r3, #20]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0201 	bic.w	r2, r2, #1
 80059fc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695a      	ldr	r2, [r3, #20]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005a16:	68f8      	ldr	r0, [r7, #12]
 8005a18:	f7fb f922 	bl	8000c60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f7ff ffae 	bl	8005994 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a38:	bf00      	nop
 8005a3a:	3710      	adds	r7, #16
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a50:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5c:	2b80      	cmp	r3, #128	; 0x80
 8005a5e:	bf0c      	ite	eq
 8005a60:	2301      	moveq	r3, #1
 8005a62:	2300      	movne	r3, #0
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b21      	cmp	r3, #33	; 0x21
 8005a72:	d108      	bne.n	8005a86 <UART_DMAError+0x46>
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a80:	68b8      	ldr	r0, [r7, #8]
 8005a82:	f000 f871 	bl	8005b68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a90:	2b40      	cmp	r3, #64	; 0x40
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b22      	cmp	r3, #34	; 0x22
 8005aa6:	d108      	bne.n	8005aba <UART_DMAError+0x7a>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005ab4:	68b8      	ldr	r0, [r7, #8]
 8005ab6:	f000 f86d 	bl	8005b94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	f043 0210 	orr.w	r2, r3, #16
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ac6:	68b8      	ldr	r0, [r7, #8]
 8005ac8:	f7ff ff6e 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005acc:	bf00      	nop
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae4:	e02c      	b.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d028      	beq.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d007      	beq.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005af4:	f7fc f84a 	bl	8001b8c <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d21d      	bcs.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68da      	ldr	r2, [r3, #12]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b12:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695a      	ldr	r2, [r3, #20]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0201 	bic.w	r2, r2, #1
 8005b22:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	e00f      	b.n	8005b60 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4013      	ands	r3, r2
 8005b4a:	68ba      	ldr	r2, [r7, #8]
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	461a      	mov	r2, r3
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d0c3      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005b7e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005baa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	695a      	ldr	r2, [r3, #20]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0201 	bic.w	r2, r2, #1
 8005bba:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	b085      	sub	sp, #20
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68da      	ldr	r2, [r3, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	430a      	orrs	r2, r1
 8005bee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
 8005bf8:	431a      	orrs	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c12:	f023 030c 	bic.w	r3, r3, #12
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	68f9      	ldr	r1, [r7, #12]
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699a      	ldr	r2, [r3, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	430a      	orrs	r2, r1
 8005c34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	69db      	ldr	r3, [r3, #28]
 8005c3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3e:	f040 818b 	bne.w	8005f58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4ac1      	ldr	r2, [pc, #772]	; (8005f4c <UART_SetConfig+0x37c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d005      	beq.n	8005c58 <UART_SetConfig+0x88>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4abf      	ldr	r2, [pc, #764]	; (8005f50 <UART_SetConfig+0x380>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	f040 80bd 	bne.w	8005dd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c58:	f7fd feaa 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8005c5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	461d      	mov	r5, r3
 8005c62:	f04f 0600 	mov.w	r6, #0
 8005c66:	46a8      	mov	r8, r5
 8005c68:	46b1      	mov	r9, r6
 8005c6a:	eb18 0308 	adds.w	r3, r8, r8
 8005c6e:	eb49 0409 	adc.w	r4, r9, r9
 8005c72:	4698      	mov	r8, r3
 8005c74:	46a1      	mov	r9, r4
 8005c76:	eb18 0805 	adds.w	r8, r8, r5
 8005c7a:	eb49 0906 	adc.w	r9, r9, r6
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c92:	4688      	mov	r8, r1
 8005c94:	4691      	mov	r9, r2
 8005c96:	eb18 0005 	adds.w	r0, r8, r5
 8005c9a:	eb49 0106 	adc.w	r1, r9, r6
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	461d      	mov	r5, r3
 8005ca4:	f04f 0600 	mov.w	r6, #0
 8005ca8:	196b      	adds	r3, r5, r5
 8005caa:	eb46 0406 	adc.w	r4, r6, r6
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4623      	mov	r3, r4
 8005cb2:	f7fa fa8d 	bl	80001d0 <__aeabi_uldivmod>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	460c      	mov	r4, r1
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4ba5      	ldr	r3, [pc, #660]	; (8005f54 <UART_SetConfig+0x384>)
 8005cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	461d      	mov	r5, r3
 8005ccc:	f04f 0600 	mov.w	r6, #0
 8005cd0:	46a9      	mov	r9, r5
 8005cd2:	46b2      	mov	sl, r6
 8005cd4:	eb19 0309 	adds.w	r3, r9, r9
 8005cd8:	eb4a 040a 	adc.w	r4, sl, sl
 8005cdc:	4699      	mov	r9, r3
 8005cde:	46a2      	mov	sl, r4
 8005ce0:	eb19 0905 	adds.w	r9, r9, r5
 8005ce4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ce8:	f04f 0100 	mov.w	r1, #0
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cf4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cf8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	4692      	mov	sl, r2
 8005d00:	eb19 0005 	adds.w	r0, r9, r5
 8005d04:	eb4a 0106 	adc.w	r1, sl, r6
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	461d      	mov	r5, r3
 8005d0e:	f04f 0600 	mov.w	r6, #0
 8005d12:	196b      	adds	r3, r5, r5
 8005d14:	eb46 0406 	adc.w	r4, r6, r6
 8005d18:	461a      	mov	r2, r3
 8005d1a:	4623      	mov	r3, r4
 8005d1c:	f7fa fa58 	bl	80001d0 <__aeabi_uldivmod>
 8005d20:	4603      	mov	r3, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	461a      	mov	r2, r3
 8005d26:	4b8b      	ldr	r3, [pc, #556]	; (8005f54 <UART_SetConfig+0x384>)
 8005d28:	fba3 1302 	umull	r1, r3, r3, r2
 8005d2c:	095b      	lsrs	r3, r3, #5
 8005d2e:	2164      	movs	r1, #100	; 0x64
 8005d30:	fb01 f303 	mul.w	r3, r1, r3
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	3332      	adds	r3, #50	; 0x32
 8005d3a:	4a86      	ldr	r2, [pc, #536]	; (8005f54 <UART_SetConfig+0x384>)
 8005d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d40:	095b      	lsrs	r3, r3, #5
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d48:	4498      	add	r8, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	461d      	mov	r5, r3
 8005d4e:	f04f 0600 	mov.w	r6, #0
 8005d52:	46a9      	mov	r9, r5
 8005d54:	46b2      	mov	sl, r6
 8005d56:	eb19 0309 	adds.w	r3, r9, r9
 8005d5a:	eb4a 040a 	adc.w	r4, sl, sl
 8005d5e:	4699      	mov	r9, r3
 8005d60:	46a2      	mov	sl, r4
 8005d62:	eb19 0905 	adds.w	r9, r9, r5
 8005d66:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	f04f 0200 	mov.w	r2, #0
 8005d72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d7e:	4689      	mov	r9, r1
 8005d80:	4692      	mov	sl, r2
 8005d82:	eb19 0005 	adds.w	r0, r9, r5
 8005d86:	eb4a 0106 	adc.w	r1, sl, r6
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	461d      	mov	r5, r3
 8005d90:	f04f 0600 	mov.w	r6, #0
 8005d94:	196b      	adds	r3, r5, r5
 8005d96:	eb46 0406 	adc.w	r4, r6, r6
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	f7fa fa17 	bl	80001d0 <__aeabi_uldivmod>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	461a      	mov	r2, r3
 8005da8:	4b6a      	ldr	r3, [pc, #424]	; (8005f54 <UART_SetConfig+0x384>)
 8005daa:	fba3 1302 	umull	r1, r3, r3, r2
 8005dae:	095b      	lsrs	r3, r3, #5
 8005db0:	2164      	movs	r1, #100	; 0x64
 8005db2:	fb01 f303 	mul.w	r3, r1, r3
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	3332      	adds	r3, #50	; 0x32
 8005dbc:	4a65      	ldr	r2, [pc, #404]	; (8005f54 <UART_SetConfig+0x384>)
 8005dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc2:	095b      	lsrs	r3, r3, #5
 8005dc4:	f003 0207 	and.w	r2, r3, #7
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4442      	add	r2, r8
 8005dce:	609a      	str	r2, [r3, #8]
 8005dd0:	e26f      	b.n	80062b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dd2:	f7fd fdd9 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8005dd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	461d      	mov	r5, r3
 8005ddc:	f04f 0600 	mov.w	r6, #0
 8005de0:	46a8      	mov	r8, r5
 8005de2:	46b1      	mov	r9, r6
 8005de4:	eb18 0308 	adds.w	r3, r8, r8
 8005de8:	eb49 0409 	adc.w	r4, r9, r9
 8005dec:	4698      	mov	r8, r3
 8005dee:	46a1      	mov	r9, r4
 8005df0:	eb18 0805 	adds.w	r8, r8, r5
 8005df4:	eb49 0906 	adc.w	r9, r9, r6
 8005df8:	f04f 0100 	mov.w	r1, #0
 8005dfc:	f04f 0200 	mov.w	r2, #0
 8005e00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e0c:	4688      	mov	r8, r1
 8005e0e:	4691      	mov	r9, r2
 8005e10:	eb18 0005 	adds.w	r0, r8, r5
 8005e14:	eb49 0106 	adc.w	r1, r9, r6
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	f04f 0600 	mov.w	r6, #0
 8005e22:	196b      	adds	r3, r5, r5
 8005e24:	eb46 0406 	adc.w	r4, r6, r6
 8005e28:	461a      	mov	r2, r3
 8005e2a:	4623      	mov	r3, r4
 8005e2c:	f7fa f9d0 	bl	80001d0 <__aeabi_uldivmod>
 8005e30:	4603      	mov	r3, r0
 8005e32:	460c      	mov	r4, r1
 8005e34:	461a      	mov	r2, r3
 8005e36:	4b47      	ldr	r3, [pc, #284]	; (8005f54 <UART_SetConfig+0x384>)
 8005e38:	fba3 2302 	umull	r2, r3, r3, r2
 8005e3c:	095b      	lsrs	r3, r3, #5
 8005e3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	461d      	mov	r5, r3
 8005e46:	f04f 0600 	mov.w	r6, #0
 8005e4a:	46a9      	mov	r9, r5
 8005e4c:	46b2      	mov	sl, r6
 8005e4e:	eb19 0309 	adds.w	r3, r9, r9
 8005e52:	eb4a 040a 	adc.w	r4, sl, sl
 8005e56:	4699      	mov	r9, r3
 8005e58:	46a2      	mov	sl, r4
 8005e5a:	eb19 0905 	adds.w	r9, r9, r5
 8005e5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e76:	4689      	mov	r9, r1
 8005e78:	4692      	mov	sl, r2
 8005e7a:	eb19 0005 	adds.w	r0, r9, r5
 8005e7e:	eb4a 0106 	adc.w	r1, sl, r6
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	461d      	mov	r5, r3
 8005e88:	f04f 0600 	mov.w	r6, #0
 8005e8c:	196b      	adds	r3, r5, r5
 8005e8e:	eb46 0406 	adc.w	r4, r6, r6
 8005e92:	461a      	mov	r2, r3
 8005e94:	4623      	mov	r3, r4
 8005e96:	f7fa f99b 	bl	80001d0 <__aeabi_uldivmod>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	460c      	mov	r4, r1
 8005e9e:	461a      	mov	r2, r3
 8005ea0:	4b2c      	ldr	r3, [pc, #176]	; (8005f54 <UART_SetConfig+0x384>)
 8005ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2164      	movs	r1, #100	; 0x64
 8005eaa:	fb01 f303 	mul.w	r3, r1, r3
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	3332      	adds	r3, #50	; 0x32
 8005eb4:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <UART_SetConfig+0x384>)
 8005eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ec2:	4498      	add	r8, r3
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	461d      	mov	r5, r3
 8005ec8:	f04f 0600 	mov.w	r6, #0
 8005ecc:	46a9      	mov	r9, r5
 8005ece:	46b2      	mov	sl, r6
 8005ed0:	eb19 0309 	adds.w	r3, r9, r9
 8005ed4:	eb4a 040a 	adc.w	r4, sl, sl
 8005ed8:	4699      	mov	r9, r3
 8005eda:	46a2      	mov	sl, r4
 8005edc:	eb19 0905 	adds.w	r9, r9, r5
 8005ee0:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ee4:	f04f 0100 	mov.w	r1, #0
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ef0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ef4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ef8:	4689      	mov	r9, r1
 8005efa:	4692      	mov	sl, r2
 8005efc:	eb19 0005 	adds.w	r0, r9, r5
 8005f00:	eb4a 0106 	adc.w	r1, sl, r6
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	461d      	mov	r5, r3
 8005f0a:	f04f 0600 	mov.w	r6, #0
 8005f0e:	196b      	adds	r3, r5, r5
 8005f10:	eb46 0406 	adc.w	r4, r6, r6
 8005f14:	461a      	mov	r2, r3
 8005f16:	4623      	mov	r3, r4
 8005f18:	f7fa f95a 	bl	80001d0 <__aeabi_uldivmod>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	461a      	mov	r2, r3
 8005f22:	4b0c      	ldr	r3, [pc, #48]	; (8005f54 <UART_SetConfig+0x384>)
 8005f24:	fba3 1302 	umull	r1, r3, r3, r2
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	2164      	movs	r1, #100	; 0x64
 8005f2c:	fb01 f303 	mul.w	r3, r1, r3
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	3332      	adds	r3, #50	; 0x32
 8005f36:	4a07      	ldr	r2, [pc, #28]	; (8005f54 <UART_SetConfig+0x384>)
 8005f38:	fba2 2303 	umull	r2, r3, r2, r3
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	f003 0207 	and.w	r2, r3, #7
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4442      	add	r2, r8
 8005f48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005f4a:	e1b2      	b.n	80062b2 <UART_SetConfig+0x6e2>
 8005f4c:	40011000 	.word	0x40011000
 8005f50:	40011400 	.word	0x40011400
 8005f54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4ad7      	ldr	r2, [pc, #860]	; (80062bc <UART_SetConfig+0x6ec>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d005      	beq.n	8005f6e <UART_SetConfig+0x39e>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4ad6      	ldr	r2, [pc, #856]	; (80062c0 <UART_SetConfig+0x6f0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	f040 80d1 	bne.w	8006110 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f6e:	f7fd fd1f 	bl	80039b0 <HAL_RCC_GetPCLK2Freq>
 8005f72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	469a      	mov	sl, r3
 8005f78:	f04f 0b00 	mov.w	fp, #0
 8005f7c:	46d0      	mov	r8, sl
 8005f7e:	46d9      	mov	r9, fp
 8005f80:	eb18 0308 	adds.w	r3, r8, r8
 8005f84:	eb49 0409 	adc.w	r4, r9, r9
 8005f88:	4698      	mov	r8, r3
 8005f8a:	46a1      	mov	r9, r4
 8005f8c:	eb18 080a 	adds.w	r8, r8, sl
 8005f90:	eb49 090b 	adc.w	r9, r9, fp
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fa0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fa4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fa8:	4688      	mov	r8, r1
 8005faa:	4691      	mov	r9, r2
 8005fac:	eb1a 0508 	adds.w	r5, sl, r8
 8005fb0:	eb4b 0609 	adc.w	r6, fp, r9
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 0200 	mov.w	r2, #0
 8005fbe:	f04f 0300 	mov.w	r3, #0
 8005fc2:	f04f 0400 	mov.w	r4, #0
 8005fc6:	0094      	lsls	r4, r2, #2
 8005fc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fcc:	008b      	lsls	r3, r1, #2
 8005fce:	461a      	mov	r2, r3
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	4631      	mov	r1, r6
 8005fd6:	f7fa f8fb 	bl	80001d0 <__aeabi_uldivmod>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	460c      	mov	r4, r1
 8005fde:	461a      	mov	r2, r3
 8005fe0:	4bb8      	ldr	r3, [pc, #736]	; (80062c4 <UART_SetConfig+0x6f4>)
 8005fe2:	fba3 2302 	umull	r2, r3, r3, r2
 8005fe6:	095b      	lsrs	r3, r3, #5
 8005fe8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	469b      	mov	fp, r3
 8005ff0:	f04f 0c00 	mov.w	ip, #0
 8005ff4:	46d9      	mov	r9, fp
 8005ff6:	46e2      	mov	sl, ip
 8005ff8:	eb19 0309 	adds.w	r3, r9, r9
 8005ffc:	eb4a 040a 	adc.w	r4, sl, sl
 8006000:	4699      	mov	r9, r3
 8006002:	46a2      	mov	sl, r4
 8006004:	eb19 090b 	adds.w	r9, r9, fp
 8006008:	eb4a 0a0c 	adc.w	sl, sl, ip
 800600c:	f04f 0100 	mov.w	r1, #0
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006018:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800601c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006020:	4689      	mov	r9, r1
 8006022:	4692      	mov	sl, r2
 8006024:	eb1b 0509 	adds.w	r5, fp, r9
 8006028:	eb4c 060a 	adc.w	r6, ip, sl
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	4619      	mov	r1, r3
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	f04f 0400 	mov.w	r4, #0
 800603e:	0094      	lsls	r4, r2, #2
 8006040:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006044:	008b      	lsls	r3, r1, #2
 8006046:	461a      	mov	r2, r3
 8006048:	4623      	mov	r3, r4
 800604a:	4628      	mov	r0, r5
 800604c:	4631      	mov	r1, r6
 800604e:	f7fa f8bf 	bl	80001d0 <__aeabi_uldivmod>
 8006052:	4603      	mov	r3, r0
 8006054:	460c      	mov	r4, r1
 8006056:	461a      	mov	r2, r3
 8006058:	4b9a      	ldr	r3, [pc, #616]	; (80062c4 <UART_SetConfig+0x6f4>)
 800605a:	fba3 1302 	umull	r1, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2164      	movs	r1, #100	; 0x64
 8006062:	fb01 f303 	mul.w	r3, r1, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	3332      	adds	r3, #50	; 0x32
 800606c:	4a95      	ldr	r2, [pc, #596]	; (80062c4 <UART_SetConfig+0x6f4>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006078:	4498      	add	r8, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	469b      	mov	fp, r3
 800607e:	f04f 0c00 	mov.w	ip, #0
 8006082:	46d9      	mov	r9, fp
 8006084:	46e2      	mov	sl, ip
 8006086:	eb19 0309 	adds.w	r3, r9, r9
 800608a:	eb4a 040a 	adc.w	r4, sl, sl
 800608e:	4699      	mov	r9, r3
 8006090:	46a2      	mov	sl, r4
 8006092:	eb19 090b 	adds.w	r9, r9, fp
 8006096:	eb4a 0a0c 	adc.w	sl, sl, ip
 800609a:	f04f 0100 	mov.w	r1, #0
 800609e:	f04f 0200 	mov.w	r2, #0
 80060a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060ae:	4689      	mov	r9, r1
 80060b0:	4692      	mov	sl, r2
 80060b2:	eb1b 0509 	adds.w	r5, fp, r9
 80060b6:	eb4c 060a 	adc.w	r6, ip, sl
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	4619      	mov	r1, r3
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	f04f 0400 	mov.w	r4, #0
 80060cc:	0094      	lsls	r4, r2, #2
 80060ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060d2:	008b      	lsls	r3, r1, #2
 80060d4:	461a      	mov	r2, r3
 80060d6:	4623      	mov	r3, r4
 80060d8:	4628      	mov	r0, r5
 80060da:	4631      	mov	r1, r6
 80060dc:	f7fa f878 	bl	80001d0 <__aeabi_uldivmod>
 80060e0:	4603      	mov	r3, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	461a      	mov	r2, r3
 80060e6:	4b77      	ldr	r3, [pc, #476]	; (80062c4 <UART_SetConfig+0x6f4>)
 80060e8:	fba3 1302 	umull	r1, r3, r3, r2
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	2164      	movs	r1, #100	; 0x64
 80060f0:	fb01 f303 	mul.w	r3, r1, r3
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	3332      	adds	r3, #50	; 0x32
 80060fa:	4a72      	ldr	r2, [pc, #456]	; (80062c4 <UART_SetConfig+0x6f4>)
 80060fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	f003 020f 	and.w	r2, r3, #15
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4442      	add	r2, r8
 800610c:	609a      	str	r2, [r3, #8]
 800610e:	e0d0      	b.n	80062b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006110:	f7fd fc3a 	bl	8003988 <HAL_RCC_GetPCLK1Freq>
 8006114:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	469a      	mov	sl, r3
 800611a:	f04f 0b00 	mov.w	fp, #0
 800611e:	46d0      	mov	r8, sl
 8006120:	46d9      	mov	r9, fp
 8006122:	eb18 0308 	adds.w	r3, r8, r8
 8006126:	eb49 0409 	adc.w	r4, r9, r9
 800612a:	4698      	mov	r8, r3
 800612c:	46a1      	mov	r9, r4
 800612e:	eb18 080a 	adds.w	r8, r8, sl
 8006132:	eb49 090b 	adc.w	r9, r9, fp
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006142:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006146:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800614a:	4688      	mov	r8, r1
 800614c:	4691      	mov	r9, r2
 800614e:	eb1a 0508 	adds.w	r5, sl, r8
 8006152:	eb4b 0609 	adc.w	r6, fp, r9
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	4619      	mov	r1, r3
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	f04f 0300 	mov.w	r3, #0
 8006164:	f04f 0400 	mov.w	r4, #0
 8006168:	0094      	lsls	r4, r2, #2
 800616a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800616e:	008b      	lsls	r3, r1, #2
 8006170:	461a      	mov	r2, r3
 8006172:	4623      	mov	r3, r4
 8006174:	4628      	mov	r0, r5
 8006176:	4631      	mov	r1, r6
 8006178:	f7fa f82a 	bl	80001d0 <__aeabi_uldivmod>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	461a      	mov	r2, r3
 8006182:	4b50      	ldr	r3, [pc, #320]	; (80062c4 <UART_SetConfig+0x6f4>)
 8006184:	fba3 2302 	umull	r2, r3, r3, r2
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	469b      	mov	fp, r3
 8006192:	f04f 0c00 	mov.w	ip, #0
 8006196:	46d9      	mov	r9, fp
 8006198:	46e2      	mov	sl, ip
 800619a:	eb19 0309 	adds.w	r3, r9, r9
 800619e:	eb4a 040a 	adc.w	r4, sl, sl
 80061a2:	4699      	mov	r9, r3
 80061a4:	46a2      	mov	sl, r4
 80061a6:	eb19 090b 	adds.w	r9, r9, fp
 80061aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061ae:	f04f 0100 	mov.w	r1, #0
 80061b2:	f04f 0200 	mov.w	r2, #0
 80061b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061c2:	4689      	mov	r9, r1
 80061c4:	4692      	mov	sl, r2
 80061c6:	eb1b 0509 	adds.w	r5, fp, r9
 80061ca:	eb4c 060a 	adc.w	r6, ip, sl
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4619      	mov	r1, r3
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	f04f 0400 	mov.w	r4, #0
 80061e0:	0094      	lsls	r4, r2, #2
 80061e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061e6:	008b      	lsls	r3, r1, #2
 80061e8:	461a      	mov	r2, r3
 80061ea:	4623      	mov	r3, r4
 80061ec:	4628      	mov	r0, r5
 80061ee:	4631      	mov	r1, r6
 80061f0:	f7f9 ffee 	bl	80001d0 <__aeabi_uldivmod>
 80061f4:	4603      	mov	r3, r0
 80061f6:	460c      	mov	r4, r1
 80061f8:	461a      	mov	r2, r3
 80061fa:	4b32      	ldr	r3, [pc, #200]	; (80062c4 <UART_SetConfig+0x6f4>)
 80061fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006200:	095b      	lsrs	r3, r3, #5
 8006202:	2164      	movs	r1, #100	; 0x64
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	3332      	adds	r3, #50	; 0x32
 800620e:	4a2d      	ldr	r2, [pc, #180]	; (80062c4 <UART_SetConfig+0x6f4>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	095b      	lsrs	r3, r3, #5
 8006216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800621a:	4498      	add	r8, r3
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	469b      	mov	fp, r3
 8006220:	f04f 0c00 	mov.w	ip, #0
 8006224:	46d9      	mov	r9, fp
 8006226:	46e2      	mov	sl, ip
 8006228:	eb19 0309 	adds.w	r3, r9, r9
 800622c:	eb4a 040a 	adc.w	r4, sl, sl
 8006230:	4699      	mov	r9, r3
 8006232:	46a2      	mov	sl, r4
 8006234:	eb19 090b 	adds.w	r9, r9, fp
 8006238:	eb4a 0a0c 	adc.w	sl, sl, ip
 800623c:	f04f 0100 	mov.w	r1, #0
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006248:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800624c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006250:	4689      	mov	r9, r1
 8006252:	4692      	mov	sl, r2
 8006254:	eb1b 0509 	adds.w	r5, fp, r9
 8006258:	eb4c 060a 	adc.w	r6, ip, sl
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4619      	mov	r1, r3
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	f04f 0300 	mov.w	r3, #0
 800626a:	f04f 0400 	mov.w	r4, #0
 800626e:	0094      	lsls	r4, r2, #2
 8006270:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006274:	008b      	lsls	r3, r1, #2
 8006276:	461a      	mov	r2, r3
 8006278:	4623      	mov	r3, r4
 800627a:	4628      	mov	r0, r5
 800627c:	4631      	mov	r1, r6
 800627e:	f7f9 ffa7 	bl	80001d0 <__aeabi_uldivmod>
 8006282:	4603      	mov	r3, r0
 8006284:	460c      	mov	r4, r1
 8006286:	461a      	mov	r2, r3
 8006288:	4b0e      	ldr	r3, [pc, #56]	; (80062c4 <UART_SetConfig+0x6f4>)
 800628a:	fba3 1302 	umull	r1, r3, r3, r2
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	2164      	movs	r1, #100	; 0x64
 8006292:	fb01 f303 	mul.w	r3, r1, r3
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	011b      	lsls	r3, r3, #4
 800629a:	3332      	adds	r3, #50	; 0x32
 800629c:	4a09      	ldr	r2, [pc, #36]	; (80062c4 <UART_SetConfig+0x6f4>)
 800629e:	fba2 2303 	umull	r2, r3, r2, r3
 80062a2:	095b      	lsrs	r3, r3, #5
 80062a4:	f003 020f 	and.w	r2, r3, #15
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4442      	add	r2, r8
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	e7ff      	b.n	80062b2 <UART_SetConfig+0x6e2>
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062bc:	40011000 	.word	0x40011000
 80062c0:	40011400 	.word	0x40011400
 80062c4:	51eb851f 	.word	0x51eb851f

080062c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80062c8:	b084      	sub	sp, #16
 80062ca:	b480      	push	{r7}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	f107 001c 	add.w	r0, r7, #28
 80062d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80062de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80062e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80062e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80062e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80062ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80062ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 80062f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80062f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006302:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	b004      	add	sp, #16
 800631c:	4770      	bx	lr

0800631e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800632c:	4618      	mov	r0, r3
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800635a:	b580      	push	{r7, lr}
 800635c:	b082      	sub	sp, #8
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2203      	movs	r2, #3
 8006366:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006368:	2002      	movs	r0, #2
 800636a:	f7fb fc1b 	bl	8001ba4 <HAL_Delay>
  
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0303 	and.w	r3, r3, #3
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063b2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80063b8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80063be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80063ce:	f023 030f 	bic.w	r3, r3, #15
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	b2db      	uxtb	r3, r3
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3314      	adds	r3, #20
 8006410:	461a      	mov	r2, r3
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	4413      	add	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
}  
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006428:	b480      	push	{r7}
 800642a:	b085      	sub	sp, #20
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006432:	2300      	movs	r3, #0
 8006434:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800644e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006454:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800645a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006466:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	431a      	orrs	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006472:	2300      	movs	r3, #0

}
 8006474:	4618      	mov	r0, r3
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b088      	sub	sp, #32
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800648e:	2310      	movs	r3, #16
 8006490:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006492:	2340      	movs	r3, #64	; 0x40
 8006494:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006496:	2300      	movs	r3, #0
 8006498:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800649a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800649e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064a0:	f107 0308 	add.w	r3, r7, #8
 80064a4:	4619      	mov	r1, r3
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f7ff ff74 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80064ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b0:	2110      	movs	r1, #16
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fa40 	bl	8006938 <SDMMC_GetCmdResp1>
 80064b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064ba:	69fb      	ldr	r3, [r7, #28]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80064d2:	2311      	movs	r3, #17
 80064d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064d6:	2340      	movs	r3, #64	; 0x40
 80064d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064da:	2300      	movs	r3, #0
 80064dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064e4:	f107 0308 	add.w	r3, r7, #8
 80064e8:	4619      	mov	r1, r3
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7ff ff52 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80064f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80064f4:	2111      	movs	r1, #17
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 fa1e 	bl	8006938 <SDMMC_GetCmdResp1>
 80064fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064fe:	69fb      	ldr	r3, [r7, #28]
}
 8006500:	4618      	mov	r0, r3
 8006502:	3720      	adds	r7, #32
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b088      	sub	sp, #32
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006516:	2312      	movs	r3, #18
 8006518:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800651a:	2340      	movs	r3, #64	; 0x40
 800651c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800651e:	2300      	movs	r3, #0
 8006520:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006526:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006528:	f107 0308 	add.w	r3, r7, #8
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff ff30 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	2112      	movs	r1, #18
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9fc 	bl	8006938 <SDMMC_GetCmdResp1>
 8006540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006542:	69fb      	ldr	r3, [r7, #28]
}
 8006544:	4618      	mov	r0, r3
 8006546:	3720      	adds	r7, #32
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800655a:	2318      	movs	r3, #24
 800655c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800655e:	2340      	movs	r3, #64	; 0x40
 8006560:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800656a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800656c:	f107 0308 	add.w	r3, r7, #8
 8006570:	4619      	mov	r1, r3
 8006572:	6878      	ldr	r0, [r7, #4]
 8006574:	f7ff ff0e 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006578:	f241 3288 	movw	r2, #5000	; 0x1388
 800657c:	2118      	movs	r1, #24
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f9da 	bl	8006938 <SDMMC_GetCmdResp1>
 8006584:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006586:	69fb      	ldr	r3, [r7, #28]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3720      	adds	r7, #32
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b088      	sub	sp, #32
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800659e:	2319      	movs	r3, #25
 80065a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065a2:	2340      	movs	r3, #64	; 0x40
 80065a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065b0:	f107 0308 	add.w	r3, r7, #8
 80065b4:	4619      	mov	r1, r3
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7ff feec 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80065bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80065c0:	2119      	movs	r1, #25
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f000 f9b8 	bl	8006938 <SDMMC_GetCmdResp1>
 80065c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ca:	69fb      	ldr	r3, [r7, #28]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3720      	adds	r7, #32
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b088      	sub	sp, #32
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80065dc:	2300      	movs	r3, #0
 80065de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80065e0:	230c      	movs	r3, #12
 80065e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065e4:	2340      	movs	r3, #64	; 0x40
 80065e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065e8:	2300      	movs	r3, #0
 80065ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065f2:	f107 0308 	add.w	r3, r7, #8
 80065f6:	4619      	mov	r1, r3
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f7ff fecb 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80065fe:	4a05      	ldr	r2, [pc, #20]	; (8006614 <SDMMC_CmdStopTransfer+0x40>)
 8006600:	210c      	movs	r1, #12
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f000 f998 	bl	8006938 <SDMMC_GetCmdResp1>
 8006608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800660a:	69fb      	ldr	r3, [r7, #28]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3720      	adds	r7, #32
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	05f5e100 	.word	0x05f5e100

08006618 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08a      	sub	sp, #40	; 0x28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006628:	2307      	movs	r3, #7
 800662a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800662c:	2340      	movs	r3, #64	; 0x40
 800662e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006630:	2300      	movs	r3, #0
 8006632:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006638:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800663a:	f107 0310 	add.w	r3, r7, #16
 800663e:	4619      	mov	r1, r3
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f7ff fea7 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006646:	f241 3288 	movw	r2, #5000	; 0x1388
 800664a:	2107      	movs	r1, #7
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f973 	bl	8006938 <SDMMC_GetCmdResp1>
 8006652:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006656:	4618      	mov	r0, r3
 8006658:	3728      	adds	r7, #40	; 0x28
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b088      	sub	sp, #32
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800666a:	2300      	movs	r3, #0
 800666c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800666e:	2300      	movs	r3, #0
 8006670:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006672:	2300      	movs	r3, #0
 8006674:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800667a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800667c:	f107 0308 	add.w	r3, r7, #8
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f7ff fe86 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 f92d 	bl	80068e8 <SDMMC_GetCmdError>
 800668e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006690:	69fb      	ldr	r3, [r7, #28]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3720      	adds	r7, #32
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b088      	sub	sp, #32
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80066a2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80066a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80066a8:	2308      	movs	r3, #8
 80066aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066ac:	2340      	movs	r3, #64	; 0x40
 80066ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066b0:	2300      	movs	r3, #0
 80066b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066ba:	f107 0308 	add.w	r3, r7, #8
 80066be:	4619      	mov	r1, r3
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7ff fe67 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fb16 	bl	8006cf8 <SDMMC_GetCmdResp7>
 80066cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066ce:	69fb      	ldr	r3, [r7, #28]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3720      	adds	r7, #32
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b088      	sub	sp, #32
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80066e6:	2337      	movs	r3, #55	; 0x37
 80066e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066ea:	2340      	movs	r3, #64	; 0x40
 80066ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066ee:	2300      	movs	r3, #0
 80066f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066f8:	f107 0308 	add.w	r3, r7, #8
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fe48 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	2137      	movs	r1, #55	; 0x37
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f914 	bl	8006938 <SDMMC_GetCmdResp1>
 8006710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006712:	69fb      	ldr	r3, [r7, #28]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3720      	adds	r7, #32
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800672c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006730:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006732:	2329      	movs	r3, #41	; 0x29
 8006734:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006736:	2340      	movs	r3, #64	; 0x40
 8006738:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800673a:	2300      	movs	r3, #0
 800673c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800673e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006742:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fe22 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fa23 	bl	8006b9c <SDMMC_GetCmdResp3>
 8006756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006758:	69fb      	ldr	r3, [r7, #28]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3720      	adds	r7, #32
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006762:	b580      	push	{r7, lr}
 8006764:	b088      	sub	sp, #32
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
 800676a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006770:	2306      	movs	r3, #6
 8006772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006774:	2340      	movs	r3, #64	; 0x40
 8006776:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800677c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006780:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006782:	f107 0308 	add.w	r3, r7, #8
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f7ff fe03 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800678e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006792:	2106      	movs	r1, #6
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f8cf 	bl	8006938 <SDMMC_GetCmdResp1>
 800679a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800679c:	69fb      	ldr	r3, [r7, #28]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3720      	adds	r7, #32
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b088      	sub	sp, #32
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80067b2:	2333      	movs	r3, #51	; 0x33
 80067b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067b6:	2340      	movs	r3, #64	; 0x40
 80067b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067ba:	2300      	movs	r3, #0
 80067bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067c4:	f107 0308 	add.w	r3, r7, #8
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff fde2 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80067d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d4:	2133      	movs	r1, #51	; 0x33
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8ae 	bl	8006938 <SDMMC_GetCmdResp1>
 80067dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067de:	69fb      	ldr	r3, [r7, #28]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80067f0:	2300      	movs	r3, #0
 80067f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80067f4:	2302      	movs	r3, #2
 80067f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80067f8:	23c0      	movs	r3, #192	; 0xc0
 80067fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067fc:	2300      	movs	r3, #0
 80067fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006804:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006806:	f107 0308 	add.w	r3, r7, #8
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f7ff fdc1 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 f97c 	bl	8006b10 <SDMMC_GetCmdResp2>
 8006818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800681a:	69fb      	ldr	r3, [r7, #28]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3720      	adds	r7, #32
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b088      	sub	sp, #32
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006832:	2309      	movs	r3, #9
 8006834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006836:	23c0      	movs	r3, #192	; 0xc0
 8006838:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800683a:	2300      	movs	r3, #0
 800683c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800683e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006842:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006844:	f107 0308 	add.w	r3, r7, #8
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff fda2 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f95d 	bl	8006b10 <SDMMC_GetCmdResp2>
 8006856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006858:	69fb      	ldr	r3, [r7, #28]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3720      	adds	r7, #32
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b088      	sub	sp, #32
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800686c:	2300      	movs	r3, #0
 800686e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006870:	2303      	movs	r3, #3
 8006872:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006878:	2300      	movs	r3, #0
 800687a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800687c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006880:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006882:	f107 0308 	add.w	r3, r7, #8
 8006886:	4619      	mov	r1, r3
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7ff fd83 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	2103      	movs	r1, #3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f9bc 	bl	8006c10 <SDMMC_GetCmdResp6>
 8006898:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800689a:	69fb      	ldr	r3, [r7, #28]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80068b2:	230d      	movs	r3, #13
 80068b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068b6:	2340      	movs	r3, #64	; 0x40
 80068b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068ba:	2300      	movs	r3, #0
 80068bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068c4:	f107 0308 	add.w	r3, r7, #8
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fd62 	bl	8006394 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80068d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80068d4:	210d      	movs	r1, #13
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f82e 	bl	8006938 <SDMMC_GetCmdResp1>
 80068dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068de:	69fb      	ldr	r3, [r7, #28]
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3720      	adds	r7, #32
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80068e8:	b490      	push	{r4, r7}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <SDMMC_GetCmdError+0x48>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a0f      	ldr	r2, [pc, #60]	; (8006934 <SDMMC_GetCmdError+0x4c>)
 80068f6:	fba2 2303 	umull	r2, r3, r2, r3
 80068fa:	0a5b      	lsrs	r3, r3, #9
 80068fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006900:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006904:	4623      	mov	r3, r4
 8006906:	1e5c      	subs	r4, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d102      	bne.n	8006912 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800690c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006910:	e009      	b.n	8006926 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0f2      	beq.n	8006904 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	22c5      	movs	r2, #197	; 0xc5
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006924:	2300      	movs	r3, #0
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bc90      	pop	{r4, r7}
 800692e:	4770      	bx	lr
 8006930:	20000000 	.word	0x20000000
 8006934:	10624dd3 	.word	0x10624dd3

08006938 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006938:	b590      	push	{r4, r7, lr}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	460b      	mov	r3, r1
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006946:	4b6f      	ldr	r3, [pc, #444]	; (8006b04 <SDMMC_GetCmdResp1+0x1cc>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a6f      	ldr	r2, [pc, #444]	; (8006b08 <SDMMC_GetCmdResp1+0x1d0>)
 800694c:	fba2 2303 	umull	r2, r3, r2, r3
 8006950:	0a5b      	lsrs	r3, r3, #9
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006958:	4623      	mov	r3, r4
 800695a:	1e5c      	subs	r4, r3, #1
 800695c:	2b00      	cmp	r3, #0
 800695e:	d102      	bne.n	8006966 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006964:	e0c9      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f0      	beq.n	8006958 <SDMMC_GetCmdResp1+0x20>
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1eb      	bne.n	8006958 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2204      	movs	r2, #4
 8006990:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006992:	2304      	movs	r3, #4
 8006994:	e0b1      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d004      	beq.n	80069ac <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0a6      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	22c5      	movs	r2, #197	; 0xc5
 80069b0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff fd18 	bl	80063e8 <SDIO_GetCommandResponse>
 80069b8:	4603      	mov	r3, r0
 80069ba:	461a      	mov	r2, r3
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	4293      	cmp	r3, r2
 80069c0:	d001      	beq.n	80069c6 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e099      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80069c6:	2100      	movs	r1, #0
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff fd1a 	bl	8006402 <SDIO_GetResponse>
 80069ce:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4b4e      	ldr	r3, [pc, #312]	; (8006b0c <SDMMC_GetCmdResp1+0x1d4>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80069da:	2300      	movs	r3, #0
 80069dc:	e08d      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	da02      	bge.n	80069ea <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80069e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069e8:	e087      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80069f4:	2340      	movs	r3, #64	; 0x40
 80069f6:	e080      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d001      	beq.n	8006a06 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006a02:	2380      	movs	r3, #128	; 0x80
 8006a04:	e079      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d002      	beq.n	8006a16 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006a10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a14:	e071      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a24:	e069      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d002      	beq.n	8006a36 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a34:	e061      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006a40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a44:	e059      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d002      	beq.n	8006a56 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a54:	e051      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a64:	e049      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d002      	beq.n	8006a76 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006a70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a74:	e041      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d002      	beq.n	8006a86 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a84:	e039      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d002      	beq.n	8006a96 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006a94:	e031      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006aa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006aa4:	e029      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d002      	beq.n	8006ab6 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006ab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ab4:	e021      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d002      	beq.n	8006ac6 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006ac0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006ac4:	e019      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d002      	beq.n	8006ad6 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ad4:	e011      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d002      	beq.n	8006ae6 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006ae0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ae4:	e009      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f003 0308 	and.w	r3, r3, #8
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d002      	beq.n	8006af6 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006af0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006af4:	e001      	b.n	8006afa <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006af6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000000 	.word	0x20000000
 8006b08:	10624dd3 	.word	0x10624dd3
 8006b0c:	fdffe008 	.word	0xfdffe008

08006b10 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006b10:	b490      	push	{r4, r7}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b18:	4b1e      	ldr	r3, [pc, #120]	; (8006b94 <SDMMC_GetCmdResp2+0x84>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a1e      	ldr	r2, [pc, #120]	; (8006b98 <SDMMC_GetCmdResp2+0x88>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	0a5b      	lsrs	r3, r3, #9
 8006b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	1e5c      	subs	r4, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b38:	e026      	b.n	8006b88 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <SDMMC_GetCmdResp2+0x1c>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1eb      	bne.n	8006b2c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2204      	movs	r2, #4
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b66:	2304      	movs	r3, #4
 8006b68:	e00e      	b.n	8006b88 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e003      	b.n	8006b88 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	22c5      	movs	r2, #197	; 0xc5
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bc90      	pop	{r4, r7}
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	20000000 	.word	0x20000000
 8006b98:	10624dd3 	.word	0x10624dd3

08006b9c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006b9c:	b490      	push	{r4, r7}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ba4:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <SDMMC_GetCmdResp3+0x6c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a18      	ldr	r2, [pc, #96]	; (8006c0c <SDMMC_GetCmdResp3+0x70>)
 8006baa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bae:	0a5b      	lsrs	r3, r3, #9
 8006bb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006bb8:	4623      	mov	r3, r4
 8006bba:	1e5c      	subs	r4, r3, #1
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d102      	bne.n	8006bc6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006bc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bc4:	e01b      	b.n	8006bfe <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d0f0      	beq.n	8006bb8 <SDMMC_GetCmdResp3+0x1c>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1eb      	bne.n	8006bb8 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d004      	beq.n	8006bf6 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2204      	movs	r2, #4
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006bf2:	2304      	movs	r3, #4
 8006bf4:	e003      	b.n	8006bfe <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	22c5      	movs	r2, #197	; 0xc5
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bc90      	pop	{r4, r7}
 8006c06:	4770      	bx	lr
 8006c08:	20000000 	.word	0x20000000
 8006c0c:	10624dd3 	.word	0x10624dd3

08006c10 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006c10:	b590      	push	{r4, r7, lr}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	460b      	mov	r3, r1
 8006c1a:	607a      	str	r2, [r7, #4]
 8006c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c1e:	4b34      	ldr	r3, [pc, #208]	; (8006cf0 <SDMMC_GetCmdResp6+0xe0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a34      	ldr	r2, [pc, #208]	; (8006cf4 <SDMMC_GetCmdResp6+0xe4>)
 8006c24:	fba2 2303 	umull	r2, r3, r2, r3
 8006c28:	0a5b      	lsrs	r3, r3, #9
 8006c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c2e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006c32:	4623      	mov	r3, r4
 8006c34:	1e5c      	subs	r4, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d102      	bne.n	8006c40 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c3e:	e052      	b.n	8006ce6 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c44:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d0f0      	beq.n	8006c32 <SDMMC_GetCmdResp6+0x22>
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1eb      	bne.n	8006c32 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5e:	f003 0304 	and.w	r3, r3, #4
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d004      	beq.n	8006c70 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2204      	movs	r2, #4
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	e03a      	b.n	8006ce6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d004      	beq.n	8006c86 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e02f      	b.n	8006ce6 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff fbae 	bl	80063e8 <SDIO_GetCommandResponse>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	7afb      	ldrb	r3, [r7, #11]
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d001      	beq.n	8006c9a <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e025      	b.n	8006ce6 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	22c5      	movs	r2, #197	; 0xc5
 8006c9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	68f8      	ldr	r0, [r7, #12]
 8006ca4:	f7ff fbad 	bl	8006402 <SDIO_GetResponse>
 8006ca8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d106      	bne.n	8006cc2 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	0c1b      	lsrs	r3, r3, #16
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	e011      	b.n	8006ce6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cd0:	e009      	b.n	8006ce6 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d002      	beq.n	8006ce2 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ce0:	e001      	b.n	8006ce6 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ce2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	371c      	adds	r7, #28
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd90      	pop	{r4, r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000000 	.word	0x20000000
 8006cf4:	10624dd3 	.word	0x10624dd3

08006cf8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006cf8:	b490      	push	{r4, r7}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d00:	4b21      	ldr	r3, [pc, #132]	; (8006d88 <SDMMC_GetCmdResp7+0x90>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a21      	ldr	r2, [pc, #132]	; (8006d8c <SDMMC_GetCmdResp7+0x94>)
 8006d06:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0a:	0a5b      	lsrs	r3, r3, #9
 8006d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d10:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d14:	4623      	mov	r3, r4
 8006d16:	1e5c      	subs	r4, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d20:	e02c      	b.n	8006d7c <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d26:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <SDMMC_GetCmdResp7+0x1c>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1eb      	bne.n	8006d14 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d40:	f003 0304 	and.w	r3, r3, #4
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2204      	movs	r2, #4
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d4e:	2304      	movs	r3, #4
 8006d50:	e014      	b.n	8006d7c <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d004      	beq.n	8006d68 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e009      	b.n	8006d7c <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d002      	beq.n	8006d7a <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2240      	movs	r2, #64	; 0x40
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006d7a:	2300      	movs	r3, #0
  
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bc90      	pop	{r4, r7}
 8006d84:	4770      	bx	lr
 8006d86:	bf00      	nop
 8006d88:	20000000 	.word	0x20000000
 8006d8c:	10624dd3 	.word	0x10624dd3

08006d90 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006d94:	4904      	ldr	r1, [pc, #16]	; (8006da8 <MX_FATFS_Init+0x18>)
 8006d96:	4805      	ldr	r0, [pc, #20]	; (8006dac <MX_FATFS_Init+0x1c>)
 8006d98:	f000 faa4 	bl	80072e4 <FATFS_LinkDriver>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4b03      	ldr	r3, [pc, #12]	; (8006db0 <MX_FATFS_Init+0x20>)
 8006da2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006da4:	bf00      	nop
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20004470 	.word	0x20004470
 8006dac:	0800a324 	.word	0x0800a324
 8006db0:	2000446c 	.word	0x2000446c

08006db4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006dbe:	f000 f896 	bl	8006eee <BSP_SD_IsDetected>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d001      	beq.n	8006dcc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e012      	b.n	8006df2 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006dcc:	480b      	ldr	r0, [pc, #44]	; (8006dfc <BSP_SD_Init+0x48>)
 8006dce:	f7fc fe35 	bl	8003a3c <HAL_SD_Init>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d109      	bne.n	8006df0 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006ddc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006de0:	4806      	ldr	r0, [pc, #24]	; (8006dfc <BSP_SD_Init+0x48>)
 8006de2:	f7fd fbf5 	bl	80045d0 <HAL_SD_ConfigWideBusOperation>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d001      	beq.n	8006df0 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006df0:	79fb      	ldrb	r3, [r7, #7]
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3708      	adds	r7, #8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	2000428c 	.word	0x2000428c

08006e00 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b086      	sub	sp, #24
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	68f9      	ldr	r1, [r7, #12]
 8006e16:	4806      	ldr	r0, [pc, #24]	; (8006e30 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006e18:	f7fc fea0 	bl	8003b5c <HAL_SD_ReadBlocks_DMA>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006e26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	2000428c 	.word	0x2000428c

08006e34 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	68f9      	ldr	r1, [r7, #12]
 8006e4a:	4806      	ldr	r0, [pc, #24]	; (8006e64 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006e4c:	f7fc ff70 	bl	8003d30 <HAL_SD_WriteBlocks_DMA>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	2000428c 	.word	0x2000428c

08006e68 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006e6c:	4805      	ldr	r0, [pc, #20]	; (8006e84 <BSP_SD_GetCardState+0x1c>)
 8006e6e:	f7fd fc2b 	bl	80046c8 <HAL_SD_GetCardState>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	bf14      	ite	ne
 8006e78:	2301      	movne	r3, #1
 8006e7a:	2300      	moveq	r3, #0
 8006e7c:	b2db      	uxtb	r3, r3
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	2000428c 	.word	0x2000428c

08006e88 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	4803      	ldr	r0, [pc, #12]	; (8006ea0 <BSP_SD_GetCardInfo+0x18>)
 8006e94:	f7fd fb70 	bl	8004578 <HAL_SD_GetCardInfo>
}
 8006e98:	bf00      	nop
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000428c 	.word	0x2000428c

08006ea4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006eac:	f000 f818 	bl	8006ee0 <BSP_SD_AbortCallback>
}
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006ec0:	f000 f9a8 	bl	8007214 <BSP_SD_WriteCpltCallback>
}
 8006ec4:	bf00      	nop
 8006ec6:	3708      	adds	r7, #8
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006ed4:	f000 f9ac 	bl	8007230 <BSP_SD_ReadCpltCallback>
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	af00      	add	r7, sp, #0

}
 8006ee4:	bf00      	nop
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b083      	sub	sp, #12
 8006ef2:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	b2db      	uxtb	r3, r3
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8006f10:	f000 fa34 	bl	800737c <osKernelSysTick>
 8006f14:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8006f16:	e006      	b.n	8006f26 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006f18:	f7ff ffa6 	bl	8006e68 <BSP_SD_GetCardState>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e009      	b.n	8006f3a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8006f26:	f000 fa29 	bl	800737c <osKernelSysTick>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	1ad3      	subs	r3, r2, r3
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d8f0      	bhi.n	8006f18 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b082      	sub	sp, #8
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006f4e:	4b0b      	ldr	r3, [pc, #44]	; (8006f7c <SD_CheckStatus+0x38>)
 8006f50:	2201      	movs	r2, #1
 8006f52:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006f54:	f7ff ff88 	bl	8006e68 <BSP_SD_GetCardState>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <SD_CheckStatus+0x38>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	b2db      	uxtb	r3, r3
 8006f64:	f023 0301 	bic.w	r3, r3, #1
 8006f68:	b2da      	uxtb	r2, r3
 8006f6a:	4b04      	ldr	r3, [pc, #16]	; (8006f7c <SD_CheckStatus+0x38>)
 8006f6c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006f6e:	4b03      	ldr	r3, [pc, #12]	; (8006f7c <SD_CheckStatus+0x38>)
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	b2db      	uxtb	r3, r3
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20000009 	.word	0x20000009

08006f80 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006f80:	b590      	push	{r4, r7, lr}
 8006f82:	b087      	sub	sp, #28
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8006f8a:	4b20      	ldr	r3, [pc, #128]	; (800700c <SD_initialize+0x8c>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006f90:	f000 f9e8 	bl	8007364 <osKernelRunning>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d030      	beq.n	8006ffc <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006f9a:	f7ff ff0b 	bl	8006db4 <BSP_SD_Init>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d107      	bne.n	8006fb4 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7ff ffcc 	bl	8006f44 <SD_CheckStatus>
 8006fac:	4603      	mov	r3, r0
 8006fae:	461a      	mov	r2, r3
 8006fb0:	4b16      	ldr	r3, [pc, #88]	; (800700c <SD_initialize+0x8c>)
 8006fb2:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006fb4:	4b15      	ldr	r3, [pc, #84]	; (800700c <SD_initialize+0x8c>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d01e      	beq.n	8006ffc <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8006fbe:	4b14      	ldr	r3, [pc, #80]	; (8007010 <SD_initialize+0x90>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10e      	bne.n	8006fe4 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006fc6:	4b13      	ldr	r3, [pc, #76]	; (8007014 <SD_initialize+0x94>)
 8006fc8:	f107 0408 	add.w	r4, r7, #8
 8006fcc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006fce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8006fd2:	f107 0308 	add.w	r3, r7, #8
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f000 fadb 	bl	8007594 <osMessageCreate>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	; (8007010 <SD_initialize+0x90>)
 8006fe2:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8006fe4:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <SD_initialize+0x90>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <SD_initialize+0x8c>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	f043 0301 	orr.w	r3, r3, #1
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	4b04      	ldr	r3, [pc, #16]	; (800700c <SD_initialize+0x8c>)
 8006ffa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006ffc:	4b03      	ldr	r3, [pc, #12]	; (800700c <SD_initialize+0x8c>)
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b2db      	uxtb	r3, r3
}
 8007002:	4618      	mov	r0, r3
 8007004:	371c      	adds	r7, #28
 8007006:	46bd      	mov	sp, r7
 8007008:	bd90      	pop	{r4, r7, pc}
 800700a:	bf00      	nop
 800700c:	20000009 	.word	0x20000009
 8007010:	20000424 	.word	0x20000424
 8007014:	0800a2ec 	.word	0x0800a2ec

08007018 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007022:	79fb      	ldrb	r3, [r7, #7]
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff ff8d 	bl	8006f44 <SD_CheckStatus>
 800702a:	4603      	mov	r3, r0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3708      	adds	r7, #8
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b08a      	sub	sp, #40	; 0x28
 8007038:	af00      	add	r7, sp, #0
 800703a:	60b9      	str	r1, [r7, #8]
 800703c:	607a      	str	r2, [r7, #4]
 800703e:	603b      	str	r3, [r7, #0]
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800704a:	f247 5030 	movw	r0, #30000	; 0x7530
 800704e:	f7ff ff5b 	bl	8006f08 <SD_CheckStatusWithTimeout>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	da02      	bge.n	800705e <SD_read+0x2a>
  {
    return res;
 8007058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800705c:	e032      	b.n	80070c4 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	68b8      	ldr	r0, [r7, #8]
 8007064:	f7ff fecc 	bl	8006e00 <BSP_SD_ReadBlocks_DMA>
 8007068:	4603      	mov	r3, r0
 800706a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800706e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007072:	2b00      	cmp	r3, #0
 8007074:	d124      	bne.n	80070c0 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007076:	4b15      	ldr	r3, [pc, #84]	; (80070cc <SD_read+0x98>)
 8007078:	6819      	ldr	r1, [r3, #0]
 800707a:	f107 0314 	add.w	r3, r7, #20
 800707e:	f247 5230 	movw	r2, #30000	; 0x7530
 8007082:	4618      	mov	r0, r3
 8007084:	f000 faf0 	bl	8007668 <osMessageGet>

    if (event.status == osEventMessage)
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b10      	cmp	r3, #16
 800708c:	d118      	bne.n	80070c0 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d115      	bne.n	80070c0 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007094:	f000 f972 	bl	800737c <osKernelSysTick>
 8007098:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800709a:	e008      	b.n	80070ae <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800709c:	f7ff fee4 	bl	8006e68 <BSP_SD_GetCardState>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <SD_read+0x7a>
              {
                res = RES_OK;
 80070a6:	2300      	movs	r3, #0
 80070a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80070ac:	e008      	b.n	80070c0 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80070ae:	f000 f965 	bl	800737c <osKernelSysTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	f247 522f 	movw	r2, #29999	; 0x752f
 80070bc:	4293      	cmp	r3, r2
 80070be:	d9ed      	bls.n	800709c <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80070c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3728      	adds	r7, #40	; 0x28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000424 	.word	0x20000424

080070d0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	60b9      	str	r1, [r7, #8]
 80070d8:	607a      	str	r2, [r7, #4]
 80070da:	603b      	str	r3, [r7, #0]
 80070dc:	4603      	mov	r3, r0
 80070de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80070e6:	f247 5030 	movw	r0, #30000	; 0x7530
 80070ea:	f7ff ff0d 	bl	8006f08 <SD_CheckStatusWithTimeout>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	da02      	bge.n	80070fa <SD_write+0x2a>
  {
    return res;
 80070f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070f8:	e02e      	b.n	8007158 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	68b8      	ldr	r0, [r7, #8]
 8007100:	f7ff fe98 	bl	8006e34 <BSP_SD_WriteBlocks_DMA>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d124      	bne.n	8007154 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800710a:	4b15      	ldr	r3, [pc, #84]	; (8007160 <SD_write+0x90>)
 800710c:	6819      	ldr	r1, [r3, #0]
 800710e:	f107 0314 	add.w	r3, r7, #20
 8007112:	f247 5230 	movw	r2, #30000	; 0x7530
 8007116:	4618      	mov	r0, r3
 8007118:	f000 faa6 	bl	8007668 <osMessageGet>

    if (event.status == osEventMessage)
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	2b10      	cmp	r3, #16
 8007120:	d118      	bne.n	8007154 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d115      	bne.n	8007154 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007128:	f000 f928 	bl	800737c <osKernelSysTick>
 800712c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800712e:	e008      	b.n	8007142 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007130:	f7ff fe9a 	bl	8006e68 <BSP_SD_GetCardState>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <SD_write+0x72>
          {
            res = RES_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007140:	e008      	b.n	8007154 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007142:	f000 f91b 	bl	800737c <osKernelSysTick>
 8007146:	4602      	mov	r2, r0
 8007148:	6a3b      	ldr	r3, [r7, #32]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	f247 522f 	movw	r2, #29999	; 0x752f
 8007150:	4293      	cmp	r3, r2
 8007152:	d9ed      	bls.n	8007130 <SD_write+0x60>
    }

  }
#endif

  return res;
 8007154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007158:	4618      	mov	r0, r3
 800715a:	3728      	adds	r7, #40	; 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000424 	.word	0x20000424

08007164 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08c      	sub	sp, #48	; 0x30
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	603a      	str	r2, [r7, #0]
 800716e:	71fb      	strb	r3, [r7, #7]
 8007170:	460b      	mov	r3, r1
 8007172:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800717a:	4b25      	ldr	r3, [pc, #148]	; (8007210 <SD_ioctl+0xac>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	b2db      	uxtb	r3, r3
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <SD_ioctl+0x28>
 8007188:	2303      	movs	r3, #3
 800718a:	e03c      	b.n	8007206 <SD_ioctl+0xa2>

  switch (cmd)
 800718c:	79bb      	ldrb	r3, [r7, #6]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d834      	bhi.n	80071fc <SD_ioctl+0x98>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <SD_ioctl+0x34>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071a9 	.word	0x080071a9
 800719c:	080071b1 	.word	0x080071b1
 80071a0:	080071c9 	.word	0x080071c9
 80071a4:	080071e3 	.word	0x080071e3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071ae:	e028      	b.n	8007202 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80071b0:	f107 030c 	add.w	r3, r7, #12
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fe67 	bl	8006e88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80071ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071c6:	e01c      	b.n	8007202 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071c8:	f107 030c 	add.w	r3, r7, #12
 80071cc:	4618      	mov	r0, r3
 80071ce:	f7ff fe5b 	bl	8006e88 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071e0:	e00f      	b.n	8007202 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071e2:	f107 030c 	add.w	r3, r7, #12
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7ff fe4e 	bl	8006e88 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80071ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ee:	0a5a      	lsrs	r2, r3, #9
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071fa:	e002      	b.n	8007202 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80071fc:	2304      	movs	r3, #4
 80071fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007206:	4618      	mov	r0, r3
 8007208:	3730      	adds	r7, #48	; 0x30
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	20000009 	.word	0x20000009

08007214 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8007218:	4b04      	ldr	r3, [pc, #16]	; (800722c <BSP_SD_WriteCpltCallback+0x18>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2200      	movs	r2, #0
 800721e:	2102      	movs	r1, #2
 8007220:	4618      	mov	r0, r3
 8007222:	f000 f9e1 	bl	80075e8 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007226:	bf00      	nop
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	20000424 	.word	0x20000424

08007230 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <BSP_SD_ReadCpltCallback+0x18>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2200      	movs	r2, #0
 800723a:	2101      	movs	r1, #1
 800723c:	4618      	mov	r0, r3
 800723e:	f000 f9d3 	bl	80075e8 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007242:	bf00      	nop
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000424 	.word	0x20000424

0800724c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800725a:	2301      	movs	r3, #1
 800725c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007262:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 8007264:	7a5b      	ldrb	r3, [r3, #9]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d131      	bne.n	80072d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800726c:	4b1c      	ldr	r3, [pc, #112]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 800726e:	7a5b      	ldrb	r3, [r3, #9]
 8007270:	b2db      	uxtb	r3, r3
 8007272:	461a      	mov	r2, r3
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 8007276:	2100      	movs	r1, #0
 8007278:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800727a:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 800727c:	7a5b      	ldrb	r3, [r3, #9]
 800727e:	b2db      	uxtb	r3, r3
 8007280:	4a17      	ldr	r2, [pc, #92]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800728a:	4b15      	ldr	r3, [pc, #84]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 800728c:	7a5b      	ldrb	r3, [r3, #9]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	461a      	mov	r2, r3
 8007292:	4b13      	ldr	r3, [pc, #76]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 8007294:	4413      	add	r3, r2
 8007296:	79fa      	ldrb	r2, [r7, #7]
 8007298:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 800729c:	7a5b      	ldrb	r3, [r3, #9]
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	b2d1      	uxtb	r1, r2
 80072a4:	4a0e      	ldr	r2, [pc, #56]	; (80072e0 <FATFS_LinkDriverEx+0x94>)
 80072a6:	7251      	strb	r1, [r2, #9]
 80072a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072aa:	7dbb      	ldrb	r3, [r7, #22]
 80072ac:	3330      	adds	r3, #48	; 0x30
 80072ae:	b2da      	uxtb	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	3301      	adds	r3, #1
 80072b8:	223a      	movs	r2, #58	; 0x3a
 80072ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	3302      	adds	r3, #2
 80072c0:	222f      	movs	r2, #47	; 0x2f
 80072c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	3303      	adds	r3, #3
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072cc:	2300      	movs	r3, #0
 80072ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	371c      	adds	r7, #28
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000428 	.word	0x20000428

080072e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80072ee:	2200      	movs	r2, #0
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7ff ffaa 	bl	800724c <FATFS_LinkDriverEx>
 80072f8:	4603      	mov	r3, r0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007302:	b480      	push	{r7}
 8007304:	b085      	sub	sp, #20
 8007306:	af00      	add	r7, sp, #0
 8007308:	4603      	mov	r3, r0
 800730a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800730c:	2300      	movs	r3, #0
 800730e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007314:	2b84      	cmp	r3, #132	; 0x84
 8007316:	d005      	beq.n	8007324 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007318:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	4413      	add	r3, r2
 8007320:	3303      	adds	r3, #3
 8007322:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007324:	68fb      	ldr	r3, [r7, #12]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3714      	adds	r7, #20
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr

08007332 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007332:	b480      	push	{r7}
 8007334:	b083      	sub	sp, #12
 8007336:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007338:	f3ef 8305 	mrs	r3, IPSR
 800733c:	607b      	str	r3, [r7, #4]
  return(result);
 800733e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007340:	2b00      	cmp	r3, #0
 8007342:	bf14      	ite	ne
 8007344:	2301      	movne	r3, #1
 8007346:	2300      	moveq	r3, #0
 8007348:	b2db      	uxtb	r3, r3
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800735a:	f001 fb97 	bl	8008a8c <vTaskStartScheduler>
  
  return osOK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	bd80      	pop	{r7, pc}

08007364 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007368:	f001 ffa6 	bl	80092b8 <xTaskGetSchedulerState>
 800736c:	4603      	mov	r3, r0
 800736e:	2b01      	cmp	r3, #1
 8007370:	d101      	bne.n	8007376 <osKernelRunning+0x12>
    return 0;
 8007372:	2300      	movs	r3, #0
 8007374:	e000      	b.n	8007378 <osKernelRunning+0x14>
  else
    return 1;
 8007376:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8007378:	4618      	mov	r0, r3
 800737a:	bd80      	pop	{r7, pc}

0800737c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007380:	f7ff ffd7 	bl	8007332 <inHandlerMode>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d003      	beq.n	8007392 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800738a:	f001 fc97 	bl	8008cbc <xTaskGetTickCountFromISR>
 800738e:	4603      	mov	r3, r0
 8007390:	e002      	b.n	8007398 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007392:	f001 fc83 	bl	8008c9c <xTaskGetTickCount>
 8007396:	4603      	mov	r3, r0
  }
}
 8007398:	4618      	mov	r0, r3
 800739a:	bd80      	pop	{r7, pc}

0800739c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800739c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800739e:	b089      	sub	sp, #36	; 0x24
 80073a0:	af04      	add	r7, sp, #16
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d020      	beq.n	80073f0 <osThreadCreate+0x54>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01c      	beq.n	80073f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	685c      	ldr	r4, [r3, #4]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681d      	ldr	r5, [r3, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	691e      	ldr	r6, [r3, #16]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f7ff ff9a 	bl	8007302 <makeFreeRtosPriority>
 80073ce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073d8:	9202      	str	r2, [sp, #8]
 80073da:	9301      	str	r3, [sp, #4]
 80073dc:	9100      	str	r1, [sp, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	4632      	mov	r2, r6
 80073e2:	4629      	mov	r1, r5
 80073e4:	4620      	mov	r0, r4
 80073e6:	f001 f98e 	bl	8008706 <xTaskCreateStatic>
 80073ea:	4603      	mov	r3, r0
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e01c      	b.n	800742a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	685c      	ldr	r4, [r3, #4]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073fc:	b29e      	uxth	r6, r3
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007404:	4618      	mov	r0, r3
 8007406:	f7ff ff7c 	bl	8007302 <makeFreeRtosPriority>
 800740a:	4602      	mov	r2, r0
 800740c:	f107 030c 	add.w	r3, r7, #12
 8007410:	9301      	str	r3, [sp, #4]
 8007412:	9200      	str	r2, [sp, #0]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	4632      	mov	r2, r6
 8007418:	4629      	mov	r1, r5
 800741a:	4620      	mov	r0, r4
 800741c:	f001 f9cd 	bl	80087ba <xTaskCreate>
 8007420:	4603      	mov	r3, r0
 8007422:	2b01      	cmp	r3, #1
 8007424:	d001      	beq.n	800742a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007426:	2300      	movs	r3, #0
 8007428:	e000      	b.n	800742c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007434 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <osDelay+0x16>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	e000      	b.n	800744c <osDelay+0x18>
 800744a:	2301      	movs	r3, #1
 800744c:	4618      	mov	r0, r3
 800744e:	f001 fae9 	bl	8008a24 <vTaskDelay>
  
  return osOK;
 8007452:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007454:	4618      	mov	r0, r3
 8007456:	3710      	adds	r7, #16
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d007      	beq.n	800747c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	4619      	mov	r1, r3
 8007472:	2001      	movs	r0, #1
 8007474:	f000 fb8b 	bl	8007b8e <xQueueCreateMutexStatic>
 8007478:	4603      	mov	r3, r0
 800747a:	e003      	b.n	8007484 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800747c:	2001      	movs	r0, #1
 800747e:	f000 fb6e 	bl	8007b5e <xQueueCreateMutex>
 8007482:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d101      	bne.n	80074a4 <osMutexWait+0x18>
    return osErrorParameter;
 80074a0:	2380      	movs	r3, #128	; 0x80
 80074a2:	e03a      	b.n	800751a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074ae:	d103      	bne.n	80074b8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80074b0:	f04f 33ff 	mov.w	r3, #4294967295
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e009      	b.n	80074cc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d006      	beq.n	80074cc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <osMutexWait+0x40>
      ticks = 1;
 80074c8:	2301      	movs	r3, #1
 80074ca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80074cc:	f7ff ff31 	bl	8007332 <inHandlerMode>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d017      	beq.n	8007506 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80074d6:	f107 0308 	add.w	r3, r7, #8
 80074da:	461a      	mov	r2, r3
 80074dc:	2100      	movs	r1, #0
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 ff6c 	bl	80083bc <xQueueReceiveFromISR>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d001      	beq.n	80074ee <osMutexWait+0x62>
      return osErrorOS;
 80074ea:	23ff      	movs	r3, #255	; 0xff
 80074ec:	e015      	b.n	800751a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d011      	beq.n	8007518 <osMutexWait+0x8c>
 80074f4:	4b0b      	ldr	r3, [pc, #44]	; (8007524 <osMutexWait+0x98>)
 80074f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	e008      	b.n	8007518 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007506:	68f9      	ldr	r1, [r7, #12]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fe4f 	bl	80081ac <xQueueSemaphoreTake>
 800750e:	4603      	mov	r3, r0
 8007510:	2b01      	cmp	r3, #1
 8007512:	d001      	beq.n	8007518 <osMutexWait+0x8c>
    return osErrorOS;
 8007514:	23ff      	movs	r3, #255	; 0xff
 8007516:	e000      	b.n	800751a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	3710      	adds	r7, #16
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	e000ed04 	.word	0xe000ed04

08007528 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007530:	2300      	movs	r3, #0
 8007532:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007534:	2300      	movs	r3, #0
 8007536:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007538:	f7ff fefb 	bl	8007332 <inHandlerMode>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d016      	beq.n	8007570 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007542:	f107 0308 	add.w	r3, r7, #8
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fcc9 	bl	8007ee0 <xQueueGiveFromISR>
 800754e:	4603      	mov	r3, r0
 8007550:	2b01      	cmp	r3, #1
 8007552:	d001      	beq.n	8007558 <osMutexRelease+0x30>
      return osErrorOS;
 8007554:	23ff      	movs	r3, #255	; 0xff
 8007556:	e017      	b.n	8007588 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d013      	beq.n	8007586 <osMutexRelease+0x5e>
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <osMutexRelease+0x68>)
 8007560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	e00a      	b.n	8007586 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007570:	2300      	movs	r3, #0
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fb24 	bl	8007bc4 <xQueueGenericSend>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d001      	beq.n	8007586 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007582:	23ff      	movs	r3, #255	; 0xff
 8007584:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007586:	68fb      	ldr	r3, [r7, #12]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	e000ed04 	.word	0xe000ed04

08007594 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b085      	sub	sp, #20
 8007598:	af02      	add	r7, sp, #8
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d012      	beq.n	80075cc <osMessageCreate+0x38>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00e      	beq.n	80075cc <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6859      	ldr	r1, [r3, #4]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68dc      	ldr	r4, [r3, #12]
 80075be:	2300      	movs	r3, #0
 80075c0:	9300      	str	r3, [sp, #0]
 80075c2:	4623      	mov	r3, r4
 80075c4:	f000 f9e0 	bl	8007988 <xQueueGenericCreateStatic>
 80075c8:	4603      	mov	r3, r0
 80075ca:	e008      	b.n	80075de <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6818      	ldr	r0, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	4619      	mov	r1, r3
 80075d8:	f000 fa49 	bl	8007a6e <xQueueGenericCreate>
 80075dc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd90      	pop	{r4, r7, pc}
	...

080075e8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80075f4:	2300      	movs	r3, #0
 80075f6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <osMessagePut+0x1e>
    ticks = 1;
 8007602:	2301      	movs	r3, #1
 8007604:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007606:	f7ff fe94 	bl	8007332 <inHandlerMode>
 800760a:	4603      	mov	r3, r0
 800760c:	2b00      	cmp	r3, #0
 800760e:	d018      	beq.n	8007642 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007610:	f107 0210 	add.w	r2, r7, #16
 8007614:	f107 0108 	add.w	r1, r7, #8
 8007618:	2300      	movs	r3, #0
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fbcc 	bl	8007db8 <xQueueGenericSendFromISR>
 8007620:	4603      	mov	r3, r0
 8007622:	2b01      	cmp	r3, #1
 8007624:	d001      	beq.n	800762a <osMessagePut+0x42>
      return osErrorOS;
 8007626:	23ff      	movs	r3, #255	; 0xff
 8007628:	e018      	b.n	800765c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d014      	beq.n	800765a <osMessagePut+0x72>
 8007630:	4b0c      	ldr	r3, [pc, #48]	; (8007664 <osMessagePut+0x7c>)
 8007632:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	e00b      	b.n	800765a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007642:	f107 0108 	add.w	r1, r7, #8
 8007646:	2300      	movs	r3, #0
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 faba 	bl	8007bc4 <xQueueGenericSend>
 8007650:	4603      	mov	r3, r0
 8007652:	2b01      	cmp	r3, #1
 8007654:	d001      	beq.n	800765a <osMessagePut+0x72>
      return osErrorOS;
 8007656:	23ff      	movs	r3, #255	; 0xff
 8007658:	e000      	b.n	800765c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	e000ed04 	.word	0xe000ed04

08007668 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007668:	b590      	push	{r4, r7, lr}
 800766a:	b08b      	sub	sp, #44	; 0x2c
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10a      	bne.n	8007698 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007682:	2380      	movs	r3, #128	; 0x80
 8007684:	617b      	str	r3, [r7, #20]
    return event;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	461c      	mov	r4, r3
 800768a:	f107 0314 	add.w	r3, r7, #20
 800768e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007692:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007696:	e054      	b.n	8007742 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800769c:	2300      	movs	r3, #0
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a6:	d103      	bne.n	80076b0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
 80076ae:	e009      	b.n	80076c4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d006      	beq.n	80076c4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <osMessageGet+0x5c>
      ticks = 1;
 80076c0:	2301      	movs	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80076c4:	f7ff fe35 	bl	8007332 <inHandlerMode>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01c      	beq.n	8007708 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80076ce:	f107 0220 	add.w	r2, r7, #32
 80076d2:	f107 0314 	add.w	r3, r7, #20
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	68b8      	ldr	r0, [r7, #8]
 80076dc:	f000 fe6e 	bl	80083bc <xQueueReceiveFromISR>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d102      	bne.n	80076ec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80076e6:	2310      	movs	r3, #16
 80076e8:	617b      	str	r3, [r7, #20]
 80076ea:	e001      	b.n	80076f0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80076f0:	6a3b      	ldr	r3, [r7, #32]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01d      	beq.n	8007732 <osMessageGet+0xca>
 80076f6:	4b15      	ldr	r3, [pc, #84]	; (800774c <osMessageGet+0xe4>)
 80076f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	e014      	b.n	8007732 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007708:	f107 0314 	add.w	r3, r7, #20
 800770c:	3304      	adds	r3, #4
 800770e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007710:	4619      	mov	r1, r3
 8007712:	68b8      	ldr	r0, [r7, #8]
 8007714:	f000 fc6e 	bl	8007ff4 <xQueueReceive>
 8007718:	4603      	mov	r3, r0
 800771a:	2b01      	cmp	r3, #1
 800771c:	d102      	bne.n	8007724 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800771e:	2310      	movs	r3, #16
 8007720:	617b      	str	r3, [r7, #20]
 8007722:	e006      	b.n	8007732 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <osMessageGet+0xc6>
 800772a:	2300      	movs	r3, #0
 800772c:	e000      	b.n	8007730 <osMessageGet+0xc8>
 800772e:	2340      	movs	r3, #64	; 0x40
 8007730:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	461c      	mov	r4, r3
 8007736:	f107 0314 	add.w	r3, r7, #20
 800773a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800773e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	372c      	adds	r7, #44	; 0x2c
 8007746:	46bd      	mov	sp, r7
 8007748:	bd90      	pop	{r4, r7, pc}
 800774a:	bf00      	nop
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f103 0208 	add.w	r2, r3, #8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f04f 32ff 	mov.w	r2, #4294967295
 8007768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f103 0208 	add.w	r2, r3, #8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f103 0208 	add.w	r2, r3, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007808:	d103      	bne.n	8007812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	e00c      	b.n	800782c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3308      	adds	r3, #8
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e002      	b.n	8007820 <vListInsert+0x2e>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	d2f6      	bcs.n	800781a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]
}
 8007858:	bf00      	nop
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6892      	ldr	r2, [r2, #8]
 800787a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6852      	ldr	r2, [r2, #4]
 8007884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d103      	bne.n	8007898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	1e5a      	subs	r2, r3, #1
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d109      	bne.n	80078e0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	60bb      	str	r3, [r7, #8]
 80078de:	e7fe      	b.n	80078de <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80078e0:	f002 f91c 	bl	8009b1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078f0:	fb01 f303 	mul.w	r3, r1, r3
 80078f4:	441a      	add	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007910:	3b01      	subs	r3, #1
 8007912:	68f9      	ldr	r1, [r7, #12]
 8007914:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007916:	fb01 f303 	mul.w	r3, r1, r3
 800791a:	441a      	add	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	22ff      	movs	r2, #255	; 0xff
 8007924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	22ff      	movs	r2, #255	; 0xff
 800792c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d114      	bne.n	8007960 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d01a      	beq.n	8007974 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3310      	adds	r3, #16
 8007942:	4618      	mov	r0, r3
 8007944:	f001 fb02 	bl	8008f4c <xTaskRemoveFromEventList>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d012      	beq.n	8007974 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800794e:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <xQueueGenericReset+0xcc>)
 8007950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	e009      	b.n	8007974 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	3310      	adds	r3, #16
 8007964:	4618      	mov	r0, r3
 8007966:	f7ff fef3 	bl	8007750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3324      	adds	r3, #36	; 0x24
 800796e:	4618      	mov	r0, r3
 8007970:	f7ff feee 	bl	8007750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007974:	f002 f900 	bl	8009b78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007978:	2301      	movs	r3, #1
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}
 8007982:	bf00      	nop
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08e      	sub	sp, #56	; 0x38
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d109      	bne.n	80079b0 <xQueueGenericCreateStatic+0x28>
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80079ae:	e7fe      	b.n	80079ae <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d109      	bne.n	80079ca <xQueueGenericCreateStatic+0x42>
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
 80079c8:	e7fe      	b.n	80079c8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <xQueueGenericCreateStatic+0x4e>
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d001      	beq.n	80079da <xQueueGenericCreateStatic+0x52>
 80079d6:	2301      	movs	r3, #1
 80079d8:	e000      	b.n	80079dc <xQueueGenericCreateStatic+0x54>
 80079da:	2300      	movs	r3, #0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <xQueueGenericCreateStatic+0x6c>
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	623b      	str	r3, [r7, #32]
 80079f2:	e7fe      	b.n	80079f2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <xQueueGenericCreateStatic+0x78>
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d101      	bne.n	8007a04 <xQueueGenericCreateStatic+0x7c>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <xQueueGenericCreateStatic+0x7e>
 8007a04:	2300      	movs	r3, #0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d109      	bne.n	8007a1e <xQueueGenericCreateStatic+0x96>
 8007a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0e:	f383 8811 	msr	BASEPRI, r3
 8007a12:	f3bf 8f6f 	isb	sy
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	61fb      	str	r3, [r7, #28]
 8007a1c:	e7fe      	b.n	8007a1c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a1e:	2348      	movs	r3, #72	; 0x48
 8007a20:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b48      	cmp	r3, #72	; 0x48
 8007a26:	d009      	beq.n	8007a3c <xQueueGenericCreateStatic+0xb4>
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	61bb      	str	r3, [r7, #24]
 8007a3a:	e7fe      	b.n	8007a3a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a50:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	4613      	mov	r3, r2
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	68b9      	ldr	r1, [r7, #8]
 8007a5e:	68f8      	ldr	r0, [r7, #12]
 8007a60:	f000 f844 	bl	8007aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3730      	adds	r7, #48	; 0x30
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b08a      	sub	sp, #40	; 0x28
 8007a72:	af02      	add	r7, sp, #8
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <xQueueGenericCreate+0x28>
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	613b      	str	r3, [r7, #16]
 8007a94:	e7fe      	b.n	8007a94 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d102      	bne.n	8007aa2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	e004      	b.n	8007aac <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	fb02 f303 	mul.w	r3, r2, r3
 8007aaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3348      	adds	r3, #72	; 0x48
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f002 f94d 	bl	8009d50 <pvPortMalloc>
 8007ab6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d011      	beq.n	8007ae2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	3348      	adds	r3, #72	; 0x48
 8007ac6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ad0:	79fa      	ldrb	r2, [r7, #7]
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f805 	bl	8007aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	69b8      	ldr	r0, [r7, #24]
 8007b1e:	f7ff fecb 	bl	80078b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b22:	bf00      	nop
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b082      	sub	sp, #8
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00e      	beq.n	8007b56 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 f837 	bl	8007bc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b56:	bf00      	nop
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b086      	sub	sp, #24
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	4603      	mov	r3, r0
 8007b66:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	461a      	mov	r2, r3
 8007b74:	6939      	ldr	r1, [r7, #16]
 8007b76:	6978      	ldr	r0, [r7, #20]
 8007b78:	f7ff ff79 	bl	8007a6e <xQueueGenericCreate>
 8007b7c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f7ff ffd3 	bl	8007b2a <prvInitialiseMutex>

		return xNewQueue;
 8007b84:	68fb      	ldr	r3, [r7, #12]
	}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b088      	sub	sp, #32
 8007b92:	af02      	add	r7, sp, #8
 8007b94:	4603      	mov	r3, r0
 8007b96:	6039      	str	r1, [r7, #0]
 8007b98:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	9300      	str	r3, [sp, #0]
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	6939      	ldr	r1, [r7, #16]
 8007bac:	6978      	ldr	r0, [r7, #20]
 8007bae:	f7ff feeb 	bl	8007988 <xQueueGenericCreateStatic>
 8007bb2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f7ff ffb8 	bl	8007b2a <prvInitialiseMutex>

		return xNewQueue;
 8007bba:	68fb      	ldr	r3, [r7, #12]
	}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08e      	sub	sp, #56	; 0x38
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <xQueueGenericSend+0x30>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSend+0x3e>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <xQueueGenericSend+0x42>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <xQueueGenericSend+0x44>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <xQueueGenericSend+0x5c>
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c1e:	e7fe      	b.n	8007c1e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d103      	bne.n	8007c2e <xQueueGenericSend+0x6a>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d101      	bne.n	8007c32 <xQueueGenericSend+0x6e>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <xQueueGenericSend+0x70>
 8007c32:	2300      	movs	r3, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d109      	bne.n	8007c4c <xQueueGenericSend+0x88>
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	e7fe      	b.n	8007c4a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c4c:	f001 fb34 	bl	80092b8 <xTaskGetSchedulerState>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d102      	bne.n	8007c5c <xQueueGenericSend+0x98>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <xQueueGenericSend+0x9c>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e000      	b.n	8007c62 <xQueueGenericSend+0x9e>
 8007c60:	2300      	movs	r3, #0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d109      	bne.n	8007c7a <xQueueGenericSend+0xb6>
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	61fb      	str	r3, [r7, #28]
 8007c78:	e7fe      	b.n	8007c78 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c7a:	f001 ff4f 	bl	8009b1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d302      	bcc.n	8007c90 <xQueueGenericSend+0xcc>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d129      	bne.n	8007ce4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c96:	f000 fc26 	bl	80084e6 <prvCopyDataToQueue>
 8007c9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d010      	beq.n	8007cc6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f001 f94f 	bl	8008f4c <xTaskRemoveFromEventList>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d013      	beq.n	8007cdc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007cb4:	4b3f      	ldr	r3, [pc, #252]	; (8007db4 <xQueueGenericSend+0x1f0>)
 8007cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	e00a      	b.n	8007cdc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d007      	beq.n	8007cdc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ccc:	4b39      	ldr	r3, [pc, #228]	; (8007db4 <xQueueGenericSend+0x1f0>)
 8007cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cdc:	f001 ff4c 	bl	8009b78 <vPortExitCritical>
				return pdPASS;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e063      	b.n	8007dac <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d103      	bne.n	8007cf2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cea:	f001 ff45 	bl	8009b78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	e05c      	b.n	8007dac <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cf8:	f107 0314 	add.w	r3, r7, #20
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f001 f987 	bl	8009010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d02:	2301      	movs	r3, #1
 8007d04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d06:	f001 ff37 	bl	8009b78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d0a:	f000 ff1d 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d0e:	f001 ff05 	bl	8009b1c <vPortEnterCritical>
 8007d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d18:	b25b      	sxtb	r3, r3
 8007d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1e:	d103      	bne.n	8007d28 <xQueueGenericSend+0x164>
 8007d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d2e:	b25b      	sxtb	r3, r3
 8007d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d34:	d103      	bne.n	8007d3e <xQueueGenericSend+0x17a>
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d3e:	f001 ff1b 	bl	8009b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d42:	1d3a      	adds	r2, r7, #4
 8007d44:	f107 0314 	add.w	r3, r7, #20
 8007d48:	4611      	mov	r1, r2
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f001 f976 	bl	800903c <xTaskCheckForTimeOut>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d124      	bne.n	8007da0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d58:	f000 fcbd 	bl	80086d6 <prvIsQueueFull>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d018      	beq.n	8007d94 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d64:	3310      	adds	r3, #16
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	4611      	mov	r1, r2
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f001 f8ca 	bl	8008f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d72:	f000 fc48 	bl	8008606 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d76:	f000 fef5 	bl	8008b64 <xTaskResumeAll>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f47f af7c 	bne.w	8007c7a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007d82:	4b0c      	ldr	r3, [pc, #48]	; (8007db4 <xQueueGenericSend+0x1f0>)
 8007d84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	e772      	b.n	8007c7a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d96:	f000 fc36 	bl	8008606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d9a:	f000 fee3 	bl	8008b64 <xTaskResumeAll>
 8007d9e:	e76c      	b.n	8007c7a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007da0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007da2:	f000 fc30 	bl	8008606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007da6:	f000 fedd 	bl	8008b64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007daa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3738      	adds	r7, #56	; 0x38
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}
 8007db4:	e000ed04 	.word	0xe000ed04

08007db8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b08e      	sub	sp, #56	; 0x38
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	60b9      	str	r1, [r7, #8]
 8007dc2:	607a      	str	r2, [r7, #4]
 8007dc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <xQueueGenericSendFromISR+0x2c>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
 8007de2:	e7fe      	b.n	8007de2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d103      	bne.n	8007df2 <xQueueGenericSendFromISR+0x3a>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericSendFromISR+0x3e>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericSendFromISR+0x40>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <xQueueGenericSendFromISR+0x58>
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	623b      	str	r3, [r7, #32]
 8007e0e:	e7fe      	b.n	8007e0e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	2b02      	cmp	r3, #2
 8007e14:	d103      	bne.n	8007e1e <xQueueGenericSendFromISR+0x66>
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d101      	bne.n	8007e22 <xQueueGenericSendFromISR+0x6a>
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e000      	b.n	8007e24 <xQueueGenericSendFromISR+0x6c>
 8007e22:	2300      	movs	r3, #0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d109      	bne.n	8007e3c <xQueueGenericSendFromISR+0x84>
 8007e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e2c:	f383 8811 	msr	BASEPRI, r3
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	f3bf 8f4f 	dsb	sy
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	e7fe      	b.n	8007e3a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e3c:	f001 ff4a 	bl	8009cd4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e40:	f3ef 8211 	mrs	r2, BASEPRI
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	61ba      	str	r2, [r7, #24]
 8007e56:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e58:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d302      	bcc.n	8007e6e <xQueueGenericSendFromISR+0xb6>
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d12c      	bne.n	8007ec8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e78:	683a      	ldr	r2, [r7, #0]
 8007e7a:	68b9      	ldr	r1, [r7, #8]
 8007e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e7e:	f000 fb32 	bl	80084e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e82:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e8a:	d112      	bne.n	8007eb2 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d016      	beq.n	8007ec2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	3324      	adds	r3, #36	; 0x24
 8007e98:	4618      	mov	r0, r3
 8007e9a:	f001 f857 	bl	8008f4c <xTaskRemoveFromEventList>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00e      	beq.n	8007ec2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d00b      	beq.n	8007ec2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2201      	movs	r2, #1
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e007      	b.n	8007ec2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007eb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	b25a      	sxtb	r2, r3
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ec6:	e001      	b.n	8007ecc <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	637b      	str	r3, [r7, #52]	; 0x34
 8007ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ece:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3738      	adds	r7, #56	; 0x38
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08e      	sub	sp, #56	; 0x38
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d109      	bne.n	8007f08 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef8:	f383 8811 	msr	BASEPRI, r3
 8007efc:	f3bf 8f6f 	isb	sy
 8007f00:	f3bf 8f4f 	dsb	sy
 8007f04:	623b      	str	r3, [r7, #32]
 8007f06:	e7fe      	b.n	8007f06 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d009      	beq.n	8007f24 <xQueueGiveFromISR+0x44>
 8007f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f14:	f383 8811 	msr	BASEPRI, r3
 8007f18:	f3bf 8f6f 	isb	sy
 8007f1c:	f3bf 8f4f 	dsb	sy
 8007f20:	61fb      	str	r3, [r7, #28]
 8007f22:	e7fe      	b.n	8007f22 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d103      	bne.n	8007f34 <xQueueGiveFromISR+0x54>
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d101      	bne.n	8007f38 <xQueueGiveFromISR+0x58>
 8007f34:	2301      	movs	r3, #1
 8007f36:	e000      	b.n	8007f3a <xQueueGiveFromISR+0x5a>
 8007f38:	2300      	movs	r3, #0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <xQueueGiveFromISR+0x72>
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e7fe      	b.n	8007f50 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f52:	f001 febf 	bl	8009cd4 <vPortValidateInterruptPriority>
	__asm volatile
 8007f56:	f3ef 8211 	mrs	r2, BASEPRI
 8007f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5e:	f383 8811 	msr	BASEPRI, r3
 8007f62:	f3bf 8f6f 	isb	sy
 8007f66:	f3bf 8f4f 	dsb	sy
 8007f6a:	617a      	str	r2, [r7, #20]
 8007f6c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007f6e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f70:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f76:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d22b      	bcs.n	8007fda <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8e:	1c5a      	adds	r2, r3, #1
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f9c:	d112      	bne.n	8007fc4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d016      	beq.n	8007fd4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa8:	3324      	adds	r3, #36	; 0x24
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 ffce 	bl	8008f4c <xTaskRemoveFromEventList>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00e      	beq.n	8007fd4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	601a      	str	r2, [r3, #0]
 8007fc2:	e007      	b.n	8007fd4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fc8:	3301      	adds	r3, #1
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	b25a      	sxtb	r2, r3
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fd8:	e001      	b.n	8007fde <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	637b      	str	r3, [r7, #52]	; 0x34
 8007fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3738      	adds	r7, #56	; 0x38
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08c      	sub	sp, #48	; 0x30
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008000:	2300      	movs	r3, #0
 8008002:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	2b00      	cmp	r3, #0
 800800c:	d109      	bne.n	8008022 <xQueueReceive+0x2e>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	623b      	str	r3, [r7, #32]
 8008020:	e7fe      	b.n	8008020 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d103      	bne.n	8008030 <xQueueReceive+0x3c>
 8008028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d101      	bne.n	8008034 <xQueueReceive+0x40>
 8008030:	2301      	movs	r3, #1
 8008032:	e000      	b.n	8008036 <xQueueReceive+0x42>
 8008034:	2300      	movs	r3, #0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <xQueueReceive+0x5a>
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	61fb      	str	r3, [r7, #28]
 800804c:	e7fe      	b.n	800804c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800804e:	f001 f933 	bl	80092b8 <xTaskGetSchedulerState>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d102      	bne.n	800805e <xQueueReceive+0x6a>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <xQueueReceive+0x6e>
 800805e:	2301      	movs	r3, #1
 8008060:	e000      	b.n	8008064 <xQueueReceive+0x70>
 8008062:	2300      	movs	r3, #0
 8008064:	2b00      	cmp	r3, #0
 8008066:	d109      	bne.n	800807c <xQueueReceive+0x88>
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	61bb      	str	r3, [r7, #24]
 800807a:	e7fe      	b.n	800807a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800807c:	f001 fd4e 	bl	8009b1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008084:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008088:	2b00      	cmp	r3, #0
 800808a:	d01f      	beq.n	80080cc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800808c:	68b9      	ldr	r1, [r7, #8]
 800808e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008090:	f000 fa93 	bl	80085ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008096:	1e5a      	subs	r2, r3, #1
 8008098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00f      	beq.n	80080c4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	3310      	adds	r3, #16
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 ff4f 	bl	8008f4c <xTaskRemoveFromEventList>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d007      	beq.n	80080c4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080b4:	4b3c      	ldr	r3, [pc, #240]	; (80081a8 <xQueueReceive+0x1b4>)
 80080b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080c4:	f001 fd58 	bl	8009b78 <vPortExitCritical>
				return pdPASS;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e069      	b.n	80081a0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d103      	bne.n	80080da <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080d2:	f001 fd51 	bl	8009b78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080d6:	2300      	movs	r3, #0
 80080d8:	e062      	b.n	80081a0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d106      	bne.n	80080ee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 ff93 	bl	8009010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ea:	2301      	movs	r3, #1
 80080ec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080ee:	f001 fd43 	bl	8009b78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080f2:	f000 fd29 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080f6:	f001 fd11 	bl	8009b1c <vPortEnterCritical>
 80080fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008100:	b25b      	sxtb	r3, r3
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d103      	bne.n	8008110 <xQueueReceive+0x11c>
 8008108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008116:	b25b      	sxtb	r3, r3
 8008118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811c:	d103      	bne.n	8008126 <xQueueReceive+0x132>
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008126:	f001 fd27 	bl	8009b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800812a:	1d3a      	adds	r2, r7, #4
 800812c:	f107 0310 	add.w	r3, r7, #16
 8008130:	4611      	mov	r1, r2
 8008132:	4618      	mov	r0, r3
 8008134:	f000 ff82 	bl	800903c <xTaskCheckForTimeOut>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d123      	bne.n	8008186 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800813e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008140:	f000 fab3 	bl	80086aa <prvIsQueueEmpty>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d017      	beq.n	800817a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800814a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814c:	3324      	adds	r3, #36	; 0x24
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	4611      	mov	r1, r2
 8008152:	4618      	mov	r0, r3
 8008154:	f000 fed6 	bl	8008f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800815a:	f000 fa54 	bl	8008606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800815e:	f000 fd01 	bl	8008b64 <xTaskResumeAll>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d189      	bne.n	800807c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008168:	4b0f      	ldr	r3, [pc, #60]	; (80081a8 <xQueueReceive+0x1b4>)
 800816a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	e780      	b.n	800807c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800817a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800817c:	f000 fa43 	bl	8008606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008180:	f000 fcf0 	bl	8008b64 <xTaskResumeAll>
 8008184:	e77a      	b.n	800807c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008188:	f000 fa3d 	bl	8008606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800818c:	f000 fcea 	bl	8008b64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008192:	f000 fa8a 	bl	80086aa <prvIsQueueEmpty>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	f43f af6f 	beq.w	800807c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800819e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081a0:	4618      	mov	r0, r3
 80081a2:	3730      	adds	r7, #48	; 0x30
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}
 80081a8:	e000ed04 	.word	0xe000ed04

080081ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b08e      	sub	sp, #56	; 0x38
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80081b6:	2300      	movs	r3, #0
 80081b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80081be:	2300      	movs	r3, #0
 80081c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d109      	bne.n	80081dc <xQueueSemaphoreTake+0x30>
 80081c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	623b      	str	r3, [r7, #32]
 80081da:	e7fe      	b.n	80081da <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80081dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d009      	beq.n	80081f8 <xQueueSemaphoreTake+0x4c>
 80081e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e8:	f383 8811 	msr	BASEPRI, r3
 80081ec:	f3bf 8f6f 	isb	sy
 80081f0:	f3bf 8f4f 	dsb	sy
 80081f4:	61fb      	str	r3, [r7, #28]
 80081f6:	e7fe      	b.n	80081f6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80081f8:	f001 f85e 	bl	80092b8 <xTaskGetSchedulerState>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d102      	bne.n	8008208 <xQueueSemaphoreTake+0x5c>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <xQueueSemaphoreTake+0x60>
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <xQueueSemaphoreTake+0x62>
 800820c:	2300      	movs	r3, #0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <xQueueSemaphoreTake+0x7a>
 8008212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	e7fe      	b.n	8008224 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008226:	f001 fc79 	bl	8009b1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800822e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008232:	2b00      	cmp	r3, #0
 8008234:	d024      	beq.n	8008280 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008238:	1e5a      	subs	r2, r3, #1
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800823e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d104      	bne.n	8008250 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008246:	f001 f9f1 	bl	800962c <pvTaskIncrementMutexHeldCount>
 800824a:	4602      	mov	r2, r0
 800824c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00f      	beq.n	8008278 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	3310      	adds	r3, #16
 800825c:	4618      	mov	r0, r3
 800825e:	f000 fe75 	bl	8008f4c <xTaskRemoveFromEventList>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d007      	beq.n	8008278 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008268:	4b53      	ldr	r3, [pc, #332]	; (80083b8 <xQueueSemaphoreTake+0x20c>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008278:	f001 fc7e 	bl	8009b78 <vPortExitCritical>
				return pdPASS;
 800827c:	2301      	movs	r3, #1
 800827e:	e096      	b.n	80083ae <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d110      	bne.n	80082a8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008288:	2b00      	cmp	r3, #0
 800828a:	d009      	beq.n	80082a0 <xQueueSemaphoreTake+0xf4>
 800828c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	617b      	str	r3, [r7, #20]
 800829e:	e7fe      	b.n	800829e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80082a0:	f001 fc6a 	bl	8009b78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082a4:	2300      	movs	r3, #0
 80082a6:	e082      	b.n	80083ae <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d106      	bne.n	80082bc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ae:	f107 030c 	add.w	r3, r7, #12
 80082b2:	4618      	mov	r0, r3
 80082b4:	f000 feac 	bl	8009010 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082bc:	f001 fc5c 	bl	8009b78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082c0:	f000 fc42 	bl	8008b48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082c4:	f001 fc2a 	bl	8009b1c <vPortEnterCritical>
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082ce:	b25b      	sxtb	r3, r3
 80082d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d4:	d103      	bne.n	80082de <xQueueSemaphoreTake+0x132>
 80082d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d8:	2200      	movs	r2, #0
 80082da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082e4:	b25b      	sxtb	r3, r3
 80082e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ea:	d103      	bne.n	80082f4 <xQueueSemaphoreTake+0x148>
 80082ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082f4:	f001 fc40 	bl	8009b78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80082f8:	463a      	mov	r2, r7
 80082fa:	f107 030c 	add.w	r3, r7, #12
 80082fe:	4611      	mov	r1, r2
 8008300:	4618      	mov	r0, r3
 8008302:	f000 fe9b 	bl	800903c <xTaskCheckForTimeOut>
 8008306:	4603      	mov	r3, r0
 8008308:	2b00      	cmp	r3, #0
 800830a:	d132      	bne.n	8008372 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800830c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800830e:	f000 f9cc 	bl	80086aa <prvIsQueueEmpty>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d026      	beq.n	8008366 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d109      	bne.n	8008334 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008320:	f001 fbfc 	bl	8009b1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	4618      	mov	r0, r3
 800832a:	f000 ffe3 	bl	80092f4 <xTaskPriorityInherit>
 800832e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008330:	f001 fc22 	bl	8009b78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008336:	3324      	adds	r3, #36	; 0x24
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	4611      	mov	r1, r2
 800833c:	4618      	mov	r0, r3
 800833e:	f000 fde1 	bl	8008f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008342:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008344:	f000 f95f 	bl	8008606 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008348:	f000 fc0c 	bl	8008b64 <xTaskResumeAll>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	f47f af69 	bne.w	8008226 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8008354:	4b18      	ldr	r3, [pc, #96]	; (80083b8 <xQueueSemaphoreTake+0x20c>)
 8008356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	e75f      	b.n	8008226 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008368:	f000 f94d 	bl	8008606 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800836c:	f000 fbfa 	bl	8008b64 <xTaskResumeAll>
 8008370:	e759      	b.n	8008226 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008374:	f000 f947 	bl	8008606 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008378:	f000 fbf4 	bl	8008b64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800837c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800837e:	f000 f994 	bl	80086aa <prvIsQueueEmpty>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	f43f af4e 	beq.w	8008226 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00d      	beq.n	80083ac <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8008390:	f001 fbc4 	bl	8009b1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008396:	f000 f88e 	bl	80084b6 <prvGetDisinheritPriorityAfterTimeout>
 800839a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800839c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a2:	4618      	mov	r0, r3
 80083a4:	f001 f8aa 	bl	80094fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80083a8:	f001 fbe6 	bl	8009b78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3738      	adds	r7, #56	; 0x38
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}
 80083b6:	bf00      	nop
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b08e      	sub	sp, #56	; 0x38
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	60b9      	str	r1, [r7, #8]
 80083c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d109      	bne.n	80083e6 <xQueueReceiveFromISR+0x2a>
 80083d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	623b      	str	r3, [r7, #32]
 80083e4:	e7fe      	b.n	80083e4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d103      	bne.n	80083f4 <xQueueReceiveFromISR+0x38>
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d101      	bne.n	80083f8 <xQueueReceiveFromISR+0x3c>
 80083f4:	2301      	movs	r3, #1
 80083f6:	e000      	b.n	80083fa <xQueueReceiveFromISR+0x3e>
 80083f8:	2300      	movs	r3, #0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d109      	bne.n	8008412 <xQueueReceiveFromISR+0x56>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	61fb      	str	r3, [r7, #28]
 8008410:	e7fe      	b.n	8008410 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008412:	f001 fc5f 	bl	8009cd4 <vPortValidateInterruptPriority>
	__asm volatile
 8008416:	f3ef 8211 	mrs	r2, BASEPRI
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61ba      	str	r2, [r7, #24]
 800842c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800842e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008430:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008436:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	2b00      	cmp	r3, #0
 800843c:	d02f      	beq.n	800849e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800844c:	f000 f8b5 	bl	80085ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008452:	1e5a      	subs	r2, r3, #1
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008458:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800845c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008460:	d112      	bne.n	8008488 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d016      	beq.n	8008498 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800846a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846c:	3310      	adds	r3, #16
 800846e:	4618      	mov	r0, r3
 8008470:	f000 fd6c 	bl	8008f4c <xTaskRemoveFromEventList>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00e      	beq.n	8008498 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00b      	beq.n	8008498 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e007      	b.n	8008498 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800848c:	3301      	adds	r3, #1
 800848e:	b2db      	uxtb	r3, r3
 8008490:	b25a      	sxtb	r2, r3
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008498:	2301      	movs	r3, #1
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
 800849c:	e001      	b.n	80084a2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800849e:	2300      	movs	r3, #0
 80084a0:	637b      	str	r3, [r7, #52]	; 0x34
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3738      	adds	r7, #56	; 0x38
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084b6:	b480      	push	{r7}
 80084b8:	b085      	sub	sp, #20
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d006      	beq.n	80084d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f1c3 0307 	rsb	r3, r3, #7
 80084d0:	60fb      	str	r3, [r7, #12]
 80084d2:	e001      	b.n	80084d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80084d8:	68fb      	ldr	r3, [r7, #12]
	}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b086      	sub	sp, #24
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008500:	2b00      	cmp	r3, #0
 8008502:	d10d      	bne.n	8008520 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d14d      	bne.n	80085a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	4618      	mov	r0, r3
 8008512:	f000 ff6f 	bl	80093f4 <xTaskPriorityDisinherit>
 8008516:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	609a      	str	r2, [r3, #8]
 800851e:	e043      	b.n	80085a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d119      	bne.n	800855a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6858      	ldr	r0, [r3, #4]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	461a      	mov	r2, r3
 8008530:	68b9      	ldr	r1, [r7, #8]
 8008532:	f001 fe07 	bl	800a144 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	441a      	add	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	429a      	cmp	r2, r3
 800854e:	d32b      	bcc.n	80085a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	605a      	str	r2, [r3, #4]
 8008558:	e026      	b.n	80085a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	68d8      	ldr	r0, [r3, #12]
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008562:	461a      	mov	r2, r3
 8008564:	68b9      	ldr	r1, [r7, #8]
 8008566:	f001 fded 	bl	800a144 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	425b      	negs	r3, r3
 8008574:	441a      	add	r2, r3
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	429a      	cmp	r2, r3
 8008584:	d207      	bcs.n	8008596 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	425b      	negs	r3, r3
 8008590:	441a      	add	r2, r3
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2b02      	cmp	r3, #2
 800859a:	d105      	bne.n	80085a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d002      	beq.n	80085a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	3b01      	subs	r3, #1
 80085a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	1c5a      	adds	r2, r3, #1
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085b0:	697b      	ldr	r3, [r7, #20]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d018      	beq.n	80085fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	68da      	ldr	r2, [r3, #12]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d4:	441a      	add	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	68da      	ldr	r2, [r3, #12]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d303      	bcc.n	80085ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	68d9      	ldr	r1, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f6:	461a      	mov	r2, r3
 80085f8:	6838      	ldr	r0, [r7, #0]
 80085fa:	f001 fda3 	bl	800a144 <memcpy>
	}
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800860e:	f001 fa85 	bl	8009b1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008618:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800861a:	e011      	b.n	8008640 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008620:	2b00      	cmp	r3, #0
 8008622:	d012      	beq.n	800864a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3324      	adds	r3, #36	; 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fc8f 	bl	8008f4c <xTaskRemoveFromEventList>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d001      	beq.n	8008638 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008634:	f000 fd62 	bl	80090fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008638:	7bfb      	ldrb	r3, [r7, #15]
 800863a:	3b01      	subs	r3, #1
 800863c:	b2db      	uxtb	r3, r3
 800863e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dce9      	bgt.n	800861c <prvUnlockQueue+0x16>
 8008648:	e000      	b.n	800864c <prvUnlockQueue+0x46>
					break;
 800864a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	22ff      	movs	r2, #255	; 0xff
 8008650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008654:	f001 fa90 	bl	8009b78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008658:	f001 fa60 	bl	8009b1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008662:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008664:	e011      	b.n	800868a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d012      	beq.n	8008694 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	3310      	adds	r3, #16
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fc6a 	bl	8008f4c <xTaskRemoveFromEventList>
 8008678:	4603      	mov	r3, r0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d001      	beq.n	8008682 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800867e:	f000 fd3d 	bl	80090fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	3b01      	subs	r3, #1
 8008686:	b2db      	uxtb	r3, r3
 8008688:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800868a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800868e:	2b00      	cmp	r3, #0
 8008690:	dce9      	bgt.n	8008666 <prvUnlockQueue+0x60>
 8008692:	e000      	b.n	8008696 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008694:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	22ff      	movs	r2, #255	; 0xff
 800869a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800869e:	f001 fa6b 	bl	8009b78 <vPortExitCritical>
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b084      	sub	sp, #16
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086b2:	f001 fa33 	bl	8009b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d102      	bne.n	80086c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086be:	2301      	movs	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	e001      	b.n	80086c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086c4:	2300      	movs	r3, #0
 80086c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086c8:	f001 fa56 	bl	8009b78 <vPortExitCritical>

	return xReturn;
 80086cc:	68fb      	ldr	r3, [r7, #12]
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086de:	f001 fa1d 	bl	8009b1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d102      	bne.n	80086f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80086ee:	2301      	movs	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
 80086f2:	e001      	b.n	80086f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80086f4:	2300      	movs	r3, #0
 80086f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086f8:	f001 fa3e 	bl	8009b78 <vPortExitCritical>

	return xReturn;
 80086fc:	68fb      	ldr	r3, [r7, #12]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008706:	b580      	push	{r7, lr}
 8008708:	b08e      	sub	sp, #56	; 0x38
 800870a:	af04      	add	r7, sp, #16
 800870c:	60f8      	str	r0, [r7, #12]
 800870e:	60b9      	str	r1, [r7, #8]
 8008710:	607a      	str	r2, [r7, #4]
 8008712:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008716:	2b00      	cmp	r3, #0
 8008718:	d109      	bne.n	800872e <xTaskCreateStatic+0x28>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	623b      	str	r3, [r7, #32]
 800872c:	e7fe      	b.n	800872c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d109      	bne.n	8008748 <xTaskCreateStatic+0x42>
 8008734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	61fb      	str	r3, [r7, #28]
 8008746:	e7fe      	b.n	8008746 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008748:	2354      	movs	r3, #84	; 0x54
 800874a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	2b54      	cmp	r3, #84	; 0x54
 8008750:	d009      	beq.n	8008766 <xTaskCreateStatic+0x60>
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	61bb      	str	r3, [r7, #24]
 8008764:	e7fe      	b.n	8008764 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008766:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800876a:	2b00      	cmp	r3, #0
 800876c:	d01e      	beq.n	80087ac <xTaskCreateStatic+0xa6>
 800876e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008770:	2b00      	cmp	r3, #0
 8008772:	d01b      	beq.n	80087ac <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800877c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800877e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008780:	2202      	movs	r2, #2
 8008782:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008786:	2300      	movs	r3, #0
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878c:	9302      	str	r3, [sp, #8]
 800878e:	f107 0314 	add.w	r3, r7, #20
 8008792:	9301      	str	r3, [sp, #4]
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	9300      	str	r3, [sp, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	68b9      	ldr	r1, [r7, #8]
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f850 	bl	8008844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087a6:	f000 f8d3 	bl	8008950 <prvAddNewTaskToReadyList>
 80087aa:	e001      	b.n	80087b0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80087ac:	2300      	movs	r3, #0
 80087ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087b0:	697b      	ldr	r3, [r7, #20]
	}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3728      	adds	r7, #40	; 0x28
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b08c      	sub	sp, #48	; 0x30
 80087be:	af04      	add	r7, sp, #16
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4618      	mov	r0, r3
 80087d0:	f001 fabe 	bl	8009d50 <pvPortMalloc>
 80087d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d00e      	beq.n	80087fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087dc:	2054      	movs	r0, #84	; 0x54
 80087de:	f001 fab7 	bl	8009d50 <pvPortMalloc>
 80087e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	631a      	str	r2, [r3, #48]	; 0x30
 80087f0:	e005      	b.n	80087fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087f2:	6978      	ldr	r0, [r7, #20]
 80087f4:	f001 fb6e 	bl	8009ed4 <vPortFree>
 80087f8:	e001      	b.n	80087fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087fa:	2300      	movs	r3, #0
 80087fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d017      	beq.n	8008834 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2200      	movs	r2, #0
 8008808:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	2300      	movs	r3, #0
 8008810:	9303      	str	r3, [sp, #12]
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	9302      	str	r3, [sp, #8]
 8008816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008818:	9301      	str	r3, [sp, #4]
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	68b9      	ldr	r1, [r7, #8]
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f000 f80e 	bl	8008844 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008828:	69f8      	ldr	r0, [r7, #28]
 800882a:	f000 f891 	bl	8008950 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800882e:	2301      	movs	r3, #1
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	e002      	b.n	800883a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008834:	f04f 33ff 	mov.w	r3, #4294967295
 8008838:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800883a:	69bb      	ldr	r3, [r7, #24]
	}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800885c:	3b01      	subs	r3, #1
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	4413      	add	r3, r2
 8008862:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	f023 0307 	bic.w	r3, r3, #7
 800886a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	2b00      	cmp	r3, #0
 8008874:	d009      	beq.n	800888a <prvInitialiseNewTask+0x46>
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	617b      	str	r3, [r7, #20]
 8008888:	e7fe      	b.n	8008888 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d01f      	beq.n	80088d0 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008890:	2300      	movs	r3, #0
 8008892:	61fb      	str	r3, [r7, #28]
 8008894:	e012      	b.n	80088bc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008896:	68ba      	ldr	r2, [r7, #8]
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	7819      	ldrb	r1, [r3, #0]
 800889e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	4413      	add	r3, r2
 80088a4:	3334      	adds	r3, #52	; 0x34
 80088a6:	460a      	mov	r2, r1
 80088a8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	781b      	ldrb	r3, [r3, #0]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d006      	beq.n	80088c4 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	3301      	adds	r3, #1
 80088ba:	61fb      	str	r3, [r7, #28]
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	2b0f      	cmp	r3, #15
 80088c0:	d9e9      	bls.n	8008896 <prvInitialiseNewTask+0x52>
 80088c2:	e000      	b.n	80088c6 <prvInitialiseNewTask+0x82>
			{
				break;
 80088c4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088ce:	e003      	b.n	80088d8 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	2200      	movs	r2, #0
 80088d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	2b06      	cmp	r3, #6
 80088dc:	d901      	bls.n	80088e2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088de:	2306      	movs	r3, #6
 80088e0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	2200      	movs	r2, #0
 80088f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	3304      	adds	r3, #4
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe ff49 	bl	8007790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008900:	3318      	adds	r3, #24
 8008902:	4618      	mov	r0, r3
 8008904:	f7fe ff44 	bl	8007790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	f1c3 0207 	rsb	r2, r3, #7
 8008914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008916:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800891c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2200      	movs	r2, #0
 8008922:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800892c:	683a      	ldr	r2, [r7, #0]
 800892e:	68f9      	ldr	r1, [r7, #12]
 8008930:	69b8      	ldr	r0, [r7, #24]
 8008932:	f000 ffcb 	bl	80098cc <pxPortInitialiseStack>
 8008936:	4602      	mov	r2, r0
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d002      	beq.n	8008948 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008946:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008948:	bf00      	nop
 800894a:	3720      	adds	r7, #32
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008958:	f001 f8e0 	bl	8009b1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800895c:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <prvAddNewTaskToReadyList+0xb8>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	3301      	adds	r3, #1
 8008962:	4a29      	ldr	r2, [pc, #164]	; (8008a08 <prvAddNewTaskToReadyList+0xb8>)
 8008964:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008966:	4b29      	ldr	r3, [pc, #164]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d109      	bne.n	8008982 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800896e:	4a27      	ldr	r2, [pc, #156]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008974:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <prvAddNewTaskToReadyList+0xb8>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d110      	bne.n	800899e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800897c:	f000 fbe2 	bl	8009144 <prvInitialiseTaskLists>
 8008980:	e00d      	b.n	800899e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008982:	4b23      	ldr	r3, [pc, #140]	; (8008a10 <prvAddNewTaskToReadyList+0xc0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800898a:	4b20      	ldr	r3, [pc, #128]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008994:	429a      	cmp	r2, r3
 8008996:	d802      	bhi.n	800899e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008998:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800899e:	4b1d      	ldr	r3, [pc, #116]	; (8008a14 <prvAddNewTaskToReadyList+0xc4>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3301      	adds	r3, #1
 80089a4:	4a1b      	ldr	r2, [pc, #108]	; (8008a14 <prvAddNewTaskToReadyList+0xc4>)
 80089a6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ac:	2201      	movs	r2, #1
 80089ae:	409a      	lsls	r2, r3
 80089b0:	4b19      	ldr	r3, [pc, #100]	; (8008a18 <prvAddNewTaskToReadyList+0xc8>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <prvAddNewTaskToReadyList+0xc8>)
 80089b8:	6013      	str	r3, [r2, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089be:	4613      	mov	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4a15      	ldr	r2, [pc, #84]	; (8008a1c <prvAddNewTaskToReadyList+0xcc>)
 80089c8:	441a      	add	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	3304      	adds	r3, #4
 80089ce:	4619      	mov	r1, r3
 80089d0:	4610      	mov	r0, r2
 80089d2:	f7fe feea 	bl	80077aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089d6:	f001 f8cf 	bl	8009b78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <prvAddNewTaskToReadyList+0xc0>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00e      	beq.n	8008a00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <prvAddNewTaskToReadyList+0xbc>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d207      	bcs.n	8008a00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089f0:	4b0b      	ldr	r3, [pc, #44]	; (8008a20 <prvAddNewTaskToReadyList+0xd0>)
 80089f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a00:	bf00      	nop
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000534 	.word	0x20000534
 8008a0c:	20000434 	.word	0x20000434
 8008a10:	20000540 	.word	0x20000540
 8008a14:	20000550 	.word	0x20000550
 8008a18:	2000053c 	.word	0x2000053c
 8008a1c:	20000438 	.word	0x20000438
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b084      	sub	sp, #16
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d016      	beq.n	8008a64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a36:	4b13      	ldr	r3, [pc, #76]	; (8008a84 <vTaskDelay+0x60>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d009      	beq.n	8008a52 <vTaskDelay+0x2e>
 8008a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	60bb      	str	r3, [r7, #8]
 8008a50:	e7fe      	b.n	8008a50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008a52:	f000 f879 	bl	8008b48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a56:	2100      	movs	r1, #0
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fed1 	bl	8009800 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a5e:	f000 f881 	bl	8008b64 <xTaskResumeAll>
 8008a62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d107      	bne.n	8008a7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008a6a:	4b07      	ldr	r3, [pc, #28]	; (8008a88 <vTaskDelay+0x64>)
 8008a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a7a:	bf00      	nop
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	2000055c 	.word	0x2000055c
 8008a88:	e000ed04 	.word	0xe000ed04

08008a8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b08a      	sub	sp, #40	; 0x28
 8008a90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a9a:	463a      	mov	r2, r7
 8008a9c:	1d39      	adds	r1, r7, #4
 8008a9e:	f107 0308 	add.w	r3, r7, #8
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7f7 fd14 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68ba      	ldr	r2, [r7, #8]
 8008aae:	9202      	str	r2, [sp, #8]
 8008ab0:	9301      	str	r3, [sp, #4]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	460a      	mov	r2, r1
 8008aba:	491d      	ldr	r1, [pc, #116]	; (8008b30 <vTaskStartScheduler+0xa4>)
 8008abc:	481d      	ldr	r0, [pc, #116]	; (8008b34 <vTaskStartScheduler+0xa8>)
 8008abe:	f7ff fe22 	bl	8008706 <xTaskCreateStatic>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	4b1c      	ldr	r3, [pc, #112]	; (8008b38 <vTaskStartScheduler+0xac>)
 8008ac6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008ac8:	4b1b      	ldr	r3, [pc, #108]	; (8008b38 <vTaskStartScheduler+0xac>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d002      	beq.n	8008ad6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	617b      	str	r3, [r7, #20]
 8008ad4:	e001      	b.n	8008ada <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d115      	bne.n	8008b0c <vTaskStartScheduler+0x80>
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008af2:	4b12      	ldr	r3, [pc, #72]	; (8008b3c <vTaskStartScheduler+0xb0>)
 8008af4:	f04f 32ff 	mov.w	r2, #4294967295
 8008af8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008afa:	4b11      	ldr	r3, [pc, #68]	; (8008b40 <vTaskStartScheduler+0xb4>)
 8008afc:	2201      	movs	r2, #1
 8008afe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b00:	4b10      	ldr	r3, [pc, #64]	; (8008b44 <vTaskStartScheduler+0xb8>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b06:	f000 ff6b 	bl	80099e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b0a:	e00d      	b.n	8008b28 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b12:	d109      	bne.n	8008b28 <vTaskStartScheduler+0x9c>
 8008b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b18:	f383 8811 	msr	BASEPRI, r3
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f3bf 8f4f 	dsb	sy
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	e7fe      	b.n	8008b26 <vTaskStartScheduler+0x9a>
}
 8008b28:	bf00      	nop
 8008b2a:	3718      	adds	r7, #24
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	0800a2fc 	.word	0x0800a2fc
 8008b34:	08009115 	.word	0x08009115
 8008b38:	20000558 	.word	0x20000558
 8008b3c:	20000554 	.word	0x20000554
 8008b40:	20000540 	.word	0x20000540
 8008b44:	20000538 	.word	0x20000538

08008b48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b48:	b480      	push	{r7}
 8008b4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b4c:	4b04      	ldr	r3, [pc, #16]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3301      	adds	r3, #1
 8008b52:	4a03      	ldr	r2, [pc, #12]	; (8008b60 <vTaskSuspendAll+0x18>)
 8008b54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b56:	bf00      	nop
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr
 8008b60:	2000055c 	.word	0x2000055c

08008b64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b72:	4b41      	ldr	r3, [pc, #260]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d109      	bne.n	8008b8e <xTaskResumeAll+0x2a>
 8008b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	603b      	str	r3, [r7, #0]
 8008b8c:	e7fe      	b.n	8008b8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b8e:	f000 ffc5 	bl	8009b1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b92:	4b39      	ldr	r3, [pc, #228]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	4a37      	ldr	r2, [pc, #220]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b9c:	4b36      	ldr	r3, [pc, #216]	; (8008c78 <xTaskResumeAll+0x114>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d161      	bne.n	8008c68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ba4:	4b35      	ldr	r3, [pc, #212]	; (8008c7c <xTaskResumeAll+0x118>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d05d      	beq.n	8008c68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bac:	e02e      	b.n	8008c0c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bae:	4b34      	ldr	r3, [pc, #208]	; (8008c80 <xTaskResumeAll+0x11c>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	3318      	adds	r3, #24
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fe52 	bl	8007864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3304      	adds	r3, #4
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7fe fe4d 	bl	8007864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	2201      	movs	r2, #1
 8008bd0:	409a      	lsls	r2, r3
 8008bd2:	4b2c      	ldr	r3, [pc, #176]	; (8008c84 <xTaskResumeAll+0x120>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	4a2a      	ldr	r2, [pc, #168]	; (8008c84 <xTaskResumeAll+0x120>)
 8008bda:	6013      	str	r3, [r2, #0]
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	4a27      	ldr	r2, [pc, #156]	; (8008c88 <xTaskResumeAll+0x124>)
 8008bea:	441a      	add	r2, r3
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	3304      	adds	r3, #4
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	4610      	mov	r0, r2
 8008bf4:	f7fe fdd9 	bl	80077aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	4b23      	ldr	r3, [pc, #140]	; (8008c8c <xTaskResumeAll+0x128>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d302      	bcc.n	8008c0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008c06:	4b22      	ldr	r3, [pc, #136]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c08:	2201      	movs	r2, #1
 8008c0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	; (8008c80 <xTaskResumeAll+0x11c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1cc      	bne.n	8008bae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c1a:	f000 fb2d 	bl	8009278 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c1e:	4b1d      	ldr	r3, [pc, #116]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d010      	beq.n	8008c4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c2a:	f000 f859 	bl	8008ce0 <xTaskIncrementTick>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008c34:	4b16      	ldr	r3, [pc, #88]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c36:	2201      	movs	r2, #1
 8008c38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d1f1      	bne.n	8008c2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008c46:	4b13      	ldr	r3, [pc, #76]	; (8008c94 <xTaskResumeAll+0x130>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c4c:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <xTaskResumeAll+0x12c>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d009      	beq.n	8008c68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c54:	2301      	movs	r3, #1
 8008c56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c58:	4b0f      	ldr	r3, [pc, #60]	; (8008c98 <xTaskResumeAll+0x134>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c68:	f000 ff86 	bl	8009b78 <vPortExitCritical>

	return xAlreadyYielded;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	2000055c 	.word	0x2000055c
 8008c7c:	20000534 	.word	0x20000534
 8008c80:	200004f4 	.word	0x200004f4
 8008c84:	2000053c 	.word	0x2000053c
 8008c88:	20000438 	.word	0x20000438
 8008c8c:	20000434 	.word	0x20000434
 8008c90:	20000548 	.word	0x20000548
 8008c94:	20000544 	.word	0x20000544
 8008c98:	e000ed04 	.word	0xe000ed04

08008c9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b083      	sub	sp, #12
 8008ca0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008ca2:	4b05      	ldr	r3, [pc, #20]	; (8008cb8 <xTaskGetTickCount+0x1c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ca8:	687b      	ldr	r3, [r7, #4]
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	20000538 	.word	0x20000538

08008cbc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cc2:	f001 f807 	bl	8009cd4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008cca:	4b04      	ldr	r3, [pc, #16]	; (8008cdc <xTaskGetTickCountFromISR+0x20>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cd0:	683b      	ldr	r3, [r7, #0]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3708      	adds	r7, #8
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}
 8008cda:	bf00      	nop
 8008cdc:	20000538 	.word	0x20000538

08008ce0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b086      	sub	sp, #24
 8008ce4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cea:	4b4e      	ldr	r3, [pc, #312]	; (8008e24 <xTaskIncrementTick+0x144>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	f040 8087 	bne.w	8008e02 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008cf4:	4b4c      	ldr	r3, [pc, #304]	; (8008e28 <xTaskIncrementTick+0x148>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3301      	adds	r3, #1
 8008cfa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008cfc:	4a4a      	ldr	r2, [pc, #296]	; (8008e28 <xTaskIncrementTick+0x148>)
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d11f      	bne.n	8008d48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d08:	4b48      	ldr	r3, [pc, #288]	; (8008e2c <xTaskIncrementTick+0x14c>)
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d009      	beq.n	8008d26 <xTaskIncrementTick+0x46>
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	603b      	str	r3, [r7, #0]
 8008d24:	e7fe      	b.n	8008d24 <xTaskIncrementTick+0x44>
 8008d26:	4b41      	ldr	r3, [pc, #260]	; (8008e2c <xTaskIncrementTick+0x14c>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	4b40      	ldr	r3, [pc, #256]	; (8008e30 <xTaskIncrementTick+0x150>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a3e      	ldr	r2, [pc, #248]	; (8008e2c <xTaskIncrementTick+0x14c>)
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	4a3e      	ldr	r2, [pc, #248]	; (8008e30 <xTaskIncrementTick+0x150>)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6013      	str	r3, [r2, #0]
 8008d3a:	4b3e      	ldr	r3, [pc, #248]	; (8008e34 <xTaskIncrementTick+0x154>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	4a3c      	ldr	r2, [pc, #240]	; (8008e34 <xTaskIncrementTick+0x154>)
 8008d42:	6013      	str	r3, [r2, #0]
 8008d44:	f000 fa98 	bl	8009278 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d48:	4b3b      	ldr	r3, [pc, #236]	; (8008e38 <xTaskIncrementTick+0x158>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d348      	bcc.n	8008de4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d52:	4b36      	ldr	r3, [pc, #216]	; (8008e2c <xTaskIncrementTick+0x14c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d104      	bne.n	8008d66 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d5c:	4b36      	ldr	r3, [pc, #216]	; (8008e38 <xTaskIncrementTick+0x158>)
 8008d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d62:	601a      	str	r2, [r3, #0]
					break;
 8008d64:	e03e      	b.n	8008de4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d66:	4b31      	ldr	r3, [pc, #196]	; (8008e2c <xTaskIncrementTick+0x14c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	68db      	ldr	r3, [r3, #12]
 8008d6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d76:	693a      	ldr	r2, [r7, #16]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d203      	bcs.n	8008d86 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d7e:	4a2e      	ldr	r2, [pc, #184]	; (8008e38 <xTaskIncrementTick+0x158>)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d84:	e02e      	b.n	8008de4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fd6a 	bl	8007864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d004      	beq.n	8008da2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	3318      	adds	r3, #24
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f7fe fd61 	bl	8007864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da6:	2201      	movs	r2, #1
 8008da8:	409a      	lsls	r2, r3
 8008daa:	4b24      	ldr	r3, [pc, #144]	; (8008e3c <xTaskIncrementTick+0x15c>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	4a22      	ldr	r2, [pc, #136]	; (8008e3c <xTaskIncrementTick+0x15c>)
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	4a1f      	ldr	r2, [pc, #124]	; (8008e40 <xTaskIncrementTick+0x160>)
 8008dc2:	441a      	add	r2, r3
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	4619      	mov	r1, r3
 8008dca:	4610      	mov	r0, r2
 8008dcc:	f7fe fced 	bl	80077aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dd4:	4b1b      	ldr	r3, [pc, #108]	; (8008e44 <xTaskIncrementTick+0x164>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d3b9      	bcc.n	8008d52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008dde:	2301      	movs	r3, #1
 8008de0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008de2:	e7b6      	b.n	8008d52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008de4:	4b17      	ldr	r3, [pc, #92]	; (8008e44 <xTaskIncrementTick+0x164>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dea:	4915      	ldr	r1, [pc, #84]	; (8008e40 <xTaskIncrementTick+0x160>)
 8008dec:	4613      	mov	r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	009b      	lsls	r3, r3, #2
 8008df4:	440b      	add	r3, r1
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d907      	bls.n	8008e0c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	617b      	str	r3, [r7, #20]
 8008e00:	e004      	b.n	8008e0c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e02:	4b11      	ldr	r3, [pc, #68]	; (8008e48 <xTaskIncrementTick+0x168>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	3301      	adds	r3, #1
 8008e08:	4a0f      	ldr	r2, [pc, #60]	; (8008e48 <xTaskIncrementTick+0x168>)
 8008e0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	; (8008e4c <xTaskIncrementTick+0x16c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d001      	beq.n	8008e18 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e18:	697b      	ldr	r3, [r7, #20]
}
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	2000055c 	.word	0x2000055c
 8008e28:	20000538 	.word	0x20000538
 8008e2c:	200004ec 	.word	0x200004ec
 8008e30:	200004f0 	.word	0x200004f0
 8008e34:	2000054c 	.word	0x2000054c
 8008e38:	20000554 	.word	0x20000554
 8008e3c:	2000053c 	.word	0x2000053c
 8008e40:	20000438 	.word	0x20000438
 8008e44:	20000434 	.word	0x20000434
 8008e48:	20000544 	.word	0x20000544
 8008e4c:	20000548 	.word	0x20000548

08008e50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e56:	4b26      	ldr	r3, [pc, #152]	; (8008ef0 <vTaskSwitchContext+0xa0>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d003      	beq.n	8008e66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e5e:	4b25      	ldr	r3, [pc, #148]	; (8008ef4 <vTaskSwitchContext+0xa4>)
 8008e60:	2201      	movs	r2, #1
 8008e62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e64:	e03e      	b.n	8008ee4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008e66:	4b23      	ldr	r3, [pc, #140]	; (8008ef4 <vTaskSwitchContext+0xa4>)
 8008e68:	2200      	movs	r2, #0
 8008e6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e6c:	4b22      	ldr	r3, [pc, #136]	; (8008ef8 <vTaskSwitchContext+0xa8>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	fab3 f383 	clz	r3, r3
 8008e78:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e7a:	7afb      	ldrb	r3, [r7, #11]
 8008e7c:	f1c3 031f 	rsb	r3, r3, #31
 8008e80:	617b      	str	r3, [r7, #20]
 8008e82:	491e      	ldr	r1, [pc, #120]	; (8008efc <vTaskSwitchContext+0xac>)
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	440b      	add	r3, r1
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <vTaskSwitchContext+0x5a>
	__asm volatile
 8008e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9a:	f383 8811 	msr	BASEPRI, r3
 8008e9e:	f3bf 8f6f 	isb	sy
 8008ea2:	f3bf 8f4f 	dsb	sy
 8008ea6:	607b      	str	r3, [r7, #4]
 8008ea8:	e7fe      	b.n	8008ea8 <vTaskSwitchContext+0x58>
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	4613      	mov	r3, r2
 8008eae:	009b      	lsls	r3, r3, #2
 8008eb0:	4413      	add	r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4a11      	ldr	r2, [pc, #68]	; (8008efc <vTaskSwitchContext+0xac>)
 8008eb6:	4413      	add	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	685a      	ldr	r2, [r3, #4]
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	605a      	str	r2, [r3, #4]
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	685a      	ldr	r2, [r3, #4]
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3308      	adds	r3, #8
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d104      	bne.n	8008eda <vTaskSwitchContext+0x8a>
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	4a07      	ldr	r2, [pc, #28]	; (8008f00 <vTaskSwitchContext+0xb0>)
 8008ee2:	6013      	str	r3, [r2, #0]
}
 8008ee4:	bf00      	nop
 8008ee6:	371c      	adds	r7, #28
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	2000055c 	.word	0x2000055c
 8008ef4:	20000548 	.word	0x20000548
 8008ef8:	2000053c 	.word	0x2000053c
 8008efc:	20000438 	.word	0x20000438
 8008f00:	20000434 	.word	0x20000434

08008f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d109      	bne.n	8008f28 <vTaskPlaceOnEventList+0x24>
 8008f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f18:	f383 8811 	msr	BASEPRI, r3
 8008f1c:	f3bf 8f6f 	isb	sy
 8008f20:	f3bf 8f4f 	dsb	sy
 8008f24:	60fb      	str	r3, [r7, #12]
 8008f26:	e7fe      	b.n	8008f26 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f28:	4b07      	ldr	r3, [pc, #28]	; (8008f48 <vTaskPlaceOnEventList+0x44>)
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	3318      	adds	r3, #24
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7fe fc5e 	bl	80077f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f36:	2101      	movs	r1, #1
 8008f38:	6838      	ldr	r0, [r7, #0]
 8008f3a:	f000 fc61 	bl	8009800 <prvAddCurrentTaskToDelayedList>
}
 8008f3e:	bf00      	nop
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}
 8008f46:	bf00      	nop
 8008f48:	20000434 	.word	0x20000434

08008f4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b086      	sub	sp, #24
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	68db      	ldr	r3, [r3, #12]
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <xTaskRemoveFromEventList+0x2a>
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e7fe      	b.n	8008f74 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	3318      	adds	r3, #24
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fc72 	bl	8007864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f80:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <xTaskRemoveFromEventList+0xac>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d11c      	bne.n	8008fc2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f7fe fc69 	bl	8007864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f96:	2201      	movs	r2, #1
 8008f98:	409a      	lsls	r2, r3
 8008f9a:	4b18      	ldr	r3, [pc, #96]	; (8008ffc <xTaskRemoveFromEventList+0xb0>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	4a16      	ldr	r2, [pc, #88]	; (8008ffc <xTaskRemoveFromEventList+0xb0>)
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa8:	4613      	mov	r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4a13      	ldr	r2, [pc, #76]	; (8009000 <xTaskRemoveFromEventList+0xb4>)
 8008fb2:	441a      	add	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	3304      	adds	r3, #4
 8008fb8:	4619      	mov	r1, r3
 8008fba:	4610      	mov	r0, r2
 8008fbc:	f7fe fbf5 	bl	80077aa <vListInsertEnd>
 8008fc0:	e005      	b.n	8008fce <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3318      	adds	r3, #24
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	480e      	ldr	r0, [pc, #56]	; (8009004 <xTaskRemoveFromEventList+0xb8>)
 8008fca:	f7fe fbee 	bl	80077aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd2:	4b0d      	ldr	r3, [pc, #52]	; (8009008 <xTaskRemoveFromEventList+0xbc>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d905      	bls.n	8008fe8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008fe0:	4b0a      	ldr	r3, [pc, #40]	; (800900c <xTaskRemoveFromEventList+0xc0>)
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	e001      	b.n	8008fec <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008fec:	697b      	ldr	r3, [r7, #20]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3718      	adds	r7, #24
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	2000055c 	.word	0x2000055c
 8008ffc:	2000053c 	.word	0x2000053c
 8009000:	20000438 	.word	0x20000438
 8009004:	200004f4 	.word	0x200004f4
 8009008:	20000434 	.word	0x20000434
 800900c:	20000548 	.word	0x20000548

08009010 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009018:	4b06      	ldr	r3, [pc, #24]	; (8009034 <vTaskInternalSetTimeOutState+0x24>)
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009020:	4b05      	ldr	r3, [pc, #20]	; (8009038 <vTaskInternalSetTimeOutState+0x28>)
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	605a      	str	r2, [r3, #4]
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	2000054c 	.word	0x2000054c
 8009038:	20000538 	.word	0x20000538

0800903c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b088      	sub	sp, #32
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d109      	bne.n	8009060 <xTaskCheckForTimeOut+0x24>
 800904c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009050:	f383 8811 	msr	BASEPRI, r3
 8009054:	f3bf 8f6f 	isb	sy
 8009058:	f3bf 8f4f 	dsb	sy
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	e7fe      	b.n	800905e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d109      	bne.n	800907a <xTaskCheckForTimeOut+0x3e>
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	60fb      	str	r3, [r7, #12]
 8009078:	e7fe      	b.n	8009078 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800907a:	f000 fd4f 	bl	8009b1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800907e:	4b1d      	ldr	r3, [pc, #116]	; (80090f4 <xTaskCheckForTimeOut+0xb8>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	69ba      	ldr	r2, [r7, #24]
 800908a:	1ad3      	subs	r3, r2, r3
 800908c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	d102      	bne.n	800909e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009098:	2300      	movs	r3, #0
 800909a:	61fb      	str	r3, [r7, #28]
 800909c:	e023      	b.n	80090e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	4b15      	ldr	r3, [pc, #84]	; (80090f8 <xTaskCheckForTimeOut+0xbc>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d007      	beq.n	80090ba <xTaskCheckForTimeOut+0x7e>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	69ba      	ldr	r2, [r7, #24]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d302      	bcc.n	80090ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090b4:	2301      	movs	r3, #1
 80090b6:	61fb      	str	r3, [r7, #28]
 80090b8:	e015      	b.n	80090e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	697a      	ldr	r2, [r7, #20]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d20b      	bcs.n	80090dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	1ad2      	subs	r2, r2, r3
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7ff ff9d 	bl	8009010 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090d6:	2300      	movs	r3, #0
 80090d8:	61fb      	str	r3, [r7, #28]
 80090da:	e004      	b.n	80090e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	2200      	movs	r2, #0
 80090e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80090e6:	f000 fd47 	bl	8009b78 <vPortExitCritical>

	return xReturn;
 80090ea:	69fb      	ldr	r3, [r7, #28]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	20000538 	.word	0x20000538
 80090f8:	2000054c 	.word	0x2000054c

080090fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009100:	4b03      	ldr	r3, [pc, #12]	; (8009110 <vTaskMissedYield+0x14>)
 8009102:	2201      	movs	r2, #1
 8009104:	601a      	str	r2, [r3, #0]
}
 8009106:	bf00      	nop
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000548 	.word	0x20000548

08009114 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800911c:	f000 f852 	bl	80091c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <prvIdleTask+0x28>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d9f9      	bls.n	800911c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <prvIdleTask+0x2c>)
 800912a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009138:	e7f0      	b.n	800911c <prvIdleTask+0x8>
 800913a:	bf00      	nop
 800913c:	20000438 	.word	0x20000438
 8009140:	e000ed04 	.word	0xe000ed04

08009144 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800914a:	2300      	movs	r3, #0
 800914c:	607b      	str	r3, [r7, #4]
 800914e:	e00c      	b.n	800916a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	4613      	mov	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	4a12      	ldr	r2, [pc, #72]	; (80091a4 <prvInitialiseTaskLists+0x60>)
 800915c:	4413      	add	r3, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe faf6 	bl	8007750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	3301      	adds	r3, #1
 8009168:	607b      	str	r3, [r7, #4]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b06      	cmp	r3, #6
 800916e:	d9ef      	bls.n	8009150 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009170:	480d      	ldr	r0, [pc, #52]	; (80091a8 <prvInitialiseTaskLists+0x64>)
 8009172:	f7fe faed 	bl	8007750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009176:	480d      	ldr	r0, [pc, #52]	; (80091ac <prvInitialiseTaskLists+0x68>)
 8009178:	f7fe faea 	bl	8007750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800917c:	480c      	ldr	r0, [pc, #48]	; (80091b0 <prvInitialiseTaskLists+0x6c>)
 800917e:	f7fe fae7 	bl	8007750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009182:	480c      	ldr	r0, [pc, #48]	; (80091b4 <prvInitialiseTaskLists+0x70>)
 8009184:	f7fe fae4 	bl	8007750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009188:	480b      	ldr	r0, [pc, #44]	; (80091b8 <prvInitialiseTaskLists+0x74>)
 800918a:	f7fe fae1 	bl	8007750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800918e:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <prvInitialiseTaskLists+0x78>)
 8009190:	4a05      	ldr	r2, [pc, #20]	; (80091a8 <prvInitialiseTaskLists+0x64>)
 8009192:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009194:	4b0a      	ldr	r3, [pc, #40]	; (80091c0 <prvInitialiseTaskLists+0x7c>)
 8009196:	4a05      	ldr	r2, [pc, #20]	; (80091ac <prvInitialiseTaskLists+0x68>)
 8009198:	601a      	str	r2, [r3, #0]
}
 800919a:	bf00      	nop
 800919c:	3708      	adds	r7, #8
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	20000438 	.word	0x20000438
 80091a8:	200004c4 	.word	0x200004c4
 80091ac:	200004d8 	.word	0x200004d8
 80091b0:	200004f4 	.word	0x200004f4
 80091b4:	20000508 	.word	0x20000508
 80091b8:	20000520 	.word	0x20000520
 80091bc:	200004ec 	.word	0x200004ec
 80091c0:	200004f0 	.word	0x200004f0

080091c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b082      	sub	sp, #8
 80091c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091ca:	e019      	b.n	8009200 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091cc:	f000 fca6 	bl	8009b1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091d0:	4b0f      	ldr	r3, [pc, #60]	; (8009210 <prvCheckTasksWaitingTermination+0x4c>)
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3304      	adds	r3, #4
 80091dc:	4618      	mov	r0, r3
 80091de:	f7fe fb41 	bl	8007864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80091e2:	4b0c      	ldr	r3, [pc, #48]	; (8009214 <prvCheckTasksWaitingTermination+0x50>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3b01      	subs	r3, #1
 80091e8:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <prvCheckTasksWaitingTermination+0x50>)
 80091ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80091ec:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <prvCheckTasksWaitingTermination+0x54>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	4a09      	ldr	r2, [pc, #36]	; (8009218 <prvCheckTasksWaitingTermination+0x54>)
 80091f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80091f6:	f000 fcbf 	bl	8009b78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f80e 	bl	800921c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <prvCheckTasksWaitingTermination+0x54>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1e1      	bne.n	80091cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009208:	bf00      	nop
 800920a:	3708      	adds	r7, #8
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	20000508 	.word	0x20000508
 8009214:	20000534 	.word	0x20000534
 8009218:	2000051c 	.word	0x2000051c

0800921c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800922a:	2b00      	cmp	r3, #0
 800922c:	d108      	bne.n	8009240 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009232:	4618      	mov	r0, r3
 8009234:	f000 fe4e 	bl	8009ed4 <vPortFree>
				vPortFree( pxTCB );
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fe4b 	bl	8009ed4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800923e:	e017      	b.n	8009270 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009246:	2b01      	cmp	r3, #1
 8009248:	d103      	bne.n	8009252 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fe42 	bl	8009ed4 <vPortFree>
	}
 8009250:	e00e      	b.n	8009270 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009258:	2b02      	cmp	r3, #2
 800925a:	d009      	beq.n	8009270 <prvDeleteTCB+0x54>
 800925c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	60fb      	str	r3, [r7, #12]
 800926e:	e7fe      	b.n	800926e <prvDeleteTCB+0x52>
	}
 8009270:	bf00      	nop
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bd80      	pop	{r7, pc}

08009278 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800927e:	4b0c      	ldr	r3, [pc, #48]	; (80092b0 <prvResetNextTaskUnblockTime+0x38>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d104      	bne.n	8009292 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009288:	4b0a      	ldr	r3, [pc, #40]	; (80092b4 <prvResetNextTaskUnblockTime+0x3c>)
 800928a:	f04f 32ff 	mov.w	r2, #4294967295
 800928e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009290:	e008      	b.n	80092a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009292:	4b07      	ldr	r3, [pc, #28]	; (80092b0 <prvResetNextTaskUnblockTime+0x38>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	4a04      	ldr	r2, [pc, #16]	; (80092b4 <prvResetNextTaskUnblockTime+0x3c>)
 80092a2:	6013      	str	r3, [r2, #0]
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	200004ec 	.word	0x200004ec
 80092b4:	20000554 	.word	0x20000554

080092b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092be:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <xTaskGetSchedulerState+0x34>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092c6:	2301      	movs	r3, #1
 80092c8:	607b      	str	r3, [r7, #4]
 80092ca:	e008      	b.n	80092de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092cc:	4b08      	ldr	r3, [pc, #32]	; (80092f0 <xTaskGetSchedulerState+0x38>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092d4:	2302      	movs	r3, #2
 80092d6:	607b      	str	r3, [r7, #4]
 80092d8:	e001      	b.n	80092de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80092da:	2300      	movs	r3, #0
 80092dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80092de:	687b      	ldr	r3, [r7, #4]
	}
 80092e0:	4618      	mov	r0, r3
 80092e2:	370c      	adds	r7, #12
 80092e4:	46bd      	mov	sp, r7
 80092e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ea:	4770      	bx	lr
 80092ec:	20000540 	.word	0x20000540
 80092f0:	2000055c 	.word	0x2000055c

080092f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d069      	beq.n	80093de <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930e:	4b36      	ldr	r3, [pc, #216]	; (80093e8 <xTaskPriorityInherit+0xf4>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009314:	429a      	cmp	r2, r3
 8009316:	d259      	bcs.n	80093cc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	2b00      	cmp	r3, #0
 800931e:	db06      	blt.n	800932e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009320:	4b31      	ldr	r3, [pc, #196]	; (80093e8 <xTaskPriorityInherit+0xf4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009326:	f1c3 0207 	rsb	r2, r3, #7
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	6959      	ldr	r1, [r3, #20]
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009336:	4613      	mov	r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4a2b      	ldr	r2, [pc, #172]	; (80093ec <xTaskPriorityInherit+0xf8>)
 8009340:	4413      	add	r3, r2
 8009342:	4299      	cmp	r1, r3
 8009344:	d13a      	bne.n	80093bc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	3304      	adds	r3, #4
 800934a:	4618      	mov	r0, r3
 800934c:	f7fe fa8a 	bl	8007864 <uxListRemove>
 8009350:	4603      	mov	r3, r0
 8009352:	2b00      	cmp	r3, #0
 8009354:	d115      	bne.n	8009382 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935a:	4924      	ldr	r1, [pc, #144]	; (80093ec <xTaskPriorityInherit+0xf8>)
 800935c:	4613      	mov	r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	4413      	add	r3, r2
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	440b      	add	r3, r1
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10a      	bne.n	8009382 <xTaskPriorityInherit+0x8e>
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	2201      	movs	r2, #1
 8009372:	fa02 f303 	lsl.w	r3, r2, r3
 8009376:	43da      	mvns	r2, r3
 8009378:	4b1d      	ldr	r3, [pc, #116]	; (80093f0 <xTaskPriorityInherit+0xfc>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4013      	ands	r3, r2
 800937e:	4a1c      	ldr	r2, [pc, #112]	; (80093f0 <xTaskPriorityInherit+0xfc>)
 8009380:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009382:	4b19      	ldr	r3, [pc, #100]	; (80093e8 <xTaskPriorityInherit+0xf4>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009390:	2201      	movs	r2, #1
 8009392:	409a      	lsls	r2, r3
 8009394:	4b16      	ldr	r3, [pc, #88]	; (80093f0 <xTaskPriorityInherit+0xfc>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4313      	orrs	r3, r2
 800939a:	4a15      	ldr	r2, [pc, #84]	; (80093f0 <xTaskPriorityInherit+0xfc>)
 800939c:	6013      	str	r3, [r2, #0]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a2:	4613      	mov	r3, r2
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4a10      	ldr	r2, [pc, #64]	; (80093ec <xTaskPriorityInherit+0xf8>)
 80093ac:	441a      	add	r2, r3
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	3304      	adds	r3, #4
 80093b2:	4619      	mov	r1, r3
 80093b4:	4610      	mov	r0, r2
 80093b6:	f7fe f9f8 	bl	80077aa <vListInsertEnd>
 80093ba:	e004      	b.n	80093c6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <xTaskPriorityInherit+0xf4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093c6:	2301      	movs	r3, #1
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	e008      	b.n	80093de <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093d0:	4b05      	ldr	r3, [pc, #20]	; (80093e8 <xTaskPriorityInherit+0xf4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d201      	bcs.n	80093de <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80093da:	2301      	movs	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80093de:	68fb      	ldr	r3, [r7, #12]
	}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3710      	adds	r7, #16
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}
 80093e8:	20000434 	.word	0x20000434
 80093ec:	20000438 	.word	0x20000438
 80093f0:	2000053c 	.word	0x2000053c

080093f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b086      	sub	sp, #24
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009400:	2300      	movs	r3, #0
 8009402:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d06c      	beq.n	80094e4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800940a:	4b39      	ldr	r3, [pc, #228]	; (80094f0 <xTaskPriorityDisinherit+0xfc>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	693a      	ldr	r2, [r7, #16]
 8009410:	429a      	cmp	r2, r3
 8009412:	d009      	beq.n	8009428 <xTaskPriorityDisinherit+0x34>
 8009414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009418:	f383 8811 	msr	BASEPRI, r3
 800941c:	f3bf 8f6f 	isb	sy
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	60fb      	str	r3, [r7, #12]
 8009426:	e7fe      	b.n	8009426 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800942c:	2b00      	cmp	r3, #0
 800942e:	d109      	bne.n	8009444 <xTaskPriorityDisinherit+0x50>
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	60bb      	str	r3, [r7, #8]
 8009442:	e7fe      	b.n	8009442 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009448:	1e5a      	subs	r2, r3, #1
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009456:	429a      	cmp	r2, r3
 8009458:	d044      	beq.n	80094e4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800945e:	2b00      	cmp	r3, #0
 8009460:	d140      	bne.n	80094e4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	3304      	adds	r3, #4
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe f9fc 	bl	8007864 <uxListRemove>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d115      	bne.n	800949e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009476:	491f      	ldr	r1, [pc, #124]	; (80094f4 <xTaskPriorityDisinherit+0x100>)
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <xTaskPriorityDisinherit+0xaa>
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	2201      	movs	r2, #1
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	43da      	mvns	r2, r3
 8009494:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <xTaskPriorityDisinherit+0x104>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4013      	ands	r3, r2
 800949a:	4a17      	ldr	r2, [pc, #92]	; (80094f8 <xTaskPriorityDisinherit+0x104>)
 800949c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094a6:	693b      	ldr	r3, [r7, #16]
 80094a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094aa:	f1c3 0207 	rsb	r2, r3, #7
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b6:	2201      	movs	r2, #1
 80094b8:	409a      	lsls	r2, r3
 80094ba:	4b0f      	ldr	r3, [pc, #60]	; (80094f8 <xTaskPriorityDisinherit+0x104>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4313      	orrs	r3, r2
 80094c0:	4a0d      	ldr	r2, [pc, #52]	; (80094f8 <xTaskPriorityDisinherit+0x104>)
 80094c2:	6013      	str	r3, [r2, #0]
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4a08      	ldr	r2, [pc, #32]	; (80094f4 <xTaskPriorityDisinherit+0x100>)
 80094d2:	441a      	add	r2, r3
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4619      	mov	r1, r3
 80094da:	4610      	mov	r0, r2
 80094dc:	f7fe f965 	bl	80077aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094e0:	2301      	movs	r3, #1
 80094e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094e4:	697b      	ldr	r3, [r7, #20]
	}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	20000434 	.word	0x20000434
 80094f4:	20000438 	.word	0x20000438
 80094f8:	2000053c 	.word	0x2000053c

080094fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800950a:	2301      	movs	r3, #1
 800950c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	f000 8081 	beq.w	8009618 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800951a:	2b00      	cmp	r3, #0
 800951c:	d109      	bne.n	8009532 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	e7fe      	b.n	8009530 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009536:	683a      	ldr	r2, [r7, #0]
 8009538:	429a      	cmp	r2, r3
 800953a:	d902      	bls.n	8009542 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	61fb      	str	r3, [r7, #28]
 8009540:	e002      	b.n	8009548 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009542:	69bb      	ldr	r3, [r7, #24]
 8009544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009546:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	69fa      	ldr	r2, [r7, #28]
 800954e:	429a      	cmp	r2, r3
 8009550:	d062      	beq.n	8009618 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	429a      	cmp	r2, r3
 800955a:	d15d      	bne.n	8009618 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800955c:	4b30      	ldr	r3, [pc, #192]	; (8009620 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	69ba      	ldr	r2, [r7, #24]
 8009562:	429a      	cmp	r2, r3
 8009564:	d109      	bne.n	800957a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8009566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800956a:	f383 8811 	msr	BASEPRI, r3
 800956e:	f3bf 8f6f 	isb	sy
 8009572:	f3bf 8f4f 	dsb	sy
 8009576:	60bb      	str	r3, [r7, #8]
 8009578:	e7fe      	b.n	8009578 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009580:	69bb      	ldr	r3, [r7, #24]
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	699b      	ldr	r3, [r3, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	db04      	blt.n	8009598 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	f1c3 0207 	rsb	r2, r3, #7
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	6959      	ldr	r1, [r3, #20]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	4613      	mov	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4a1f      	ldr	r2, [pc, #124]	; (8009624 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80095a8:	4413      	add	r3, r2
 80095aa:	4299      	cmp	r1, r3
 80095ac:	d134      	bne.n	8009618 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	3304      	adds	r3, #4
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe f956 	bl	8007864 <uxListRemove>
 80095b8:	4603      	mov	r3, r0
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d115      	bne.n	80095ea <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095c2:	4918      	ldr	r1, [pc, #96]	; (8009624 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80095c4:	4613      	mov	r3, r2
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	440b      	add	r3, r1
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <vTaskPriorityDisinheritAfterTimeout+0xee>
 80095d4:	69bb      	ldr	r3, [r7, #24]
 80095d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d8:	2201      	movs	r2, #1
 80095da:	fa02 f303 	lsl.w	r3, r2, r3
 80095de:	43da      	mvns	r2, r3
 80095e0:	4b11      	ldr	r3, [pc, #68]	; (8009628 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4013      	ands	r3, r2
 80095e6:	4a10      	ldr	r2, [pc, #64]	; (8009628 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80095e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	2201      	movs	r2, #1
 80095f0:	409a      	lsls	r2, r3
 80095f2:	4b0d      	ldr	r3, [pc, #52]	; (8009628 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	4a0b      	ldr	r2, [pc, #44]	; (8009628 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4a06      	ldr	r2, [pc, #24]	; (8009624 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800960a:	441a      	add	r2, r3
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	3304      	adds	r3, #4
 8009610:	4619      	mov	r1, r3
 8009612:	4610      	mov	r0, r2
 8009614:	f7fe f8c9 	bl	80077aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009618:	bf00      	nop
 800961a:	3720      	adds	r7, #32
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}
 8009620:	20000434 	.word	0x20000434
 8009624:	20000438 	.word	0x20000438
 8009628:	2000053c 	.word	0x2000053c

0800962c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800962c:	b480      	push	{r7}
 800962e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009630:	4b07      	ldr	r3, [pc, #28]	; (8009650 <pvTaskIncrementMutexHeldCount+0x24>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d004      	beq.n	8009642 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009638:	4b05      	ldr	r3, [pc, #20]	; (8009650 <pvTaskIncrementMutexHeldCount+0x24>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800963e:	3201      	adds	r2, #1
 8009640:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009642:	4b03      	ldr	r3, [pc, #12]	; (8009650 <pvTaskIncrementMutexHeldCount+0x24>)
 8009644:	681b      	ldr	r3, [r3, #0]
	}
 8009646:	4618      	mov	r0, r3
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	20000434 	.word	0x20000434

08009654 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800965e:	f000 fa5d 	bl	8009b1c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8009662:	4b1e      	ldr	r3, [pc, #120]	; (80096dc <ulTaskNotifyTake+0x88>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009668:	2b00      	cmp	r3, #0
 800966a:	d113      	bne.n	8009694 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800966c:	4b1b      	ldr	r3, [pc, #108]	; (80096dc <ulTaskNotifyTake+0x88>)
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800967c:	2101      	movs	r1, #1
 800967e:	6838      	ldr	r0, [r7, #0]
 8009680:	f000 f8be 	bl	8009800 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009684:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <ulTaskNotifyTake+0x8c>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009694:	f000 fa70 	bl	8009b78 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009698:	f000 fa40 	bl	8009b1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800969c:	4b0f      	ldr	r3, [pc, #60]	; (80096dc <ulTaskNotifyTake+0x88>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096a2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00c      	beq.n	80096c4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d004      	beq.n	80096ba <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <ulTaskNotifyTake+0x88>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	2200      	movs	r2, #0
 80096b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80096b8:	e004      	b.n	80096c4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80096ba:	4b08      	ldr	r3, [pc, #32]	; (80096dc <ulTaskNotifyTake+0x88>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68fa      	ldr	r2, [r7, #12]
 80096c0:	3a01      	subs	r2, #1
 80096c2:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096c4:	4b05      	ldr	r3, [pc, #20]	; (80096dc <ulTaskNotifyTake+0x88>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2200      	movs	r2, #0
 80096ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80096ce:	f000 fa53 	bl	8009b78 <vPortExitCritical>

		return ulReturn;
 80096d2:	68fb      	ldr	r3, [r7, #12]
	}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	20000434 	.word	0x20000434
 80096e0:	e000ed04 	.word	0xe000ed04

080096e4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b08a      	sub	sp, #40	; 0x28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d109      	bne.n	8009708 <vTaskNotifyGiveFromISR+0x24>
 80096f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	61bb      	str	r3, [r7, #24]
 8009706:	e7fe      	b.n	8009706 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009708:	f000 fae4 	bl	8009cd4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009710:	f3ef 8211 	mrs	r2, BASEPRI
 8009714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009718:	f383 8811 	msr	BASEPRI, r3
 800971c:	f3bf 8f6f 	isb	sy
 8009720:	f3bf 8f4f 	dsb	sy
 8009724:	617a      	str	r2, [r7, #20]
 8009726:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009728:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800972a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009732:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009736:	2202      	movs	r2, #2
 8009738:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009740:	1c5a      	adds	r2, r3, #1
 8009742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009744:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009746:	7ffb      	ldrb	r3, [r7, #31]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d144      	bne.n	80097d6 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009750:	2b00      	cmp	r3, #0
 8009752:	d009      	beq.n	8009768 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	e7fe      	b.n	8009766 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009768:	4b1f      	ldr	r3, [pc, #124]	; (80097e8 <vTaskNotifyGiveFromISR+0x104>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d11c      	bne.n	80097aa <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	3304      	adds	r3, #4
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe f875 	bl	8007864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800977a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800977c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800977e:	2201      	movs	r2, #1
 8009780:	409a      	lsls	r2, r3
 8009782:	4b1a      	ldr	r3, [pc, #104]	; (80097ec <vTaskNotifyGiveFromISR+0x108>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4313      	orrs	r3, r2
 8009788:	4a18      	ldr	r2, [pc, #96]	; (80097ec <vTaskNotifyGiveFromISR+0x108>)
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009790:	4613      	mov	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4413      	add	r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	4a15      	ldr	r2, [pc, #84]	; (80097f0 <vTaskNotifyGiveFromISR+0x10c>)
 800979a:	441a      	add	r2, r3
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	3304      	adds	r3, #4
 80097a0:	4619      	mov	r1, r3
 80097a2:	4610      	mov	r0, r2
 80097a4:	f7fe f801 	bl	80077aa <vListInsertEnd>
 80097a8:	e005      	b.n	80097b6 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	3318      	adds	r3, #24
 80097ae:	4619      	mov	r1, r3
 80097b0:	4810      	ldr	r0, [pc, #64]	; (80097f4 <vTaskNotifyGiveFromISR+0x110>)
 80097b2:	f7fd fffa 	bl	80077aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ba:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <vTaskNotifyGiveFromISR+0x114>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d908      	bls.n	80097d6 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d002      	beq.n	80097d0 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80097ca:	683b      	ldr	r3, [r7, #0]
 80097cc:	2201      	movs	r2, #1
 80097ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80097d0:	4b0a      	ldr	r3, [pc, #40]	; (80097fc <vTaskNotifyGiveFromISR+0x118>)
 80097d2:	2201      	movs	r2, #1
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80097e0:	bf00      	nop
 80097e2:	3728      	adds	r7, #40	; 0x28
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	2000055c 	.word	0x2000055c
 80097ec:	2000053c 	.word	0x2000053c
 80097f0:	20000438 	.word	0x20000438
 80097f4:	200004f4 	.word	0x200004f4
 80097f8:	20000434 	.word	0x20000434
 80097fc:	20000548 	.word	0x20000548

08009800 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800980a:	4b29      	ldr	r3, [pc, #164]	; (80098b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009810:	4b28      	ldr	r3, [pc, #160]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3304      	adds	r3, #4
 8009816:	4618      	mov	r0, r3
 8009818:	f7fe f824 	bl	8007864 <uxListRemove>
 800981c:	4603      	mov	r3, r0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d10b      	bne.n	800983a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009822:	4b24      	ldr	r3, [pc, #144]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009828:	2201      	movs	r2, #1
 800982a:	fa02 f303 	lsl.w	r3, r2, r3
 800982e:	43da      	mvns	r2, r3
 8009830:	4b21      	ldr	r3, [pc, #132]	; (80098b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4013      	ands	r3, r2
 8009836:	4a20      	ldr	r2, [pc, #128]	; (80098b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009838:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009840:	d10a      	bne.n	8009858 <prvAddCurrentTaskToDelayedList+0x58>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d007      	beq.n	8009858 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009848:	4b1a      	ldr	r3, [pc, #104]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	3304      	adds	r3, #4
 800984e:	4619      	mov	r1, r3
 8009850:	481a      	ldr	r0, [pc, #104]	; (80098bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009852:	f7fd ffaa 	bl	80077aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009856:	e026      	b.n	80098a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4413      	add	r3, r2
 800985e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009860:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	429a      	cmp	r2, r3
 800986e:	d209      	bcs.n	8009884 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009870:	4b13      	ldr	r3, [pc, #76]	; (80098c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	4b0f      	ldr	r3, [pc, #60]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3304      	adds	r3, #4
 800987a:	4619      	mov	r1, r3
 800987c:	4610      	mov	r0, r2
 800987e:	f7fd ffb8 	bl	80077f2 <vListInsert>
}
 8009882:	e010      	b.n	80098a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009884:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	4b0a      	ldr	r3, [pc, #40]	; (80098b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	3304      	adds	r3, #4
 800988e:	4619      	mov	r1, r3
 8009890:	4610      	mov	r0, r2
 8009892:	f7fd ffae 	bl	80077f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009896:	4b0c      	ldr	r3, [pc, #48]	; (80098c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	429a      	cmp	r2, r3
 800989e:	d202      	bcs.n	80098a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80098a0:	4a09      	ldr	r2, [pc, #36]	; (80098c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	6013      	str	r3, [r2, #0]
}
 80098a6:	bf00      	nop
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	20000538 	.word	0x20000538
 80098b4:	20000434 	.word	0x20000434
 80098b8:	2000053c 	.word	0x2000053c
 80098bc:	20000520 	.word	0x20000520
 80098c0:	200004f0 	.word	0x200004f0
 80098c4:	200004ec 	.word	0x200004ec
 80098c8:	20000554 	.word	0x20000554

080098cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3b04      	subs	r3, #4
 80098dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80098e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	3b04      	subs	r3, #4
 80098ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	f023 0201 	bic.w	r2, r3, #1
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3b04      	subs	r3, #4
 80098fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80098fc:	4a0c      	ldr	r2, [pc, #48]	; (8009930 <pxPortInitialiseStack+0x64>)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3b14      	subs	r3, #20
 8009906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3b04      	subs	r3, #4
 8009912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f06f 0202 	mvn.w	r2, #2
 800991a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3b20      	subs	r3, #32
 8009920:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009922:	68fb      	ldr	r3, [r7, #12]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr
 8009930:	08009935 	.word	0x08009935

08009934 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009934:	b480      	push	{r7}
 8009936:	b085      	sub	sp, #20
 8009938:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800993a:	2300      	movs	r3, #0
 800993c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800993e:	4b11      	ldr	r3, [pc, #68]	; (8009984 <prvTaskExitError+0x50>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009946:	d009      	beq.n	800995c <prvTaskExitError+0x28>
	__asm volatile
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	60fb      	str	r3, [r7, #12]
 800995a:	e7fe      	b.n	800995a <prvTaskExitError+0x26>
 800995c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009960:	f383 8811 	msr	BASEPRI, r3
 8009964:	f3bf 8f6f 	isb	sy
 8009968:	f3bf 8f4f 	dsb	sy
 800996c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800996e:	bf00      	nop
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0fc      	beq.n	8009970 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009976:	bf00      	nop
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	2000000c 	.word	0x2000000c
	...

08009990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009990:	4b07      	ldr	r3, [pc, #28]	; (80099b0 <pxCurrentTCBConst2>)
 8009992:	6819      	ldr	r1, [r3, #0]
 8009994:	6808      	ldr	r0, [r1, #0]
 8009996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999a:	f380 8809 	msr	PSP, r0
 800999e:	f3bf 8f6f 	isb	sy
 80099a2:	f04f 0000 	mov.w	r0, #0
 80099a6:	f380 8811 	msr	BASEPRI, r0
 80099aa:	4770      	bx	lr
 80099ac:	f3af 8000 	nop.w

080099b0 <pxCurrentTCBConst2>:
 80099b0:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099b4:	bf00      	nop
 80099b6:	bf00      	nop

080099b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099b8:	4808      	ldr	r0, [pc, #32]	; (80099dc <prvPortStartFirstTask+0x24>)
 80099ba:	6800      	ldr	r0, [r0, #0]
 80099bc:	6800      	ldr	r0, [r0, #0]
 80099be:	f380 8808 	msr	MSP, r0
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8814 	msr	CONTROL, r0
 80099ca:	b662      	cpsie	i
 80099cc:	b661      	cpsie	f
 80099ce:	f3bf 8f4f 	dsb	sy
 80099d2:	f3bf 8f6f 	isb	sy
 80099d6:	df00      	svc	0
 80099d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099da:	bf00      	nop
 80099dc:	e000ed08 	.word	0xe000ed08

080099e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80099e6:	4b44      	ldr	r3, [pc, #272]	; (8009af8 <xPortStartScheduler+0x118>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a44      	ldr	r2, [pc, #272]	; (8009afc <xPortStartScheduler+0x11c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d109      	bne.n	8009a04 <xPortStartScheduler+0x24>
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	613b      	str	r3, [r7, #16]
 8009a02:	e7fe      	b.n	8009a02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a04:	4b3c      	ldr	r3, [pc, #240]	; (8009af8 <xPortStartScheduler+0x118>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a3d      	ldr	r2, [pc, #244]	; (8009b00 <xPortStartScheduler+0x120>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d109      	bne.n	8009a22 <xPortStartScheduler+0x42>
 8009a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	60fb      	str	r3, [r7, #12]
 8009a20:	e7fe      	b.n	8009a20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a22:	4b38      	ldr	r3, [pc, #224]	; (8009b04 <xPortStartScheduler+0x124>)
 8009a24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	22ff      	movs	r2, #255	; 0xff
 8009a32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a3c:	78fb      	ldrb	r3, [r7, #3]
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	4b30      	ldr	r3, [pc, #192]	; (8009b08 <xPortStartScheduler+0x128>)
 8009a48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a4a:	4b30      	ldr	r3, [pc, #192]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a4c:	2207      	movs	r2, #7
 8009a4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a50:	e009      	b.n	8009a66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009a52:	4b2e      	ldr	r3, [pc, #184]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3b01      	subs	r3, #1
 8009a58:	4a2c      	ldr	r2, [pc, #176]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	005b      	lsls	r3, r3, #1
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a66:	78fb      	ldrb	r3, [r7, #3]
 8009a68:	b2db      	uxtb	r3, r3
 8009a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a6e:	2b80      	cmp	r3, #128	; 0x80
 8009a70:	d0ef      	beq.n	8009a52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a72:	4b26      	ldr	r3, [pc, #152]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f1c3 0307 	rsb	r3, r3, #7
 8009a7a:	2b04      	cmp	r3, #4
 8009a7c:	d009      	beq.n	8009a92 <xPortStartScheduler+0xb2>
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60bb      	str	r3, [r7, #8]
 8009a90:	e7fe      	b.n	8009a90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009a92:	4b1e      	ldr	r3, [pc, #120]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	021b      	lsls	r3, r3, #8
 8009a98:	4a1c      	ldr	r2, [pc, #112]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009a9c:	4b1b      	ldr	r3, [pc, #108]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009aa4:	4a19      	ldr	r2, [pc, #100]	; (8009b0c <xPortStartScheduler+0x12c>)
 8009aa6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ab0:	4b17      	ldr	r3, [pc, #92]	; (8009b10 <xPortStartScheduler+0x130>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	4a16      	ldr	r2, [pc, #88]	; (8009b10 <xPortStartScheduler+0x130>)
 8009ab6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009aba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009abc:	4b14      	ldr	r3, [pc, #80]	; (8009b10 <xPortStartScheduler+0x130>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a13      	ldr	r2, [pc, #76]	; (8009b10 <xPortStartScheduler+0x130>)
 8009ac2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ac6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ac8:	f000 f8d6 	bl	8009c78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009acc:	4b11      	ldr	r3, [pc, #68]	; (8009b14 <xPortStartScheduler+0x134>)
 8009ace:	2200      	movs	r2, #0
 8009ad0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ad2:	f000 f8f5 	bl	8009cc0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009ad6:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <xPortStartScheduler+0x138>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a0f      	ldr	r2, [pc, #60]	; (8009b18 <xPortStartScheduler+0x138>)
 8009adc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009ae0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ae2:	f7ff ff69 	bl	80099b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ae6:	f7ff f9b3 	bl	8008e50 <vTaskSwitchContext>
	prvTaskExitError();
 8009aea:	f7ff ff23 	bl	8009934 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3718      	adds	r7, #24
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	e000ed00 	.word	0xe000ed00
 8009afc:	410fc271 	.word	0x410fc271
 8009b00:	410fc270 	.word	0x410fc270
 8009b04:	e000e400 	.word	0xe000e400
 8009b08:	20000560 	.word	0x20000560
 8009b0c:	20000564 	.word	0x20000564
 8009b10:	e000ed20 	.word	0xe000ed20
 8009b14:	2000000c 	.word	0x2000000c
 8009b18:	e000ef34 	.word	0xe000ef34

08009b1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	f383 8811 	msr	BASEPRI, r3
 8009b2a:	f3bf 8f6f 	isb	sy
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b34:	4b0e      	ldr	r3, [pc, #56]	; (8009b70 <vPortEnterCritical+0x54>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3301      	adds	r3, #1
 8009b3a:	4a0d      	ldr	r2, [pc, #52]	; (8009b70 <vPortEnterCritical+0x54>)
 8009b3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b3e:	4b0c      	ldr	r3, [pc, #48]	; (8009b70 <vPortEnterCritical+0x54>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d10e      	bne.n	8009b64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b46:	4b0b      	ldr	r3, [pc, #44]	; (8009b74 <vPortEnterCritical+0x58>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	b2db      	uxtb	r3, r3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d009      	beq.n	8009b64 <vPortEnterCritical+0x48>
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	603b      	str	r3, [r7, #0]
 8009b62:	e7fe      	b.n	8009b62 <vPortEnterCritical+0x46>
	}
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr
 8009b70:	2000000c 	.word	0x2000000c
 8009b74:	e000ed04 	.word	0xe000ed04

08009b78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b7e:	4b11      	ldr	r3, [pc, #68]	; (8009bc4 <vPortExitCritical+0x4c>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d109      	bne.n	8009b9a <vPortExitCritical+0x22>
 8009b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	607b      	str	r3, [r7, #4]
 8009b98:	e7fe      	b.n	8009b98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009b9a:	4b0a      	ldr	r3, [pc, #40]	; (8009bc4 <vPortExitCritical+0x4c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3b01      	subs	r3, #1
 8009ba0:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <vPortExitCritical+0x4c>)
 8009ba2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ba4:	4b07      	ldr	r3, [pc, #28]	; (8009bc4 <vPortExitCritical+0x4c>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d104      	bne.n	8009bb6 <vPortExitCritical+0x3e>
 8009bac:	2300      	movs	r3, #0
 8009bae:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bb6:	bf00      	nop
 8009bb8:	370c      	adds	r7, #12
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	2000000c 	.word	0x2000000c
	...

08009bd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bd0:	f3ef 8009 	mrs	r0, PSP
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <pxCurrentTCBConst>)
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	f01e 0f10 	tst.w	lr, #16
 8009be0:	bf08      	it	eq
 8009be2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009be6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bea:	6010      	str	r0, [r2, #0]
 8009bec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009bf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009bf4:	f380 8811 	msr	BASEPRI, r0
 8009bf8:	f3bf 8f4f 	dsb	sy
 8009bfc:	f3bf 8f6f 	isb	sy
 8009c00:	f7ff f926 	bl	8008e50 <vTaskSwitchContext>
 8009c04:	f04f 0000 	mov.w	r0, #0
 8009c08:	f380 8811 	msr	BASEPRI, r0
 8009c0c:	bc09      	pop	{r0, r3}
 8009c0e:	6819      	ldr	r1, [r3, #0]
 8009c10:	6808      	ldr	r0, [r1, #0]
 8009c12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c16:	f01e 0f10 	tst.w	lr, #16
 8009c1a:	bf08      	it	eq
 8009c1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c20:	f380 8809 	msr	PSP, r0
 8009c24:	f3bf 8f6f 	isb	sy
 8009c28:	4770      	bx	lr
 8009c2a:	bf00      	nop
 8009c2c:	f3af 8000 	nop.w

08009c30 <pxCurrentTCBConst>:
 8009c30:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c34:	bf00      	nop
 8009c36:	bf00      	nop

08009c38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c42:	f383 8811 	msr	BASEPRI, r3
 8009c46:	f3bf 8f6f 	isb	sy
 8009c4a:	f3bf 8f4f 	dsb	sy
 8009c4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c50:	f7ff f846 	bl	8008ce0 <xTaskIncrementTick>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d003      	beq.n	8009c62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c5a:	4b06      	ldr	r3, [pc, #24]	; (8009c74 <SysTick_Handler+0x3c>)
 8009c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	2300      	movs	r3, #0
 8009c64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	e000ed04 	.word	0xe000ed04

08009c78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c78:	b480      	push	{r7}
 8009c7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	; (8009cac <vPortSetupTimerInterrupt+0x34>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009c82:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <vPortSetupTimerInterrupt+0x38>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009c88:	4b0a      	ldr	r3, [pc, #40]	; (8009cb4 <vPortSetupTimerInterrupt+0x3c>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a0a      	ldr	r2, [pc, #40]	; (8009cb8 <vPortSetupTimerInterrupt+0x40>)
 8009c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c92:	099b      	lsrs	r3, r3, #6
 8009c94:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <vPortSetupTimerInterrupt+0x44>)
 8009c96:	3b01      	subs	r3, #1
 8009c98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009c9a:	4b04      	ldr	r3, [pc, #16]	; (8009cac <vPortSetupTimerInterrupt+0x34>)
 8009c9c:	2207      	movs	r2, #7
 8009c9e:	601a      	str	r2, [r3, #0]
}
 8009ca0:	bf00      	nop
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	e000e010 	.word	0xe000e010
 8009cb0:	e000e018 	.word	0xe000e018
 8009cb4:	20000000 	.word	0x20000000
 8009cb8:	10624dd3 	.word	0x10624dd3
 8009cbc:	e000e014 	.word	0xe000e014

08009cc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009cc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cd0 <vPortEnableVFP+0x10>
 8009cc4:	6801      	ldr	r1, [r0, #0]
 8009cc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cca:	6001      	str	r1, [r0, #0]
 8009ccc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cce:	bf00      	nop
 8009cd0:	e000ed88 	.word	0xe000ed88

08009cd4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cda:	f3ef 8305 	mrs	r3, IPSR
 8009cde:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2b0f      	cmp	r3, #15
 8009ce4:	d913      	bls.n	8009d0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ce6:	4a16      	ldr	r2, [pc, #88]	; (8009d40 <vPortValidateInterruptPriority+0x6c>)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	4413      	add	r3, r2
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009cf0:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <vPortValidateInterruptPriority+0x70>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	7afa      	ldrb	r2, [r7, #11]
 8009cf6:	429a      	cmp	r2, r3
 8009cf8:	d209      	bcs.n	8009d0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfe:	f383 8811 	msr	BASEPRI, r3
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	f3bf 8f4f 	dsb	sy
 8009d0a:	607b      	str	r3, [r7, #4]
 8009d0c:	e7fe      	b.n	8009d0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d0e:	4b0e      	ldr	r3, [pc, #56]	; (8009d48 <vPortValidateInterruptPriority+0x74>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d16:	4b0d      	ldr	r3, [pc, #52]	; (8009d4c <vPortValidateInterruptPriority+0x78>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d909      	bls.n	8009d32 <vPortValidateInterruptPriority+0x5e>
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	e7fe      	b.n	8009d30 <vPortValidateInterruptPriority+0x5c>
	}
 8009d32:	bf00      	nop
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr
 8009d3e:	bf00      	nop
 8009d40:	e000e3f0 	.word	0xe000e3f0
 8009d44:	20000560 	.word	0x20000560
 8009d48:	e000ed0c 	.word	0xe000ed0c
 8009d4c:	20000564 	.word	0x20000564

08009d50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b08a      	sub	sp, #40	; 0x28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d5c:	f7fe fef4 	bl	8008b48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d60:	4b57      	ldr	r3, [pc, #348]	; (8009ec0 <pvPortMalloc+0x170>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d101      	bne.n	8009d6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d68:	f000 f90c 	bl	8009f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d6c:	4b55      	ldr	r3, [pc, #340]	; (8009ec4 <pvPortMalloc+0x174>)
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4013      	ands	r3, r2
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f040 808c 	bne.w	8009e92 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d01c      	beq.n	8009dba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009d80:	2208      	movs	r2, #8
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4413      	add	r3, r2
 8009d86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d013      	beq.n	8009dba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f023 0307 	bic.w	r3, r3, #7
 8009d98:	3308      	adds	r3, #8
 8009d9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f003 0307 	and.w	r3, r3, #7
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d009      	beq.n	8009dba <pvPortMalloc+0x6a>
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	f383 8811 	msr	BASEPRI, r3
 8009dae:	f3bf 8f6f 	isb	sy
 8009db2:	f3bf 8f4f 	dsb	sy
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	e7fe      	b.n	8009db8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d068      	beq.n	8009e92 <pvPortMalloc+0x142>
 8009dc0:	4b41      	ldr	r3, [pc, #260]	; (8009ec8 <pvPortMalloc+0x178>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d863      	bhi.n	8009e92 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dca:	4b40      	ldr	r3, [pc, #256]	; (8009ecc <pvPortMalloc+0x17c>)
 8009dcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dce:	4b3f      	ldr	r3, [pc, #252]	; (8009ecc <pvPortMalloc+0x17c>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009dd4:	e004      	b.n	8009de0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d903      	bls.n	8009df2 <pvPortMalloc+0xa2>
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f1      	bne.n	8009dd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009df2:	4b33      	ldr	r3, [pc, #204]	; (8009ec0 <pvPortMalloc+0x170>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d04a      	beq.n	8009e92 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2208      	movs	r2, #8
 8009e02:	4413      	add	r3, r2
 8009e04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	681a      	ldr	r2, [r3, #0]
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	685a      	ldr	r2, [r3, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	1ad2      	subs	r2, r2, r3
 8009e16:	2308      	movs	r3, #8
 8009e18:	005b      	lsls	r3, r3, #1
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d91e      	bls.n	8009e5c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	4413      	add	r3, r2
 8009e24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e26:	69bb      	ldr	r3, [r7, #24]
 8009e28:	f003 0307 	and.w	r3, r3, #7
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d009      	beq.n	8009e44 <pvPortMalloc+0xf4>
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	613b      	str	r3, [r7, #16]
 8009e42:	e7fe      	b.n	8009e42 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	1ad2      	subs	r2, r2, r3
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e56:	69b8      	ldr	r0, [r7, #24]
 8009e58:	f000 f8f6 	bl	800a048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e5c:	4b1a      	ldr	r3, [pc, #104]	; (8009ec8 <pvPortMalloc+0x178>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	4a18      	ldr	r2, [pc, #96]	; (8009ec8 <pvPortMalloc+0x178>)
 8009e68:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e6a:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <pvPortMalloc+0x178>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4b18      	ldr	r3, [pc, #96]	; (8009ed0 <pvPortMalloc+0x180>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d203      	bcs.n	8009e7e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e76:	4b14      	ldr	r3, [pc, #80]	; (8009ec8 <pvPortMalloc+0x178>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a15      	ldr	r2, [pc, #84]	; (8009ed0 <pvPortMalloc+0x180>)
 8009e7c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <pvPortMalloc+0x174>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	431a      	orrs	r2, r3
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8e:	2200      	movs	r2, #0
 8009e90:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e92:	f7fe fe67 	bl	8008b64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e96:	69fb      	ldr	r3, [r7, #28]
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <pvPortMalloc+0x164>
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	60fb      	str	r3, [r7, #12]
 8009eb2:	e7fe      	b.n	8009eb2 <pvPortMalloc+0x162>
	return pvReturn;
 8009eb4:	69fb      	ldr	r3, [r7, #28]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3728      	adds	r7, #40	; 0x28
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20004170 	.word	0x20004170
 8009ec4:	2000417c 	.word	0x2000417c
 8009ec8:	20004174 	.word	0x20004174
 8009ecc:	20004168 	.word	0x20004168
 8009ed0:	20004178 	.word	0x20004178

08009ed4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d046      	beq.n	8009f74 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ee6:	2308      	movs	r3, #8
 8009ee8:	425b      	negs	r3, r3
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4413      	add	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	685a      	ldr	r2, [r3, #4]
 8009ef8:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <vPortFree+0xa8>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	4013      	ands	r3, r2
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d109      	bne.n	8009f16 <vPortFree+0x42>
 8009f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	60fb      	str	r3, [r7, #12]
 8009f14:	e7fe      	b.n	8009f14 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d009      	beq.n	8009f32 <vPortFree+0x5e>
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	60bb      	str	r3, [r7, #8]
 8009f30:	e7fe      	b.n	8009f30 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	4b11      	ldr	r3, [pc, #68]	; (8009f7c <vPortFree+0xa8>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4013      	ands	r3, r2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d019      	beq.n	8009f74 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d115      	bne.n	8009f74 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	685a      	ldr	r2, [r3, #4]
 8009f4c:	4b0b      	ldr	r3, [pc, #44]	; (8009f7c <vPortFree+0xa8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	43db      	mvns	r3, r3
 8009f52:	401a      	ands	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f58:	f7fe fdf6 	bl	8008b48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	4b07      	ldr	r3, [pc, #28]	; (8009f80 <vPortFree+0xac>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4413      	add	r3, r2
 8009f66:	4a06      	ldr	r2, [pc, #24]	; (8009f80 <vPortFree+0xac>)
 8009f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f6a:	6938      	ldr	r0, [r7, #16]
 8009f6c:	f000 f86c 	bl	800a048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f70:	f7fe fdf8 	bl	8008b64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f74:	bf00      	nop
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	2000417c 	.word	0x2000417c
 8009f80:	20004174 	.word	0x20004174

08009f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f90:	4b27      	ldr	r3, [pc, #156]	; (800a030 <prvHeapInit+0xac>)
 8009f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f003 0307 	and.w	r3, r3, #7
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00c      	beq.n	8009fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	3307      	adds	r3, #7
 8009fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f023 0307 	bic.w	r3, r3, #7
 8009faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	4a1f      	ldr	r2, [pc, #124]	; (800a030 <prvHeapInit+0xac>)
 8009fb4:	4413      	add	r3, r2
 8009fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fbc:	4a1d      	ldr	r2, [pc, #116]	; (800a034 <prvHeapInit+0xb0>)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fc2:	4b1c      	ldr	r3, [pc, #112]	; (800a034 <prvHeapInit+0xb0>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	68ba      	ldr	r2, [r7, #8]
 8009fcc:	4413      	add	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009fd0:	2208      	movs	r2, #8
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	1a9b      	subs	r3, r3, r2
 8009fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f023 0307 	bic.w	r3, r3, #7
 8009fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	4a15      	ldr	r2, [pc, #84]	; (800a038 <prvHeapInit+0xb4>)
 8009fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009fe6:	4b14      	ldr	r3, [pc, #80]	; (800a038 <prvHeapInit+0xb4>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2200      	movs	r2, #0
 8009fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009fee:	4b12      	ldr	r3, [pc, #72]	; (800a038 <prvHeapInit+0xb4>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	1ad2      	subs	r2, r2, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a004:	4b0c      	ldr	r3, [pc, #48]	; (800a038 <prvHeapInit+0xb4>)
 800a006:	681a      	ldr	r2, [r3, #0]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	4a0a      	ldr	r2, [pc, #40]	; (800a03c <prvHeapInit+0xb8>)
 800a012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	4a09      	ldr	r2, [pc, #36]	; (800a040 <prvHeapInit+0xbc>)
 800a01a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a01c:	4b09      	ldr	r3, [pc, #36]	; (800a044 <prvHeapInit+0xc0>)
 800a01e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a022:	601a      	str	r2, [r3, #0]
}
 800a024:	bf00      	nop
 800a026:	3714      	adds	r7, #20
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	20000568 	.word	0x20000568
 800a034:	20004168 	.word	0x20004168
 800a038:	20004170 	.word	0x20004170
 800a03c:	20004178 	.word	0x20004178
 800a040:	20004174 	.word	0x20004174
 800a044:	2000417c 	.word	0x2000417c

0800a048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a050:	4b28      	ldr	r3, [pc, #160]	; (800a0f4 <prvInsertBlockIntoFreeList+0xac>)
 800a052:	60fb      	str	r3, [r7, #12]
 800a054:	e002      	b.n	800a05c <prvInsertBlockIntoFreeList+0x14>
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	60fb      	str	r3, [r7, #12]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	429a      	cmp	r2, r3
 800a064:	d8f7      	bhi.n	800a056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	685b      	ldr	r3, [r3, #4]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	4413      	add	r3, r2
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	429a      	cmp	r2, r3
 800a076:	d108      	bne.n	800a08a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	441a      	add	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	441a      	add	r2, r3
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d118      	bne.n	800a0d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681a      	ldr	r2, [r3, #0]
 800a0a2:	4b15      	ldr	r3, [pc, #84]	; (800a0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d00d      	beq.n	800a0c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685a      	ldr	r2, [r3, #4]
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	e008      	b.n	800a0d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0c6:	4b0c      	ldr	r3, [pc, #48]	; (800a0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	601a      	str	r2, [r3, #0]
 800a0ce:	e003      	b.n	800a0d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d002      	beq.n	800a0e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0e6:	bf00      	nop
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f0:	4770      	bx	lr
 800a0f2:	bf00      	nop
 800a0f4:	20004168 	.word	0x20004168
 800a0f8:	20004170 	.word	0x20004170

0800a0fc <__libc_init_array>:
 800a0fc:	b570      	push	{r4, r5, r6, lr}
 800a0fe:	4e0d      	ldr	r6, [pc, #52]	; (800a134 <__libc_init_array+0x38>)
 800a100:	4c0d      	ldr	r4, [pc, #52]	; (800a138 <__libc_init_array+0x3c>)
 800a102:	1ba4      	subs	r4, r4, r6
 800a104:	10a4      	asrs	r4, r4, #2
 800a106:	2500      	movs	r5, #0
 800a108:	42a5      	cmp	r5, r4
 800a10a:	d109      	bne.n	800a120 <__libc_init_array+0x24>
 800a10c:	4e0b      	ldr	r6, [pc, #44]	; (800a13c <__libc_init_array+0x40>)
 800a10e:	4c0c      	ldr	r4, [pc, #48]	; (800a140 <__libc_init_array+0x44>)
 800a110:	f000 f82c 	bl	800a16c <_init>
 800a114:	1ba4      	subs	r4, r4, r6
 800a116:	10a4      	asrs	r4, r4, #2
 800a118:	2500      	movs	r5, #0
 800a11a:	42a5      	cmp	r5, r4
 800a11c:	d105      	bne.n	800a12a <__libc_init_array+0x2e>
 800a11e:	bd70      	pop	{r4, r5, r6, pc}
 800a120:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a124:	4798      	blx	r3
 800a126:	3501      	adds	r5, #1
 800a128:	e7ee      	b.n	800a108 <__libc_init_array+0xc>
 800a12a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a12e:	4798      	blx	r3
 800a130:	3501      	adds	r5, #1
 800a132:	e7f2      	b.n	800a11a <__libc_init_array+0x1e>
 800a134:	0800a340 	.word	0x0800a340
 800a138:	0800a340 	.word	0x0800a340
 800a13c:	0800a340 	.word	0x0800a340
 800a140:	0800a344 	.word	0x0800a344

0800a144 <memcpy>:
 800a144:	b510      	push	{r4, lr}
 800a146:	1e43      	subs	r3, r0, #1
 800a148:	440a      	add	r2, r1
 800a14a:	4291      	cmp	r1, r2
 800a14c:	d100      	bne.n	800a150 <memcpy+0xc>
 800a14e:	bd10      	pop	{r4, pc}
 800a150:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a154:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a158:	e7f7      	b.n	800a14a <memcpy+0x6>

0800a15a <memset>:
 800a15a:	4402      	add	r2, r0
 800a15c:	4603      	mov	r3, r0
 800a15e:	4293      	cmp	r3, r2
 800a160:	d100      	bne.n	800a164 <memset+0xa>
 800a162:	4770      	bx	lr
 800a164:	f803 1b01 	strb.w	r1, [r3], #1
 800a168:	e7f9      	b.n	800a15e <memset+0x4>
	...

0800a16c <_init>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr

0800a178 <_fini>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr
