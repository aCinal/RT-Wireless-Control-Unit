
RT12e-WCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a014  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800a1a4  0800a1a4  0001a1a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a368  0800a368  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800a368  0800a368  0001a368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a370  0800a370  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a370  0800a370  0001a370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800a378  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048cc  20000010  0800a388  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048dc  0800a388  000248dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e416  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004197  00000000  00000000  0003e456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a08  00000000  00000000  000425f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001810  00000000  00000000  00043ff8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023fa1  00000000  00000000  00045808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00015adc  00000000  00000000  000697a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d36ed  00000000  00000000  0007f285  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00152972  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c58  00000000  00000000  001529f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a18c 	.word	0x0800a18c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800a18c 	.word	0x0800a18c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	2000002c 	.word	0x2000002c
 8000500:	20000080 	.word	0x20000080

08000504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b0ca      	sub	sp, #296	; 0x128
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050a:	f001 fb1d 	bl	8001b48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050e:	f000 f92d 	bl	800076c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fb17 	bl	8000b44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000516:	f000 faf5 	bl	8000b04 <MX_DMA_Init>
  MX_CAN1_Init();
 800051a:	f000 f991 	bl	8000840 <MX_CAN1_Init>
  MX_CRC_Init();
 800051e:	f000 f9c5 	bl	80008ac <MX_CRC_Init>
  MX_IWDG_Init();
 8000522:	f000 f9d7 	bl	80008d4 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 8000526:	f000 f9ef 	bl	8000908 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800052a:	f000 fa0d 	bl	8000948 <MX_SPI1_Init>
  MX_UART4_Init();
 800052e:	f000 fa41 	bl	80009b4 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000532:	f000 fa69 	bl	8000a08 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000536:	f000 fa91 	bl	8000a5c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800053a:	f000 fab9 	bl	8000ab0 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800053e:	f006 fc3b 	bl	8006db8 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of crcMutex */
  osMutexDef(crcMutex);
 8000542:	2300      	movs	r3, #0
 8000544:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000548:	2300      	movs	r3, #0
 800054a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  crcMutexHandle = osMutexCreate(osMutex(crcMutex));
 800054e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000552:	4618      	mov	r0, r3
 8000554:	f006 ff96 	bl	8007484 <osMutexCreate>
 8000558:	4602      	mov	r2, r0
 800055a:	4b6c      	ldr	r3, [pc, #432]	; (800070c <main+0x208>)
 800055c:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of reportToWatchdogQueue */
  osMessageQDef(reportToWatchdogQueue, 16, osThreadId);
 800055e:	4b6c      	ldr	r3, [pc, #432]	; (8000710 <main+0x20c>)
 8000560:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  reportToWatchdogQueueHandle = osMessageCreate(osMessageQ(reportToWatchdogQueue), NULL);
 800056a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f007 f823 	bl	80075bc <osMessageCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b66      	ldr	r3, [pc, #408]	; (8000714 <main+0x210>)
 800057a:	601a      	str	r2, [r3, #0]

  /* definition and creation of canTransmitQueue */
  osMessageQDef(canTransmitQueue, 16, CanFrameTypedef);
 800057c:	4b66      	ldr	r3, [pc, #408]	; (8000718 <main+0x214>)
 800057e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canTransmitQueueHandle = osMessageCreate(osMessageQ(canTransmitQueue), NULL);
 8000588:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f007 f814 	bl	80075bc <osMessageCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b61      	ldr	r3, [pc, #388]	; (800071c <main+0x218>)
 8000598:	601a      	str	r2, [r3, #0]

  /* definition and creation of canReceiveQueue */
  osMessageQDef(canReceiveQueue, 16, CanFrameTypedef);
 800059a:	4b5f      	ldr	r3, [pc, #380]	; (8000718 <main+0x214>)
 800059c:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canReceiveQueueHandle = osMessageCreate(osMessageQ(canReceiveQueue), NULL);
 80005a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f007 f805 	bl	80075bc <osMessageCreate>
 80005b2:	4602      	mov	r2, r0
 80005b4:	4b5a      	ldr	r3, [pc, #360]	; (8000720 <main+0x21c>)
 80005b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of sdSubscriptionQueue */
  osMessageQDef(sdSubscriptionQueue, 32, uint32_t);
 80005b8:	4b5a      	ldr	r3, [pc, #360]	; (8000724 <main+0x220>)
 80005ba:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80005be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdSubscriptionQueueHandle = osMessageCreate(osMessageQ(sdSubscriptionQueue), NULL);
 80005c4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 fff6 	bl	80075bc <osMessageCreate>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b55      	ldr	r3, [pc, #340]	; (8000728 <main+0x224>)
 80005d4:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, StartWatchdogTask, osPriorityNormal, 0, 256);
 80005d6:	4b55      	ldr	r3, [pc, #340]	; (800072c <main+0x228>)
 80005d8:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80005dc:	461d      	mov	r5, r3
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 80005ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f006 fee7 	bl	80073c4 <osThreadCreate>
 80005f6:	4602      	mov	r2, r0
 80005f8:	4b4d      	ldr	r3, [pc, #308]	; (8000730 <main+0x22c>)
 80005fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of btReceive */
  osThreadDef(btReceive, StartBtReceiveTask, osPriorityLow, 0, 256);
 80005fc:	4b4d      	ldr	r3, [pc, #308]	; (8000734 <main+0x230>)
 80005fe:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000602:	461d      	mov	r5, r3
 8000604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000608:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  btReceiveHandle = osThreadCreate(osThread(btReceive), NULL);
 8000610:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f006 fed4 	bl	80073c4 <osThreadCreate>
 800061c:	4602      	mov	r2, r0
 800061e:	4b46      	ldr	r3, [pc, #280]	; (8000738 <main+0x234>)
 8000620:	601a      	str	r2, [r3, #0]

  /* definition and creation of xbeeSend */
  osThreadDef(xbeeSend, StartXbeeSendTask, osPriorityIdle, 0, 256);
 8000622:	4b46      	ldr	r3, [pc, #280]	; (800073c <main+0x238>)
 8000624:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeSendHandle = osThreadCreate(osThread(xbeeSend), NULL);
 8000636:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f006 fec1 	bl	80073c4 <osThreadCreate>
 8000642:	4602      	mov	r2, r0
 8000644:	4b3e      	ldr	r3, [pc, #248]	; (8000740 <main+0x23c>)
 8000646:	601a      	str	r2, [r3, #0]

  /* definition and creation of xbeeReceive */
  osThreadDef(xbeeReceive, StartXbeeReceiveTask, osPriorityIdle, 0, 256);
 8000648:	4b3e      	ldr	r3, [pc, #248]	; (8000744 <main+0x240>)
 800064a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800064e:	461d      	mov	r5, r3
 8000650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeReceiveHandle = osThreadCreate(osThread(xbeeReceive), NULL);
 800065c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f006 feae 	bl	80073c4 <osThreadCreate>
 8000668:	4602      	mov	r2, r0
 800066a:	4b37      	ldr	r3, [pc, #220]	; (8000748 <main+0x244>)
 800066c:	601a      	str	r2, [r3, #0]

  /* definition and creation of gnssReceive */
  osThreadDef(gnssReceive, StartGnssReceiveTask, osPriorityIdle, 0, 256);
 800066e:	4b37      	ldr	r3, [pc, #220]	; (800074c <main+0x248>)
 8000670:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000674:	461d      	mov	r5, r3
 8000676:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800067a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800067e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gnssReceiveHandle = osThreadCreate(osThread(gnssReceive), NULL);
 8000682:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f006 fe9b 	bl	80073c4 <osThreadCreate>
 800068e:	4602      	mov	r2, r0
 8000690:	4b2f      	ldr	r3, [pc, #188]	; (8000750 <main+0x24c>)
 8000692:	601a      	str	r2, [r3, #0]

  /* definition and creation of rfReceive */
  osThreadDef(rfReceive, StartRfReceiveTask, osPriorityIdle, 0, 256);
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <main+0x250>)
 8000696:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800069a:	461d      	mov	r5, r3
 800069c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800069e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfReceiveHandle = osThreadCreate(osThread(rfReceive), NULL);
 80006a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 fe88 	bl	80073c4 <osThreadCreate>
 80006b4:	4602      	mov	r2, r0
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <main+0x254>)
 80006b8:	601a      	str	r2, [r3, #0]

  /* definition and creation of canGatekeeper */
  osThreadDef(canGatekeeper, StartCanGatekeeperTask, osPriorityIdle, 0, 256);
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	4a27      	ldr	r2, [pc, #156]	; (800075c <main+0x258>)
 80006c0:	461c      	mov	r4, r3
 80006c2:	4615      	mov	r5, r2
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canGatekeeperHandle = osThreadCreate(osThread(canGatekeeper), NULL);
 80006d0:	f107 031c 	add.w	r3, r7, #28
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f006 fe74 	bl	80073c4 <osThreadCreate>
 80006dc:	4602      	mov	r2, r0
 80006de:	4b20      	ldr	r3, [pc, #128]	; (8000760 <main+0x25c>)
 80006e0:	601a      	str	r2, [r3, #0]

  /* definition and creation of sdGatekeeper */
  osThreadDef(sdGatekeeper, StartSdGatekeeperTask, osPriorityIdle, 0, 256);
 80006e2:	463b      	mov	r3, r7
 80006e4:	4a1f      	ldr	r2, [pc, #124]	; (8000764 <main+0x260>)
 80006e6:	461c      	mov	r4, r3
 80006e8:	4615      	mov	r5, r2
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdGatekeeperHandle = osThreadCreate(osThread(sdGatekeeper), NULL);
 80006f6:	463b      	mov	r3, r7
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f006 fe62 	bl	80073c4 <osThreadCreate>
 8000700:	4602      	mov	r2, r0
 8000702:	4b19      	ldr	r3, [pc, #100]	; (8000768 <main+0x264>)
 8000704:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000706:	f006 fe3a 	bl	800737e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800070a:	e7fe      	b.n	800070a <main+0x206>
 800070c:	20004284 	.word	0x20004284
 8000710:	0800a1a4 	.word	0x0800a1a4
 8000714:	200041dc 	.word	0x200041dc
 8000718:	0800a1b4 	.word	0x0800a1b4
 800071c:	200043b4 	.word	0x200043b4
 8000720:	200043b0 	.word	0x200043b0
 8000724:	0800a1c4 	.word	0x0800a1c4
 8000728:	20004310 	.word	0x20004310
 800072c:	0800a1e0 	.word	0x0800a1e0
 8000730:	20004180 	.word	0x20004180
 8000734:	0800a208 	.word	0x0800a208
 8000738:	20004314 	.word	0x20004314
 800073c:	0800a230 	.word	0x0800a230
 8000740:	200041d8 	.word	0x200041d8
 8000744:	0800a258 	.word	0x0800a258
 8000748:	200041e0 	.word	0x200041e0
 800074c:	0800a280 	.word	0x0800a280
 8000750:	20004288 	.word	0x20004288
 8000754:	0800a2a8 	.word	0x0800a2a8
 8000758:	20004428 	.word	0x20004428
 800075c:	0800a2d4 	.word	0x0800a2d4
 8000760:	200043b8 	.word	0x200043b8
 8000764:	0800a300 	.word	0x0800a300
 8000768:	20004424 	.word	0x20004424

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f009 fcfd 	bl	800a17a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a27      	ldr	r2, [pc, #156]	; (8000838 <SystemClock_Config+0xcc>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a21      	ldr	r2, [pc, #132]	; (800083c <SystemClock_Config+0xd0>)
 80007b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007c8:	230a      	movs	r3, #10
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007d4:	2301      	movs	r3, #1
 80007d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d8:	2302      	movs	r3, #2
 80007da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007e0:	2310      	movs	r3, #16
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007e4:	23c0      	movs	r3, #192	; 0xc0
 80007e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007ec:	2304      	movs	r3, #4
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fcc7 	bl	8003188 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000800:	f000 fddc 	bl	80013bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f002 ff22 	bl	8003668 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082a:	f000 fdc7 	bl	80013bc <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000844:	4b17      	ldr	r3, [pc, #92]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000846:	4a18      	ldr	r2, [pc, #96]	; (80008a8 <MX_CAN1_Init+0x68>)
 8000848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800084a:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <MX_CAN1_Init+0x64>)
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000850:	4b14      	ldr	r3, [pc, #80]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_CAN1_Init+0x64>)
 800085e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_CAN1_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_CAN1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_CAN1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_CAN1_Init+0x64>)
 8000890:	f001 f9be 	bl	8001c10 <HAL_CAN_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800089a:	f000 fd8f 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200043fc 	.word	0x200043fc
 80008a8:	40006400 	.word	0x40006400

080008ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <MX_CRC_Init+0x20>)
 80008b2:	4a07      	ldr	r2, [pc, #28]	; (80008d0 <MX_CRC_Init+0x24>)
 80008b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <MX_CRC_Init+0x20>)
 80008b8:	f001 fe7e 	bl	80025b8 <HAL_CRC_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008c2:	f000 fd7b 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200041d0 	.word	0x200041d0
 80008d0:	40023000 	.word	0x40023000

080008d4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_IWDG_Init+0x2c>)
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <MX_IWDG_Init+0x30>)
 80008dc:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_IWDG_Init+0x2c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_IWDG_Init+0x2c>)
 80008e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008ea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_IWDG_Init+0x2c>)
 80008ee:	f002 fc02 	bl	80030f6 <HAL_IWDG_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80008f8:	f000 fd60 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200041c4 	.word	0x200041c4
 8000904:	40003000 	.word	0x40003000

08000908 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SDIO_SD_Init+0x38>)
 800090e:	4a0d      	ldr	r2, [pc, #52]	; (8000944 <MX_SDIO_SD_Init+0x3c>)
 8000910:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SDIO_SD_Init+0x38>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SDIO_SD_Init+0x38>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SDIO_SD_Init+0x38>)
 8000920:	2200      	movs	r2, #0
 8000922:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SDIO_SD_Init+0x38>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800092a:	4b05      	ldr	r3, [pc, #20]	; (8000940 <MX_SDIO_SD_Init+0x38>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000930:	4b03      	ldr	r3, [pc, #12]	; (8000940 <MX_SDIO_SD_Init+0x38>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr
 8000940:	2000428c 	.word	0x2000428c
 8000944:	40012c00 	.word	0x40012c00

08000948 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_SPI1_Init+0x64>)
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_SPI1_Init+0x64>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_SPI1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_SPI1_Init+0x64>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_SPI1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_SPI1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_SPI1_Init+0x64>)
 8000994:	220a      	movs	r2, #10
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_SPI1_Init+0x64>)
 800099a:	f004 fb61 	bl	8005060 <HAL_SPI_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a4:	f000 fd0a 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	20004358 	.word	0x20004358
 80009b0:	40013000 	.word	0x40013000

080009b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_UART4_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_UART4_Init+0x4c>)
 80009ec:	f004 fdda 	bl	80055a4 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 fce1 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20004318 	.word	0x20004318
 8000a04:	40004c00 	.word	0x40004c00

08000a08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a0c:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a0e:	4a12      	ldr	r2, [pc, #72]	; (8000a58 <MX_USART1_UART_Init+0x50>)
 8000a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	220c      	movs	r2, #12
 8000a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USART1_UART_Init+0x4c>)
 8000a40:	f004 fdb0 	bl	80055a4 <HAL_UART_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a4a:	f000 fcb7 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20004244 	.word	0x20004244
 8000a58:	40011000 	.word	0x40011000

08000a5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a62:	4a12      	ldr	r2, [pc, #72]	; (8000aac <MX_USART2_UART_Init+0x50>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f004 fd86 	bl	80055a4 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a9e:	f000 fc8d 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200043bc 	.word	0x200043bc
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MX_USART3_UART_Init+0x50>)
 8000ab8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aba:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ad6:	220c      	movs	r2, #12
 8000ad8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART3_UART_Init+0x4c>)
 8000ae8:	f004 fd5c 	bl	80055a4 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000af2:	f000 fc63 	bl	80013bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20004184 	.word	0x20004184
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_DMA_Init+0x3c>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <MX_DMA_Init+0x3c>)
 8000b14:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_DMA_Init+0x3c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2105      	movs	r1, #5
 8000b2a:	203a      	movs	r0, #58	; 0x3a
 8000b2c:	f001 fd1a 	bl	8002564 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b30:	203a      	movs	r0, #58	; 0x3a
 8000b32:	f001 fd33 	bl	800259c <HAL_NVIC_EnableIRQ>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	613b      	str	r3, [r7, #16]
 8000b5e:	4b46      	ldr	r3, [pc, #280]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a45      	ldr	r2, [pc, #276]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b43      	ldr	r3, [pc, #268]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60fb      	str	r3, [r7, #12]
 8000b7a:	4b3f      	ldr	r3, [pc, #252]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a3e      	ldr	r2, [pc, #248]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b3c      	ldr	r3, [pc, #240]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	60bb      	str	r3, [r7, #8]
 8000b96:	4b38      	ldr	r3, [pc, #224]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	4a37      	ldr	r2, [pc, #220]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000b9c:	f043 0302 	orr.w	r3, r3, #2
 8000ba0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba2:	4b35      	ldr	r3, [pc, #212]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f003 0302 	and.w	r3, r3, #2
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	607b      	str	r3, [r7, #4]
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a30      	ldr	r2, [pc, #192]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bb8:	f043 0308 	orr.w	r3, r3, #8
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <MX_GPIO_Init+0x134>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0308 	and.w	r3, r3, #8
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2108      	movs	r1, #8
 8000bce:	482b      	ldr	r0, [pc, #172]	; (8000c7c <MX_GPIO_Init+0x138>)
 8000bd0:	f002 fa78 	bl	80030c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI1_CSN_GPIO_Port, RF_SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4829      	ldr	r0, [pc, #164]	; (8000c80 <MX_GPIO_Init+0x13c>)
 8000bda:	f002 fa73 	bl	80030c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_PWR_UP_Pin|RF_TRX_CE_Pin|RF_TX_EN_Pin|GNSS_FORCE_ON_Pin 
 8000bde:	2200      	movs	r2, #0
 8000be0:	f243 0134 	movw	r1, #12340	; 0x3034
 8000be4:	4827      	ldr	r0, [pc, #156]	; (8000c84 <MX_GPIO_Init+0x140>)
 8000be6:	f002 fa6d 	bl	80030c4 <HAL_GPIO_WritePin>
                          |GNSS_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : XBEE_RSSI_Pin RF_DR_Pin RF_AM_Pin */
  GPIO_InitStruct.Pin = XBEE_RSSI_Pin|RF_DR_Pin|RF_AM_Pin;
 8000bea:	2334      	movs	r3, #52	; 0x34
 8000bec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	481f      	ldr	r0, [pc, #124]	; (8000c7c <MX_GPIO_Init+0x138>)
 8000bfe:	f002 f8c7 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_RESET_Pin */
  GPIO_InitStruct.Pin = XBEE_RESET_Pin;
 8000c02:	2308      	movs	r3, #8
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XBEE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	4818      	ldr	r0, [pc, #96]	; (8000c7c <MX_GPIO_Init+0x138>)
 8000c1a:	f002 f8b9 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = RF_SPI1_CSN_Pin;
 8000c1e:	2310      	movs	r3, #16
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <MX_GPIO_Init+0x13c>)
 8000c36:	f002 f8ab 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CD_Pin RF_uPCLK_Pin GNSS_1PPS_Pin */
  GPIO_InitStruct.Pin = RF_CD_Pin|RF_uPCLK_Pin|GNSS_1PPS_Pin;
 8000c3a:	230b      	movs	r3, #11
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480d      	ldr	r0, [pc, #52]	; (8000c84 <MX_GPIO_Init+0x140>)
 8000c4e:	f002 f89f 	bl	8002d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_PWR_UP_Pin RF_TRX_CE_Pin RF_TX_EN_Pin GNSS_FORCE_ON_Pin 
                           GNSS_RESET_Pin */
  GPIO_InitStruct.Pin = RF_PWR_UP_Pin|RF_TRX_CE_Pin|RF_TX_EN_Pin|GNSS_FORCE_ON_Pin 
 8000c52:	f243 0334 	movw	r3, #12340	; 0x3034
 8000c56:	617b      	str	r3, [r7, #20]
                          |GNSS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4806      	ldr	r0, [pc, #24]	; (8000c84 <MX_GPIO_Init+0x140>)
 8000c6c:	f002 f890 	bl	8002d90 <HAL_GPIO_Init>

}
 8000c70:	bf00      	nop
 8000c72:	3728      	adds	r7, #40	; 0x28
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020800 	.word	0x40020800
 8000c80:	40020000 	.word	0x40020000
 8000c84:	40020400 	.word	0x40020400

08000c88 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	static BaseType_t dummy; /* Buffer for pxHigherPriorityTaskWoken flag */
	switch ((uint32_t) huart->Instance) {
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <HAL_UART_RxCpltCallback+0x40>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d00a      	beq.n	8000cb0 <HAL_UART_RxCpltCallback+0x28>
 8000c9a:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <HAL_UART_RxCpltCallback+0x44>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d000      	beq.n	8000ca2 <HAL_UART_RxCpltCallback+0x1a>
	case (uint32_t) GNSS_UART_INSTANCE:
		/* Notify gnssReceive task */
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
		break;
	}
}
 8000ca0:	e00d      	b.n	8000cbe <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) btReceiveHandle, &dummy);
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <HAL_UART_RxCpltCallback+0x48>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	490b      	ldr	r1, [pc, #44]	; (8000cd4 <HAL_UART_RxCpltCallback+0x4c>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f008 fd2f 	bl	800970c <vTaskNotifyGiveFromISR>
		break;
 8000cae:	e006      	b.n	8000cbe <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <HAL_UART_RxCpltCallback+0x50>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <HAL_UART_RxCpltCallback+0x4c>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f008 fd28 	bl	800970c <vTaskNotifyGiveFromISR>
		break;
 8000cbc:	bf00      	nop
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40004800 	.word	0x40004800
 8000ccc:	40011000 	.word	0x40011000
 8000cd0:	20004314 	.word	0x20004314
 8000cd4:	20000280 	.word	0x20000280
 8000cd8:	20004288 	.word	0x20004288

08000cdc <StartWatchdogTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdogTask */
void StartWatchdogTask(void const * argument)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	; 0x38
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Initialize the watchdog */
	HAL_IWDG_Init(&hiwdg);
 8000ce4:	4847      	ldr	r0, [pc, #284]	; (8000e04 <StartWatchdogTask+0x128>)
 8000ce6:	f002 fa06 	bl	80030f6 <HAL_IWDG_Init>

	/* Define key-value pair array for testing threads activity */
	struct {
		osThreadId Id;
		bool Reported;
	} reportSheet[WCU_NUMBER_OF_WATCHED_THREADS ] = { { .Id = btReceiveHandle,
 8000cea:	4b47      	ldr	r3, [pc, #284]	; (8000e08 <StartWatchdogTask+0x12c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	743b      	strb	r3, [r7, #16]
 8000cf4:	4b45      	ldr	r3, [pc, #276]	; (8000e0c <StartWatchdogTask+0x130>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	763b      	strb	r3, [r7, #24]
 8000cfe:	4b44      	ldr	r3, [pc, #272]	; (8000e10 <StartWatchdogTask+0x134>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3020 	strb.w	r3, [r7, #32]
 8000d0a:	4b42      	ldr	r3, [pc, #264]	; (8000e14 <StartWatchdogTask+0x138>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000d16:	4b40      	ldr	r3, [pc, #256]	; (8000e18 <StartWatchdogTask+0x13c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	bool allReported; /* Flag raised when all watched threads have reported to the watchdog */

	/* Infinite loop */
	for (;;) {
		/* Test for all threads' activity */
		if (xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <StartWatchdogTask+0x140>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f107 0108 	add.w	r1, r7, #8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f007 f975 	bl	800801c <xQueueReceive>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d161      	bne.n	8000dfc <StartWatchdogTask+0x120>
		WCU_REPORTTOWATCHDOG_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			/* Identify the thread that just reported and set the appropriate flag in the report sheet */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d3e:	e018      	b.n	8000d72 <StartWatchdogTask+0x96>
				if (buff == reportSheet[i].Id) {
 8000d40:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d4a:	4413      	add	r3, r2
 8000d4c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d108      	bne.n	8000d68 <StartWatchdogTask+0x8c>
					reportSheet[i].Reported = true;
 8000d56:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d60:	4413      	add	r3, r2
 8000d62:	2201      	movs	r2, #1
 8000d64:	f803 2c28 	strb.w	r2, [r3, #-40]
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d72:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d9e2      	bls.n	8000d40 <StartWatchdogTask+0x64>
				}
			}

			/* Assume all threads reported to the watchdog */
			allReported = true;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			/* Test for threads that did not report */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000d86:	e015      	b.n	8000db4 <StartWatchdogTask+0xd8>
				if (reportSheet[i].Reported == false) {
 8000d88:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d92:	4413      	add	r3, r2
 8000d94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000d98:	f083 0301 	eor.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d003      	beq.n	8000daa <StartWatchdogTask+0xce>
					/* If a thread did not report to the watchdog, reset the flag and break */
					allReported = false;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8000da8:	e008      	b.n	8000dbc <StartWatchdogTask+0xe0>
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000daa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000dae:	3301      	adds	r3, #1
 8000db0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000db4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d9e5      	bls.n	8000d88 <StartWatchdogTask+0xac>
				}
			}

			if (allReported == true) {
 8000dbc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d01b      	beq.n	8000dfc <StartWatchdogTask+0x120>
				/* If all threads have reported to the watchdog, refresh the timer */
				HAL_IWDG_Refresh(&hiwdg);
 8000dc4:	480f      	ldr	r0, [pc, #60]	; (8000e04 <StartWatchdogTask+0x128>)
 8000dc6:	f002 f9cf 	bl	8003168 <HAL_IWDG_Refresh>

				/* Reset the report sheet */
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000dd0:	e00d      	b.n	8000dee <StartWatchdogTask+0x112>
						1U) {
					reportSheet[i].Reported = false;
 8000dd2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ddc:	4413      	add	r3, r2
 8000dde:	2200      	movs	r2, #0
 8000de0:	f803 2c28 	strb.w	r2, [r3, #-40]
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000de4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000de8:	3301      	adds	r3, #1
 8000dea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000dee:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d9ed      	bls.n	8000dd2 <StartWatchdogTask+0xf6>
				}

				/* Reset the flag */
				allReported = false;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000dfc:	2001      	movs	r0, #1
 8000dfe:	f006 fb2d 	bl	800745c <osDelay>
		if (xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000e02:	e78e      	b.n	8000d22 <StartWatchdogTask+0x46>
 8000e04:	200041c4 	.word	0x200041c4
 8000e08:	20004314 	.word	0x20004314
 8000e0c:	200041d8 	.word	0x200041d8
 8000e10:	20004288 	.word	0x20004288
 8000e14:	20004428 	.word	0x20004428
 8000e18:	200043b8 	.word	0x200043b8
 8000e1c:	200041dc 	.word	0x200041dc

08000e20 <StartBtReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBtReceiveTask */
void StartBtReceiveTask(void const * argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
	static uint16_t readCrc; /* Buffer for the transmitted CRC */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */

	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000e28:	2214      	movs	r2, #20
 8000e2a:	494a      	ldr	r1, [pc, #296]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000e2c:	484a      	ldr	r0, [pc, #296]	; (8000f58 <StartBtReceiveTask+0x138>)
 8000e2e:	f004 fd45 	bl	80058bc <HAL_UART_Receive_DMA>
		WCU_BT_UART_RX_BUFF_SIZE);

		/* Wait for notify from ISR/message received callback */
		if (ulTaskNotifyTake(pdTRUE, WCU_BT_UART_RX_NOTIFY_TAKE_TIMEOUT)
 8000e32:	f04f 31ff 	mov.w	r1, #4294967295
 8000e36:	2001      	movs	r0, #1
 8000e38:	f008 fc20 	bl	800967c <ulTaskNotifyTake>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d073      	beq.n	8000f2a <StartBtReceiveTask+0x10a>
				> 0UL) {
			/* Validate the VER and RES/SEQ field */
			if (btUartRxBuff[0] != R3TP_VER0_VER_RES_SEQ_BYTE) {
 8000e42:	4b44      	ldr	r3, [pc, #272]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d17b      	bne.n	8000f42 <StartBtReceiveTask+0x122>
				 */
				continue;
			}

			/* Validate the END SEQ field */
			if (btUartRxBuff[R3TP_VER0_FRAME_SIZE - 2U] != R3TP_END_SEQ_LOW_BYTE
 8000e4a:	4b42      	ldr	r3, [pc, #264]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000e4c:	7c9b      	ldrb	r3, [r3, #18]
 8000e4e:	2bde      	cmp	r3, #222	; 0xde
 8000e50:	d179      	bne.n	8000f46 <StartBtReceiveTask+0x126>
					|| btUartRxBuff[R3TP_VER0_FRAME_SIZE - 1U]
 8000e52:	4b40      	ldr	r3, [pc, #256]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000e54:	7cdb      	ldrb	r3, [r3, #19]
 8000e56:	2bed      	cmp	r3, #237	; 0xed
 8000e58:	d175      	bne.n	8000f46 <StartBtReceiveTask+0x126>
				 */
				continue;
			}

			/* Read CRC - note that the CRC is transmitted as little endian */
			readCrc = READAS16BIT(btUartRxBuff[3], btUartRxBuff[2]);
 8000e5a:	4b3e      	ldr	r3, [pc, #248]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000e5c:	78db      	ldrb	r3, [r3, #3]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	4b3c      	ldr	r3, [pc, #240]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	b21b      	sxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b21b      	sxth	r3, r3
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <StartBtReceiveTask+0x13c>)
 8000e70:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(btUartRxBuff + 2U, 0x00, 2U);
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <StartBtReceiveTask+0x140>)
 8000e74:	2202      	movs	r2, #2
 8000e76:	2100      	movs	r1, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f009 f97e 	bl	800a17a <memset>

			/* Calculate the CRC */
			if (osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT) == osOK) {
 8000e7e:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <StartBtReceiveTask+0x144>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f04f 31ff 	mov.w	r1, #4294967295
 8000e86:	4618      	mov	r0, r3
 8000e88:	f006 fb14 	bl	80074b4 <osMutexWait>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d15b      	bne.n	8000f4a <StartBtReceiveTask+0x12a>
				calculatedCrc =
						GET16LSBITS(
 8000e92:	2205      	movs	r2, #5
 8000e94:	492f      	ldr	r1, [pc, #188]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000e96:	4834      	ldr	r0, [pc, #208]	; (8000f68 <StartBtReceiveTask+0x148>)
 8000e98:	f001 fbaa 	bl	80025f0 <HAL_CRC_Calculate>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	b29a      	uxth	r2, r3
				calculatedCrc =
 8000ea0:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <StartBtReceiveTask+0x14c>)
 8000ea2:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t*)btUartRxBuff, WCU_BT_UART_RX_BUFF_SIZE / 4U));
				osMutexRelease(crcMutexHandle);
 8000ea4:	4b2f      	ldr	r3, [pc, #188]	; (8000f64 <StartBtReceiveTask+0x144>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f006 fb51 	bl	8007550 <osMutexRelease>
				 */
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 8000eae:	4b2b      	ldr	r3, [pc, #172]	; (8000f5c <StartBtReceiveTask+0x13c>)
 8000eb0:	881a      	ldrh	r2, [r3, #0]
 8000eb2:	4b2e      	ldr	r3, [pc, #184]	; (8000f6c <StartBtReceiveTask+0x14c>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d149      	bne.n	8000f4e <StartBtReceiveTask+0x12e>
				 */
				continue;
			}

			/* Read the CAN ID - note that the CAN ID is transmitted as little endian */
			canFrame.Header.Tx.StdId = READAS32BIT(btUartRxBuff[7],
 8000eba:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000ebc:	79db      	ldrb	r3, [r3, #7]
 8000ebe:	061a      	lsls	r2, r3, #24
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000ec2:	799b      	ldrb	r3, [r3, #6]
 8000ec4:	041b      	lsls	r3, r3, #16
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000eca:	795b      	ldrb	r3, [r3, #5]
 8000ecc:	021b      	lsls	r3, r3, #8
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	4a20      	ldr	r2, [pc, #128]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000ed2:	7912      	ldrb	r2, [r2, #4]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	4b25      	ldr	r3, [pc, #148]	; (8000f70 <StartBtReceiveTask+0x150>)
 8000eda:	605a      	str	r2, [r3, #4]
					btUartRxBuff[6], btUartRxBuff[5], btUartRxBuff[4]);
			/* Read the Data Length Code */
			canFrame.Header.Tx.DLC = (uint32_t) (
					btUartRxBuff[8] < WCU_CAN_PAYLOAD_SIZE ?
 8000edc:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
			canFrame.Header.Tx.DLC = (uint32_t) (
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	bf28      	it	cs
 8000ee4:	2308      	movcs	r3, #8
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <StartBtReceiveTask+0x150>)
 8000eec:	615a      	str	r2, [r3, #20]
							btUartRxBuff[8] : WCU_CAN_PAYLOAD_SIZE);

			/* Read the payload */
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e00d      	b.n	8000f10 <StartBtReceiveTask+0xf0>
				canFrame.Payload[i] = btUartRxBuff[9 + i];
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	f103 0209 	add.w	r2, r3, #9
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	4915      	ldr	r1, [pc, #84]	; (8000f54 <StartBtReceiveTask+0x134>)
 8000efe:	5c89      	ldrb	r1, [r1, r2]
 8000f00:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <StartBtReceiveTask+0x150>)
 8000f02:	4413      	add	r3, r2
 8000f04:	460a      	mov	r2, r1
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	7bfa      	ldrb	r2, [r7, #15]
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <StartBtReceiveTask+0x150>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d3ec      	bcc.n	8000ef4 <StartBtReceiveTask+0xd4>
			}

			/* Push CAN frame to queue */
			if (xQueueSend(canTransmitQueueHandle, &canFrame,
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <StartBtReceiveTask+0x154>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295
 8000f24:	4912      	ldr	r1, [pc, #72]	; (8000f70 <StartBtReceiveTask+0x150>)
 8000f26:	f006 fe61 	bl	8007bec <xQueueGenericSend>
				 */
			}
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &btReceiveHandle,
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <StartBtReceiveTask+0x158>)
 8000f2c:	6818      	ldr	r0, [r3, #0]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	f04f 32ff 	mov.w	r2, #4294967295
 8000f34:	4911      	ldr	r1, [pc, #68]	; (8000f7c <StartBtReceiveTask+0x15c>)
 8000f36:	f006 fe59 	bl	8007bec <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f006 fa8e 	bl	800745c <osDelay>
 8000f40:	e772      	b.n	8000e28 <StartBtReceiveTask+0x8>
				continue;
 8000f42:	bf00      	nop
 8000f44:	e770      	b.n	8000e28 <StartBtReceiveTask+0x8>
				continue;
 8000f46:	bf00      	nop
 8000f48:	e76e      	b.n	8000e28 <StartBtReceiveTask+0x8>
				continue;
 8000f4a:	bf00      	nop
 8000f4c:	e76c      	b.n	8000e28 <StartBtReceiveTask+0x8>
				continue;
 8000f4e:	bf00      	nop
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000f50:	e76a      	b.n	8000e28 <StartBtReceiveTask+0x8>
 8000f52:	bf00      	nop
 8000f54:	20000284 	.word	0x20000284
 8000f58:	20004244 	.word	0x20004244
 8000f5c:	20000298 	.word	0x20000298
 8000f60:	20000286 	.word	0x20000286
 8000f64:	20004284 	.word	0x20004284
 8000f68:	200041d0 	.word	0x200041d0
 8000f6c:	2000029a 	.word	0x2000029a
 8000f70:	2000029c 	.word	0x2000029c
 8000f74:	200043b4 	.word	0x200043b4
 8000f78:	200041dc 	.word	0x200041dc
 8000f7c:	20004314 	.word	0x20004314

08000f80 <StartXbeeSendTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeSendTask */
void StartXbeeSendTask(void const * argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	static uint8_t xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE]; /* UART Tx buffer */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */
	static uint8_t seqNum = 0U; /* Sequence number */

	/* Activate XBEE Pro by driving the XBEE_RESET pin high */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2108      	movs	r1, #8
 8000f8c:	4846      	ldr	r0, [pc, #280]	; (80010a8 <StartXbeeSendTask+0x128>)
 8000f8e:	f002 f899 	bl	80030c4 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <StartXbeeSendTask+0x12c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2200      	movs	r2, #0
 8000f98:	4945      	ldr	r1, [pc, #276]	; (80010b0 <StartXbeeSendTask+0x130>)
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 f83e 	bl	800801c <xQueueReceive>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d172      	bne.n	800108c <StartXbeeSendTask+0x10c>
		WCU_CANSUBBEDFRAMES_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			if (frameBuff.DataDirection == RX) {
 8000fa6:	4b43      	ldr	r3, [pc, #268]	; (80010b4 <StartXbeeSendTask+0x134>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d16e      	bne.n	800108c <StartXbeeSendTask+0x10c>
				/* Clear the buffer */
				memset(xbeeUartTxBuff, 0x00, R3TP_VER0_FRAME_SIZE);
 8000fae:	2214      	movs	r2, #20
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	483f      	ldr	r0, [pc, #252]	; (80010b0 <StartXbeeSendTask+0x130>)
 8000fb4:	f009 f8e1 	bl	800a17a <memset>

				/* Set VER and RES/SEQ field */
				xbeeUartTxBuff[0] = R3TP_VER0_VER_RES_SEQ_BYTE;
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	; (80010b0 <StartXbeeSendTask+0x130>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]

				/* Set the SEQ NUM field */
				xbeeUartTxBuff[1] = seqNum;
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <StartXbeeSendTask+0x138>)
 8000fc0:	781a      	ldrb	r2, [r3, #0]
 8000fc2:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <StartXbeeSendTask+0x130>)
 8000fc4:	705a      	strb	r2, [r3, #1]
				/* Increment the sequence number */
				seqNum = (seqNum < 255U) ? seqNum + 1 : 0U;
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <StartXbeeSendTask+0x138>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2bff      	cmp	r3, #255	; 0xff
 8000fcc:	d004      	beq.n	8000fd8 <StartXbeeSendTask+0x58>
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <StartXbeeSendTask+0x138>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	e000      	b.n	8000fda <StartXbeeSendTask+0x5a>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4a37      	ldr	r2, [pc, #220]	; (80010b8 <StartXbeeSendTask+0x138>)
 8000fdc:	7013      	strb	r3, [r2, #0]

				/* Set the END SEQ field */
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 2U] =
 8000fde:	4b34      	ldr	r3, [pc, #208]	; (80010b0 <StartXbeeSendTask+0x130>)
 8000fe0:	22de      	movs	r2, #222	; 0xde
 8000fe2:	749a      	strb	r2, [r3, #18]
				R3TP_END_SEQ_LOW_BYTE;
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 1U] =
 8000fe4:	4b32      	ldr	r3, [pc, #200]	; (80010b0 <StartXbeeSendTask+0x130>)
 8000fe6:	22ed      	movs	r2, #237	; 0xed
 8000fe8:	74da      	strb	r2, [r3, #19]
				R3TP_END_SEQ_HIGH_BYTE;

				/* Set CAN ID field - note that the CAN ID is transmitted as little endian */
				xbeeUartTxBuff[4] = GETLSBOF16(frameBuff.Header.Rx.StdId);
 8000fea:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <StartXbeeSendTask+0x134>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <StartXbeeSendTask+0x130>)
 8000ff2:	711a      	strb	r2, [r3, #4]
				xbeeUartTxBuff[5] = GETMSBOF16(frameBuff.Header.Rx.StdId);
 8000ff4:	4b2f      	ldr	r3, [pc, #188]	; (80010b4 <StartXbeeSendTask+0x134>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	b29b      	uxth	r3, r3
 8000ffa:	0a1b      	lsrs	r3, r3, #8
 8000ffc:	b29b      	uxth	r3, r3
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <StartXbeeSendTask+0x130>)
 8001002:	715a      	strb	r2, [r3, #5]

				/* Set the DLC field */
				xbeeUartTxBuff[8] = (uint8_t) frameBuff.Header.Rx.DLC;
 8001004:	4b2b      	ldr	r3, [pc, #172]	; (80010b4 <StartXbeeSendTask+0x134>)
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <StartXbeeSendTask+0x130>)
 800100c:	721a      	strb	r2, [r3, #8]

				/* Set the DATA field */
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 800100e:	2300      	movs	r3, #0
 8001010:	73fb      	strb	r3, [r7, #15]
 8001012:	e00b      	b.n	800102c <StartXbeeSendTask+0xac>
					xbeeUartTxBuff[9 + i] = frameBuff.Payload[i];
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3309      	adds	r3, #9
 800101a:	4926      	ldr	r1, [pc, #152]	; (80010b4 <StartXbeeSendTask+0x134>)
 800101c:	440a      	add	r2, r1
 800101e:	f892 1020 	ldrb.w	r1, [r2, #32]
 8001022:	4a23      	ldr	r2, [pc, #140]	; (80010b0 <StartXbeeSendTask+0x130>)
 8001024:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	3301      	adds	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <StartXbeeSendTask+0x134>)
 8001030:	695b      	ldr	r3, [r3, #20]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3ee      	bcc.n	8001014 <StartXbeeSendTask+0x94>
				}

				/* Calculate the CRC */
				if (osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT)
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <StartXbeeSendTask+0x13c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 31ff 	mov.w	r1, #4294967295
 800103e:	4618      	mov	r0, r3
 8001040:	f006 fa38 	bl	80074b4 <osMutexWait>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12c      	bne.n	80010a4 <StartXbeeSendTask+0x124>
						== osOK) {
					calculatedCrc =
							GET16LSBITS(
 800104a:	2205      	movs	r2, #5
 800104c:	4918      	ldr	r1, [pc, #96]	; (80010b0 <StartXbeeSendTask+0x130>)
 800104e:	481c      	ldr	r0, [pc, #112]	; (80010c0 <StartXbeeSendTask+0x140>)
 8001050:	f001 face 	bl	80025f0 <HAL_CRC_Calculate>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
					calculatedCrc =
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <StartXbeeSendTask+0x144>)
 800105a:	801a      	strh	r2, [r3, #0]
									HAL_CRC_Calculate(&hcrc, (uint32_t*)xbeeUartTxBuff, R3TP_VER0_FRAME_SIZE / 4));
					osMutexRelease(crcMutexHandle);
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <StartXbeeSendTask+0x13c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f006 fa75 	bl	8007550 <osMutexRelease>

					/* Set the CRC field - note that the CRC is transmitted as little endian */
					xbeeUartTxBuff[2] = GETLSBOF16(calculatedCrc);
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <StartXbeeSendTask+0x144>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <StartXbeeSendTask+0x130>)
 800106e:	709a      	strb	r2, [r3, #2]
					xbeeUartTxBuff[3] = GETMSBOF16(calculatedCrc);
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <StartXbeeSendTask+0x144>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	b29b      	uxth	r3, r3
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b0d      	ldr	r3, [pc, #52]	; (80010b0 <StartXbeeSendTask+0x130>)
 800107c:	70da      	strb	r2, [r3, #3]
					 */
					continue;
				}

				/* Transmit frame */
				HAL_UART_Transmit(&XBEE_UART_HANDLE, xbeeUartTxBuff,
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	2214      	movs	r2, #20
 8001084:	490a      	ldr	r1, [pc, #40]	; (80010b0 <StartXbeeSendTask+0x130>)
 8001086:	4810      	ldr	r0, [pc, #64]	; (80010c8 <StartXbeeSendTask+0x148>)
 8001088:	f004 fad9 	bl	800563e <HAL_UART_Transmit>
				 */
			}
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &xbeeSendHandle,
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <StartXbeeSendTask+0x14c>)
 800108e:	6818      	ldr	r0, [r3, #0]
 8001090:	2300      	movs	r3, #0
 8001092:	f04f 32ff 	mov.w	r2, #4294967295
 8001096:	490e      	ldr	r1, [pc, #56]	; (80010d0 <StartXbeeSendTask+0x150>)
 8001098:	f006 fda8 	bl	8007bec <xQueueGenericSend>
			 * TODO:
			 * Log failed to push to queue
			 */
		}

		osDelay(WCU_DEFAULT_TASK_DELAY);
 800109c:	2001      	movs	r0, #1
 800109e:	f006 f9dd 	bl	800745c <osDelay>
 80010a2:	e776      	b.n	8000f92 <StartXbeeSendTask+0x12>
					continue;
 80010a4:	bf00      	nop
		if (xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 80010a6:	e774      	b.n	8000f92 <StartXbeeSendTask+0x12>
 80010a8:	40020800 	.word	0x40020800
 80010ac:	200043b0 	.word	0x200043b0
 80010b0:	200002c4 	.word	0x200002c4
 80010b4:	200002d8 	.word	0x200002d8
 80010b8:	20000300 	.word	0x20000300
 80010bc:	20004284 	.word	0x20004284
 80010c0:	200041d0 	.word	0x200041d0
 80010c4:	20000302 	.word	0x20000302
 80010c8:	20004318 	.word	0x20004318
 80010cc:	200041dc 	.word	0x200041dc
 80010d0:	200041d8 	.word	0x200041d8

080010d4 <StartXbeeReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeReceiveTask */
void StartXbeeReceiveTask(void const * argument)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	static uint32_t subscription[R3TP_VER1_MAX_FRAME_NUM]; /* Buffer for telemetry subscription CAN IDs */

	/* Infinite loop */
	for (;;) {
		/* Listen for the subscription (VER1) frame */
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	2201      	movs	r2, #1
 80010e2:	4962      	ldr	r1, [pc, #392]	; (800126c <StartXbeeReceiveTask+0x198>)
 80010e4:	4862      	ldr	r0, [pc, #392]	; (8001270 <StartXbeeReceiveTask+0x19c>)
 80010e6:	f004 fb43 	bl	8005770 <HAL_UART_Receive>
		WCU_XBEE_UART_RX_TIMEOUT);
		/* Validate the VER and RES/SEQ field */
		if (xbeeUartRxBuff[0] == R3TP_VER1_VER_RES_SEQ_BYTE) {
 80010ea:	4b60      	ldr	r3, [pc, #384]	; (800126c <StartXbeeReceiveTask+0x198>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b20      	cmp	r3, #32
 80010f0:	f040 80b0 	bne.w	8001254 <StartXbeeReceiveTask+0x180>
			/* On valid version byte, receive SEQ NUM, CHECKSUM and FRAME NUM */
			HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff + 1, 7,
 80010f4:	495f      	ldr	r1, [pc, #380]	; (8001274 <StartXbeeReceiveTask+0x1a0>)
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295
 80010fa:	2207      	movs	r2, #7
 80010fc:	485c      	ldr	r0, [pc, #368]	; (8001270 <StartXbeeReceiveTask+0x19c>)
 80010fe:	f004 fb37 	bl	8005770 <HAL_UART_Receive>
			WCU_XBEE_UART_RX_TIMEOUT);

			/* Read the FRAME NUM field */
			frameNum = READAS32BIT(xbeeUartRxBuff[7], xbeeUartRxBuff[6],
 8001102:	4b5a      	ldr	r3, [pc, #360]	; (800126c <StartXbeeReceiveTask+0x198>)
 8001104:	79db      	ldrb	r3, [r3, #7]
 8001106:	061a      	lsls	r2, r3, #24
 8001108:	4b58      	ldr	r3, [pc, #352]	; (800126c <StartXbeeReceiveTask+0x198>)
 800110a:	799b      	ldrb	r3, [r3, #6]
 800110c:	041b      	lsls	r3, r3, #16
 800110e:	431a      	orrs	r2, r3
 8001110:	4b56      	ldr	r3, [pc, #344]	; (800126c <StartXbeeReceiveTask+0x198>)
 8001112:	795b      	ldrb	r3, [r3, #5]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	4313      	orrs	r3, r2
 8001118:	4a54      	ldr	r2, [pc, #336]	; (800126c <StartXbeeReceiveTask+0x198>)
 800111a:	7912      	ldrb	r2, [r2, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	461a      	mov	r2, r3
 8001120:	4b55      	ldr	r3, [pc, #340]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 8001122:	601a      	str	r2, [r3, #0]
					xbeeUartRxBuff[5], xbeeUartRxBuff[4]);

			/* Assert the payload won't overflow the buffer */
			if (frameNum > R3TP_VER1_MAX_FRAME_NUM) {
 8001124:	4b54      	ldr	r3, [pc, #336]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b1c      	cmp	r3, #28
 800112a:	f200 8097 	bhi.w	800125c <StartXbeeReceiveTask+0x188>
				 */
				continue;
			}

			/* Receive the payload */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 800112e:	4953      	ldr	r1, [pc, #332]	; (800127c <StartXbeeReceiveTask+0x1a8>)
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	b29a      	uxth	r2, r3
 800113a:	f04f 33ff 	mov.w	r3, #4294967295
 800113e:	484c      	ldr	r0, [pc, #304]	; (8001270 <StartXbeeReceiveTask+0x19c>)
 8001140:	f004 fb16 	bl	8005770 <HAL_UART_Receive>
					R3TP_VER1_PAYLOAD_BEGIN(xbeeUartRxBuff), frameNum * 4,
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Receive the frame align bytes (two) and END SEQ (also two bytes) */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
					R3TP_VER1_EPILOGUE_BEGIN(xbeeUartRxBuff, frameNum), 4,
 8001144:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 8001146:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 8001148:	3302      	adds	r3, #2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4a47      	ldr	r2, [pc, #284]	; (800126c <StartXbeeReceiveTask+0x198>)
 800114e:	1899      	adds	r1, r3, r2
 8001150:	f04f 33ff 	mov.w	r3, #4294967295
 8001154:	2204      	movs	r2, #4
 8001156:	4846      	ldr	r0, [pc, #280]	; (8001270 <StartXbeeReceiveTask+0x19c>)
 8001158:	f004 fb0a 	bl	8005770 <HAL_UART_Receive>
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Validate the END SEQ field */
			if (xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum) - 2U]
 800115c:	4b46      	ldr	r3, [pc, #280]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	3303      	adds	r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	3b02      	subs	r3, #2
 8001166:	4a41      	ldr	r2, [pc, #260]	; (800126c <StartXbeeReceiveTask+0x198>)
 8001168:	5cd3      	ldrb	r3, [r2, r3]
 800116a:	2bde      	cmp	r3, #222	; 0xde
 800116c:	d178      	bne.n	8001260 <StartXbeeReceiveTask+0x18c>
					!= R3TP_END_SEQ_LOW_BYTE
					|| xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum) - 1U]
 800116e:	4b42      	ldr	r3, [pc, #264]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	3303      	adds	r3, #3
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	3b01      	subs	r3, #1
 8001178:	4a3c      	ldr	r2, [pc, #240]	; (800126c <StartXbeeReceiveTask+0x198>)
 800117a:	5cd3      	ldrb	r3, [r2, r3]
 800117c:	2bed      	cmp	r3, #237	; 0xed
 800117e:	d16f      	bne.n	8001260 <StartXbeeReceiveTask+0x18c>
				 */
				continue;
			}

			/* Read the CHECKSUM */
			readCrc = READAS16BIT(xbeeUartRxBuff[3], xbeeUartRxBuff[2]);
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <StartXbeeReceiveTask+0x198>)
 8001182:	78db      	ldrb	r3, [r3, #3]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	b21a      	sxth	r2, r3
 8001188:	4b38      	ldr	r3, [pc, #224]	; (800126c <StartXbeeReceiveTask+0x198>)
 800118a:	789b      	ldrb	r3, [r3, #2]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21b      	sxth	r3, r3
 8001192:	b29a      	uxth	r2, r3
 8001194:	4b3a      	ldr	r3, [pc, #232]	; (8001280 <StartXbeeReceiveTask+0x1ac>)
 8001196:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(xbeeUartRxBuff + 2U, 0x00, 2U);
 8001198:	4b3a      	ldr	r3, [pc, #232]	; (8001284 <StartXbeeReceiveTask+0x1b0>)
 800119a:	2202      	movs	r2, #2
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f008 ffeb 	bl	800a17a <memset>

			if (osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT) == osOK) {
 80011a4:	4b38      	ldr	r3, [pc, #224]	; (8001288 <StartXbeeReceiveTask+0x1b4>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f04f 31ff 	mov.w	r1, #4294967295
 80011ac:	4618      	mov	r0, r3
 80011ae:	f006 f981 	bl	80074b4 <osMutexWait>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d155      	bne.n	8001264 <StartXbeeReceiveTask+0x190>
				/* Calculate the CRC */
				calculatedCrc =
						GET16LSBITS(
 80011b8:	4b2f      	ldr	r3, [pc, #188]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	3303      	adds	r3, #3
 80011be:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011c2:	461a      	mov	r2, r3
 80011c4:	4929      	ldr	r1, [pc, #164]	; (800126c <StartXbeeReceiveTask+0x198>)
 80011c6:	4831      	ldr	r0, [pc, #196]	; (800128c <StartXbeeReceiveTask+0x1b8>)
 80011c8:	f001 fa12 	bl	80025f0 <HAL_CRC_Calculate>
 80011cc:	4603      	mov	r3, r0
 80011ce:	b29a      	uxth	r2, r3
				calculatedCrc =
 80011d0:	4b2f      	ldr	r3, [pc, #188]	; (8001290 <StartXbeeReceiveTask+0x1bc>)
 80011d2:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t* )xbeeUartRxBuff, R3TP_VER1_MESSAGE_LENGTH(frameNum)/4));
				osMutexRelease(crcMutexHandle);
 80011d4:	4b2c      	ldr	r3, [pc, #176]	; (8001288 <StartXbeeReceiveTask+0x1b4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f006 f9b9 	bl	8007550 <osMutexRelease>
				 */
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 80011de:	4b28      	ldr	r3, [pc, #160]	; (8001280 <StartXbeeReceiveTask+0x1ac>)
 80011e0:	881a      	ldrh	r2, [r3, #0]
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <StartXbeeReceiveTask+0x1bc>)
 80011e4:	881b      	ldrh	r3, [r3, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d13e      	bne.n	8001268 <StartXbeeReceiveTask+0x194>
				 */
				continue;
			}

			/* Read the payload */
			for (uint32_t i = 0; i < frameNum; i += 1) {
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e025      	b.n	800123c <StartXbeeReceiveTask+0x168>
				subscription[i] =
						READAS32BIT(
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	330b      	adds	r3, #11
 80011f6:	4a1d      	ldr	r2, [pc, #116]	; (800126c <StartXbeeReceiveTask+0x198>)
 80011f8:	4413      	add	r3, r2
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	061a      	lsls	r2, r3, #24
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	330a      	adds	r3, #10
 8001204:	4919      	ldr	r1, [pc, #100]	; (800126c <StartXbeeReceiveTask+0x198>)
 8001206:	440b      	add	r3, r1
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	431a      	orrs	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	3309      	adds	r3, #9
 8001214:	4915      	ldr	r1, [pc, #84]	; (800126c <StartXbeeReceiveTask+0x198>)
 8001216:	440b      	add	r3, r1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	4313      	orrs	r3, r2
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	3202      	adds	r2, #2
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4911      	ldr	r1, [pc, #68]	; (800126c <StartXbeeReceiveTask+0x198>)
 8001226:	440a      	add	r2, r1
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	4619      	mov	r1, r3
				subscription[i] =
 800122e:	4a19      	ldr	r2, [pc, #100]	; (8001294 <StartXbeeReceiveTask+0x1c0>)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint32_t i = 0; i < frameNum; i += 1) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3301      	adds	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	429a      	cmp	r2, r3
 8001244:	d3d4      	bcc.n	80011f0 <StartXbeeReceiveTask+0x11c>
			 * TODO:
			 * Write subscription to SD
			 */

			/* Set the CAN filters */
			setCanFilterList(&hcan1, subscription, frameNum);
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <StartXbeeReceiveTask+0x1a4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	461a      	mov	r2, r3
 800124c:	4911      	ldr	r1, [pc, #68]	; (8001294 <StartXbeeReceiveTask+0x1c0>)
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <StartXbeeReceiveTask+0x1c4>)
 8001250:	f000 f8bc 	bl	80013cc <setCanFilterList>
			/**
			 * TODO:
			 * Log invalid VER/RES/SEQ octet
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001254:	2001      	movs	r0, #1
 8001256:	f006 f901 	bl	800745c <osDelay>
 800125a:	e73f      	b.n	80010dc <StartXbeeReceiveTask+0x8>
				continue;
 800125c:	bf00      	nop
 800125e:	e73d      	b.n	80010dc <StartXbeeReceiveTask+0x8>
				continue;
 8001260:	bf00      	nop
 8001262:	e73b      	b.n	80010dc <StartXbeeReceiveTask+0x8>
				continue;
 8001264:	bf00      	nop
 8001266:	e739      	b.n	80010dc <StartXbeeReceiveTask+0x8>
				continue;
 8001268:	bf00      	nop
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 800126a:	e737      	b.n	80010dc <StartXbeeReceiveTask+0x8>
 800126c:	20000304 	.word	0x20000304
 8001270:	20004318 	.word	0x20004318
 8001274:	20000305 	.word	0x20000305
 8001278:	20000380 	.word	0x20000380
 800127c:	2000030c 	.word	0x2000030c
 8001280:	20000384 	.word	0x20000384
 8001284:	20000306 	.word	0x20000306
 8001288:	20004284 	.word	0x20004284
 800128c:	200041d0 	.word	0x200041d0
 8001290:	20000386 	.word	0x20000386
 8001294:	20000388 	.word	0x20000388
 8001298:	200043fc 	.word	0x200043fc

0800129c <StartGnssReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGnssReceiveTask */
void StartGnssReceiveTask(void const * argument)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGnssReceiveTask */
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &gnssReceiveHandle,
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <StartGnssReceiveTask+0x20>)
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	4904      	ldr	r1, [pc, #16]	; (80012c0 <StartGnssReceiveTask+0x24>)
 80012b0:	f006 fc9c 	bl	8007bec <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f006 f8d1 	bl	800745c <osDelay>
		if (xQueueSend(reportToWatchdogQueueHandle, &gnssReceiveHandle,
 80012ba:	e7f3      	b.n	80012a4 <StartGnssReceiveTask+0x8>
 80012bc:	200041dc 	.word	0x200041dc
 80012c0:	20004288 	.word	0x20004288

080012c4 <StartRfReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfReceiveTask */
void StartRfReceiveTask(void const * argument)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRfReceiveTask */
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &rfReceiveHandle,
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <StartRfReceiveTask+0x20>)
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	2300      	movs	r3, #0
 80012d2:	f04f 32ff 	mov.w	r2, #4294967295
 80012d6:	4904      	ldr	r1, [pc, #16]	; (80012e8 <StartRfReceiveTask+0x24>)
 80012d8:	f006 fc88 	bl	8007bec <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 80012dc:	2001      	movs	r0, #1
 80012de:	f006 f8bd 	bl	800745c <osDelay>
		if (xQueueSend(reportToWatchdogQueueHandle, &rfReceiveHandle,
 80012e2:	e7f3      	b.n	80012cc <StartRfReceiveTask+0x8>
 80012e4:	200041dc 	.word	0x200041dc
 80012e8:	20004428 	.word	0x20004428

080012ec <StartCanGatekeeperTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanGatekeeperTask */
void StartCanGatekeeperTask(void const * argument)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	static CanFrameTypedef frameBuff; /* CAN frame buffer */
	static uint32_t dummy; /* CAN Tx mailbox */
	/* Infinite loop */
	for (;;) {
		/* Check for outgoing messages */
		if (xQueueReceive(canTransmitQueueHandle, &frameBuff,
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <StartCanGatekeeperTask+0x78>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	2200      	movs	r2, #0
 80012fa:	491b      	ldr	r1, [pc, #108]	; (8001368 <StartCanGatekeeperTask+0x7c>)
 80012fc:	4618      	mov	r0, r3
 80012fe:	f006 fe8d 	bl	800801c <xQueueReceive>
 8001302:	4603      	mov	r3, r0
 8001304:	2b01      	cmp	r3, #1
 8001306:	d109      	bne.n	800131c <StartCanGatekeeperTask+0x30>
		WCU_CANTRANSMIT_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			/* Validate the DataDirection member */
			if (frameBuff.DataDirection == TX) {
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <StartCanGatekeeperTask+0x7c>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <StartCanGatekeeperTask+0x30>
				/* Send the message */
				HAL_CAN_AddTxMessage(&hcan1, &frameBuff.Header.Tx,
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <StartCanGatekeeperTask+0x80>)
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <StartCanGatekeeperTask+0x84>)
 8001314:	4917      	ldr	r1, [pc, #92]	; (8001374 <StartCanGatekeeperTask+0x88>)
 8001316:	4818      	ldr	r0, [pc, #96]	; (8001378 <StartCanGatekeeperTask+0x8c>)
 8001318:	f000 fe56 	bl	8001fc8 <HAL_CAN_AddTxMessage>
				 */
			}
		}

		/* Check for incoming messages */
		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0U) {
 800131c:	2100      	movs	r1, #0
 800131e:	4816      	ldr	r0, [pc, #88]	; (8001378 <StartCanGatekeeperTask+0x8c>)
 8001320:	f001 f83f 	bl	80023a2 <HAL_CAN_GetRxFifoFillLevel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d010      	beq.n	800134c <StartCanGatekeeperTask+0x60>
			/* Receive the message */
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &frameBuff.Header.Rx,
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <StartCanGatekeeperTask+0x84>)
 800132c:	4a11      	ldr	r2, [pc, #68]	; (8001374 <StartCanGatekeeperTask+0x88>)
 800132e:	2100      	movs	r1, #0
 8001330:	4811      	ldr	r0, [pc, #68]	; (8001378 <StartCanGatekeeperTask+0x8c>)
 8001332:	f000 ff24 	bl	800217e <HAL_CAN_GetRxMessage>
					frameBuff.Payload);
			/* Set the DataDirection member in the CAN frame struct */
			frameBuff.DataDirection = RX;
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <StartCanGatekeeperTask+0x7c>)
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]
			/* Send the frame to the telemetry queue */
			if (xQueueSend(canReceiveQueueHandle, &frameBuff,
 800133c:	4b0f      	ldr	r3, [pc, #60]	; (800137c <StartCanGatekeeperTask+0x90>)
 800133e:	6818      	ldr	r0, [r3, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	f04f 32ff 	mov.w	r2, #4294967295
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <StartCanGatekeeperTask+0x7c>)
 8001348:	f006 fc50 	bl	8007bec <xQueueGenericSend>
				 */
			}
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &canGatekeeperHandle,
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <StartCanGatekeeperTask+0x94>)
 800134e:	6818      	ldr	r0, [r3, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	f04f 32ff 	mov.w	r2, #4294967295
 8001356:	490b      	ldr	r1, [pc, #44]	; (8001384 <StartCanGatekeeperTask+0x98>)
 8001358:	f006 fc48 	bl	8007bec <xQueueGenericSend>
			/*
			 * TODO:
			 * Log failed to push to queue
			 */
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800135c:	2001      	movs	r0, #1
 800135e:	f006 f87d 	bl	800745c <osDelay>
		if (xQueueReceive(canTransmitQueueHandle, &frameBuff,
 8001362:	e7c7      	b.n	80012f4 <StartCanGatekeeperTask+0x8>
 8001364:	200043b4 	.word	0x200043b4
 8001368:	200003f8 	.word	0x200003f8
 800136c:	20000420 	.word	0x20000420
 8001370:	20000418 	.word	0x20000418
 8001374:	200003fc 	.word	0x200003fc
 8001378:	200043fc 	.word	0x200043fc
 800137c:	200043b0 	.word	0x200043b0
 8001380:	200041dc 	.word	0x200041dc
 8001384:	200043b8 	.word	0x200043b8

08001388 <StartSdGatekeeperTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSdGatekeeperTask */
void StartSdGatekeeperTask(void const * argument)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

	/* Infinite loop */
	for (;;) {
		/* Wait for incoming error messages */
		/* Wait for new subscription */
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001390:	2001      	movs	r0, #1
 8001392:	f006 f863 	bl	800745c <osDelay>
 8001396:	e7fb      	b.n	8001390 <StartSdGatekeeperTask+0x8>

08001398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a04      	ldr	r2, [pc, #16]	; (80013b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013aa:	f000 fbef 	bl	8001b8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40001000 	.word	0x40001000

080013bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <setCanFilterList>:
 * @param hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @param ids Pointer to an array of 32-bit CAN IDs to filter for
 * @param count Length of the ids array
 */
void setCanFilterList(CAN_HandleTypeDef *hcan, uint32_t* ids, uint32_t count) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b090      	sub	sp, #64	; 0x40
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	60f8      	str	r0, [r7, #12]
 80013d4:	60b9      	str	r1, [r7, #8]
 80013d6:	607a      	str	r2, [r7, #4]
	/* Assert valid ids array length */
	if(count <= CAN_FILTERBANKS_COUNT * 4) {
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b70      	cmp	r3, #112	; 0x70
 80013dc:	d878      	bhi.n	80014d0 <setCanFilterList+0x104>
		/* Prepare the filter configuration structure */
		CAN_FilterTypeDef filterConfig;
		/* Select the CAN FIFO to filter */
		filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
		/* Select the filter mode as IDLIST - CAN IDs will be stored in the filter bank registers */
		filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 80013e2:	2301      	movs	r3, #1
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
		/* Set the filter scale as 16 bit, since only the standard 11-bit CAN IDs are used - this allows four IDs per bank */
		filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Clear the previous filter config */
		filterConfig.FilterIdHigh = 0x00000000U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
		filterConfig.FilterIdLow = 0x00000000U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
		filterConfig.FilterMaskIdHigh = 0x00000000U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
		filterConfig.FilterMaskIdLow = 0x00000000U;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
		filterConfig.FilterActivation = DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 80013fe:	2300      	movs	r3, #0
 8001400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001402:	e00a      	b.n	800141a <setCanFilterList+0x4e>
			filterConfig.FilterBank = i;
 8001404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 fcfa 	bl	8001e08 <HAL_CAN_ConfigFilter>
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 8001414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001416:	3301      	adds	r3, #1
 8001418:	63fb      	str	r3, [r7, #60]	; 0x3c
 800141a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800141c:	2b1b      	cmp	r3, #27
 800141e:	d9f1      	bls.n	8001404 <setCanFilterList+0x38>
		}

		/* Set the new filter */
		filterConfig.FilterActivation = ENABLE;
 8001420:	2301      	movs	r3, #1
 8001422:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < count; i += 1) {
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	; 0x38
 8001428:	e04e      	b.n	80014c8 <setCanFilterList+0xfc>
			switch(i % 4) {
 800142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b03      	cmp	r3, #3
 8001432:	d82b      	bhi.n	800148c <setCanFilterList+0xc0>
 8001434:	a201      	add	r2, pc, #4	; (adr r2, 800143c <setCanFilterList+0x70>)
 8001436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143a:	bf00      	nop
 800143c:	0800144d 	.word	0x0800144d
 8001440:	0800145d 	.word	0x0800145d
 8001444:	0800146d 	.word	0x0800146d
 8001448:	0800147d 	.word	0x0800147d
			case 0:
				filterConfig.FilterIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 800144c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	68ba      	ldr	r2, [r7, #8]
 8001452:	4413      	add	r3, r2
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	613b      	str	r3, [r7, #16]
				break;
 800145a:	e017      	b.n	800148c <setCanFilterList+0xc0>
			case 1:
				filterConfig.FilterIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 800145c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	4413      	add	r3, r2
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	015b      	lsls	r3, r3, #5
 8001468:	617b      	str	r3, [r7, #20]
				break;
 800146a:	e00f      	b.n	800148c <setCanFilterList+0xc0>
			case 2:
				filterConfig.FilterMaskIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 800146c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	68ba      	ldr	r2, [r7, #8]
 8001472:	4413      	add	r3, r2
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	015b      	lsls	r3, r3, #5
 8001478:	61bb      	str	r3, [r7, #24]
				break;
 800147a:	e007      	b.n	800148c <setCanFilterList+0xc0>
			case 3:
				filterConfig.FilterMaskIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 800147c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	68ba      	ldr	r2, [r7, #8]
 8001482:	4413      	add	r3, r2
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	015b      	lsls	r3, r3, #5
 8001488:	61fb      	str	r3, [r7, #28]
				break;
 800148a:	bf00      	nop
			}

			/* If the filter bank is fully configured or there are no more IDs, call HAL_CAN_ConfigFilter */
			if((i % 4 == 3) || (i + 1 == count)) {
 800148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148e:	f003 0303 	and.w	r3, r3, #3
 8001492:	2b03      	cmp	r3, #3
 8001494:	d004      	beq.n	80014a0 <setCanFilterList+0xd4>
 8001496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001498:	3301      	adds	r3, #1
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	d110      	bne.n	80014c2 <setCanFilterList+0xf6>
				/* Configure the filter */
				HAL_CAN_ConfigFilter(hcan, &filterConfig);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 fcae 	bl	8001e08 <HAL_CAN_ConfigFilter>
				/* On fully configured filter bank, proceed to the next one */
				filterConfig.FilterBank += 1;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	3301      	adds	r3, #1
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
				/* Clear the config structure ID members */
				filterConfig.FilterIdHigh = 0x00000000U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
				filterConfig.FilterIdLow = 0x00000000U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
				filterConfig.FilterMaskIdHigh = 0x00000000U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
				filterConfig.FilterMaskIdLow = 0x00000000U;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < count; i += 1) {
 80014c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014c4:	3301      	adds	r3, #1
 80014c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80014c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d3ac      	bcc.n	800142a <setCanFilterList+0x5e>
			}
		}
	}
}
 80014d0:	bf00      	nop
 80014d2:	3740      	adds	r7, #64	; 0x40
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_MspInit+0x54>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_MspInit+0x54>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	; 0x44
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x54>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_MspInit+0x54>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a0a      	ldr	r2, [pc, #40]	; (800152c <HAL_MspInit+0x54>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_MspInit+0x54>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	210f      	movs	r1, #15
 800151a:	f06f 0001 	mvn.w	r0, #1
 800151e:	f001 f821 	bl	8002564 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800

08001530 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0314 	add.w	r3, r7, #20
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a19      	ldr	r2, [pc, #100]	; (80015b4 <HAL_CAN_MspInit+0x84>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12c      	bne.n	80015ac <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_CAN_MspInit+0x88>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a17      	ldr	r2, [pc, #92]	; (80015b8 <HAL_CAN_MspInit+0x88>)
 800155c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HAL_CAN_MspInit+0x88>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <HAL_CAN_MspInit+0x88>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <HAL_CAN_MspInit+0x88>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6313      	str	r3, [r2, #48]	; 0x30
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_CAN_MspInit+0x88>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800158a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800159c:	2309      	movs	r3, #9
 800159e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	4619      	mov	r1, r3
 80015a6:	4805      	ldr	r0, [pc, #20]	; (80015bc <HAL_CAN_MspInit+0x8c>)
 80015a8:	f001 fbf2 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40006400 	.word	0x40006400
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400

080015c0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_CRC_MspInit+0x3c>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10d      	bne.n	80015ee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a09      	ldr	r2, [pc, #36]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <HAL_CRC_MspInit+0x40>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80015ee:	bf00      	nop
 80015f0:	3714      	adds	r7, #20
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40023000 	.word	0x40023000
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08a      	sub	sp, #40	; 0x28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0314 	add.w	r3, r7, #20
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <HAL_SD_MspInit+0xd0>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d152      	bne.n	80016cc <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
 800162a:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a2a      	ldr	r2, [pc, #168]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 8001630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a23      	ldr	r2, [pc, #140]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0304 	and.w	r3, r3, #4
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60bb      	str	r3, [r7, #8]
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
 800166e:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <HAL_SD_MspInit+0xd4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	f003 0308 	and.w	r3, r3, #8
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800167a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800167e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001680:	2302      	movs	r3, #2
 8001682:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001688:	2303      	movs	r3, #3
 800168a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800168c:	230c      	movs	r3, #12
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	4811      	ldr	r0, [pc, #68]	; (80016dc <HAL_SD_MspInit+0xd8>)
 8001698:	f001 fb7a 	bl	8002d90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800169c:	2304      	movs	r3, #4
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	2302      	movs	r3, #2
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80016ac:	230c      	movs	r3, #12
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	480a      	ldr	r0, [pc, #40]	; (80016e0 <HAL_SD_MspInit+0xdc>)
 80016b8:	f001 fb6a 	bl	8002d90 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2105      	movs	r1, #5
 80016c0:	2031      	movs	r0, #49	; 0x31
 80016c2:	f000 ff4f 	bl	8002564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80016c6:	2031      	movs	r0, #49	; 0x31
 80016c8:	f000 ff68 	bl	800259c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	; 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40012c00 	.word	0x40012c00
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020800 	.word	0x40020800
 80016e0:	40020c00 	.word	0x40020c00

080016e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	; 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a19      	ldr	r2, [pc, #100]	; (8001768 <HAL_SPI_MspInit+0x84>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d12b      	bne.n	800175e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_SPI_MspInit+0x88>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a17      	ldr	r2, [pc, #92]	; (800176c <HAL_SPI_MspInit+0x88>)
 8001710:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_SPI_MspInit+0x88>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_SPI_MspInit+0x88>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_SPI_MspInit+0x88>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_SPI_MspInit+0x88>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SP1_SCK_Pin|RF_SPI1_MISO_Pin|RF_SPI1_MOSI_Pin;
 800173e:	23e0      	movs	r3, #224	; 0xe0
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174e:	2305      	movs	r3, #5
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <HAL_SPI_MspInit+0x8c>)
 800175a:	f001 fb19 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40013000 	.word	0x40013000
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000

08001774 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b090      	sub	sp, #64	; 0x40
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a7c      	ldr	r2, [pc, #496]	; (8001984 <HAL_UART_MspInit+0x210>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d12c      	bne.n	80017f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	62bb      	str	r3, [r7, #40]	; 0x28
 800179a:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <HAL_UART_MspInit+0x214>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a7a      	ldr	r2, [pc, #488]	; (8001988 <HAL_UART_MspInit+0x214>)
 80017a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <HAL_UART_MspInit+0x214>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	4b74      	ldr	r3, [pc, #464]	; (8001988 <HAL_UART_MspInit+0x214>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a73      	ldr	r2, [pc, #460]	; (8001988 <HAL_UART_MspInit+0x214>)
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b71      	ldr	r3, [pc, #452]	; (8001988 <HAL_UART_MspInit+0x214>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = XBEE_UART3_TX_Pin|XBEE_UART3_RX_Pin;
 80017ce:	2303      	movs	r3, #3
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017d6:	2301      	movs	r3, #1
 80017d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017de:	2308      	movs	r3, #8
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4868      	ldr	r0, [pc, #416]	; (800198c <HAL_UART_MspInit+0x218>)
 80017ea:	f001 fad1 	bl	8002d90 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80017ee:	e0c5      	b.n	800197c <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a66      	ldr	r2, [pc, #408]	; (8001990 <HAL_UART_MspInit+0x21c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d15c      	bne.n	80018b4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	623b      	str	r3, [r7, #32]
 80017fe:	4b62      	ldr	r3, [pc, #392]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	4a61      	ldr	r2, [pc, #388]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	4b5f      	ldr	r3, [pc, #380]	; (8001988 <HAL_UART_MspInit+0x214>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	623b      	str	r3, [r7, #32]
 8001814:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
 800181a:	4b5b      	ldr	r3, [pc, #364]	; (8001988 <HAL_UART_MspInit+0x214>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a5a      	ldr	r2, [pc, #360]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b58      	ldr	r3, [pc, #352]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	61fb      	str	r3, [r7, #28]
 8001830:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = BT_UART1_TX_Pin|BT_UART1_RX_Pin;
 8001832:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001840:	2303      	movs	r3, #3
 8001842:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001844:	2307      	movs	r3, #7
 8001846:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184c:	4619      	mov	r1, r3
 800184e:	484f      	ldr	r0, [pc, #316]	; (800198c <HAL_UART_MspInit+0x218>)
 8001850:	f001 fa9e 	bl	8002d90 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001854:	4b4f      	ldr	r3, [pc, #316]	; (8001994 <HAL_UART_MspInit+0x220>)
 8001856:	4a50      	ldr	r2, [pc, #320]	; (8001998 <HAL_UART_MspInit+0x224>)
 8001858:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800185a:	4b4e      	ldr	r3, [pc, #312]	; (8001994 <HAL_UART_MspInit+0x220>)
 800185c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001860:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001862:	4b4c      	ldr	r3, [pc, #304]	; (8001994 <HAL_UART_MspInit+0x220>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001868:	4b4a      	ldr	r3, [pc, #296]	; (8001994 <HAL_UART_MspInit+0x220>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_UART_MspInit+0x220>)
 8001870:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001874:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_UART_MspInit+0x220>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800187c:	4b45      	ldr	r3, [pc, #276]	; (8001994 <HAL_UART_MspInit+0x220>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001882:	4b44      	ldr	r3, [pc, #272]	; (8001994 <HAL_UART_MspInit+0x220>)
 8001884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001888:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <HAL_UART_MspInit+0x220>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001890:	4b40      	ldr	r3, [pc, #256]	; (8001994 <HAL_UART_MspInit+0x220>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001896:	483f      	ldr	r0, [pc, #252]	; (8001994 <HAL_UART_MspInit+0x220>)
 8001898:	f000 fede 	bl	8002658 <HAL_DMA_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80018a2:	f7ff fd8b 	bl	80013bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a3a      	ldr	r2, [pc, #232]	; (8001994 <HAL_UART_MspInit+0x220>)
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
 80018ac:	4a39      	ldr	r2, [pc, #228]	; (8001994 <HAL_UART_MspInit+0x220>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80018b2:	e063      	b.n	800197c <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a38      	ldr	r2, [pc, #224]	; (800199c <HAL_UART_MspInit+0x228>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d12c      	bne.n	8001918 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
 80018c2:	4b31      	ldr	r3, [pc, #196]	; (8001988 <HAL_UART_MspInit+0x214>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	4a30      	ldr	r2, [pc, #192]	; (8001988 <HAL_UART_MspInit+0x214>)
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	6413      	str	r3, [r2, #64]	; 0x40
 80018ce:	4b2e      	ldr	r3, [pc, #184]	; (8001988 <HAL_UART_MspInit+0x214>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	4b2a      	ldr	r3, [pc, #168]	; (8001988 <HAL_UART_MspInit+0x214>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a29      	ldr	r2, [pc, #164]	; (8001988 <HAL_UART_MspInit+0x214>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b27      	ldr	r3, [pc, #156]	; (8001988 <HAL_UART_MspInit+0x214>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018f6:	230c      	movs	r3, #12
 80018f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fa:	2302      	movs	r3, #2
 80018fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001902:	2303      	movs	r3, #3
 8001904:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001906:	2307      	movs	r3, #7
 8001908:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800190e:	4619      	mov	r1, r3
 8001910:	481e      	ldr	r0, [pc, #120]	; (800198c <HAL_UART_MspInit+0x218>)
 8001912:	f001 fa3d 	bl	8002d90 <HAL_GPIO_Init>
}
 8001916:	e031      	b.n	800197c <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a20      	ldr	r2, [pc, #128]	; (80019a0 <HAL_UART_MspInit+0x22c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d12c      	bne.n	800197c <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	4b18      	ldr	r3, [pc, #96]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a17      	ldr	r2, [pc, #92]	; (8001988 <HAL_UART_MspInit+0x214>)
 800192c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b15      	ldr	r3, [pc, #84]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	4b11      	ldr	r3, [pc, #68]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b0e      	ldr	r3, [pc, #56]	; (8001988 <HAL_UART_MspInit+0x214>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_UART4_TX_Pin|GNSS_UART4_RX_Pin;
 800195a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800195e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001960:	2302      	movs	r3, #2
 8001962:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001968:	2303      	movs	r3, #3
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800196c:	2307      	movs	r3, #7
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001974:	4619      	mov	r1, r3
 8001976:	480b      	ldr	r0, [pc, #44]	; (80019a4 <HAL_UART_MspInit+0x230>)
 8001978:	f001 fa0a 	bl	8002d90 <HAL_GPIO_Init>
}
 800197c:	bf00      	nop
 800197e:	3740      	adds	r7, #64	; 0x40
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40004c00 	.word	0x40004c00
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40011000 	.word	0x40011000
 8001994:	200041e4 	.word	0x200041e4
 8001998:	40026440 	.word	0x40026440
 800199c:	40004400 	.word	0x40004400
 80019a0:	40004800 	.word	0x40004800
 80019a4:	40020400 	.word	0x40020400

080019a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b08c      	sub	sp, #48	; 0x30
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	2036      	movs	r0, #54	; 0x36
 80019be:	f000 fdd1 	bl	8002564 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80019c2:	2036      	movs	r0, #54	; 0x36
 80019c4:	f000 fdea 	bl	800259c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
 80019cc:	4b1e      	ldr	r3, [pc, #120]	; (8001a48 <HAL_InitTick+0xa0>)
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	4a1d      	ldr	r2, [pc, #116]	; (8001a48 <HAL_InitTick+0xa0>)
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	6413      	str	r3, [r2, #64]	; 0x40
 80019d8:	4b1b      	ldr	r3, [pc, #108]	; (8001a48 <HAL_InitTick+0xa0>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019e4:	f107 0210 	add.w	r2, r7, #16
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4611      	mov	r1, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 f806 	bl	8003a00 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f4:	f001 ffdc 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 80019f8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fc:	4a13      	ldr	r2, [pc, #76]	; (8001a4c <HAL_InitTick+0xa4>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	0c9b      	lsrs	r3, r3, #18
 8001a04:	3b01      	subs	r3, #1
 8001a06:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a08:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <HAL_InitTick+0xa8>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_InitTick+0xac>)
 8001a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001a0e:	4b10      	ldr	r3, [pc, #64]	; (8001a50 <HAL_InitTick+0xa8>)
 8001a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a16:	4a0e      	ldr	r2, [pc, #56]	; (8001a50 <HAL_InitTick+0xa8>)
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	; (8001a50 <HAL_InitTick+0xa8>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	; (8001a50 <HAL_InitTick+0xa8>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <HAL_InitTick+0xa8>)
 8001a2a:	f003 fb7d 	bl	8005128 <HAL_TIM_Base_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d104      	bne.n	8001a3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a34:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_InitTick+0xa8>)
 8001a36:	f003 fbac 	bl	8005192 <HAL_TIM_Base_Start_IT>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	e000      	b.n	8001a40 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3730      	adds	r7, #48	; 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	431bde83 	.word	0x431bde83
 8001a50:	2000442c 	.word	0x2000442c
 8001a54:	40001000 	.word	0x40001000

08001a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <SDIO_IRQHandler+0x10>)
 8001a92:	f002 fa51 	bl	8003f38 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000428c 	.word	0x2000428c

08001aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001aa4:	4802      	ldr	r0, [pc, #8]	; (8001ab0 <TIM6_DAC_IRQHandler+0x10>)
 8001aa6:	f003 fb98 	bl	80051da <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000442c 	.word	0x2000442c

08001ab4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ab8:	4802      	ldr	r0, [pc, #8]	; (8001ac4 <DMA2_Stream2_IRQHandler+0x10>)
 8001aba:	f000 fef5 	bl	80028a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200041e4 	.word	0x200041e4

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <SystemInit+0x28>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a07      	ldr	r2, [pc, #28]	; (8001af0 <SystemInit+0x28>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SystemInit+0x28>)
 8001ade:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae2:	609a      	str	r2, [r3, #8]
#endif
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001af4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001af8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001afa:	e003      	b.n	8001b04 <LoopCopyDataInit>

08001afc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001afe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b02:	3104      	adds	r1, #4

08001b04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b04:	480b      	ldr	r0, [pc, #44]	; (8001b34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b06:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b0c:	d3f6      	bcc.n	8001afc <CopyDataInit>
  ldr  r2, =_sbss
 8001b0e:	4a0b      	ldr	r2, [pc, #44]	; (8001b3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b10:	e002      	b.n	8001b18 <LoopFillZerobss>

08001b12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b14:	f842 3b04 	str.w	r3, [r2], #4

08001b18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b1c:	d3f9      	bcc.n	8001b12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b1e:	f7ff ffd3 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b22:	f008 fafb 	bl	800a11c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b26:	f7fe fced 	bl	8000504 <main>
  bx  lr    
 8001b2a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b2c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b30:	0800a378 	.word	0x0800a378
  ldr  r0, =_sdata
 8001b34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b38:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001b3c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001b40:	200048dc 	.word	0x200048dc

08001b44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b44:	e7fe      	b.n	8001b44 <ADC_IRQHandler>
	...

08001b48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b4c:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <HAL_Init+0x40>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <HAL_Init+0x40>)
 8001b52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b58:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <HAL_Init+0x40>)
 8001b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <HAL_Init+0x40>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f000 fcec 	bl	800254e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff ff16 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b7c:	f7ff fcac 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023c00 	.word	0x40023c00

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	2000446c 	.word	0x2000446c

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	2000446c 	.word	0x2000446c

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <HAL_Delay+0x40>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e0ed      	b.n	8001dfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff fc7e 	bl	8001530 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0202 	bic.w	r2, r2, #2
 8001c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c44:	f7ff ffb6 	bl	8001bb4 <HAL_GetTick>
 8001c48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c4a:	e012      	b.n	8001c72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c4c:	f7ff ffb2 	bl	8001bb4 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b0a      	cmp	r3, #10
 8001c58:	d90b      	bls.n	8001c72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2205      	movs	r2, #5
 8001c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e0c5      	b.n	8001dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e5      	bne.n	8001c4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c90:	f7ff ff90 	bl	8001bb4 <HAL_GetTick>
 8001c94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c96:	e012      	b.n	8001cbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c98:	f7ff ff8c 	bl	8001bb4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b0a      	cmp	r3, #10
 8001ca4:	d90b      	bls.n	8001cbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001caa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2205      	movs	r2, #5
 8001cb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e09f      	b.n	8001dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0e5      	beq.n	8001c98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	7e1b      	ldrb	r3, [r3, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d108      	bne.n	8001ce6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e007      	b.n	8001cf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7e5b      	ldrb	r3, [r3, #25]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	e007      	b.n	8001d20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7e9b      	ldrb	r3, [r3, #26]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d108      	bne.n	8001d3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e007      	b.n	8001d4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0220 	bic.w	r2, r2, #32
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7edb      	ldrb	r3, [r3, #27]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f022 0210 	bic.w	r2, r2, #16
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0210 	orr.w	r2, r2, #16
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7f1b      	ldrb	r3, [r3, #28]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d108      	bne.n	8001d8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e007      	b.n	8001d9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0208 	bic.w	r2, r2, #8
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7f5b      	ldrb	r3, [r3, #29]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d108      	bne.n	8001db8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f042 0204 	orr.w	r2, r2, #4
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e007      	b.n	8001dc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0204 	bic.w	r2, r2, #4
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	695b      	ldr	r3, [r3, #20]
 8001ddc:	ea42 0103 	orr.w	r1, r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	1e5a      	subs	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
	...

08001e08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e20:	7cfb      	ldrb	r3, [r7, #19]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d003      	beq.n	8001e2e <HAL_CAN_ConfigFilter+0x26>
 8001e26:	7cfb      	ldrb	r3, [r7, #19]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	f040 80be 	bne.w	8001faa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001e2e:	4b65      	ldr	r3, [pc, #404]	; (8001fc4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001e30:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e38:	f043 0201 	orr.w	r2, r3, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	021b      	lsls	r3, r3, #8
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	695b      	ldr	r3, [r3, #20]
 8001e6a:	f003 031f 	and.w	r3, r3, #31
 8001e6e:	2201      	movs	r2, #1
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	401a      	ands	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d123      	bne.n	8001ed8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3248      	adds	r2, #72	; 0x48
 8001eb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ecc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ece:	6979      	ldr	r1, [r7, #20]
 8001ed0:	3348      	adds	r3, #72	; 0x48
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d122      	bne.n	8001f26 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3248      	adds	r2, #72	; 0x48
 8001f06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f1c:	6979      	ldr	r1, [r7, #20]
 8001f1e:	3348      	adds	r3, #72	; 0x48
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	401a      	ands	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f40:	e007      	b.n	8001f52 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d109      	bne.n	8001f6e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	401a      	ands	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001f6c:	e007      	b.n	8001f7e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	431a      	orrs	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001f9c:	f023 0201 	bic.w	r2, r3, #1
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e006      	b.n	8001fb8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	371c      	adds	r7, #28
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	40006400 	.word	0x40006400

08001fc8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	60f8      	str	r0, [r7, #12]
 8001fd0:	60b9      	str	r1, [r7, #8]
 8001fd2:	607a      	str	r2, [r7, #4]
 8001fd4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fdc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001fe6:	7ffb      	ldrb	r3, [r7, #31]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d003      	beq.n	8001ff4 <HAL_CAN_AddTxMessage+0x2c>
 8001fec:	7ffb      	ldrb	r3, [r7, #31]
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	f040 80b8 	bne.w	8002164 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10a      	bne.n	8002014 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002004:	2b00      	cmp	r3, #0
 8002006:	d105      	bne.n	8002014 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80a0 	beq.w	8002154 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	0e1b      	lsrs	r3, r3, #24
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d907      	bls.n	8002034 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e09e      	b.n	8002172 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002034:	2201      	movs	r2, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	409a      	lsls	r2, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10d      	bne.n	8002062 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002050:	68f9      	ldr	r1, [r7, #12]
 8002052:	6809      	ldr	r1, [r1, #0]
 8002054:	431a      	orrs	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	3318      	adds	r3, #24
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	440b      	add	r3, r1
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	e00f      	b.n	8002082 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800206c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002072:	68f9      	ldr	r1, [r7, #12]
 8002074:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002076:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3318      	adds	r3, #24
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	440b      	add	r3, r1
 8002080:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	6819      	ldr	r1, [r3, #0]
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3318      	adds	r3, #24
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	440b      	add	r3, r1
 8002092:	3304      	adds	r3, #4
 8002094:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	7d1b      	ldrb	r3, [r3, #20]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d111      	bne.n	80020c2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3318      	adds	r3, #24
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	4413      	add	r3, r2
 80020aa:	3304      	adds	r3, #4
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	6811      	ldr	r1, [r2, #0]
 80020b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3318      	adds	r3, #24
 80020ba:	011b      	lsls	r3, r3, #4
 80020bc:	440b      	add	r3, r1
 80020be:	3304      	adds	r3, #4
 80020c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3307      	adds	r3, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	061a      	lsls	r2, r3, #24
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3306      	adds	r3, #6
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3305      	adds	r3, #5
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	4313      	orrs	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	3204      	adds	r2, #4
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	4610      	mov	r0, r2
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	6811      	ldr	r1, [r2, #0]
 80020ea:	ea43 0200 	orr.w	r2, r3, r0
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80020f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3303      	adds	r3, #3
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	061a      	lsls	r2, r3, #24
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	3302      	adds	r3, #2
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3301      	adds	r3, #1
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4313      	orrs	r3, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	7812      	ldrb	r2, [r2, #0]
 800211a:	4610      	mov	r0, r2
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	6811      	ldr	r1, [r2, #0]
 8002120:	ea43 0200 	orr.w	r2, r3, r0
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	440b      	add	r3, r1
 800212a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800212e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3318      	adds	r3, #24
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	4413      	add	r3, r2
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	6811      	ldr	r1, [r2, #0]
 8002142:	f043 0201 	orr.w	r2, r3, #1
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	3318      	adds	r3, #24
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	440b      	add	r3, r1
 800214e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002150:	2300      	movs	r3, #0
 8002152:	e00e      	b.n	8002172 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e006      	b.n	8002172 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
  }
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr

0800217e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800217e:	b480      	push	{r7}
 8002180:	b087      	sub	sp, #28
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002192:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002194:	7dfb      	ldrb	r3, [r7, #23]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d003      	beq.n	80021a2 <HAL_CAN_GetRxMessage+0x24>
 800219a:	7dfb      	ldrb	r3, [r7, #23]
 800219c:	2b02      	cmp	r3, #2
 800219e:	f040 80f3 	bne.w	8002388 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10e      	bne.n	80021c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d116      	bne.n	80021e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e0e7      	b.n	8002396 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	f003 0303 	and.w	r3, r3, #3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d107      	bne.n	80021e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0d8      	b.n	8002396 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	331b      	adds	r3, #27
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	4413      	add	r3, r2
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0204 	and.w	r2, r3, #4
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	331b      	adds	r3, #27
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	4413      	add	r3, r2
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	e00b      	b.n	8002234 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	331b      	adds	r3, #27
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	4413      	add	r3, r2
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	08db      	lsrs	r3, r3, #3
 800222c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	331b      	adds	r3, #27
 800223c:	011b      	lsls	r3, r3, #4
 800223e:	4413      	add	r3, r2
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0202 	and.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	331b      	adds	r3, #27
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4413      	add	r3, r2
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 020f 	and.w	r2, r3, #15
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	331b      	adds	r3, #27
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b2da      	uxtb	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	331b      	adds	r3, #27
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	4413      	add	r3, r2
 8002286:	3304      	adds	r3, #4
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4413      	add	r3, r2
 800229c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	4413      	add	r3, r2
 80022b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0a1a      	lsrs	r2, r3, #8
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	3301      	adds	r3, #1
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0c1a      	lsrs	r2, r3, #16
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	3302      	adds	r3, #2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	0e1a      	lsrs	r2, r3, #24
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	3303      	adds	r3, #3
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	3304      	adds	r3, #4
 800230a:	b2d2      	uxtb	r2, r2
 800230c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0a1a      	lsrs	r2, r3, #8
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	3305      	adds	r3, #5
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	4413      	add	r3, r2
 8002332:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0c1a      	lsrs	r2, r3, #16
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	3306      	adds	r3, #6
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	4413      	add	r3, r2
 800234c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	0e1a      	lsrs	r2, r3, #24
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	3307      	adds	r3, #7
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d108      	bne.n	8002374 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	68da      	ldr	r2, [r3, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0220 	orr.w	r2, r2, #32
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	e007      	b.n	8002384 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f042 0220 	orr.w	r2, r2, #32
 8002382:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e006      	b.n	8002396 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
  }
}
 8002396:	4618      	mov	r0, r3
 8002398:	371c      	adds	r7, #28
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b085      	sub	sp, #20
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b6:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d002      	beq.n	80023c4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80023be:	7afb      	ldrb	r3, [r7, #11]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d10f      	bne.n	80023e4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d106      	bne.n	80023d8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0303 	and.w	r3, r3, #3
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	e005      	b.n	80023e4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002404:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002410:	4013      	ands	r3, r2
 8002412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800241c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002426:	4a04      	ldr	r2, [pc, #16]	; (8002438 <__NVIC_SetPriorityGrouping+0x44>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	60d3      	str	r3, [r2, #12]
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <__NVIC_GetPriorityGrouping+0x18>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0a1b      	lsrs	r3, r3, #8
 8002446:	f003 0307 	and.w	r3, r3, #7
}
 800244a:	4618      	mov	r0, r3
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	e000ed00 	.word	0xe000ed00

08002458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	2b00      	cmp	r3, #0
 8002468:	db0b      	blt.n	8002482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	f003 021f 	and.w	r2, r3, #31
 8002470:	4907      	ldr	r1, [pc, #28]	; (8002490 <__NVIC_EnableIRQ+0x38>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	2001      	movs	r0, #1
 800247a:	fa00 f202 	lsl.w	r2, r0, r2
 800247e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000e100 	.word	0xe000e100

08002494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	6039      	str	r1, [r7, #0]
 800249e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	db0a      	blt.n	80024be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	490c      	ldr	r1, [pc, #48]	; (80024e0 <__NVIC_SetPriority+0x4c>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	0112      	lsls	r2, r2, #4
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	440b      	add	r3, r1
 80024b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024bc:	e00a      	b.n	80024d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4908      	ldr	r1, [pc, #32]	; (80024e4 <__NVIC_SetPriority+0x50>)
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	3b04      	subs	r3, #4
 80024cc:	0112      	lsls	r2, r2, #4
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	440b      	add	r3, r1
 80024d2:	761a      	strb	r2, [r3, #24]
}
 80024d4:	bf00      	nop
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	e000e100 	.word	0xe000e100
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b089      	sub	sp, #36	; 0x24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f1c3 0307 	rsb	r3, r3, #7
 8002502:	2b04      	cmp	r3, #4
 8002504:	bf28      	it	cs
 8002506:	2304      	movcs	r3, #4
 8002508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	3304      	adds	r3, #4
 800250e:	2b06      	cmp	r3, #6
 8002510:	d902      	bls.n	8002518 <NVIC_EncodePriority+0x30>
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	3b03      	subs	r3, #3
 8002516:	e000      	b.n	800251a <NVIC_EncodePriority+0x32>
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800251c:	f04f 32ff 	mov.w	r2, #4294967295
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	fa02 f303 	lsl.w	r3, r2, r3
 8002526:	43da      	mvns	r2, r3
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	401a      	ands	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002530:	f04f 31ff 	mov.w	r1, #4294967295
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa01 f303 	lsl.w	r3, r1, r3
 800253a:	43d9      	mvns	r1, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002540:	4313      	orrs	r3, r2
         );
}
 8002542:	4618      	mov	r0, r3
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff ff4c 	bl	80023f4 <__NVIC_SetPriorityGrouping>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
 8002570:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002576:	f7ff ff61 	bl	800243c <__NVIC_GetPriorityGrouping>
 800257a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	68b9      	ldr	r1, [r7, #8]
 8002580:	6978      	ldr	r0, [r7, #20]
 8002582:	f7ff ffb1 	bl	80024e8 <NVIC_EncodePriority>
 8002586:	4602      	mov	r2, r0
 8002588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff80 	bl	8002494 <__NVIC_SetPriority>
}
 8002594:	bf00      	nop
 8002596:	3718      	adds	r7, #24
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b082      	sub	sp, #8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff54 	bl	8002458 <__NVIC_EnableIRQ>
}
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00e      	b.n	80025e8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	795b      	ldrb	r3, [r3, #5]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d105      	bne.n	80025e0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fff0 	bl	80015c0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3708      	adds	r7, #8
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2202      	movs	r2, #2
 8002604:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002616:	2300      	movs	r3, #0
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e00a      	b.n	8002632 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	441a      	add	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3301      	adds	r3, #1
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	429a      	cmp	r2, r3
 8002638:	d3f0      	bcc.n	800261c <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002648:	693b      	ldr	r3, [r7, #16]
}
 800264a:	4618      	mov	r0, r3
 800264c:	371c      	adds	r7, #28
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002664:	f7ff faa6 	bl	8001bb4 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d101      	bne.n	8002674 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e099      	b.n	80027a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2202      	movs	r2, #2
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002694:	e00f      	b.n	80026b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002696:	f7ff fa8d 	bl	8001bb4 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b05      	cmp	r3, #5
 80026a2:	d908      	bls.n	80026b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2220      	movs	r2, #32
 80026a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2203      	movs	r2, #3
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e078      	b.n	80027a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e8      	bne.n	8002696 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026cc:	697a      	ldr	r2, [r7, #20]
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_DMA_Init+0x158>)
 80026d0:	4013      	ands	r3, r2
 80026d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270c:	2b04      	cmp	r3, #4
 800270e:	d107      	bne.n	8002720 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	4313      	orrs	r3, r2
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f023 0307 	bic.w	r3, r3, #7
 8002736:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4313      	orrs	r3, r2
 8002740:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b04      	cmp	r3, #4
 8002748:	d117      	bne.n	800277a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	697a      	ldr	r2, [r7, #20]
 8002750:	4313      	orrs	r3, r2
 8002752:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00e      	beq.n	800277a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fa9d 	bl	8002c9c <DMA_CheckFifoParam>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d008      	beq.n	800277a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002776:	2301      	movs	r3, #1
 8002778:	e016      	b.n	80027a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 fa54 	bl	8002c30 <DMA_CalcBaseAndBitshift>
 8002788:	4603      	mov	r3, r0
 800278a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	223f      	movs	r2, #63	; 0x3f
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	f010803f 	.word	0xf010803f

080027b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	60b9      	str	r1, [r7, #8]
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027c2:	2300      	movs	r3, #0
 80027c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_DMA_Start_IT+0x26>
 80027d6:	2302      	movs	r3, #2
 80027d8:	e040      	b.n	800285c <HAL_DMA_Start_IT+0xa8>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2201      	movs	r2, #1
 80027de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d12f      	bne.n	800284e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2202      	movs	r2, #2
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68b9      	ldr	r1, [r7, #8]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 f9e6 	bl	8002bd4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800280c:	223f      	movs	r2, #63	; 0x3f
 800280e:	409a      	lsls	r2, r3
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0216 	orr.w	r2, r2, #22
 8002822:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	2b00      	cmp	r3, #0
 800282a:	d007      	beq.n	800283c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	e005      	b.n	800285a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002856:	2302      	movs	r3, #2
 8002858:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800285a:	7dfb      	ldrb	r3, [r7, #23]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d004      	beq.n	8002882 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e00c      	b.n	800289c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2205      	movs	r2, #5
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0201 	bic.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028b4:	4b92      	ldr	r3, [pc, #584]	; (8002b00 <HAL_DMA_IRQHandler+0x258>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a92      	ldr	r2, [pc, #584]	; (8002b04 <HAL_DMA_IRQHandler+0x25c>)
 80028ba:	fba2 2303 	umull	r2, r3, r2, r3
 80028be:	0a9b      	lsrs	r3, r3, #10
 80028c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d2:	2208      	movs	r2, #8
 80028d4:	409a      	lsls	r2, r3
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4013      	ands	r3, r2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d01a      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0204 	bic.w	r2, r2, #4
 80028fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002900:	2208      	movs	r2, #8
 8002902:	409a      	lsls	r2, r3
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002918:	2201      	movs	r2, #1
 800291a:	409a      	lsls	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d012      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00b      	beq.n	800294a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0202 	orr.w	r2, r3, #2
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	2204      	movs	r2, #4
 8002950:	409a      	lsls	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	4013      	ands	r3, r2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00b      	beq.n	8002980 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	2204      	movs	r2, #4
 800296e:	409a      	lsls	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002978:	f043 0204 	orr.w	r2, r3, #4
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2210      	movs	r2, #16
 8002986:	409a      	lsls	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	4013      	ands	r3, r2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d043      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d03c      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a2:	2210      	movs	r2, #16
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d018      	beq.n	80029ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d108      	bne.n	80029d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d024      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	4798      	blx	r3
 80029d6:	e01f      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d01b      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	4798      	blx	r3
 80029e8:	e016      	b.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d107      	bne.n	8002a08 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f022 0208 	bic.w	r2, r2, #8
 8002a06:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4013      	ands	r3, r2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 808e 	beq.w	8002b46 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0310 	and.w	r3, r3, #16
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8086 	beq.w	8002b46 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	2220      	movs	r2, #32
 8002a40:	409a      	lsls	r2, r3
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b05      	cmp	r3, #5
 8002a50:	d136      	bne.n	8002ac0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0216 	bic.w	r2, r2, #22
 8002a60:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695a      	ldr	r2, [r3, #20]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a70:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_DMA_IRQHandler+0x1da>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d007      	beq.n	8002a92 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0208 	bic.w	r2, r2, #8
 8002a90:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a96:	223f      	movs	r2, #63	; 0x3f
 8002a98:	409a      	lsls	r2, r3
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d07d      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
        }
        return;
 8002abe:	e078      	b.n	8002bb2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d01c      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d030      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4798      	blx	r3
 8002aec:	e02b      	b.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d027      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	4798      	blx	r3
 8002afe:	e022      	b.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
 8002b00:	20000000 	.word	0x20000000
 8002b04:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10f      	bne.n	8002b36 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0210 	bic.w	r2, r2, #16
 8002b24:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d032      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d022      	beq.n	8002ba0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2205      	movs	r2, #5
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0201 	bic.w	r2, r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	3301      	adds	r3, #1
 8002b76:	60bb      	str	r3, [r7, #8]
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d307      	bcc.n	8002b8e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f2      	bne.n	8002b72 <HAL_DMA_IRQHandler+0x2ca>
 8002b8c:	e000      	b.n	8002b90 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b8e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d005      	beq.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	4798      	blx	r3
 8002bb0:	e000      	b.n	8002bb4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bb2:	bf00      	nop
    }
  }
}
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop

08002bbc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	2b40      	cmp	r3, #64	; 0x40
 8002c00:	d108      	bne.n	8002c14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c12:	e007      	b.n	8002c24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68ba      	ldr	r2, [r7, #8]
 8002c1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	60da      	str	r2, [r3, #12]
}
 8002c24:	bf00      	nop
 8002c26:	3714      	adds	r7, #20
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b085      	sub	sp, #20
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	3b10      	subs	r3, #16
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <DMA_CalcBaseAndBitshift+0x64>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c4a:	4a13      	ldr	r2, [pc, #76]	; (8002c98 <DMA_CalcBaseAndBitshift+0x68>)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4413      	add	r3, r2
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d909      	bls.n	8002c72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	1d1a      	adds	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c70:	e007      	b.n	8002c82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c7a:	f023 0303 	bic.w	r3, r3, #3
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	aaaaaaab 	.word	0xaaaaaaab
 8002c98:	0800a34c 	.word	0x0800a34c

08002c9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	699b      	ldr	r3, [r3, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11f      	bne.n	8002cf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d855      	bhi.n	8002d68 <DMA_CheckFifoParam+0xcc>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <DMA_CheckFifoParam+0x28>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce7 	.word	0x08002ce7
 8002ccc:	08002cd5 	.word	0x08002cd5
 8002cd0:	08002d69 	.word	0x08002d69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d045      	beq.n	8002d6c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce4:	e042      	b.n	8002d6c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cee:	d13f      	bne.n	8002d70 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e03c      	b.n	8002d70 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cfe:	d121      	bne.n	8002d44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d836      	bhi.n	8002d74 <DMA_CheckFifoParam+0xd8>
 8002d06:	a201      	add	r2, pc, #4	; (adr r2, 8002d0c <DMA_CheckFifoParam+0x70>)
 8002d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d0c:	08002d1d 	.word	0x08002d1d
 8002d10:	08002d23 	.word	0x08002d23
 8002d14:	08002d1d 	.word	0x08002d1d
 8002d18:	08002d35 	.word	0x08002d35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d20:	e02f      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d024      	beq.n	8002d78 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d32:	e021      	b.n	8002d78 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d3c:	d11e      	bne.n	8002d7c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d42:	e01b      	b.n	8002d7c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d902      	bls.n	8002d50 <DMA_CheckFifoParam+0xb4>
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d003      	beq.n	8002d56 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d4e:	e018      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e015      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00e      	beq.n	8002d80 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	73fb      	strb	r3, [r7, #15]
      break;
 8002d66:	e00b      	b.n	8002d80 <DMA_CheckFifoParam+0xe4>
      break;
 8002d68:	bf00      	nop
 8002d6a:	e00a      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d6c:	bf00      	nop
 8002d6e:	e008      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d70:	bf00      	nop
 8002d72:	e006      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d74:	bf00      	nop
 8002d76:	e004      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d78:	bf00      	nop
 8002d7a:	e002      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;   
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <DMA_CheckFifoParam+0xe6>
      break;
 8002d80:	bf00      	nop
    }
  } 
  
  return status; 
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e16b      	b.n	8003084 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dac:	2201      	movs	r2, #1
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	f040 815a 	bne.w	800307e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d00b      	beq.n	8002dea <HAL_GPIO_Init+0x5a>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d007      	beq.n	8002dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dde:	2b11      	cmp	r3, #17
 8002de0:	d003      	beq.n	8002dea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b12      	cmp	r3, #18
 8002de8:	d130      	bne.n	8002e4c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	2203      	movs	r2, #3
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e20:	2201      	movs	r2, #1
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	091b      	lsrs	r3, r3, #4
 8002e36:	f003 0201 	and.w	r2, r3, #1
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	2203      	movs	r2, #3
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0xfc>
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b12      	cmp	r3, #18
 8002e8a:	d123      	bne.n	8002ed4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	08da      	lsrs	r2, r3, #3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	3208      	adds	r2, #8
 8002e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	08da      	lsrs	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3208      	adds	r2, #8
 8002ece:	69b9      	ldr	r1, [r7, #24]
 8002ed0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	2203      	movs	r2, #3
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 0203 	and.w	r2, r3, #3
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80b4 	beq.w	800307e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	4b5f      	ldr	r3, [pc, #380]	; (8003098 <HAL_GPIO_Init+0x308>)
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	4a5e      	ldr	r2, [pc, #376]	; (8003098 <HAL_GPIO_Init+0x308>)
 8002f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f24:	6453      	str	r3, [r2, #68]	; 0x44
 8002f26:	4b5c      	ldr	r3, [pc, #368]	; (8003098 <HAL_GPIO_Init+0x308>)
 8002f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f2e:	60fb      	str	r3, [r7, #12]
 8002f30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f32:	4a5a      	ldr	r2, [pc, #360]	; (800309c <HAL_GPIO_Init+0x30c>)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	089b      	lsrs	r3, r3, #2
 8002f38:	3302      	adds	r3, #2
 8002f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	220f      	movs	r2, #15
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	43db      	mvns	r3, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4013      	ands	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a51      	ldr	r2, [pc, #324]	; (80030a0 <HAL_GPIO_Init+0x310>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d02b      	beq.n	8002fb6 <HAL_GPIO_Init+0x226>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a50      	ldr	r2, [pc, #320]	; (80030a4 <HAL_GPIO_Init+0x314>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d025      	beq.n	8002fb2 <HAL_GPIO_Init+0x222>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4f      	ldr	r2, [pc, #316]	; (80030a8 <HAL_GPIO_Init+0x318>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d01f      	beq.n	8002fae <HAL_GPIO_Init+0x21e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4e      	ldr	r2, [pc, #312]	; (80030ac <HAL_GPIO_Init+0x31c>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d019      	beq.n	8002faa <HAL_GPIO_Init+0x21a>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4d      	ldr	r2, [pc, #308]	; (80030b0 <HAL_GPIO_Init+0x320>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d013      	beq.n	8002fa6 <HAL_GPIO_Init+0x216>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4c      	ldr	r2, [pc, #304]	; (80030b4 <HAL_GPIO_Init+0x324>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00d      	beq.n	8002fa2 <HAL_GPIO_Init+0x212>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4b      	ldr	r2, [pc, #300]	; (80030b8 <HAL_GPIO_Init+0x328>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d007      	beq.n	8002f9e <HAL_GPIO_Init+0x20e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4a      	ldr	r2, [pc, #296]	; (80030bc <HAL_GPIO_Init+0x32c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d101      	bne.n	8002f9a <HAL_GPIO_Init+0x20a>
 8002f96:	2307      	movs	r3, #7
 8002f98:	e00e      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002f9a:	2308      	movs	r3, #8
 8002f9c:	e00c      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002f9e:	2306      	movs	r3, #6
 8002fa0:	e00a      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fa2:	2305      	movs	r3, #5
 8002fa4:	e008      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fa6:	2304      	movs	r3, #4
 8002fa8:	e006      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002faa:	2303      	movs	r3, #3
 8002fac:	e004      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fae:	2302      	movs	r3, #2
 8002fb0:	e002      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e000      	b.n	8002fb8 <HAL_GPIO_Init+0x228>
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	69fa      	ldr	r2, [r7, #28]
 8002fba:	f002 0203 	and.w	r2, r2, #3
 8002fbe:	0092      	lsls	r2, r2, #2
 8002fc0:	4093      	lsls	r3, r2
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fc8:	4934      	ldr	r1, [pc, #208]	; (800309c <HAL_GPIO_Init+0x30c>)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	089b      	lsrs	r3, r3, #2
 8002fce:	3302      	adds	r3, #2
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ffa:	4a31      	ldr	r2, [pc, #196]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003000:	4b2f      	ldr	r3, [pc, #188]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d003      	beq.n	8003024 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003024:	4a26      	ldr	r2, [pc, #152]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302a:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <HAL_GPIO_Init+0x330>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800304e:	4a1c      	ldr	r2, [pc, #112]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <HAL_GPIO_Init+0x330>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003078:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <HAL_GPIO_Init+0x330>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	2b0f      	cmp	r3, #15
 8003088:	f67f ae90 	bls.w	8002dac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800308c:	bf00      	nop
 800308e:	3724      	adds	r7, #36	; 0x24
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	40023800 	.word	0x40023800
 800309c:	40013800 	.word	0x40013800
 80030a0:	40020000 	.word	0x40020000
 80030a4:	40020400 	.word	0x40020400
 80030a8:	40020800 	.word	0x40020800
 80030ac:	40020c00 	.word	0x40020c00
 80030b0:	40021000 	.word	0x40021000
 80030b4:	40021400 	.word	0x40021400
 80030b8:	40021800 	.word	0x40021800
 80030bc:	40021c00 	.word	0x40021c00
 80030c0:	40013c00 	.word	0x40013c00

080030c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	807b      	strh	r3, [r7, #2]
 80030d0:	4613      	mov	r3, r2
 80030d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d4:	787b      	ldrb	r3, [r7, #1]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030da:	887a      	ldrh	r2, [r7, #2]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030e0:	e003      	b.n	80030ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030e2:	887b      	ldrh	r3, [r7, #2]
 80030e4:	041a      	lsls	r2, r3, #16
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	619a      	str	r2, [r3, #24]
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b084      	sub	sp, #16
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e02b      	b.n	8003160 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003110:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f245 5255 	movw	r2, #21845	; 0x5555
 800311a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6852      	ldr	r2, [r2, #4]
 8003124:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6892      	ldr	r2, [r2, #8]
 800312e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003130:	f7fe fd40 	bl	8001bb4 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8003136:	e008      	b.n	800314a <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003138:	f7fe fd3c 	bl	8001bb4 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b30      	cmp	r3, #48	; 0x30
 8003144:	d901      	bls.n	800314a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e00a      	b.n	8003160 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f1      	bne.n	8003138 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800315c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003178:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e25b      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d075      	beq.n	8003292 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031a6:	4ba3      	ldr	r3, [pc, #652]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d00c      	beq.n	80031cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031b2:	4ba0      	ldr	r3, [pc, #640]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d112      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031be:	4b9d      	ldr	r3, [pc, #628]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ca:	d10b      	bne.n	80031e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031cc:	4b99      	ldr	r3, [pc, #612]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d05b      	beq.n	8003290 <HAL_RCC_OscConfig+0x108>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d157      	bne.n	8003290 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e236      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ec:	d106      	bne.n	80031fc <HAL_RCC_OscConfig+0x74>
 80031ee:	4b91      	ldr	r3, [pc, #580]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a90      	ldr	r2, [pc, #576]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	e01d      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x98>
 8003206:	4b8b      	ldr	r3, [pc, #556]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a8a      	ldr	r2, [pc, #552]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003210:	6013      	str	r3, [r2, #0]
 8003212:	4b88      	ldr	r3, [pc, #544]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a87      	ldr	r2, [pc, #540]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0xb0>
 8003220:	4b84      	ldr	r3, [pc, #528]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a83      	ldr	r2, [pc, #524]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800322a:	6013      	str	r3, [r2, #0]
 800322c:	4b81      	ldr	r3, [pc, #516]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a80      	ldr	r2, [pc, #512]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d013      	beq.n	8003268 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7fe fcb8 	bl	8001bb4 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003248:	f7fe fcb4 	bl	8001bb4 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b64      	cmp	r3, #100	; 0x64
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e1fb      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b76      	ldr	r3, [pc, #472]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0xc0>
 8003266:	e014      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fca4 	bl	8001bb4 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fca0 	bl	8001bb4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e1e7      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003282:	4b6c      	ldr	r3, [pc, #432]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0xe8>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d063      	beq.n	8003366 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800329e:	4b65      	ldr	r3, [pc, #404]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 030c 	and.w	r3, r3, #12
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b62      	ldr	r3, [pc, #392]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b5f      	ldr	r3, [pc, #380]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b5c      	ldr	r3, [pc, #368]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1bb      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b56      	ldr	r3, [pc, #344]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4952      	ldr	r1, [pc, #328]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e03a      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <HAL_RCC_OscConfig+0x2b0>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe fc59 	bl	8001bb4 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003306:	f7fe fc55 	bl	8001bb4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e19c      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	4b46      	ldr	r3, [pc, #280]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b43      	ldr	r3, [pc, #268]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4940      	ldr	r1, [pc, #256]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b3f      	ldr	r3, [pc, #252]	; (8003438 <HAL_RCC_OscConfig+0x2b0>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe fc38 	bl	8001bb4 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003348:	f7fe fc34 	bl	8001bb4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e17b      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	4b36      	ldr	r3, [pc, #216]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d030      	beq.n	80033d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	4b30      	ldr	r3, [pc, #192]	; (800343c <HAL_RCC_OscConfig+0x2b4>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe fc18 	bl	8001bb4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe fc14 	bl	8001bb4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e15b      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	4b26      	ldr	r3, [pc, #152]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x200>
 80033a6:	e015      	b.n	80033d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a8:	4b24      	ldr	r3, [pc, #144]	; (800343c <HAL_RCC_OscConfig+0x2b4>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ae:	f7fe fc01 	bl	8001bb4 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	e008      	b.n	80033c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fe fbfd 	bl	8001bb4 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d901      	bls.n	80033c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e144      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c8:	4b1a      	ldr	r3, [pc, #104]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1f0      	bne.n	80033b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80a0 	beq.w	8003522 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d10f      	bne.n	8003412 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	4b0f      	ldr	r3, [pc, #60]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	4a0e      	ldr	r2, [pc, #56]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 80033fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003400:	6413      	str	r3, [r2, #64]	; 0x40
 8003402:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003412:	4b0b      	ldr	r3, [pc, #44]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d121      	bne.n	8003462 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800341e:	4b08      	ldr	r3, [pc, #32]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a07      	ldr	r2, [pc, #28]	; (8003440 <HAL_RCC_OscConfig+0x2b8>)
 8003424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003428:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800342a:	f7fe fbc3 	bl	8001bb4 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003430:	e011      	b.n	8003456 <HAL_RCC_OscConfig+0x2ce>
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	42470000 	.word	0x42470000
 800343c:	42470e80 	.word	0x42470e80
 8003440:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003444:	f7fe fbb6 	bl	8001bb4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0fd      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003456:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_OscConfig+0x4d4>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d106      	bne.n	8003478 <HAL_RCC_OscConfig+0x2f0>
 800346a:	4b7d      	ldr	r3, [pc, #500]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a7c      	ldr	r2, [pc, #496]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	e01c      	b.n	80034b2 <HAL_RCC_OscConfig+0x32a>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d10c      	bne.n	800349a <HAL_RCC_OscConfig+0x312>
 8003480:	4b77      	ldr	r3, [pc, #476]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003482:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003484:	4a76      	ldr	r2, [pc, #472]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003486:	f043 0304 	orr.w	r3, r3, #4
 800348a:	6713      	str	r3, [r2, #112]	; 0x70
 800348c:	4b74      	ldr	r3, [pc, #464]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	4a73      	ldr	r2, [pc, #460]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	; 0x70
 8003498:	e00b      	b.n	80034b2 <HAL_RCC_OscConfig+0x32a>
 800349a:	4b71      	ldr	r3, [pc, #452]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 800349c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349e:	4a70      	ldr	r2, [pc, #448]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 80034a0:	f023 0301 	bic.w	r3, r3, #1
 80034a4:	6713      	str	r3, [r2, #112]	; 0x70
 80034a6:	4b6e      	ldr	r3, [pc, #440]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a6d      	ldr	r2, [pc, #436]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 80034ac:	f023 0304 	bic.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d015      	beq.n	80034e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ba:	f7fe fb7b 	bl	8001bb4 <HAL_GetTick>
 80034be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034c0:	e00a      	b.n	80034d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034c2:	f7fe fb77 	bl	8001bb4 <HAL_GetTick>
 80034c6:	4602      	mov	r2, r0
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	1ad3      	subs	r3, r2, r3
 80034cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e0bc      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d8:	4b61      	ldr	r3, [pc, #388]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ee      	beq.n	80034c2 <HAL_RCC_OscConfig+0x33a>
 80034e4:	e014      	b.n	8003510 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034e6:	f7fe fb65 	bl	8001bb4 <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034ec:	e00a      	b.n	8003504 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034ee:	f7fe fb61 	bl	8001bb4 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d901      	bls.n	8003504 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003500:	2303      	movs	r3, #3
 8003502:	e0a6      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003504:	4b56      	ldr	r3, [pc, #344]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ee      	bne.n	80034ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b52      	ldr	r3, [pc, #328]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	4a51      	ldr	r2, [pc, #324]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8092 	beq.w	8003650 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800352c:	4b4c      	ldr	r3, [pc, #304]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 030c 	and.w	r3, r3, #12
 8003534:	2b08      	cmp	r3, #8
 8003536:	d05c      	beq.n	80035f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d141      	bne.n	80035c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003540:	4b48      	ldr	r3, [pc, #288]	; (8003664 <HAL_RCC_OscConfig+0x4dc>)
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003546:	f7fe fb35 	bl	8001bb4 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354e:	f7fe fb31 	bl	8001bb4 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e078      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003560:	4b3f      	ldr	r3, [pc, #252]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1f0      	bne.n	800354e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	69da      	ldr	r2, [r3, #28]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	431a      	orrs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	019b      	lsls	r3, r3, #6
 800357c:	431a      	orrs	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003582:	085b      	lsrs	r3, r3, #1
 8003584:	3b01      	subs	r3, #1
 8003586:	041b      	lsls	r3, r3, #16
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	4933      	ldr	r1, [pc, #204]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003596:	4b33      	ldr	r3, [pc, #204]	; (8003664 <HAL_RCC_OscConfig+0x4dc>)
 8003598:	2201      	movs	r2, #1
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fb0a 	bl	8001bb4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe fb06 	bl	8001bb4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e04d      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b6:	4b2a      	ldr	r3, [pc, #168]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0f0      	beq.n	80035a4 <HAL_RCC_OscConfig+0x41c>
 80035c2:	e045      	b.n	8003650 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <HAL_RCC_OscConfig+0x4dc>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe faf3 	bl	8001bb4 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe faef 	bl	8001bb4 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e036      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e4:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x44a>
 80035f0:	e02e      	b.n	8003650 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d101      	bne.n	80035fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e029      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035fe:	4b18      	ldr	r3, [pc, #96]	; (8003660 <HAL_RCC_OscConfig+0x4d8>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	69db      	ldr	r3, [r3, #28]
 800360e:	429a      	cmp	r2, r3
 8003610:	d11c      	bne.n	800364c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d115      	bne.n	800364c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003626:	4013      	ands	r3, r2
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800362c:	4293      	cmp	r3, r2
 800362e:	d10d      	bne.n	800364c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800363a:	429a      	cmp	r2, r3
 800363c:	d106      	bne.n	800364c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d001      	beq.n	8003650 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e000      	b.n	8003652 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3718      	adds	r7, #24
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40007000 	.word	0x40007000
 8003660:	40023800 	.word	0x40023800
 8003664:	42470060 	.word	0x42470060

08003668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e0cc      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b68      	ldr	r3, [pc, #416]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d90c      	bls.n	80036a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b65      	ldr	r3, [pc, #404]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	b2d2      	uxtb	r2, r2
 8003690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003692:	4b63      	ldr	r3, [pc, #396]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0b8      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d020      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0304 	and.w	r3, r3, #4
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036bc:	4b59      	ldr	r3, [pc, #356]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036d4:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	4a52      	ldr	r2, [pc, #328]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036e0:	4b50      	ldr	r3, [pc, #320]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	494d      	ldr	r1, [pc, #308]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d044      	beq.n	8003788 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d107      	bne.n	8003716 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b47      	ldr	r3, [pc, #284]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d119      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e07f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d003      	beq.n	8003726 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003722:	2b03      	cmp	r3, #3
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003726:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d109      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e06f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003736:	4b3b      	ldr	r3, [pc, #236]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d101      	bne.n	8003746 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e067      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003746:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f023 0203 	bic.w	r2, r3, #3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4934      	ldr	r1, [pc, #208]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	4313      	orrs	r3, r2
 8003756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003758:	f7fe fa2c 	bl	8001bb4 <HAL_GetTick>
 800375c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800375e:	e00a      	b.n	8003776 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003760:	f7fe fa28 	bl	8001bb4 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	; 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e04f      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003776:	4b2b      	ldr	r3, [pc, #172]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f003 020c 	and.w	r2, r3, #12
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	429a      	cmp	r2, r3
 8003786:	d1eb      	bne.n	8003760 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003788:	4b25      	ldr	r3, [pc, #148]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	d20c      	bcs.n	80037b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800379e:	4b20      	ldr	r3, [pc, #128]	; (8003820 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d001      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e032      	b.n	8003816 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0304 	and.w	r3, r3, #4
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d008      	beq.n	80037ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	4916      	ldr	r1, [pc, #88]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d009      	beq.n	80037ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037da:	4b12      	ldr	r3, [pc, #72]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	490e      	ldr	r1, [pc, #56]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037ee:	f000 f821 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037f2:	4601      	mov	r1, r0
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	091b      	lsrs	r3, r3, #4
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	4a0a      	ldr	r2, [pc, #40]	; (8003828 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	5cd3      	ldrb	r3, [r2, r3]
 8003802:	fa21 f303 	lsr.w	r3, r1, r3
 8003806:	4a09      	ldr	r2, [pc, #36]	; (800382c <HAL_RCC_ClockConfig+0x1c4>)
 8003808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800380a:	4b09      	ldr	r3, [pc, #36]	; (8003830 <HAL_RCC_ClockConfig+0x1c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe f8ca 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40023c00 	.word	0x40023c00
 8003824:	40023800 	.word	0x40023800
 8003828:	0800a334 	.word	0x0800a334
 800382c:	20000000 	.word	0x20000000
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800384a:	4b50      	ldr	r3, [pc, #320]	; (800398c <HAL_RCC_GetSysClockFreq+0x158>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b04      	cmp	r3, #4
 8003854:	d007      	beq.n	8003866 <HAL_RCC_GetSysClockFreq+0x32>
 8003856:	2b08      	cmp	r3, #8
 8003858:	d008      	beq.n	800386c <HAL_RCC_GetSysClockFreq+0x38>
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 808d 	bne.w	800397a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003860:	4b4b      	ldr	r3, [pc, #300]	; (8003990 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003862:	60bb      	str	r3, [r7, #8]
       break;
 8003864:	e08c      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003866:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_RCC_GetSysClockFreq+0x160>)
 8003868:	60bb      	str	r3, [r7, #8]
      break;
 800386a:	e089      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800386c:	4b47      	ldr	r3, [pc, #284]	; (800398c <HAL_RCC_GetSysClockFreq+0x158>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003874:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003876:	4b45      	ldr	r3, [pc, #276]	; (800398c <HAL_RCC_GetSysClockFreq+0x158>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d023      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003882:	4b42      	ldr	r3, [pc, #264]	; (800398c <HAL_RCC_GetSysClockFreq+0x158>)
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	099b      	lsrs	r3, r3, #6
 8003888:	f04f 0400 	mov.w	r4, #0
 800388c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	ea03 0501 	and.w	r5, r3, r1
 8003898:	ea04 0602 	and.w	r6, r4, r2
 800389c:	4a3d      	ldr	r2, [pc, #244]	; (8003994 <HAL_RCC_GetSysClockFreq+0x160>)
 800389e:	fb02 f106 	mul.w	r1, r2, r6
 80038a2:	2200      	movs	r2, #0
 80038a4:	fb02 f205 	mul.w	r2, r2, r5
 80038a8:	440a      	add	r2, r1
 80038aa:	493a      	ldr	r1, [pc, #232]	; (8003994 <HAL_RCC_GetSysClockFreq+0x160>)
 80038ac:	fba5 0101 	umull	r0, r1, r5, r1
 80038b0:	1853      	adds	r3, r2, r1
 80038b2:	4619      	mov	r1, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f04f 0400 	mov.w	r4, #0
 80038ba:	461a      	mov	r2, r3
 80038bc:	4623      	mov	r3, r4
 80038be:	f7fc fc87 	bl	80001d0 <__aeabi_uldivmod>
 80038c2:	4603      	mov	r3, r0
 80038c4:	460c      	mov	r4, r1
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	e049      	b.n	800395e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ca:	4b30      	ldr	r3, [pc, #192]	; (800398c <HAL_RCC_GetSysClockFreq+0x158>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	099b      	lsrs	r3, r3, #6
 80038d0:	f04f 0400 	mov.w	r4, #0
 80038d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	ea03 0501 	and.w	r5, r3, r1
 80038e0:	ea04 0602 	and.w	r6, r4, r2
 80038e4:	4629      	mov	r1, r5
 80038e6:	4632      	mov	r2, r6
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	f04f 0400 	mov.w	r4, #0
 80038f0:	0154      	lsls	r4, r2, #5
 80038f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038f6:	014b      	lsls	r3, r1, #5
 80038f8:	4619      	mov	r1, r3
 80038fa:	4622      	mov	r2, r4
 80038fc:	1b49      	subs	r1, r1, r5
 80038fe:	eb62 0206 	sbc.w	r2, r2, r6
 8003902:	f04f 0300 	mov.w	r3, #0
 8003906:	f04f 0400 	mov.w	r4, #0
 800390a:	0194      	lsls	r4, r2, #6
 800390c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003910:	018b      	lsls	r3, r1, #6
 8003912:	1a5b      	subs	r3, r3, r1
 8003914:	eb64 0402 	sbc.w	r4, r4, r2
 8003918:	f04f 0100 	mov.w	r1, #0
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	00e2      	lsls	r2, r4, #3
 8003922:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003926:	00d9      	lsls	r1, r3, #3
 8003928:	460b      	mov	r3, r1
 800392a:	4614      	mov	r4, r2
 800392c:	195b      	adds	r3, r3, r5
 800392e:	eb44 0406 	adc.w	r4, r4, r6
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	02a2      	lsls	r2, r4, #10
 800393c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003940:	0299      	lsls	r1, r3, #10
 8003942:	460b      	mov	r3, r1
 8003944:	4614      	mov	r4, r2
 8003946:	4618      	mov	r0, r3
 8003948:	4621      	mov	r1, r4
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f04f 0400 	mov.w	r4, #0
 8003950:	461a      	mov	r2, r3
 8003952:	4623      	mov	r3, r4
 8003954:	f7fc fc3c 	bl	80001d0 <__aeabi_uldivmod>
 8003958:	4603      	mov	r3, r0
 800395a:	460c      	mov	r4, r1
 800395c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_RCC_GetSysClockFreq+0x158>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0c1b      	lsrs	r3, r3, #16
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	3301      	adds	r3, #1
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	fbb2 f3f3 	udiv	r3, r2, r3
 8003976:	60bb      	str	r3, [r7, #8]
      break;
 8003978:	e002      	b.n	8003980 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800397a:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_RCC_GetSysClockFreq+0x15c>)
 800397c:	60bb      	str	r3, [r7, #8]
      break;
 800397e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003980:	68bb      	ldr	r3, [r7, #8]
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	00f42400 	.word	0x00f42400
 8003994:	017d7840 	.word	0x017d7840

08003998 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_RCC_GetHCLKFreq+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000000 	.word	0x20000000

080039b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039b4:	f7ff fff0 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039b8:	4601      	mov	r1, r0
 80039ba:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	0a9b      	lsrs	r3, r3, #10
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	4a03      	ldr	r2, [pc, #12]	; (80039d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039c6:	5cd3      	ldrb	r3, [r2, r3]
 80039c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40023800 	.word	0x40023800
 80039d4:	0800a344 	.word	0x0800a344

080039d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039dc:	f7ff ffdc 	bl	8003998 <HAL_RCC_GetHCLKFreq>
 80039e0:	4601      	mov	r1, r0
 80039e2:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	0b5b      	lsrs	r3, r3, #13
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	4a03      	ldr	r2, [pc, #12]	; (80039fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80039ee:	5cd3      	ldrb	r3, [r2, r3]
 80039f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40023800 	.word	0x40023800
 80039fc:	0800a344 	.word	0x0800a344

08003a00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	220f      	movs	r2, #15
 8003a0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a10:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_RCC_GetClockConfig+0x5c>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f003 0203 	and.w	r2, r3, #3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a1c:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <HAL_RCC_GetClockConfig+0x5c>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a28:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <HAL_RCC_GetClockConfig+0x5c>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a34:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_GetClockConfig+0x5c>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	08db      	lsrs	r3, r3, #3
 8003a3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a42:	4b07      	ldr	r3, [pc, #28]	; (8003a60 <HAL_RCC_GetClockConfig+0x60>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 020f 	and.w	r2, r3, #15
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	601a      	str	r2, [r3, #0]
}
 8003a4e:	bf00      	nop
 8003a50:	370c      	adds	r7, #12
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40023c00 	.word	0x40023c00

08003a64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e022      	b.n	8003abc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7fd fdbb 	bl	8001604 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2203      	movs	r2, #3
 8003a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 f814 	bl	8003ac4 <HAL_SD_InitCard>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d001      	beq.n	8003aa6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e00a      	b.n	8003abc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003ac4:	b5b0      	push	{r4, r5, r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af04      	add	r7, sp, #16
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003acc:	2300      	movs	r3, #0
 8003ace:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003ae0:	2376      	movs	r3, #118	; 0x76
 8003ae2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681d      	ldr	r5, [r3, #0]
 8003ae8:	466c      	mov	r4, sp
 8003aea:	f107 0314 	add.w	r3, r7, #20
 8003aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003af6:	f107 0308 	add.w	r3, r7, #8
 8003afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003afc:	4628      	mov	r0, r5
 8003afe:	f002 fbf7 	bl	80062f0 <SDIO_Init>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d001      	beq.n	8003b14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e031      	b.n	8003b78 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003b14:	4b1a      	ldr	r3, [pc, #104]	; (8003b80 <HAL_SD_InitCard+0xbc>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 fc2f 	bl	8006382 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003b24:	4b16      	ldr	r3, [pc, #88]	; (8003b80 <HAL_SD_InitCard+0xbc>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 ffdc 	bl	8004ae8 <SD_PowerON>
 8003b30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b44:	6a3b      	ldr	r3, [r7, #32]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e013      	b.n	8003b78 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fefb 	bl	800494c <SD_InitCard>
 8003b56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	6a3b      	ldr	r3, [r7, #32]
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3728      	adds	r7, #40	; 0x28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003b80:	422580a0 	.word	0x422580a0

08003b84 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d107      	bne.n	8003bac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0c9      	b.n	8003d40 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	f040 80c2 	bne.w	8003d3e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d907      	bls.n	8003bde <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e0b0      	b.n	8003d40 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2203      	movs	r2, #3
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003bfc:	f043 0302 	orr.w	r3, r3, #2
 8003c00:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	4a50      	ldr	r2, [pc, #320]	; (8003d48 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8003c08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	4a4f      	ldr	r2, [pc, #316]	; (8003d4c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003c10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	2200      	movs	r2, #0
 8003c18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3380      	adds	r3, #128	; 0x80
 8003c24:	4619      	mov	r1, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	025b      	lsls	r3, r3, #9
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	f7fe fdc1 	bl	80027b4 <HAL_DMA_Start_IT>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d017      	beq.n	8003c68 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003c46:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a40      	ldr	r2, [pc, #256]	; (8003d50 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003c4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e06b      	b.n	8003d40 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003c68:	4b3a      	ldr	r3, [pc, #232]	; (8003d54 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d002      	beq.n	8003c7c <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8003c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c78:	025b      	lsls	r3, r3, #9
 8003c7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 fc0f 	bl	80064a8 <SDMMC_CmdBlockLength>
 8003c8a:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00f      	beq.n	8003cb2 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2e      	ldr	r2, [pc, #184]	; (8003d50 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003c98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e046      	b.n	8003d40 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	025b      	lsls	r3, r3, #9
 8003cbc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003cbe:	2390      	movs	r3, #144	; 0x90
 8003cc0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f107 0210 	add.w	r2, r7, #16
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f002 fbb9 	bl	8006450 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d90a      	bls.n	8003cfa <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2282      	movs	r2, #130	; 0x82
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 fc1d 	bl	8006530 <SDMMC_CmdReadMultiBlock>
 8003cf6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003cf8:	e009      	b.n	8003d0e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2281      	movs	r2, #129	; 0x81
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d06:	4618      	mov	r0, r3
 8003d08:	f002 fbf0 	bl	80064ec <SDMMC_CmdReadSingleBlock>
 8003d0c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d012      	beq.n	8003d3a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a0d      	ldr	r2, [pc, #52]	; (8003d50 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e002      	b.n	8003d40 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3730      	adds	r7, #48	; 0x30
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	0800475b 	.word	0x0800475b
 8003d4c:	080047cd 	.word	0x080047cd
 8003d50:	004005ff 	.word	0x004005ff
 8003d54:	4225858c 	.word	0x4225858c

08003d58 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	; 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d107      	bne.n	8003d80 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0ce      	b.n	8003f1e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	f040 80c7 	bne.w	8003f1c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	441a      	add	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d907      	bls.n	8003db2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e0b5      	b.n	8003f1e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2203      	movs	r2, #3
 8003db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dda:	4a53      	ldr	r2, [pc, #332]	; (8003f28 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003ddc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003de2:	4a52      	ldr	r2, [pc, #328]	; (8003f2c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8003de4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2200      	movs	r2, #0
 8003dec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d002      	beq.n	8003dfc <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df8:	025b      	lsls	r3, r3, #9
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e04:	4618      	mov	r0, r3
 8003e06:	f002 fb4f 	bl	80064a8 <SDMMC_CmdBlockLength>
 8003e0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00f      	beq.n	8003e32 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a46      	ldr	r2, [pc, #280]	; (8003f30 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	431a      	orrs	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e075      	b.n	8003f1e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d90a      	bls.n	8003e4e <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	22a0      	movs	r2, #160	; 0xa0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e44:	4618      	mov	r0, r3
 8003e46:	f002 fbb7 	bl	80065b8 <SDMMC_CmdWriteMultiBlock>
 8003e4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003e4c:	e009      	b.n	8003e62 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2290      	movs	r2, #144	; 0x90
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 fb8a 	bl	8006574 <SDMMC_CmdWriteSingleBlock>
 8003e60:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a30      	ldr	r2, [pc, #192]	; (8003f30 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e047      	b.n	8003f1e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	3380      	adds	r3, #128	; 0x80
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	025b      	lsls	r3, r3, #9
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	f7fe fc84 	bl	80027b4 <HAL_DMA_Start_IT>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01c      	beq.n	8003eec <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003ec0:	f023 0302 	bic.w	r3, r3, #2
 8003ec4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a19      	ldr	r2, [pc, #100]	; (8003f30 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e018      	b.n	8003f1e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	025b      	lsls	r3, r3, #9
 8003ef6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003ef8:	2390      	movs	r3, #144	; 0x90
 8003efa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003efc:	2300      	movs	r3, #0
 8003efe:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003f04:	2301      	movs	r3, #1
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f107 0210 	add.w	r2, r7, #16
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f002 fa9c 	bl	8006450 <SDIO_ConfigData>

      return HAL_OK;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	e000      	b.n	8003f1e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003f1c:	2302      	movs	r3, #2
  }
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3730      	adds	r7, #48	; 0x30
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	08004731 	.word	0x08004731
 8003f2c:	080047cd 	.word	0x080047cd
 8003f30:	004005ff 	.word	0x004005ff
 8003f34:	4225858c 	.word	0x4225858c

08003f38 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_SD_IRQHandler+0x2e>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f003 0308 	and.w	r3, r3, #8
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 ffd8 	bl	8004f14 <SD_Read_IT>
 8003f64:	e165      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 808f 	beq.w	8004094 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f7e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	6812      	ldr	r2, [r2, #0]
 8003f8a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003f8e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003f92:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0201 	bic.w	r2, r2, #1
 8003fa2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d039      	beq.n	8004022 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <HAL_SD_IRQHandler+0x8a>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0320 	and.w	r3, r3, #32
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d011      	beq.n	8003fe6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f002 fb18 	bl	80065fc <SDMMC_CmdStopTransfer>
 8003fcc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f92f 	bl	8004244 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d104      	bne.n	8004012 <HAL_SD_IRQHandler+0xda>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f002 ff6e 	bl	8006ef4 <HAL_SD_RxCpltCallback>
 8004018:	e10b      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f002 ff60 	bl	8006ee0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004020:	e107      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8102 	beq.w	8004232 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d011      	beq.n	800405c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f002 fadd 	bl	80065fc <SDMMC_CmdStopTransfer>
 8004042:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d008      	beq.n	800405c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	431a      	orrs	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8f4 	bl	8004244 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	f040 80e5 	bne.w	8004232 <HAL_SD_IRQHandler+0x2fa>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	f040 80df 	bne.w	8004232 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0208 	bic.w	r2, r2, #8
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f002 ff27 	bl	8006ee0 <HAL_SD_TxCpltCallback>
}
 8004092:	e0ce      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d008      	beq.n	80040b4 <HAL_SD_IRQHandler+0x17c>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 ff82 	bl	8004fb6 <SD_Write_IT>
 80040b2:	e0be      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ba:	f240 233a 	movw	r3, #570	; 0x23a
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80b6 	beq.w	8004232 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d8:	f043 0202 	orr.w	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f043 0208 	orr.w	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	f043 0220 	orr.w	r2, r3, #32
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b00      	cmp	r3, #0
 8004120:	d005      	beq.n	800412e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004126:	f043 0210 	orr.w	r2, r3, #16
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004134:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	f043 0208 	orr.w	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f240 723a 	movw	r2, #1850	; 0x73a
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004160:	f023 0302 	bic.w	r3, r3, #2
 8004164:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f002 fa46 	bl	80065fc <SDMMC_CmdStopTransfer>
 8004170:	4602      	mov	r2, r0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00a      	beq.n	800419c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f855 	bl	8004244 <HAL_SD_ErrorCallback>
}
 800419a:	e04a      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d045      	beq.n	8004232 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d104      	bne.n	80041ba <HAL_SD_IRQHandler+0x282>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d011      	beq.n	80041de <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041be:	4a1f      	ldr	r2, [pc, #124]	; (800423c <HAL_SD_IRQHandler+0x304>)
 80041c0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fb4c 	bl	8002864 <HAL_DMA_Abort_IT>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02f      	beq.n	8004232 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fb4a 	bl	8004870 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80041dc:	e029      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d104      	bne.n	80041f2 <HAL_SD_IRQHandler+0x2ba>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d011      	beq.n	8004216 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	4a12      	ldr	r2, [pc, #72]	; (8004240 <HAL_SD_IRQHandler+0x308>)
 80041f8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fb30 	bl	8002864 <HAL_DMA_Abort_IT>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d013      	beq.n	8004232 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fb65 	bl	80048de <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004214:	e00d      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f002 fe4e 	bl	8006ecc <HAL_SD_AbortCallback>
}
 8004230:	e7ff      	b.n	8004232 <HAL_SD_IRQHandler+0x2fa>
 8004232:	bf00      	nop
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	08004871 	.word	0x08004871
 8004240:	080048df 	.word	0x080048df

08004244 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004266:	0f9b      	lsrs	r3, r3, #30
 8004268:	b2da      	uxtb	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004272:	0e9b      	lsrs	r3, r3, #26
 8004274:	b2db      	uxtb	r3, r3
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	b2da      	uxtb	r2, r3
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004284:	0e1b      	lsrs	r3, r3, #24
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	b2da      	uxtb	r2, r3
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004296:	0c1b      	lsrs	r3, r3, #16
 8004298:	b2da      	uxtb	r2, r3
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042a2:	0a1b      	lsrs	r3, r3, #8
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042b8:	0d1b      	lsrs	r3, r3, #20
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c4:	0c1b      	lsrs	r3, r3, #16
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d6:	0bdb      	lsrs	r3, r3, #15
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042e8:	0b9b      	lsrs	r3, r3, #14
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042fa:	0b5b      	lsrs	r3, r3, #13
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	b2da      	uxtb	r2, r3
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800430c:	0b1b      	lsrs	r3, r3, #12
 800430e:	b2db      	uxtb	r3, r3
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	b2da      	uxtb	r2, r3
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004324:	2b00      	cmp	r3, #0
 8004326:	d163      	bne.n	80043f0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800432c:	009a      	lsls	r2, r3, #2
 800432e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004332:	4013      	ands	r3, r2
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004338:	0f92      	lsrs	r2, r2, #30
 800433a:	431a      	orrs	r2, r3
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004344:	0edb      	lsrs	r3, r3, #27
 8004346:	b2db      	uxtb	r3, r3
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	b2da      	uxtb	r2, r3
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004356:	0e1b      	lsrs	r3, r3, #24
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	b2da      	uxtb	r2, r3
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004368:	0d5b      	lsrs	r3, r3, #21
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	b2da      	uxtb	r2, r3
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800437a:	0c9b      	lsrs	r3, r3, #18
 800437c:	b2db      	uxtb	r3, r3
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	b2da      	uxtb	r2, r3
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800438c:	0bdb      	lsrs	r3, r3, #15
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	b2da      	uxtb	r2, r3
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	7e1b      	ldrb	r3, [r3, #24]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	3302      	adds	r3, #2
 80043b0:	2201      	movs	r2, #1
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80043ba:	fb02 f203 	mul.w	r2, r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	7a1b      	ldrb	r3, [r3, #8]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	f003 030f 	and.w	r3, r3, #15
 80043cc:	2201      	movs	r2, #1
 80043ce:	409a      	lsls	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043dc:	0a52      	lsrs	r2, r2, #9
 80043de:	fb02 f203 	mul.w	r2, r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ec:	661a      	str	r2, [r3, #96]	; 0x60
 80043ee:	e031      	b.n	8004454 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d11d      	bne.n	8004434 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043fc:	041b      	lsls	r3, r3, #16
 80043fe:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004406:	0c1b      	lsrs	r3, r3, #16
 8004408:	431a      	orrs	r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	3301      	adds	r3, #1
 8004414:	029a      	lsls	r2, r3, #10
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004428:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	661a      	str	r2, [r3, #96]	; 0x60
 8004432:	e00f      	b.n	8004454 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a58      	ldr	r2, [pc, #352]	; (800459c <HAL_SD_GetCardCSD+0x344>)
 800443a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e09d      	b.n	8004590 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004458:	0b9b      	lsrs	r3, r3, #14
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446a:	09db      	lsrs	r3, r3, #7
 800446c:	b2db      	uxtb	r3, r3
 800446e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004472:	b2da      	uxtb	r2, r3
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004482:	b2da      	uxtb	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448c:	0fdb      	lsrs	r3, r3, #31
 800448e:	b2da      	uxtb	r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004498:	0f5b      	lsrs	r3, r3, #29
 800449a:	b2db      	uxtb	r3, r3
 800449c:	f003 0303 	and.w	r3, r3, #3
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	0e9b      	lsrs	r3, r3, #26
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044bc:	0d9b      	lsrs	r3, r3, #22
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 030f 	and.w	r3, r3, #15
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	0d5b      	lsrs	r3, r3, #21
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	0c1b      	lsrs	r3, r3, #16
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fe:	0bdb      	lsrs	r3, r3, #15
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004512:	0b9b      	lsrs	r3, r3, #14
 8004514:	b2db      	uxtb	r3, r3
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	b2da      	uxtb	r2, r3
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004526:	0b5b      	lsrs	r3, r3, #13
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	0b1b      	lsrs	r3, r3, #12
 800453c:	b2db      	uxtb	r3, r3
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	0a9b      	lsrs	r3, r3, #10
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	b2da      	uxtb	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	0a1b      	lsrs	r3, r3, #8
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	085b      	lsrs	r3, r3, #1
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800457e:	b2da      	uxtb	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	004005ff 	.word	0x004005ff

080045a0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80045f8:	b5b0      	push	{r4, r5, r7, lr}
 80045fa:	b08e      	sub	sp, #56	; 0x38
 80045fc:	af04      	add	r7, sp, #16
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2203      	movs	r2, #3
 8004606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460e:	2b03      	cmp	r3, #3
 8004610:	d02e      	beq.n	8004670 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004618:	d106      	bne.n	8004628 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	639a      	str	r2, [r3, #56]	; 0x38
 8004626:	e029      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462e:	d10a      	bne.n	8004646 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fb0f 	bl	8004c54 <SD_WideBus_Enable>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
 8004644:	e01a      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fb4c 	bl	8004cea <SD_WideBus_Disable>
 8004652:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	639a      	str	r2, [r3, #56]	; 0x38
 8004660:	e00c      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004666:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	639a      	str	r2, [r3, #56]	; 0x38
 800466e:	e005      	b.n	800467c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004674:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	2b00      	cmp	r3, #0
 8004682:	d009      	beq.n	8004698 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a18      	ldr	r2, [pc, #96]	; (80046ec <HAL_SD_ConfigWideBusOperation+0xf4>)
 800468a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e024      	b.n	80046e2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695b      	ldr	r3, [r3, #20]
 80046b2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681d      	ldr	r5, [r3, #0]
 80046be:	466c      	mov	r4, sp
 80046c0:	f107 0318 	add.w	r3, r7, #24
 80046c4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80046c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80046cc:	f107 030c 	add.w	r3, r7, #12
 80046d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046d2:	4628      	mov	r0, r5
 80046d4:	f001 fe0c 	bl	80062f0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3728      	adds	r7, #40	; 0x28
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bdb0      	pop	{r4, r5, r7, pc}
 80046ea:	bf00      	nop
 80046ec:	004005ff 	.word	0x004005ff

080046f0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80046fc:	f107 030c 	add.w	r3, r7, #12
 8004700:	4619      	mov	r1, r3
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f000 fa7e 	bl	8004c04 <SD_SendStatus>
 8004708:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d005      	beq.n	800471c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	431a      	orrs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	0a5b      	lsrs	r3, r3, #9
 8004720:	f003 030f 	and.w	r3, r3, #15
 8004724:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004726:	693b      	ldr	r3, [r7, #16]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004730:	b480      	push	{r7}
 8004732:	b085      	sub	sp, #20
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800474c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	b084      	sub	sp, #16
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004766:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800476c:	2b82      	cmp	r3, #130	; 0x82
 800476e:	d111      	bne.n	8004794 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f001 ff41 	bl	80065fc <SDMMC_CmdStopTransfer>
 800477a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d008      	beq.n	8004794 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff fd58 	bl	8004244 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 0208 	bic.w	r2, r2, #8
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f240 523a 	movw	r2, #1338	; 0x53a
 80047ac:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f002 fb99 	bl	8006ef4 <HAL_SD_RxCpltCallback>
#endif
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fe f9ee 	bl	8002bbc <HAL_DMA_GetError>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d03e      	beq.n	8004864 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ec:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d002      	beq.n	8004802 <SD_DMAError+0x36>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d12d      	bne.n	800485e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a19      	ldr	r2, [pc, #100]	; (800486c <SD_DMAError+0xa0>)
 8004808:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004818:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004826:	6978      	ldr	r0, [r7, #20]
 8004828:	f7ff ff62 	bl	80046f0 <HAL_SD_GetCardState>
 800482c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b06      	cmp	r3, #6
 8004832:	d002      	beq.n	800483a <SD_DMAError+0x6e>
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	2b05      	cmp	r3, #5
 8004838:	d10a      	bne.n	8004850 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f001 fedc 	bl	80065fc <SDMMC_CmdStopTransfer>
 8004844:	4602      	mov	r2, r0
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	431a      	orrs	r2, r3
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800485e:	6978      	ldr	r0, [r7, #20]
 8004860:	f7ff fcf0 	bl	8004244 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004864:	bf00      	nop
 8004866:	3718      	adds	r7, #24
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	004005ff 	.word	0x004005ff

08004870 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f240 523a 	movw	r2, #1338	; 0x53a
 8004886:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f7ff ff31 	bl	80046f0 <HAL_SD_GetCardState>
 800488e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	2b06      	cmp	r3, #6
 80048a2:	d002      	beq.n	80048aa <SD_DMATxAbort+0x3a>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	2b05      	cmp	r3, #5
 80048a8:	d10a      	bne.n	80048c0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fea4 	bl	80065fc <SDMMC_CmdStopTransfer>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ba:	431a      	orrs	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f002 faff 	bl	8006ecc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80048ce:	e002      	b.n	80048d6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80048d0:	68f8      	ldr	r0, [r7, #12]
 80048d2:	f7ff fcb7 	bl	8004244 <HAL_SD_ErrorCallback>
}
 80048d6:	bf00      	nop
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f240 523a 	movw	r2, #1338	; 0x53a
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f7ff fefa 	bl	80046f0 <HAL_SD_GetCardState>
 80048fc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b06      	cmp	r3, #6
 8004910:	d002      	beq.n	8004918 <SD_DMARxAbort+0x3a>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b05      	cmp	r3, #5
 8004916:	d10a      	bne.n	800492e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f001 fe6d 	bl	80065fc <SDMMC_CmdStopTransfer>
 8004922:	4602      	mov	r2, r0
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004928:	431a      	orrs	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f002 fac8 	bl	8006ecc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800493c:	e002      	b.n	8004944 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff fc80 	bl	8004244 <HAL_SD_ErrorCallback>
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800494c:	b5b0      	push	{r4, r5, r7, lr}
 800494e:	b094      	sub	sp, #80	; 0x50
 8004950:	af04      	add	r7, sp, #16
 8004952:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004954:	2301      	movs	r3, #1
 8004956:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f001 fd1f 	bl	80063a0 <SDIO_GetPowerState>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004968:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800496c:	e0b7      	b.n	8004ade <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	2b03      	cmp	r3, #3
 8004974:	d02f      	beq.n	80049d6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4618      	mov	r0, r3
 800497c:	f001 ff48 	bl	8006810 <SDMMC_CmdSendCID>
 8004980:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <SD_InitCard+0x40>
    {
      return errorstate;
 8004988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498a:	e0a8      	b.n	8004ade <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2100      	movs	r1, #0
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fd49 	bl	800642a <SDIO_GetResponse>
 8004998:	4602      	mov	r2, r0
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2104      	movs	r1, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f001 fd40 	bl	800642a <SDIO_GetResponse>
 80049aa:	4602      	mov	r2, r0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2108      	movs	r1, #8
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 fd37 	bl	800642a <SDIO_GetResponse>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	210c      	movs	r1, #12
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fd2e 	bl	800642a <SDIO_GetResponse>
 80049ce:	4602      	mov	r2, r0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d00d      	beq.n	80049fa <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f107 020e 	add.w	r2, r7, #14
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 ff4e 	bl	800688a <SDMMC_CmdSetRelAdd>
 80049ee:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <SD_InitCard+0xae>
    {
      return errorstate;
 80049f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049f8:	e071      	b.n	8004ade <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d036      	beq.n	8004a70 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	461a      	mov	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a12:	041b      	lsls	r3, r3, #16
 8004a14:	4619      	mov	r1, r3
 8004a16:	4610      	mov	r0, r2
 8004a18:	f001 ff18 	bl	800684c <SDMMC_CmdSendCSD>
 8004a1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a26:	e05a      	b.n	8004ade <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f001 fcfb 	bl	800642a <SDIO_GetResponse>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2104      	movs	r1, #4
 8004a40:	4618      	mov	r0, r3
 8004a42:	f001 fcf2 	bl	800642a <SDIO_GetResponse>
 8004a46:	4602      	mov	r2, r0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2108      	movs	r1, #8
 8004a52:	4618      	mov	r0, r3
 8004a54:	f001 fce9 	bl	800642a <SDIO_GetResponse>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	210c      	movs	r1, #12
 8004a64:	4618      	mov	r0, r3
 8004a66:	f001 fce0 	bl	800642a <SDIO_GetResponse>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2104      	movs	r1, #4
 8004a76:	4618      	mov	r0, r3
 8004a78:	f001 fcd7 	bl	800642a <SDIO_GetResponse>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	0d1a      	lsrs	r2, r3, #20
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a84:	f107 0310 	add.w	r3, r7, #16
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fbe4 	bl	8004258 <HAL_SD_GetCardCSD>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d002      	beq.n	8004a9c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a9a:	e020      	b.n	8004ade <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6819      	ldr	r1, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	041b      	lsls	r3, r3, #16
 8004aa6:	f04f 0400 	mov.w	r4, #0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	4623      	mov	r3, r4
 8004aae:	4608      	mov	r0, r1
 8004ab0:	f001 fdc6 	bl	8006640 <SDMMC_CmdSelDesel>
 8004ab4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <SD_InitCard+0x174>
  {
    return errorstate;
 8004abc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004abe:	e00e      	b.n	8004ade <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681d      	ldr	r5, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	466c      	mov	r4, sp
 8004ac8:	f103 0210 	add.w	r2, r3, #16
 8004acc:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f001 fc0a 	bl	80062f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3740      	adds	r7, #64	; 0x40
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004ae8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 fdc0 	bl	8006686 <SDMMC_CmdGoIdleState>
 8004b06:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	e072      	b.n	8004bf8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f001 fdd3 	bl	80066c2 <SDMMC_CmdOperCond>
 8004b1c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f001 fda9 	bl	8006686 <SDMMC_CmdGoIdleState>
 8004b34:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	e05b      	b.n	8004bf8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d137      	bne.n	8004bbe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	2100      	movs	r1, #0
 8004b54:	4618      	mov	r0, r3
 8004b56:	f001 fdd3 	bl	8006700 <SDMMC_CmdAppCommand>
 8004b5a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d02d      	beq.n	8004bbe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b66:	e047      	b.n	8004bf8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2100      	movs	r1, #0
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 fdc6 	bl	8006700 <SDMMC_CmdAppCommand>
 8004b74:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <SD_PowerON+0x98>
    {
      return errorstate;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	e03b      	b.n	8004bf8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	491e      	ldr	r1, [pc, #120]	; (8004c00 <SD_PowerON+0x118>)
 8004b86:	4618      	mov	r0, r3
 8004b88:	f001 fddc 	bl	8006744 <SDMMC_CmdAppOperCommand>
 8004b8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b98:	e02e      	b.n	8004bf8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fc42 	bl	800642a <SDIO_GetResponse>
 8004ba6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	0fdb      	lsrs	r3, r3, #31
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <SD_PowerON+0xcc>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <SD_PowerON+0xce>
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	613b      	str	r3, [r7, #16]

    count++;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d802      	bhi.n	8004bce <SD_PowerON+0xe6>
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0cc      	beq.n	8004b68 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d902      	bls.n	8004bde <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bdc:	e00c      	b.n	8004bf8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	645a      	str	r2, [r3, #68]	; 0x44
 8004bee:	e002      	b.n	8004bf6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	c1100000 	.word	0xc1100000

08004c04 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
 8004c0c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004c14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c18:	e018      	b.n	8004c4c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c22:	041b      	lsls	r3, r3, #16
 8004c24:	4619      	mov	r1, r3
 8004c26:	4610      	mov	r0, r2
 8004c28:	f001 fe50 	bl	80068cc <SDMMC_CmdSendStatus>
 8004c2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	e009      	b.n	8004c4c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f001 fbf3 	bl	800642a <SDIO_GetResponse>
 8004c44:	4602      	mov	r2, r0
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2100      	movs	r1, #0
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f001 fbdd 	bl	800642a <SDIO_GetResponse>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c7a:	d102      	bne.n	8004c82 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c80:	e02f      	b.n	8004ce2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c82:	f107 030c 	add.w	r3, r7, #12
 8004c86:	4619      	mov	r1, r3
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f879 	bl	8004d80 <SD_FindSCR>
 8004c8e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	e023      	b.n	8004ce2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01c      	beq.n	8004cde <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cac:	041b      	lsls	r3, r3, #16
 8004cae:	4619      	mov	r1, r3
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	f001 fd25 	bl	8006700 <SDMMC_CmdAppCommand>
 8004cb6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	e00f      	b.n	8004ce2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2102      	movs	r1, #2
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 fd5e 	bl	800678a <SDMMC_CmdBusWidth>
 8004cce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	e003      	b.n	8004ce2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e001      	b.n	8004ce2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cde:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3718      	adds	r7, #24
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b086      	sub	sp, #24
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	60fb      	str	r3, [r7, #12]
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fb92 	bl	800642a <SDIO_GetResponse>
 8004d06:	4603      	mov	r3, r0
 8004d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d10:	d102      	bne.n	8004d18 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004d12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d16:	e02f      	b.n	8004d78 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004d18:	f107 030c 	add.w	r3, r7, #12
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f82e 	bl	8004d80 <SD_FindSCR>
 8004d24:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	e023      	b.n	8004d78 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01c      	beq.n	8004d74 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f001 fcda 	bl	8006700 <SDMMC_CmdAppCommand>
 8004d4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d001      	beq.n	8004d58 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	e00f      	b.n	8004d78 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	2100      	movs	r1, #0
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 fd13 	bl	800678a <SDMMC_CmdBusWidth>
 8004d64:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	e003      	b.n	8004d78 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	e001      	b.n	8004d78 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d74:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3718      	adds	r7, #24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d80:	b590      	push	{r4, r7, lr}
 8004d82:	b08f      	sub	sp, #60	; 0x3c
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d8a:	f7fc ff13 	bl	8001bb4 <HAL_GetTick>
 8004d8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d94:	2300      	movs	r3, #0
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2108      	movs	r1, #8
 8004da6:	4618      	mov	r0, r3
 8004da8:	f001 fb7e 	bl	80064a8 <SDMMC_CmdBlockLength>
 8004dac:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db6:	e0a9      	b.n	8004f0c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc0:	041b      	lsls	r3, r3, #16
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	f001 fc9b 	bl	8006700 <SDMMC_CmdAppCommand>
 8004dca:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	e09a      	b.n	8004f0c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dda:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004ddc:	2308      	movs	r3, #8
 8004dde:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004de0:	2330      	movs	r3, #48	; 0x30
 8004de2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004de4:	2302      	movs	r3, #2
 8004de6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f107 0210 	add.w	r2, r7, #16
 8004df8:	4611      	mov	r1, r2
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f001 fb28 	bl	8006450 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 fce2 	bl	80067ce <SDMMC_CmdSendSCR>
 8004e0a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d022      	beq.n	8004e58 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e14:	e07a      	b.n	8004f0c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00e      	beq.n	8004e42 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6819      	ldr	r1, [r3, #0]
 8004e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	f107 0208 	add.w	r2, r7, #8
 8004e30:	18d4      	adds	r4, r2, r3
 8004e32:	4608      	mov	r0, r1
 8004e34:	f001 fa87 	bl	8006346 <SDIO_ReadFIFO>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	6023      	str	r3, [r4, #0]
      index++;
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	3301      	adds	r3, #1
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e42:	f7fc feb7 	bl	8001bb4 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d102      	bne.n	8004e58 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004e52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e56:	e059      	b.n	8004f0c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e5e:	f240 432a 	movw	r3, #1066	; 0x42a
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d0d6      	beq.n	8004e16 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6e:	f003 0308 	and.w	r3, r3, #8
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d005      	beq.n	8004e82 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e7e:	2308      	movs	r3, #8
 8004e80:	e044      	b.n	8004f0c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2202      	movs	r2, #2
 8004e96:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e037      	b.n	8004f0c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea2:	f003 0320 	and.w	r3, r3, #32
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	e02a      	b.n	8004f0c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f240 523a 	movw	r2, #1338	; 0x53a
 8004ebe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	061a      	lsls	r2, r3, #24
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	021b      	lsls	r3, r3, #8
 8004ec8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ecc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	0a1b      	lsrs	r3, r3, #8
 8004ed2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ed6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	0e1b      	lsrs	r3, r3, #24
 8004edc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee0:	601a      	str	r2, [r3, #0]
    scr++;
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	061a      	lsls	r2, r3, #24
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	021b      	lsls	r3, r3, #8
 8004ef0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ef4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	0a1b      	lsrs	r3, r3, #8
 8004efa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004efe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	0e1b      	lsrs	r3, r3, #24
 8004f04:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	373c      	adds	r7, #60	; 0x3c
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}

08004f14 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f20:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03f      	beq.n	8004fae <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	617b      	str	r3, [r7, #20]
 8004f32:	e033      	b.n	8004f9c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f001 fa04 	bl	8006346 <SDIO_ReadFIFO>
 8004f3e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	0a1b      	lsrs	r3, r3, #8
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	0c1b      	lsrs	r3, r3, #16
 8004f6e:	b2da      	uxtb	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	3301      	adds	r3, #1
 8004f78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	0e1b      	lsrs	r3, r3, #24
 8004f84:	b2da      	uxtb	r2, r3
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	2b07      	cmp	r3, #7
 8004fa0:	d9c8      	bls.n	8004f34 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d043      	beq.n	8005058 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	e037      	b.n	8005046 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	021a      	lsls	r2, r3, #8
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	041a      	lsls	r2, r3, #16
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	4313      	orrs	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3301      	adds	r3, #1
 8005010:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	3b01      	subs	r3, #1
 8005016:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	061a      	lsls	r2, r3, #24
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4313      	orrs	r3, r2
 8005022:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	3301      	adds	r3, #1
 8005028:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	3b01      	subs	r3, #1
 800502e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f107 0208 	add.w	r2, r7, #8
 8005038:	4611      	mov	r1, r2
 800503a:	4618      	mov	r0, r3
 800503c:	f001 f990 	bl	8006360 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	3301      	adds	r3, #1
 8005044:	617b      	str	r3, [r7, #20]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2b07      	cmp	r3, #7
 800504a:	d9c4      	bls.n	8004fd6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68fa      	ldr	r2, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005058:	bf00      	nop
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e056      	b.n	8005120 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d106      	bne.n	8005092 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7fc fb29 	bl	80016e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050a8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	ea42 0103 	orr.w	r1, r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	f003 0104 	and.w	r1, r3, #4
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	69da      	ldr	r2, [r3, #28]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800510e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e01d      	b.n	8005176 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f815 	bl	800517e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f000 f968 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b083      	sub	sp, #12
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b06      	cmp	r3, #6
 80051ba:	d007      	beq.n	80051cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f042 0201 	orr.w	r2, r2, #1
 80051ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr

080051da <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d122      	bne.n	8005236 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68db      	ldr	r3, [r3, #12]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d11b      	bne.n	8005236 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f06f 0202 	mvn.w	r2, #2
 8005206:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	f003 0303 	and.w	r3, r3, #3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d003      	beq.n	8005224 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f8ee 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8005222:	e005      	b.n	8005230 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8e0 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8f1 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b04      	cmp	r3, #4
 8005242:	d122      	bne.n	800528a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b04      	cmp	r3, #4
 8005250:	d11b      	bne.n	800528a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f06f 0204 	mvn.w	r2, #4
 800525a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2202      	movs	r2, #2
 8005260:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8c4 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8005276:	e005      	b.n	8005284 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8b6 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8c7 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	f003 0308 	and.w	r3, r3, #8
 8005294:	2b08      	cmp	r3, #8
 8005296:	d122      	bne.n	80052de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d11b      	bne.n	80052de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f06f 0208 	mvn.w	r2, #8
 80052ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2204      	movs	r2, #4
 80052b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d003      	beq.n	80052cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 f89a 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 80052ca:	e005      	b.n	80052d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f88c 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f89d 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	f003 0310 	and.w	r3, r3, #16
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d122      	bne.n	8005332 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d11b      	bne.n	8005332 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f06f 0210 	mvn.w	r2, #16
 8005302:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2208      	movs	r2, #8
 8005308:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005314:	2b00      	cmp	r3, #0
 8005316:	d003      	beq.n	8005320 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f870 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 800531e:	e005      	b.n	800532c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f862 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f873 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2200      	movs	r2, #0
 8005330:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	f003 0301 	and.w	r3, r3, #1
 800533c:	2b01      	cmp	r3, #1
 800533e:	d10e      	bne.n	800535e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b01      	cmp	r3, #1
 800534c:	d107      	bne.n	800535e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f06f 0201 	mvn.w	r2, #1
 8005356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7fc f81d 	bl	8001398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005368:	2b80      	cmp	r3, #128	; 0x80
 800536a:	d10e      	bne.n	800538a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b80      	cmp	r3, #128	; 0x80
 8005378:	d107      	bne.n	800538a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f903 	bl	8005590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d10e      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a2:	2b40      	cmp	r3, #64	; 0x40
 80053a4:	d107      	bne.n	80053b6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f838 	bl	8005426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0320 	and.w	r3, r3, #32
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d10e      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0320 	and.w	r3, r3, #32
 80053ce:	2b20      	cmp	r3, #32
 80053d0:	d107      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0220 	mvn.w	r2, #32
 80053da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f8cd 	bl	800557c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e2:	bf00      	nop
 80053e4:	3708      	adds	r7, #8
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a40      	ldr	r2, [pc, #256]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d00f      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3d      	ldr	r2, [pc, #244]	; (8005554 <TIM_Base_SetConfig+0x118>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00b      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <TIM_Base_SetConfig+0x11c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3b      	ldr	r2, [pc, #236]	; (800555c <TIM_Base_SetConfig+0x120>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3a      	ldr	r2, [pc, #232]	; (8005560 <TIM_Base_SetConfig+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02b      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d027      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <TIM_Base_SetConfig+0x118>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d023      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <TIM_Base_SetConfig+0x11c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01f      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2a      	ldr	r2, [pc, #168]	; (800555c <TIM_Base_SetConfig+0x120>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01b      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a29      	ldr	r2, [pc, #164]	; (8005560 <TIM_Base_SetConfig+0x124>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d017      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a28      	ldr	r2, [pc, #160]	; (8005564 <TIM_Base_SetConfig+0x128>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a27      	ldr	r2, [pc, #156]	; (8005568 <TIM_Base_SetConfig+0x12c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00f      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a26      	ldr	r2, [pc, #152]	; (800556c <TIM_Base_SetConfig+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00b      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <TIM_Base_SetConfig+0x134>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d007      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a24      	ldr	r2, [pc, #144]	; (8005574 <TIM_Base_SetConfig+0x138>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d003      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a23      	ldr	r2, [pc, #140]	; (8005578 <TIM_Base_SetConfig+0x13c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d108      	bne.n	8005500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0xf8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0c      	ldr	r2, [pc, #48]	; (8005560 <TIM_Base_SetConfig+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d103      	bne.n	800553c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	615a      	str	r2, [r3, #20]
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40010400 	.word	0x40010400
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800
 8005570:	40001800 	.word	0x40001800
 8005574:	40001c00 	.word	0x40001c00
 8005578:	40002000 	.word	0x40002000

0800557c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e03f      	b.n	8005636 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d106      	bne.n	80055d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7fc f8d2 	bl	8001774 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2224      	movs	r2, #36	; 0x24
 80055d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68da      	ldr	r2, [r3, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fb05 	bl	8005bf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	691a      	ldr	r2, [r3, #16]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695a      	ldr	r2, [r3, #20]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800560c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800561c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b088      	sub	sp, #32
 8005642:	af02      	add	r7, sp, #8
 8005644:	60f8      	str	r0, [r7, #12]
 8005646:	60b9      	str	r1, [r7, #8]
 8005648:	603b      	str	r3, [r7, #0]
 800564a:	4613      	mov	r3, r2
 800564c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b20      	cmp	r3, #32
 800565c:	f040 8083 	bne.w	8005766 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <HAL_UART_Transmit+0x2e>
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e07b      	b.n	8005768 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005676:	2b01      	cmp	r3, #1
 8005678:	d101      	bne.n	800567e <HAL_UART_Transmit+0x40>
 800567a:	2302      	movs	r3, #2
 800567c:	e074      	b.n	8005768 <HAL_UART_Transmit+0x12a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2201      	movs	r2, #1
 8005682:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2221      	movs	r2, #33	; 0x21
 8005690:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005694:	f7fc fa8e 	bl	8001bb4 <HAL_GetTick>
 8005698:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	88fa      	ldrh	r2, [r7, #6]
 800569e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	88fa      	ldrh	r2, [r7, #6]
 80056a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80056ae:	e042      	b.n	8005736 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	3b01      	subs	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d122      	bne.n	800570e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2200      	movs	r2, #0
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fa12 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e042      	b.n	8005768 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	3302      	adds	r3, #2
 8005702:	60bb      	str	r3, [r7, #8]
 8005704:	e017      	b.n	8005736 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	3301      	adds	r3, #1
 800570a:	60bb      	str	r3, [r7, #8]
 800570c:	e013      	b.n	8005736 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	2200      	movs	r2, #0
 8005716:	2180      	movs	r1, #128	; 0x80
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 f9ef 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d001      	beq.n	8005728 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e01f      	b.n	8005768 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	60ba      	str	r2, [r7, #8]
 800572e:	781a      	ldrb	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1b7      	bne.n	80056b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	2200      	movs	r2, #0
 8005748:	2140      	movs	r1, #64	; 0x40
 800574a:	68f8      	ldr	r0, [r7, #12]
 800574c:	f000 f9d6 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e006      	b.n	8005768 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	e000      	b.n	8005768 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005766:	2302      	movs	r3, #2
  }
}
 8005768:	4618      	mov	r0, r3
 800576a:	3718      	adds	r7, #24
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b088      	sub	sp, #32
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	603b      	str	r3, [r7, #0]
 800577c:	4613      	mov	r3, r2
 800577e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b20      	cmp	r3, #32
 800578e:	f040 8090 	bne.w	80058b2 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d002      	beq.n	800579e <HAL_UART_Receive+0x2e>
 8005798:	88fb      	ldrh	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e088      	b.n	80058b4 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Receive+0x40>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e081      	b.n	80058b4 <HAL_UART_Receive+0x144>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2200      	movs	r2, #0
 80057bc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2222      	movs	r2, #34	; 0x22
 80057c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80057c6:	f7fc f9f5 	bl	8001bb4 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	88fa      	ldrh	r2, [r7, #6]
 80057d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80057e0:	e05c      	b.n	800589c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d12b      	bne.n	8005852 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	2120      	movs	r1, #32
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 f979 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e04f      	b.n	80058b4 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10c      	bne.n	800583a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	b29b      	uxth	r3, r3
 8005828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582c:	b29a      	uxth	r2, r3
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	3302      	adds	r3, #2
 8005836:	60bb      	str	r3, [r7, #8]
 8005838:	e030      	b.n	800589c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	b29b      	uxth	r3, r3
 8005842:	b2db      	uxtb	r3, r3
 8005844:	b29a      	uxth	r2, r3
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	3301      	adds	r3, #1
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	e024      	b.n	800589c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	9300      	str	r3, [sp, #0]
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2200      	movs	r2, #0
 800585a:	2120      	movs	r1, #32
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f94d 	bl	8005afc <UART_WaitOnFlagUntilTimeout>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e023      	b.n	80058b4 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d108      	bne.n	8005886 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6859      	ldr	r1, [r3, #4]
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	1c5a      	adds	r2, r3, #1
 800587e:	60ba      	str	r2, [r7, #8]
 8005880:	b2ca      	uxtb	r2, r1
 8005882:	701a      	strb	r2, [r3, #0]
 8005884:	e00a      	b.n	800589c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d19d      	bne.n	80057e2 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80058ae:	2300      	movs	r3, #0
 80058b0:	e000      	b.n	80058b4 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
  }
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d166      	bne.n	80059a4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <HAL_UART_Receive_DMA+0x26>
 80058dc:	88fb      	ldrh	r3, [r7, #6]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d101      	bne.n	80058e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e05f      	b.n	80059a6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_UART_Receive_DMA+0x38>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e058      	b.n	80059a6 <HAL_UART_Receive_DMA+0xea>
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	88fa      	ldrh	r2, [r7, #6]
 8005906:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2222      	movs	r2, #34	; 0x22
 8005912:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591a:	4a25      	ldr	r2, [pc, #148]	; (80059b0 <HAL_UART_Receive_DMA+0xf4>)
 800591c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	4a24      	ldr	r2, [pc, #144]	; (80059b4 <HAL_UART_Receive_DMA+0xf8>)
 8005924:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	4a23      	ldr	r2, [pc, #140]	; (80059b8 <HAL_UART_Receive_DMA+0xfc>)
 800592c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005932:	2200      	movs	r2, #0
 8005934:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005936:	f107 0308 	add.w	r3, r7, #8
 800593a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3304      	adds	r3, #4
 8005946:	4619      	mov	r1, r3
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	88fb      	ldrh	r3, [r7, #6]
 800594e:	f7fc ff31 	bl	80027b4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800597e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	695a      	ldr	r2, [r3, #20]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800599e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e000      	b.n	80059a6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80059a4:	2302      	movs	r3, #2
  }
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	080059e5 	.word	0x080059e5
 80059b4:	08005a4d 	.word	0x08005a4d
 80059b8:	08005a69 	.word	0x08005a69

080059bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80059d8:	bf00      	nop
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11e      	bne.n	8005a3e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2200      	movs	r2, #0
 8005a04:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68da      	ldr	r2, [r3, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a14:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	695a      	ldr	r2, [r3, #20]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f022 0201 	bic.w	r2, r2, #1
 8005a24:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a34:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f7fb f922 	bl	8000c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a44:	bf00      	nop
 8005a46:	3710      	adds	r7, #16
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005a5a:	68f8      	ldr	r0, [r7, #12]
 8005a5c:	f7ff ffae 	bl	80059bc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695b      	ldr	r3, [r3, #20]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	2b80      	cmp	r3, #128	; 0x80
 8005a86:	bf0c      	ite	eq
 8005a88:	2301      	moveq	r3, #1
 8005a8a:	2300      	movne	r3, #0
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b21      	cmp	r3, #33	; 0x21
 8005a9a:	d108      	bne.n	8005aae <UART_DMAError+0x46>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005aa8:	68b8      	ldr	r0, [r7, #8]
 8005aaa:	f000 f871 	bl	8005b90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b22      	cmp	r3, #34	; 0x22
 8005ace:	d108      	bne.n	8005ae2 <UART_DMAError+0x7a>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005adc:	68b8      	ldr	r0, [r7, #8]
 8005ade:	f000 f86d 	bl	8005bbc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	f043 0210 	orr.w	r2, r3, #16
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005aee:	68b8      	ldr	r0, [r7, #8]
 8005af0:	f7ff ff6e 	bl	80059d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	603b      	str	r3, [r7, #0]
 8005b08:	4613      	mov	r3, r2
 8005b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0c:	e02c      	b.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b14:	d028      	beq.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8005b1c:	f7fc f84a 	bl	8001bb4 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	69ba      	ldr	r2, [r7, #24]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d21d      	bcs.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68da      	ldr	r2, [r3, #12]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b3a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0201 	bic.w	r2, r2, #1
 8005b4a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e00f      	b.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4013      	ands	r3, r2
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	bf0c      	ite	eq
 8005b78:	2301      	moveq	r3, #1
 8005b7a:	2300      	movne	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	461a      	mov	r2, r3
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d0c3      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3710      	adds	r7, #16
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ba6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005bd2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695a      	ldr	r2, [r3, #20]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0201 	bic.w	r2, r2, #1
 8005be2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689a      	ldr	r2, [r3, #8]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	69db      	ldr	r3, [r3, #28]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c3a:	f023 030c 	bic.w	r3, r3, #12
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	430b      	orrs	r3, r1
 8005c46:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699a      	ldr	r2, [r3, #24]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c66:	f040 818b 	bne.w	8005f80 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4ac1      	ldr	r2, [pc, #772]	; (8005f74 <UART_SetConfig+0x37c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d005      	beq.n	8005c80 <UART_SetConfig+0x88>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4abf      	ldr	r2, [pc, #764]	; (8005f78 <UART_SetConfig+0x380>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	f040 80bd 	bne.w	8005dfa <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c80:	f7fd feaa 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8005c84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	461d      	mov	r5, r3
 8005c8a:	f04f 0600 	mov.w	r6, #0
 8005c8e:	46a8      	mov	r8, r5
 8005c90:	46b1      	mov	r9, r6
 8005c92:	eb18 0308 	adds.w	r3, r8, r8
 8005c96:	eb49 0409 	adc.w	r4, r9, r9
 8005c9a:	4698      	mov	r8, r3
 8005c9c:	46a1      	mov	r9, r4
 8005c9e:	eb18 0805 	adds.w	r8, r8, r5
 8005ca2:	eb49 0906 	adc.w	r9, r9, r6
 8005ca6:	f04f 0100 	mov.w	r1, #0
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005cb2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005cb6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005cba:	4688      	mov	r8, r1
 8005cbc:	4691      	mov	r9, r2
 8005cbe:	eb18 0005 	adds.w	r0, r8, r5
 8005cc2:	eb49 0106 	adc.w	r1, r9, r6
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	461d      	mov	r5, r3
 8005ccc:	f04f 0600 	mov.w	r6, #0
 8005cd0:	196b      	adds	r3, r5, r5
 8005cd2:	eb46 0406 	adc.w	r4, r6, r6
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	4623      	mov	r3, r4
 8005cda:	f7fa fa79 	bl	80001d0 <__aeabi_uldivmod>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	461a      	mov	r2, r3
 8005ce4:	4ba5      	ldr	r3, [pc, #660]	; (8005f7c <UART_SetConfig+0x384>)
 8005ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	f04f 0600 	mov.w	r6, #0
 8005cf8:	46a9      	mov	r9, r5
 8005cfa:	46b2      	mov	sl, r6
 8005cfc:	eb19 0309 	adds.w	r3, r9, r9
 8005d00:	eb4a 040a 	adc.w	r4, sl, sl
 8005d04:	4699      	mov	r9, r3
 8005d06:	46a2      	mov	sl, r4
 8005d08:	eb19 0905 	adds.w	r9, r9, r5
 8005d0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d10:	f04f 0100 	mov.w	r1, #0
 8005d14:	f04f 0200 	mov.w	r2, #0
 8005d18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d24:	4689      	mov	r9, r1
 8005d26:	4692      	mov	sl, r2
 8005d28:	eb19 0005 	adds.w	r0, r9, r5
 8005d2c:	eb4a 0106 	adc.w	r1, sl, r6
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	461d      	mov	r5, r3
 8005d36:	f04f 0600 	mov.w	r6, #0
 8005d3a:	196b      	adds	r3, r5, r5
 8005d3c:	eb46 0406 	adc.w	r4, r6, r6
 8005d40:	461a      	mov	r2, r3
 8005d42:	4623      	mov	r3, r4
 8005d44:	f7fa fa44 	bl	80001d0 <__aeabi_uldivmod>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4b8b      	ldr	r3, [pc, #556]	; (8005f7c <UART_SetConfig+0x384>)
 8005d50:	fba3 1302 	umull	r1, r3, r3, r2
 8005d54:	095b      	lsrs	r3, r3, #5
 8005d56:	2164      	movs	r1, #100	; 0x64
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	3332      	adds	r3, #50	; 0x32
 8005d62:	4a86      	ldr	r2, [pc, #536]	; (8005f7c <UART_SetConfig+0x384>)
 8005d64:	fba2 2303 	umull	r2, r3, r2, r3
 8005d68:	095b      	lsrs	r3, r3, #5
 8005d6a:	005b      	lsls	r3, r3, #1
 8005d6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d70:	4498      	add	r8, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	461d      	mov	r5, r3
 8005d76:	f04f 0600 	mov.w	r6, #0
 8005d7a:	46a9      	mov	r9, r5
 8005d7c:	46b2      	mov	sl, r6
 8005d7e:	eb19 0309 	adds.w	r3, r9, r9
 8005d82:	eb4a 040a 	adc.w	r4, sl, sl
 8005d86:	4699      	mov	r9, r3
 8005d88:	46a2      	mov	sl, r4
 8005d8a:	eb19 0905 	adds.w	r9, r9, r5
 8005d8e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005d92:	f04f 0100 	mov.w	r1, #0
 8005d96:	f04f 0200 	mov.w	r2, #0
 8005d9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d9e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005da2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005da6:	4689      	mov	r9, r1
 8005da8:	4692      	mov	sl, r2
 8005daa:	eb19 0005 	adds.w	r0, r9, r5
 8005dae:	eb4a 0106 	adc.w	r1, sl, r6
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	461d      	mov	r5, r3
 8005db8:	f04f 0600 	mov.w	r6, #0
 8005dbc:	196b      	adds	r3, r5, r5
 8005dbe:	eb46 0406 	adc.w	r4, r6, r6
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	4623      	mov	r3, r4
 8005dc6:	f7fa fa03 	bl	80001d0 <__aeabi_uldivmod>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	460c      	mov	r4, r1
 8005dce:	461a      	mov	r2, r3
 8005dd0:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <UART_SetConfig+0x384>)
 8005dd2:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd6:	095b      	lsrs	r3, r3, #5
 8005dd8:	2164      	movs	r1, #100	; 0x64
 8005dda:	fb01 f303 	mul.w	r3, r1, r3
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	00db      	lsls	r3, r3, #3
 8005de2:	3332      	adds	r3, #50	; 0x32
 8005de4:	4a65      	ldr	r2, [pc, #404]	; (8005f7c <UART_SetConfig+0x384>)
 8005de6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dea:	095b      	lsrs	r3, r3, #5
 8005dec:	f003 0207 	and.w	r2, r3, #7
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4442      	add	r2, r8
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	e26f      	b.n	80062da <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dfa:	f7fd fdd9 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 8005dfe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	461d      	mov	r5, r3
 8005e04:	f04f 0600 	mov.w	r6, #0
 8005e08:	46a8      	mov	r8, r5
 8005e0a:	46b1      	mov	r9, r6
 8005e0c:	eb18 0308 	adds.w	r3, r8, r8
 8005e10:	eb49 0409 	adc.w	r4, r9, r9
 8005e14:	4698      	mov	r8, r3
 8005e16:	46a1      	mov	r9, r4
 8005e18:	eb18 0805 	adds.w	r8, r8, r5
 8005e1c:	eb49 0906 	adc.w	r9, r9, r6
 8005e20:	f04f 0100 	mov.w	r1, #0
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e2c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e30:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e34:	4688      	mov	r8, r1
 8005e36:	4691      	mov	r9, r2
 8005e38:	eb18 0005 	adds.w	r0, r8, r5
 8005e3c:	eb49 0106 	adc.w	r1, r9, r6
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	461d      	mov	r5, r3
 8005e46:	f04f 0600 	mov.w	r6, #0
 8005e4a:	196b      	adds	r3, r5, r5
 8005e4c:	eb46 0406 	adc.w	r4, r6, r6
 8005e50:	461a      	mov	r2, r3
 8005e52:	4623      	mov	r3, r4
 8005e54:	f7fa f9bc 	bl	80001d0 <__aeabi_uldivmod>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4b47      	ldr	r3, [pc, #284]	; (8005f7c <UART_SetConfig+0x384>)
 8005e60:	fba3 2302 	umull	r2, r3, r3, r2
 8005e64:	095b      	lsrs	r3, r3, #5
 8005e66:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	461d      	mov	r5, r3
 8005e6e:	f04f 0600 	mov.w	r6, #0
 8005e72:	46a9      	mov	r9, r5
 8005e74:	46b2      	mov	sl, r6
 8005e76:	eb19 0309 	adds.w	r3, r9, r9
 8005e7a:	eb4a 040a 	adc.w	r4, sl, sl
 8005e7e:	4699      	mov	r9, r3
 8005e80:	46a2      	mov	sl, r4
 8005e82:	eb19 0905 	adds.w	r9, r9, r5
 8005e86:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e8a:	f04f 0100 	mov.w	r1, #0
 8005e8e:	f04f 0200 	mov.w	r2, #0
 8005e92:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e96:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e9a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e9e:	4689      	mov	r9, r1
 8005ea0:	4692      	mov	sl, r2
 8005ea2:	eb19 0005 	adds.w	r0, r9, r5
 8005ea6:	eb4a 0106 	adc.w	r1, sl, r6
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	461d      	mov	r5, r3
 8005eb0:	f04f 0600 	mov.w	r6, #0
 8005eb4:	196b      	adds	r3, r5, r5
 8005eb6:	eb46 0406 	adc.w	r4, r6, r6
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4623      	mov	r3, r4
 8005ebe:	f7fa f987 	bl	80001d0 <__aeabi_uldivmod>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4b2c      	ldr	r3, [pc, #176]	; (8005f7c <UART_SetConfig+0x384>)
 8005eca:	fba3 1302 	umull	r1, r3, r3, r2
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	2164      	movs	r1, #100	; 0x64
 8005ed2:	fb01 f303 	mul.w	r3, r1, r3
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	3332      	adds	r3, #50	; 0x32
 8005edc:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <UART_SetConfig+0x384>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	005b      	lsls	r3, r3, #1
 8005ee6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eea:	4498      	add	r8, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	461d      	mov	r5, r3
 8005ef0:	f04f 0600 	mov.w	r6, #0
 8005ef4:	46a9      	mov	r9, r5
 8005ef6:	46b2      	mov	sl, r6
 8005ef8:	eb19 0309 	adds.w	r3, r9, r9
 8005efc:	eb4a 040a 	adc.w	r4, sl, sl
 8005f00:	4699      	mov	r9, r3
 8005f02:	46a2      	mov	sl, r4
 8005f04:	eb19 0905 	adds.w	r9, r9, r5
 8005f08:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f0c:	f04f 0100 	mov.w	r1, #0
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f20:	4689      	mov	r9, r1
 8005f22:	4692      	mov	sl, r2
 8005f24:	eb19 0005 	adds.w	r0, r9, r5
 8005f28:	eb4a 0106 	adc.w	r1, sl, r6
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	461d      	mov	r5, r3
 8005f32:	f04f 0600 	mov.w	r6, #0
 8005f36:	196b      	adds	r3, r5, r5
 8005f38:	eb46 0406 	adc.w	r4, r6, r6
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4623      	mov	r3, r4
 8005f40:	f7fa f946 	bl	80001d0 <__aeabi_uldivmod>
 8005f44:	4603      	mov	r3, r0
 8005f46:	460c      	mov	r4, r1
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <UART_SetConfig+0x384>)
 8005f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f50:	095b      	lsrs	r3, r3, #5
 8005f52:	2164      	movs	r1, #100	; 0x64
 8005f54:	fb01 f303 	mul.w	r3, r1, r3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	3332      	adds	r3, #50	; 0x32
 8005f5e:	4a07      	ldr	r2, [pc, #28]	; (8005f7c <UART_SetConfig+0x384>)
 8005f60:	fba2 2303 	umull	r2, r3, r2, r3
 8005f64:	095b      	lsrs	r3, r3, #5
 8005f66:	f003 0207 	and.w	r2, r3, #7
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4442      	add	r2, r8
 8005f70:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005f72:	e1b2      	b.n	80062da <UART_SetConfig+0x6e2>
 8005f74:	40011000 	.word	0x40011000
 8005f78:	40011400 	.word	0x40011400
 8005f7c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4ad7      	ldr	r2, [pc, #860]	; (80062e4 <UART_SetConfig+0x6ec>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d005      	beq.n	8005f96 <UART_SetConfig+0x39e>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4ad6      	ldr	r2, [pc, #856]	; (80062e8 <UART_SetConfig+0x6f0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	f040 80d1 	bne.w	8006138 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f96:	f7fd fd1f 	bl	80039d8 <HAL_RCC_GetPCLK2Freq>
 8005f9a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	469a      	mov	sl, r3
 8005fa0:	f04f 0b00 	mov.w	fp, #0
 8005fa4:	46d0      	mov	r8, sl
 8005fa6:	46d9      	mov	r9, fp
 8005fa8:	eb18 0308 	adds.w	r3, r8, r8
 8005fac:	eb49 0409 	adc.w	r4, r9, r9
 8005fb0:	4698      	mov	r8, r3
 8005fb2:	46a1      	mov	r9, r4
 8005fb4:	eb18 080a 	adds.w	r8, r8, sl
 8005fb8:	eb49 090b 	adc.w	r9, r9, fp
 8005fbc:	f04f 0100 	mov.w	r1, #0
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fc8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fcc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fd0:	4688      	mov	r8, r1
 8005fd2:	4691      	mov	r9, r2
 8005fd4:	eb1a 0508 	adds.w	r5, sl, r8
 8005fd8:	eb4b 0609 	adc.w	r6, fp, r9
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	f04f 0400 	mov.w	r4, #0
 8005fee:	0094      	lsls	r4, r2, #2
 8005ff0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ff4:	008b      	lsls	r3, r1, #2
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	4631      	mov	r1, r6
 8005ffe:	f7fa f8e7 	bl	80001d0 <__aeabi_uldivmod>
 8006002:	4603      	mov	r3, r0
 8006004:	460c      	mov	r4, r1
 8006006:	461a      	mov	r2, r3
 8006008:	4bb8      	ldr	r3, [pc, #736]	; (80062ec <UART_SetConfig+0x6f4>)
 800600a:	fba3 2302 	umull	r2, r3, r3, r2
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	469b      	mov	fp, r3
 8006018:	f04f 0c00 	mov.w	ip, #0
 800601c:	46d9      	mov	r9, fp
 800601e:	46e2      	mov	sl, ip
 8006020:	eb19 0309 	adds.w	r3, r9, r9
 8006024:	eb4a 040a 	adc.w	r4, sl, sl
 8006028:	4699      	mov	r9, r3
 800602a:	46a2      	mov	sl, r4
 800602c:	eb19 090b 	adds.w	r9, r9, fp
 8006030:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006034:	f04f 0100 	mov.w	r1, #0
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006040:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006044:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006048:	4689      	mov	r9, r1
 800604a:	4692      	mov	sl, r2
 800604c:	eb1b 0509 	adds.w	r5, fp, r9
 8006050:	eb4c 060a 	adc.w	r6, ip, sl
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4619      	mov	r1, r3
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	f04f 0400 	mov.w	r4, #0
 8006066:	0094      	lsls	r4, r2, #2
 8006068:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800606c:	008b      	lsls	r3, r1, #2
 800606e:	461a      	mov	r2, r3
 8006070:	4623      	mov	r3, r4
 8006072:	4628      	mov	r0, r5
 8006074:	4631      	mov	r1, r6
 8006076:	f7fa f8ab 	bl	80001d0 <__aeabi_uldivmod>
 800607a:	4603      	mov	r3, r0
 800607c:	460c      	mov	r4, r1
 800607e:	461a      	mov	r2, r3
 8006080:	4b9a      	ldr	r3, [pc, #616]	; (80062ec <UART_SetConfig+0x6f4>)
 8006082:	fba3 1302 	umull	r1, r3, r3, r2
 8006086:	095b      	lsrs	r3, r3, #5
 8006088:	2164      	movs	r1, #100	; 0x64
 800608a:	fb01 f303 	mul.w	r3, r1, r3
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	3332      	adds	r3, #50	; 0x32
 8006094:	4a95      	ldr	r2, [pc, #596]	; (80062ec <UART_SetConfig+0x6f4>)
 8006096:	fba2 2303 	umull	r2, r3, r2, r3
 800609a:	095b      	lsrs	r3, r3, #5
 800609c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060a0:	4498      	add	r8, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	469b      	mov	fp, r3
 80060a6:	f04f 0c00 	mov.w	ip, #0
 80060aa:	46d9      	mov	r9, fp
 80060ac:	46e2      	mov	sl, ip
 80060ae:	eb19 0309 	adds.w	r3, r9, r9
 80060b2:	eb4a 040a 	adc.w	r4, sl, sl
 80060b6:	4699      	mov	r9, r3
 80060b8:	46a2      	mov	sl, r4
 80060ba:	eb19 090b 	adds.w	r9, r9, fp
 80060be:	eb4a 0a0c 	adc.w	sl, sl, ip
 80060c2:	f04f 0100 	mov.w	r1, #0
 80060c6:	f04f 0200 	mov.w	r2, #0
 80060ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060d6:	4689      	mov	r9, r1
 80060d8:	4692      	mov	sl, r2
 80060da:	eb1b 0509 	adds.w	r5, fp, r9
 80060de:	eb4c 060a 	adc.w	r6, ip, sl
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4619      	mov	r1, r3
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	f04f 0400 	mov.w	r4, #0
 80060f4:	0094      	lsls	r4, r2, #2
 80060f6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060fa:	008b      	lsls	r3, r1, #2
 80060fc:	461a      	mov	r2, r3
 80060fe:	4623      	mov	r3, r4
 8006100:	4628      	mov	r0, r5
 8006102:	4631      	mov	r1, r6
 8006104:	f7fa f864 	bl	80001d0 <__aeabi_uldivmod>
 8006108:	4603      	mov	r3, r0
 800610a:	460c      	mov	r4, r1
 800610c:	461a      	mov	r2, r3
 800610e:	4b77      	ldr	r3, [pc, #476]	; (80062ec <UART_SetConfig+0x6f4>)
 8006110:	fba3 1302 	umull	r1, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	2164      	movs	r1, #100	; 0x64
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	3332      	adds	r3, #50	; 0x32
 8006122:	4a72      	ldr	r2, [pc, #456]	; (80062ec <UART_SetConfig+0x6f4>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f003 020f 	and.w	r2, r3, #15
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4442      	add	r2, r8
 8006134:	609a      	str	r2, [r3, #8]
 8006136:	e0d0      	b.n	80062da <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7fd fc3a 	bl	80039b0 <HAL_RCC_GetPCLK1Freq>
 800613c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	469a      	mov	sl, r3
 8006142:	f04f 0b00 	mov.w	fp, #0
 8006146:	46d0      	mov	r8, sl
 8006148:	46d9      	mov	r9, fp
 800614a:	eb18 0308 	adds.w	r3, r8, r8
 800614e:	eb49 0409 	adc.w	r4, r9, r9
 8006152:	4698      	mov	r8, r3
 8006154:	46a1      	mov	r9, r4
 8006156:	eb18 080a 	adds.w	r8, r8, sl
 800615a:	eb49 090b 	adc.w	r9, r9, fp
 800615e:	f04f 0100 	mov.w	r1, #0
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800616a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800616e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006172:	4688      	mov	r8, r1
 8006174:	4691      	mov	r9, r2
 8006176:	eb1a 0508 	adds.w	r5, sl, r8
 800617a:	eb4b 0609 	adc.w	r6, fp, r9
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	4619      	mov	r1, r3
 8006184:	f04f 0200 	mov.w	r2, #0
 8006188:	f04f 0300 	mov.w	r3, #0
 800618c:	f04f 0400 	mov.w	r4, #0
 8006190:	0094      	lsls	r4, r2, #2
 8006192:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006196:	008b      	lsls	r3, r1, #2
 8006198:	461a      	mov	r2, r3
 800619a:	4623      	mov	r3, r4
 800619c:	4628      	mov	r0, r5
 800619e:	4631      	mov	r1, r6
 80061a0:	f7fa f816 	bl	80001d0 <__aeabi_uldivmod>
 80061a4:	4603      	mov	r3, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	461a      	mov	r2, r3
 80061aa:	4b50      	ldr	r3, [pc, #320]	; (80062ec <UART_SetConfig+0x6f4>)
 80061ac:	fba3 2302 	umull	r2, r3, r3, r2
 80061b0:	095b      	lsrs	r3, r3, #5
 80061b2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	469b      	mov	fp, r3
 80061ba:	f04f 0c00 	mov.w	ip, #0
 80061be:	46d9      	mov	r9, fp
 80061c0:	46e2      	mov	sl, ip
 80061c2:	eb19 0309 	adds.w	r3, r9, r9
 80061c6:	eb4a 040a 	adc.w	r4, sl, sl
 80061ca:	4699      	mov	r9, r3
 80061cc:	46a2      	mov	sl, r4
 80061ce:	eb19 090b 	adds.w	r9, r9, fp
 80061d2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061d6:	f04f 0100 	mov.w	r1, #0
 80061da:	f04f 0200 	mov.w	r2, #0
 80061de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061e6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ea:	4689      	mov	r9, r1
 80061ec:	4692      	mov	sl, r2
 80061ee:	eb1b 0509 	adds.w	r5, fp, r9
 80061f2:	eb4c 060a 	adc.w	r6, ip, sl
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	4619      	mov	r1, r3
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	f04f 0400 	mov.w	r4, #0
 8006208:	0094      	lsls	r4, r2, #2
 800620a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800620e:	008b      	lsls	r3, r1, #2
 8006210:	461a      	mov	r2, r3
 8006212:	4623      	mov	r3, r4
 8006214:	4628      	mov	r0, r5
 8006216:	4631      	mov	r1, r6
 8006218:	f7f9 ffda 	bl	80001d0 <__aeabi_uldivmod>
 800621c:	4603      	mov	r3, r0
 800621e:	460c      	mov	r4, r1
 8006220:	461a      	mov	r2, r3
 8006222:	4b32      	ldr	r3, [pc, #200]	; (80062ec <UART_SetConfig+0x6f4>)
 8006224:	fba3 1302 	umull	r1, r3, r3, r2
 8006228:	095b      	lsrs	r3, r3, #5
 800622a:	2164      	movs	r1, #100	; 0x64
 800622c:	fb01 f303 	mul.w	r3, r1, r3
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	3332      	adds	r3, #50	; 0x32
 8006236:	4a2d      	ldr	r2, [pc, #180]	; (80062ec <UART_SetConfig+0x6f4>)
 8006238:	fba2 2303 	umull	r2, r3, r2, r3
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006242:	4498      	add	r8, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	469b      	mov	fp, r3
 8006248:	f04f 0c00 	mov.w	ip, #0
 800624c:	46d9      	mov	r9, fp
 800624e:	46e2      	mov	sl, ip
 8006250:	eb19 0309 	adds.w	r3, r9, r9
 8006254:	eb4a 040a 	adc.w	r4, sl, sl
 8006258:	4699      	mov	r9, r3
 800625a:	46a2      	mov	sl, r4
 800625c:	eb19 090b 	adds.w	r9, r9, fp
 8006260:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006270:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006274:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006278:	4689      	mov	r9, r1
 800627a:	4692      	mov	sl, r2
 800627c:	eb1b 0509 	adds.w	r5, fp, r9
 8006280:	eb4c 060a 	adc.w	r6, ip, sl
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4619      	mov	r1, r3
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	f04f 0400 	mov.w	r4, #0
 8006296:	0094      	lsls	r4, r2, #2
 8006298:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800629c:	008b      	lsls	r3, r1, #2
 800629e:	461a      	mov	r2, r3
 80062a0:	4623      	mov	r3, r4
 80062a2:	4628      	mov	r0, r5
 80062a4:	4631      	mov	r1, r6
 80062a6:	f7f9 ff93 	bl	80001d0 <__aeabi_uldivmod>
 80062aa:	4603      	mov	r3, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	461a      	mov	r2, r3
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <UART_SetConfig+0x6f4>)
 80062b2:	fba3 1302 	umull	r1, r3, r3, r2
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	2164      	movs	r1, #100	; 0x64
 80062ba:	fb01 f303 	mul.w	r3, r1, r3
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	3332      	adds	r3, #50	; 0x32
 80062c4:	4a09      	ldr	r2, [pc, #36]	; (80062ec <UART_SetConfig+0x6f4>)
 80062c6:	fba2 2303 	umull	r2, r3, r2, r3
 80062ca:	095b      	lsrs	r3, r3, #5
 80062cc:	f003 020f 	and.w	r2, r3, #15
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4442      	add	r2, r8
 80062d6:	609a      	str	r2, [r3, #8]
}
 80062d8:	e7ff      	b.n	80062da <UART_SetConfig+0x6e2>
 80062da:	bf00      	nop
 80062dc:	3714      	adds	r7, #20
 80062de:	46bd      	mov	sp, r7
 80062e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062e4:	40011000 	.word	0x40011000
 80062e8:	40011400 	.word	0x40011400
 80062ec:	51eb851f 	.word	0x51eb851f

080062f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80062f0:	b084      	sub	sp, #16
 80062f2:	b480      	push	{r7}
 80062f4:	b085      	sub	sp, #20
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	f107 001c 	add.w	r0, r7, #28
 80062fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006306:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006308:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800630a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800630e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006312:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006316:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800631a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800632a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	431a      	orrs	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	b004      	add	sp, #16
 8006344:	4770      	bx	lr

08006346 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006346:	b480      	push	{r7}
 8006348:	b083      	sub	sp, #12
 800634a:	af00      	add	r7, sp, #0
 800634c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006354:	4618      	mov	r0, r3
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	370c      	adds	r7, #12
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2203      	movs	r2, #3
 800638e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006390:	2002      	movs	r0, #2
 8006392:	f7fb fc1b 	bl	8001bcc <HAL_Delay>
  
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f003 0303 	and.w	r3, r3, #3
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80063c6:	2300      	movs	r3, #0
 80063c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80063e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80063e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80063f6:	f023 030f 	bic.w	r3, r3, #15
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	431a      	orrs	r2, r3
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	b2db      	uxtb	r3, r3
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800642a:	b480      	push	{r7}
 800642c:	b085      	sub	sp, #20
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
 8006432:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3314      	adds	r3, #20
 8006438:	461a      	mov	r2, r3
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	4413      	add	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
}  
 8006444:	4618      	mov	r0, r3
 8006446:	3714      	adds	r7, #20
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	685a      	ldr	r2, [r3, #4]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006476:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800647c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006482:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800649a:	2300      	movs	r3, #0

}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80064b6:	2310      	movs	r3, #16
 80064b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064ba:	2340      	movs	r3, #64	; 0x40
 80064bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064c8:	f107 0308 	add.w	r3, r7, #8
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7ff ff74 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80064d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80064d8:	2110      	movs	r1, #16
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 fa40 	bl	8006960 <SDMMC_GetCmdResp1>
 80064e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064e2:	69fb      	ldr	r3, [r7, #28]
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80064fa:	2311      	movs	r3, #17
 80064fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064fe:	2340      	movs	r3, #64	; 0x40
 8006500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800650a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff ff52 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006518:	f241 3288 	movw	r2, #5000	; 0x1388
 800651c:	2111      	movs	r1, #17
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fa1e 	bl	8006960 <SDMMC_GetCmdResp1>
 8006524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006526:	69fb      	ldr	r3, [r7, #28]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3720      	adds	r7, #32
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b088      	sub	sp, #32
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800653e:	2312      	movs	r3, #18
 8006540:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800654a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006550:	f107 0308 	add.w	r3, r7, #8
 8006554:	4619      	mov	r1, r3
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7ff ff30 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800655c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006560:	2112      	movs	r1, #18
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f9fc 	bl	8006960 <SDMMC_GetCmdResp1>
 8006568:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800656a:	69fb      	ldr	r3, [r7, #28]
}
 800656c:	4618      	mov	r0, r3
 800656e:	3720      	adds	r7, #32
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006582:	2318      	movs	r3, #24
 8006584:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006586:	2340      	movs	r3, #64	; 0x40
 8006588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800658e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006592:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006594:	f107 0308 	add.w	r3, r7, #8
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7ff ff0e 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80065a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a4:	2118      	movs	r1, #24
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9da 	bl	8006960 <SDMMC_GetCmdResp1>
 80065ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ae:	69fb      	ldr	r3, [r7, #28]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3720      	adds	r7, #32
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
 80065c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80065c6:	2319      	movs	r3, #25
 80065c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80065ca:	2340      	movs	r3, #64	; 0x40
 80065cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065ce:	2300      	movs	r3, #0
 80065d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065d8:	f107 0308 	add.w	r3, r7, #8
 80065dc:	4619      	mov	r1, r3
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff feec 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80065e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80065e8:	2119      	movs	r1, #25
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9b8 	bl	8006960 <SDMMC_GetCmdResp1>
 80065f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065f2:	69fb      	ldr	r3, [r7, #28]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3720      	adds	r7, #32
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b088      	sub	sp, #32
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006608:	230c      	movs	r3, #12
 800660a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800660c:	2340      	movs	r3, #64	; 0x40
 800660e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006610:	2300      	movs	r3, #0
 8006612:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006618:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800661a:	f107 0308 	add.w	r3, r7, #8
 800661e:	4619      	mov	r1, r3
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f7ff fecb 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006626:	4a05      	ldr	r2, [pc, #20]	; (800663c <SDMMC_CmdStopTransfer+0x40>)
 8006628:	210c      	movs	r1, #12
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f998 	bl	8006960 <SDMMC_GetCmdResp1>
 8006630:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006632:	69fb      	ldr	r3, [r7, #28]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3720      	adds	r7, #32
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	05f5e100 	.word	0x05f5e100

08006640 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b08a      	sub	sp, #40	; 0x28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006650:	2307      	movs	r3, #7
 8006652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006654:	2340      	movs	r3, #64	; 0x40
 8006656:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800665c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006660:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006662:	f107 0310 	add.w	r3, r7, #16
 8006666:	4619      	mov	r1, r3
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff fea7 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	2107      	movs	r1, #7
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 f973 	bl	8006960 <SDMMC_GetCmdResp1>
 800667a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800667e:	4618      	mov	r0, r3
 8006680:	3728      	adds	r7, #40	; 0x28
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006686:	b580      	push	{r7, lr}
 8006688:	b088      	sub	sp, #32
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006696:	2300      	movs	r3, #0
 8006698:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800669a:	2300      	movs	r3, #0
 800669c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800669e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066a4:	f107 0308 	add.w	r3, r7, #8
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff fe86 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f92d 	bl	8006910 <SDMMC_GetCmdError>
 80066b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066b8:	69fb      	ldr	r3, [r7, #28]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3720      	adds	r7, #32
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b088      	sub	sp, #32
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80066ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80066ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80066d0:	2308      	movs	r3, #8
 80066d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066d4:	2340      	movs	r3, #64	; 0x40
 80066d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066d8:	2300      	movs	r3, #0
 80066da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066e2:	f107 0308 	add.w	r3, r7, #8
 80066e6:	4619      	mov	r1, r3
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff fe67 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fb16 	bl	8006d20 <SDMMC_GetCmdResp7>
 80066f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066f6:	69fb      	ldr	r3, [r7, #28]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3720      	adds	r7, #32
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800670e:	2337      	movs	r3, #55	; 0x37
 8006710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006712:	2340      	movs	r3, #64	; 0x40
 8006714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800671a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800671e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006720:	f107 0308 	add.w	r3, r7, #8
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fe48 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800672c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006730:	2137      	movs	r1, #55	; 0x37
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f914 	bl	8006960 <SDMMC_GetCmdResp1>
 8006738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800673a:	69fb      	ldr	r3, [r7, #28]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3720      	adds	r7, #32
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006758:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800675a:	2329      	movs	r3, #41	; 0x29
 800675c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800675e:	2340      	movs	r3, #64	; 0x40
 8006760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006762:	2300      	movs	r3, #0
 8006764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006766:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800676a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800676c:	f107 0308 	add.w	r3, r7, #8
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fe22 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fa23 	bl	8006bc4 <SDMMC_GetCmdResp3>
 800677e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006780:	69fb      	ldr	r3, [r7, #28]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b088      	sub	sp, #32
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
 8006792:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006798:	2306      	movs	r3, #6
 800679a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800679c:	2340      	movs	r3, #64	; 0x40
 800679e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067a0:	2300      	movs	r3, #0
 80067a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067aa:	f107 0308 	add.w	r3, r7, #8
 80067ae:	4619      	mov	r1, r3
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff fe03 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80067b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80067ba:	2106      	movs	r1, #6
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8cf 	bl	8006960 <SDMMC_GetCmdResp1>
 80067c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067c4:	69fb      	ldr	r3, [r7, #28]
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	3720      	adds	r7, #32
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}

080067ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80067ce:	b580      	push	{r7, lr}
 80067d0:	b088      	sub	sp, #32
 80067d2:	af00      	add	r7, sp, #0
 80067d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80067da:	2333      	movs	r3, #51	; 0x33
 80067dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067de:	2340      	movs	r3, #64	; 0x40
 80067e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067e2:	2300      	movs	r3, #0
 80067e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067ec:	f107 0308 	add.w	r3, r7, #8
 80067f0:	4619      	mov	r1, r3
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f7ff fde2 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80067f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80067fc:	2133      	movs	r1, #51	; 0x33
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f8ae 	bl	8006960 <SDMMC_GetCmdResp1>
 8006804:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006806:	69fb      	ldr	r3, [r7, #28]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3720      	adds	r7, #32
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006818:	2300      	movs	r3, #0
 800681a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800681c:	2302      	movs	r3, #2
 800681e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006820:	23c0      	movs	r3, #192	; 0xc0
 8006822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800682c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800682e:	f107 0308 	add.w	r3, r7, #8
 8006832:	4619      	mov	r1, r3
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f7ff fdc1 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f97c 	bl	8006b38 <SDMMC_GetCmdResp2>
 8006840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006842:	69fb      	ldr	r3, [r7, #28]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3720      	adds	r7, #32
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800685a:	2309      	movs	r3, #9
 800685c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800685e:	23c0      	movs	r3, #192	; 0xc0
 8006860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006862:	2300      	movs	r3, #0
 8006864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800686a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800686c:	f107 0308 	add.w	r3, r7, #8
 8006870:	4619      	mov	r1, r3
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f7ff fda2 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f95d 	bl	8006b38 <SDMMC_GetCmdResp2>
 800687e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006880:	69fb      	ldr	r3, [r7, #28]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3720      	adds	r7, #32
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b088      	sub	sp, #32
 800688e:	af00      	add	r7, sp, #0
 8006890:	6078      	str	r0, [r7, #4]
 8006892:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006894:	2300      	movs	r3, #0
 8006896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006898:	2303      	movs	r3, #3
 800689a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800689c:	2340      	movs	r3, #64	; 0x40
 800689e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff fd83 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	2103      	movs	r1, #3
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f9bc 	bl	8006c38 <SDMMC_GetCmdResp6>
 80068c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068c2:	69fb      	ldr	r3, [r7, #28]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3720      	adds	r7, #32
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}

080068cc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80068da:	230d      	movs	r3, #13
 80068dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068ec:	f107 0308 	add.w	r3, r7, #8
 80068f0:	4619      	mov	r1, r3
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7ff fd62 	bl	80063bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80068f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fc:	210d      	movs	r1, #13
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f82e 	bl	8006960 <SDMMC_GetCmdResp1>
 8006904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006906:	69fb      	ldr	r3, [r7, #28]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006910:	b490      	push	{r4, r7}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006918:	4b0f      	ldr	r3, [pc, #60]	; (8006958 <SDMMC_GetCmdError+0x48>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a0f      	ldr	r2, [pc, #60]	; (800695c <SDMMC_GetCmdError+0x4c>)
 800691e:	fba2 2303 	umull	r2, r3, r2, r3
 8006922:	0a5b      	lsrs	r3, r3, #9
 8006924:	f241 3288 	movw	r2, #5000	; 0x1388
 8006928:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800692c:	4623      	mov	r3, r4
 800692e:	1e5c      	subs	r4, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006934:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006938:	e009      	b.n	800694e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800693e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f2      	beq.n	800692c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	22c5      	movs	r2, #197	; 0xc5
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	3708      	adds	r7, #8
 8006952:	46bd      	mov	sp, r7
 8006954:	bc90      	pop	{r4, r7}
 8006956:	4770      	bx	lr
 8006958:	20000000 	.word	0x20000000
 800695c:	10624dd3 	.word	0x10624dd3

08006960 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b087      	sub	sp, #28
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	460b      	mov	r3, r1
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800696e:	4b6f      	ldr	r3, [pc, #444]	; (8006b2c <SDMMC_GetCmdResp1+0x1cc>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a6f      	ldr	r2, [pc, #444]	; (8006b30 <SDMMC_GetCmdResp1+0x1d0>)
 8006974:	fba2 2303 	umull	r2, r3, r2, r3
 8006978:	0a5b      	lsrs	r3, r3, #9
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006980:	4623      	mov	r3, r4
 8006982:	1e5c      	subs	r4, r3, #1
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006988:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800698c:	e0c9      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006992:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <SDMMC_GetCmdResp1+0x20>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1eb      	bne.n	8006980 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d004      	beq.n	80069be <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2204      	movs	r2, #4
 80069b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069ba:	2304      	movs	r3, #4
 80069bc:	e0b1      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e0a6      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	22c5      	movs	r2, #197	; 0xc5
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fd18 	bl	8006410 <SDIO_GetCommandResponse>
 80069e0:	4603      	mov	r3, r0
 80069e2:	461a      	mov	r2, r3
 80069e4:	7afb      	ldrb	r3, [r7, #11]
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d001      	beq.n	80069ee <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e099      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80069ee:	2100      	movs	r1, #0
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7ff fd1a 	bl	800642a <SDIO_GetResponse>
 80069f6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	4b4e      	ldr	r3, [pc, #312]	; (8006b34 <SDMMC_GetCmdResp1+0x1d4>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e08d      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	da02      	bge.n	8006a12 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006a0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a10:	e087      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006a1c:	2340      	movs	r3, #64	; 0x40
 8006a1e:	e080      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006a2a:	2380      	movs	r3, #128	; 0x80
 8006a2c:	e079      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a3c:	e071      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a4c:	e069      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d002      	beq.n	8006a5e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006a58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5c:	e061      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006a68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a6c:	e059      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d002      	beq.n	8006a7e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a7c:	e051      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a8c:	e049      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d002      	beq.n	8006a9e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a9c:	e041      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006aac:	e039      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006ab8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006abc:	e031      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006ac8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006acc:	e029      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d002      	beq.n	8006ade <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006ad8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006adc:	e021      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006ae8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006aec:	e019      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d002      	beq.n	8006afe <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006af8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006afc:	e011      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d002      	beq.n	8006b0e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006b08:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b0c:	e009      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	f003 0308 	and.w	r3, r3, #8
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006b18:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006b1c:	e001      	b.n	8006b22 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd90      	pop	{r4, r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	20000000 	.word	0x20000000
 8006b30:	10624dd3 	.word	0x10624dd3
 8006b34:	fdffe008 	.word	0xfdffe008

08006b38 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006b38:	b490      	push	{r4, r7}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b40:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <SDMMC_GetCmdResp2+0x84>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a1e      	ldr	r2, [pc, #120]	; (8006bc0 <SDMMC_GetCmdResp2+0x88>)
 8006b46:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4a:	0a5b      	lsrs	r3, r3, #9
 8006b4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b50:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006b54:	4623      	mov	r3, r4
 8006b56:	1e5c      	subs	r4, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b60:	e026      	b.n	8006bb0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b66:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0f0      	beq.n	8006b54 <SDMMC_GetCmdResp2+0x1c>
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1eb      	bne.n	8006b54 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d004      	beq.n	8006b92 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2204      	movs	r2, #4
 8006b8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b8e:	2304      	movs	r3, #4
 8006b90:	e00e      	b.n	8006bb0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d004      	beq.n	8006ba8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e003      	b.n	8006bb0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	22c5      	movs	r2, #197	; 0xc5
 8006bac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc90      	pop	{r4, r7}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	20000000 	.word	0x20000000
 8006bc0:	10624dd3 	.word	0x10624dd3

08006bc4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006bc4:	b490      	push	{r4, r7}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006bcc:	4b18      	ldr	r3, [pc, #96]	; (8006c30 <SDMMC_GetCmdResp3+0x6c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a18      	ldr	r2, [pc, #96]	; (8006c34 <SDMMC_GetCmdResp3+0x70>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	0a5b      	lsrs	r3, r3, #9
 8006bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bdc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006be0:	4623      	mov	r3, r4
 8006be2:	1e5c      	subs	r4, r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d102      	bne.n	8006bee <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006be8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006bec:	e01b      	b.n	8006c26 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d0f0      	beq.n	8006be0 <SDMMC_GetCmdResp3+0x1c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1eb      	bne.n	8006be0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0c:	f003 0304 	and.w	r3, r3, #4
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d004      	beq.n	8006c1e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2204      	movs	r2, #4
 8006c18:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c1a:	2304      	movs	r3, #4
 8006c1c:	e003      	b.n	8006c26 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	22c5      	movs	r2, #197	; 0xc5
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bc90      	pop	{r4, r7}
 8006c2e:	4770      	bx	lr
 8006c30:	20000000 	.word	0x20000000
 8006c34:	10624dd3 	.word	0x10624dd3

08006c38 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006c38:	b590      	push	{r4, r7, lr}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	460b      	mov	r3, r1
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006c46:	4b34      	ldr	r3, [pc, #208]	; (8006d18 <SDMMC_GetCmdResp6+0xe0>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a34      	ldr	r2, [pc, #208]	; (8006d1c <SDMMC_GetCmdResp6+0xe4>)
 8006c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c50:	0a5b      	lsrs	r3, r3, #9
 8006c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c56:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	1e5c      	subs	r4, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d102      	bne.n	8006c68 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006c62:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006c66:	e052      	b.n	8006d0e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c6c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d0f0      	beq.n	8006c5a <SDMMC_GetCmdResp6+0x22>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1eb      	bne.n	8006c5a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	f003 0304 	and.w	r3, r3, #4
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d004      	beq.n	8006c98 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2204      	movs	r2, #4
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c94:	2304      	movs	r3, #4
 8006c96:	e03a      	b.n	8006d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	f003 0301 	and.w	r3, r3, #1
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d004      	beq.n	8006cae <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e02f      	b.n	8006d0e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff fbae 	bl	8006410 <SDIO_GetCommandResponse>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	7afb      	ldrb	r3, [r7, #11]
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d001      	beq.n	8006cc2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e025      	b.n	8006d0e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	22c5      	movs	r2, #197	; 0xc5
 8006cc6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006cc8:	2100      	movs	r1, #0
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7ff fbad 	bl	800642a <SDIO_GetResponse>
 8006cd0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d106      	bne.n	8006cea <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	0c1b      	lsrs	r3, r3, #16
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e011      	b.n	8006d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cf8:	e009      	b.n	8006d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d002      	beq.n	8006d0a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006d04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d08:	e001      	b.n	8006d0e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	371c      	adds	r7, #28
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd90      	pop	{r4, r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000000 	.word	0x20000000
 8006d1c:	10624dd3 	.word	0x10624dd3

08006d20 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006d20:	b490      	push	{r4, r7}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d28:	4b21      	ldr	r3, [pc, #132]	; (8006db0 <SDMMC_GetCmdResp7+0x90>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a21      	ldr	r2, [pc, #132]	; (8006db4 <SDMMC_GetCmdResp7+0x94>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	0a5b      	lsrs	r3, r3, #9
 8006d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	1e5c      	subs	r4, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d102      	bne.n	8006d4a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d48:	e02c      	b.n	8006da4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <SDMMC_GetCmdResp7+0x1c>
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1eb      	bne.n	8006d3c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d004      	beq.n	8006d7a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2204      	movs	r2, #4
 8006d74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d76:	2304      	movs	r3, #4
 8006d78:	e014      	b.n	8006da4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d004      	beq.n	8006d90 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2201      	movs	r2, #1
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e009      	b.n	8006da4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2240      	movs	r2, #64	; 0x40
 8006da0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006da2:	2300      	movs	r3, #0
  
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc90      	pop	{r4, r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20000000 	.word	0x20000000
 8006db4:	10624dd3 	.word	0x10624dd3

08006db8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006dbc:	4904      	ldr	r1, [pc, #16]	; (8006dd0 <MX_FATFS_Init+0x18>)
 8006dbe:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <MX_FATFS_Init+0x1c>)
 8006dc0:	f000 faa4 	bl	800730c <FATFS_LinkDriver>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4b03      	ldr	r3, [pc, #12]	; (8006dd8 <MX_FATFS_Init+0x20>)
 8006dca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006dcc:	bf00      	nop
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20004474 	.word	0x20004474
 8006dd4:	0800a354 	.word	0x0800a354
 8006dd8:	20004470 	.word	0x20004470

08006ddc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006de6:	f000 f896 	bl	8006f16 <BSP_SD_IsDetected>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d001      	beq.n	8006df4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e012      	b.n	8006e1a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006df4:	480b      	ldr	r0, [pc, #44]	; (8006e24 <BSP_SD_Init+0x48>)
 8006df6:	f7fc fe35 	bl	8003a64 <HAL_SD_Init>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006dfe:	79fb      	ldrb	r3, [r7, #7]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d109      	bne.n	8006e18 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e08:	4806      	ldr	r0, [pc, #24]	; (8006e24 <BSP_SD_Init+0x48>)
 8006e0a:	f7fd fbf5 	bl	80045f8 <HAL_SD_ConfigWideBusOperation>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006e18:	79fb      	ldrb	r3, [r7, #7]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	2000428c 	.word	0x2000428c

08006e28 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b086      	sub	sp, #24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006e34:	2300      	movs	r3, #0
 8006e36:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	68f9      	ldr	r1, [r7, #12]
 8006e3e:	4806      	ldr	r0, [pc, #24]	; (8006e58 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006e40:	f7fc fea0 	bl	8003b84 <HAL_SD_ReadBlocks_DMA>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	2000428c 	.word	0x2000428c

08006e5c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	68f9      	ldr	r1, [r7, #12]
 8006e72:	4806      	ldr	r0, [pc, #24]	; (8006e8c <BSP_SD_WriteBlocks_DMA+0x30>)
 8006e74:	f7fc ff70 	bl	8003d58 <HAL_SD_WriteBlocks_DMA>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	2000428c 	.word	0x2000428c

08006e90 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006e94:	4805      	ldr	r0, [pc, #20]	; (8006eac <BSP_SD_GetCardState+0x1c>)
 8006e96:	f7fd fc2b 	bl	80046f0 <HAL_SD_GetCardState>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b04      	cmp	r3, #4
 8006e9e:	bf14      	ite	ne
 8006ea0:	2301      	movne	r3, #1
 8006ea2:	2300      	moveq	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	2000428c 	.word	0x2000428c

08006eb0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4803      	ldr	r0, [pc, #12]	; (8006ec8 <BSP_SD_GetCardInfo+0x18>)
 8006ebc:	f7fd fb70 	bl	80045a0 <HAL_SD_GetCardInfo>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	2000428c 	.word	0x2000428c

08006ecc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006ed4:	f000 f818 	bl	8006f08 <BSP_SD_AbortCallback>
}
 8006ed8:	bf00      	nop
 8006eda:	3708      	adds	r7, #8
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006ee8:	f000 f9a8 	bl	800723c <BSP_SD_WriteCpltCallback>
}
 8006eec:	bf00      	nop
 8006eee:	3708      	adds	r7, #8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b082      	sub	sp, #8
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006efc:	f000 f9ac 	bl	8007258 <BSP_SD_ReadCpltCallback>
}
 8006f00:	bf00      	nop
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	af00      	add	r7, sp, #0

}
 8006f0c:	bf00      	nop
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	b2db      	uxtb	r3, r3
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8006f38:	f000 fa34 	bl	80073a4 <osKernelSysTick>
 8006f3c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8006f3e:	e006      	b.n	8006f4e <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006f40:	f7ff ffa6 	bl	8006e90 <BSP_SD_GetCardState>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	e009      	b.n	8006f62 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8006f4e:	f000 fa29 	bl	80073a4 <osKernelSysTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d8f0      	bhi.n	8006f40 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006f5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
	...

08006f6c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006f76:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <SD_CheckStatus+0x38>)
 8006f78:	2201      	movs	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006f7c:	f7ff ff88 	bl	8006e90 <BSP_SD_GetCardState>
 8006f80:	4603      	mov	r3, r0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d107      	bne.n	8006f96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006f86:	4b07      	ldr	r3, [pc, #28]	; (8006fa4 <SD_CheckStatus+0x38>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <SD_CheckStatus+0x38>)
 8006f94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006f96:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <SD_CheckStatus+0x38>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	b2db      	uxtb	r3, r3
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3708      	adds	r7, #8
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20000009 	.word	0x20000009

08006fa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	4603      	mov	r3, r0
 8006fb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8006fb2:	4b20      	ldr	r3, [pc, #128]	; (8007034 <SD_initialize+0x8c>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006fb8:	f000 f9e8 	bl	800738c <osKernelRunning>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d030      	beq.n	8007024 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006fc2:	f7ff ff0b 	bl	8006ddc <BSP_SD_Init>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d107      	bne.n	8006fdc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006fcc:	79fb      	ldrb	r3, [r7, #7]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff ffcc 	bl	8006f6c <SD_CheckStatus>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	4b16      	ldr	r3, [pc, #88]	; (8007034 <SD_initialize+0x8c>)
 8006fda:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006fdc:	4b15      	ldr	r3, [pc, #84]	; (8007034 <SD_initialize+0x8c>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d01e      	beq.n	8007024 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <SD_initialize+0x90>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10e      	bne.n	800700c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006fee:	4b13      	ldr	r3, [pc, #76]	; (800703c <SD_initialize+0x94>)
 8006ff0:	f107 0408 	add.w	r4, r7, #8
 8006ff4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ff6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8006ffa:	f107 0308 	add.w	r3, r7, #8
 8006ffe:	2100      	movs	r1, #0
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fadb 	bl	80075bc <osMessageCreate>
 8007006:	4602      	mov	r2, r0
 8007008:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <SD_initialize+0x90>)
 800700a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800700c:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <SD_initialize+0x90>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d107      	bne.n	8007024 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8007014:	4b07      	ldr	r3, [pc, #28]	; (8007034 <SD_initialize+0x8c>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	b2db      	uxtb	r3, r3
 800701a:	f043 0301 	orr.w	r3, r3, #1
 800701e:	b2da      	uxtb	r2, r3
 8007020:	4b04      	ldr	r3, [pc, #16]	; (8007034 <SD_initialize+0x8c>)
 8007022:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007024:	4b03      	ldr	r3, [pc, #12]	; (8007034 <SD_initialize+0x8c>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	b2db      	uxtb	r3, r3
}
 800702a:	4618      	mov	r0, r3
 800702c:	371c      	adds	r7, #28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd90      	pop	{r4, r7, pc}
 8007032:	bf00      	nop
 8007034:	20000009 	.word	0x20000009
 8007038:	20000424 	.word	0x20000424
 800703c:	0800a31c 	.word	0x0800a31c

08007040 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800704a:	79fb      	ldrb	r3, [r7, #7]
 800704c:	4618      	mov	r0, r3
 800704e:	f7ff ff8d 	bl	8006f6c <SD_CheckStatus>
 8007052:	4603      	mov	r3, r0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b08a      	sub	sp, #40	; 0x28
 8007060:	af00      	add	r7, sp, #0
 8007062:	60b9      	str	r1, [r7, #8]
 8007064:	607a      	str	r2, [r7, #4]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007072:	f247 5030 	movw	r0, #30000	; 0x7530
 8007076:	f7ff ff5b 	bl	8006f30 <SD_CheckStatusWithTimeout>
 800707a:	4603      	mov	r3, r0
 800707c:	2b00      	cmp	r3, #0
 800707e:	da02      	bge.n	8007086 <SD_read+0x2a>
  {
    return res;
 8007080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007084:	e032      	b.n	80070ec <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007086:	683a      	ldr	r2, [r7, #0]
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68b8      	ldr	r0, [r7, #8]
 800708c:	f7ff fecc 	bl	8006e28 <BSP_SD_ReadBlocks_DMA>
 8007090:	4603      	mov	r3, r0
 8007092:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8007096:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800709a:	2b00      	cmp	r3, #0
 800709c:	d124      	bne.n	80070e8 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <SD_read+0x98>)
 80070a0:	6819      	ldr	r1, [r3, #0]
 80070a2:	f107 0314 	add.w	r3, r7, #20
 80070a6:	f247 5230 	movw	r2, #30000	; 0x7530
 80070aa:	4618      	mov	r0, r3
 80070ac:	f000 faf0 	bl	8007690 <osMessageGet>

    if (event.status == osEventMessage)
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	2b10      	cmp	r3, #16
 80070b4:	d118      	bne.n	80070e8 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d115      	bne.n	80070e8 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80070bc:	f000 f972 	bl	80073a4 <osKernelSysTick>
 80070c0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80070c2:	e008      	b.n	80070d6 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070c4:	f7ff fee4 	bl	8006e90 <BSP_SD_GetCardState>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d103      	bne.n	80070d6 <SD_read+0x7a>
              {
                res = RES_OK;
 80070ce:	2300      	movs	r3, #0
 80070d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80070d4:	e008      	b.n	80070e8 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80070d6:	f000 f965 	bl	80073a4 <osKernelSysTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	f247 522f 	movw	r2, #29999	; 0x752f
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d9ed      	bls.n	80070c4 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80070e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	; 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	20000424 	.word	0x20000424

080070f8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	60b9      	str	r1, [r7, #8]
 8007100:	607a      	str	r2, [r7, #4]
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	4603      	mov	r3, r0
 8007106:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800710e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007112:	f7ff ff0d 	bl	8006f30 <SD_CheckStatusWithTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	da02      	bge.n	8007122 <SD_write+0x2a>
  {
    return res;
 800711c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007120:	e02e      	b.n	8007180 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	6879      	ldr	r1, [r7, #4]
 8007126:	68b8      	ldr	r0, [r7, #8]
 8007128:	f7ff fe98 	bl	8006e5c <BSP_SD_WriteBlocks_DMA>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d124      	bne.n	800717c <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007132:	4b15      	ldr	r3, [pc, #84]	; (8007188 <SD_write+0x90>)
 8007134:	6819      	ldr	r1, [r3, #0]
 8007136:	f107 0314 	add.w	r3, r7, #20
 800713a:	f247 5230 	movw	r2, #30000	; 0x7530
 800713e:	4618      	mov	r0, r3
 8007140:	f000 faa6 	bl	8007690 <osMessageGet>

    if (event.status == osEventMessage)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2b10      	cmp	r3, #16
 8007148:	d118      	bne.n	800717c <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d115      	bne.n	800717c <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007150:	f000 f928 	bl	80073a4 <osKernelSysTick>
 8007154:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007156:	e008      	b.n	800716a <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007158:	f7ff fe9a 	bl	8006e90 <BSP_SD_GetCardState>
 800715c:	4603      	mov	r3, r0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <SD_write+0x72>
          {
            res = RES_OK;
 8007162:	2300      	movs	r3, #0
 8007164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007168:	e008      	b.n	800717c <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800716a:	f000 f91b 	bl	80073a4 <osKernelSysTick>
 800716e:	4602      	mov	r2, r0
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f247 522f 	movw	r2, #29999	; 0x752f
 8007178:	4293      	cmp	r3, r2
 800717a:	d9ed      	bls.n	8007158 <SD_write+0x60>
    }

  }
#endif

  return res;
 800717c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007180:	4618      	mov	r0, r3
 8007182:	3728      	adds	r7, #40	; 0x28
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}
 8007188:	20000424 	.word	0x20000424

0800718c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08c      	sub	sp, #48	; 0x30
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	603a      	str	r2, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
 8007198:	460b      	mov	r3, r1
 800719a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80071a2:	4b25      	ldr	r3, [pc, #148]	; (8007238 <SD_ioctl+0xac>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d001      	beq.n	80071b4 <SD_ioctl+0x28>
 80071b0:	2303      	movs	r3, #3
 80071b2:	e03c      	b.n	800722e <SD_ioctl+0xa2>

  switch (cmd)
 80071b4:	79bb      	ldrb	r3, [r7, #6]
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d834      	bhi.n	8007224 <SD_ioctl+0x98>
 80071ba:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <SD_ioctl+0x34>)
 80071bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071c0:	080071d1 	.word	0x080071d1
 80071c4:	080071d9 	.word	0x080071d9
 80071c8:	080071f1 	.word	0x080071f1
 80071cc:	0800720b 	.word	0x0800720b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80071d0:	2300      	movs	r3, #0
 80071d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071d6:	e028      	b.n	800722a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80071d8:	f107 030c 	add.w	r3, r7, #12
 80071dc:	4618      	mov	r0, r3
 80071de:	f7ff fe67 	bl	8006eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80071e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80071ee:	e01c      	b.n	800722a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80071f0:	f107 030c 	add.w	r3, r7, #12
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fe5b 	bl	8006eb0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80071fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007208:	e00f      	b.n	800722a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800720a:	f107 030c 	add.w	r3, r7, #12
 800720e:	4618      	mov	r0, r3
 8007210:	f7ff fe4e 	bl	8006eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	0a5a      	lsrs	r2, r3, #9
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007222:	e002      	b.n	800722a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007224:	2304      	movs	r3, #4
 8007226:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800722a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800722e:	4618      	mov	r0, r3
 8007230:	3730      	adds	r7, #48	; 0x30
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000009 	.word	0x20000009

0800723c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8007240:	4b04      	ldr	r3, [pc, #16]	; (8007254 <BSP_SD_WriteCpltCallback+0x18>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2200      	movs	r2, #0
 8007246:	2102      	movs	r1, #2
 8007248:	4618      	mov	r0, r3
 800724a:	f000 f9e1 	bl	8007610 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800724e:	bf00      	nop
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000424 	.word	0x20000424

08007258 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <BSP_SD_ReadCpltCallback+0x18>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2200      	movs	r2, #0
 8007262:	2101      	movs	r1, #1
 8007264:	4618      	mov	r0, r3
 8007266:	f000 f9d3 	bl	8007610 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800726a:	bf00      	nop
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	20000424 	.word	0x20000424

08007274 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	4613      	mov	r3, r2
 8007280:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007286:	2300      	movs	r3, #0
 8007288:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800728a:	4b1f      	ldr	r3, [pc, #124]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 800728c:	7a5b      	ldrb	r3, [r3, #9]
 800728e:	b2db      	uxtb	r3, r3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d131      	bne.n	80072f8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007294:	4b1c      	ldr	r3, [pc, #112]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 8007296:	7a5b      	ldrb	r3, [r3, #9]
 8007298:	b2db      	uxtb	r3, r3
 800729a:	461a      	mov	r2, r3
 800729c:	4b1a      	ldr	r3, [pc, #104]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 800729e:	2100      	movs	r1, #0
 80072a0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80072a2:	4b19      	ldr	r3, [pc, #100]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072a4:	7a5b      	ldrb	r3, [r3, #9]
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	4a17      	ldr	r2, [pc, #92]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	4413      	add	r3, r2
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80072b2:	4b15      	ldr	r3, [pc, #84]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072b4:	7a5b      	ldrb	r3, [r3, #9]
 80072b6:	b2db      	uxtb	r3, r3
 80072b8:	461a      	mov	r2, r3
 80072ba:	4b13      	ldr	r3, [pc, #76]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072bc:	4413      	add	r3, r2
 80072be:	79fa      	ldrb	r2, [r7, #7]
 80072c0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80072c2:	4b11      	ldr	r3, [pc, #68]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072c4:	7a5b      	ldrb	r3, [r3, #9]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	1c5a      	adds	r2, r3, #1
 80072ca:	b2d1      	uxtb	r1, r2
 80072cc:	4a0e      	ldr	r2, [pc, #56]	; (8007308 <FATFS_LinkDriverEx+0x94>)
 80072ce:	7251      	strb	r1, [r2, #9]
 80072d0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80072d2:	7dbb      	ldrb	r3, [r7, #22]
 80072d4:	3330      	adds	r3, #48	; 0x30
 80072d6:	b2da      	uxtb	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3301      	adds	r3, #1
 80072e0:	223a      	movs	r2, #58	; 0x3a
 80072e2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	3302      	adds	r3, #2
 80072e8:	222f      	movs	r2, #47	; 0x2f
 80072ea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	3303      	adds	r3, #3
 80072f0:	2200      	movs	r2, #0
 80072f2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000428 	.word	0x20000428

0800730c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007316:	2200      	movs	r2, #0
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff ffaa 	bl	8007274 <FATFS_LinkDriverEx>
 8007320:	4603      	mov	r3, r0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800732a:	b480      	push	{r7}
 800732c:	b085      	sub	sp, #20
 800732e:	af00      	add	r7, sp, #0
 8007330:	4603      	mov	r3, r0
 8007332:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800733c:	2b84      	cmp	r3, #132	; 0x84
 800733e:	d005      	beq.n	800734c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007340:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	4413      	add	r3, r2
 8007348:	3303      	adds	r3, #3
 800734a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800734c:	68fb      	ldr	r3, [r7, #12]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007360:	f3ef 8305 	mrs	r3, IPSR
 8007364:	607b      	str	r3, [r7, #4]
  return(result);
 8007366:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007368:	2b00      	cmp	r3, #0
 800736a:	bf14      	ite	ne
 800736c:	2301      	movne	r3, #1
 800736e:	2300      	moveq	r3, #0
 8007370:	b2db      	uxtb	r3, r3
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007382:	f001 fb97 	bl	8008ab4 <vTaskStartScheduler>
  
  return osOK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	bd80      	pop	{r7, pc}

0800738c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8007390:	f001 ffa6 	bl	80092e0 <xTaskGetSchedulerState>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d101      	bne.n	800739e <osKernelRunning+0x12>
    return 0;
 800739a:	2300      	movs	r3, #0
 800739c:	e000      	b.n	80073a0 <osKernelRunning+0x14>
  else
    return 1;
 800739e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80073a8:	f7ff ffd7 	bl	800735a <inHandlerMode>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80073b2:	f001 fc97 	bl	8008ce4 <xTaskGetTickCountFromISR>
 80073b6:	4603      	mov	r3, r0
 80073b8:	e002      	b.n	80073c0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80073ba:	f001 fc83 	bl	8008cc4 <xTaskGetTickCount>
 80073be:	4603      	mov	r3, r0
  }
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80073c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073c6:	b089      	sub	sp, #36	; 0x24
 80073c8:	af04      	add	r7, sp, #16
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d020      	beq.n	8007418 <osThreadCreate+0x54>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	699b      	ldr	r3, [r3, #24]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d01c      	beq.n	8007418 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685c      	ldr	r4, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681d      	ldr	r5, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	691e      	ldr	r6, [r3, #16]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7ff ff9a 	bl	800732a <makeFreeRtosPriority>
 80073f6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007400:	9202      	str	r2, [sp, #8]
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	9100      	str	r1, [sp, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	4632      	mov	r2, r6
 800740a:	4629      	mov	r1, r5
 800740c:	4620      	mov	r0, r4
 800740e:	f001 f98e 	bl	800872e <xTaskCreateStatic>
 8007412:	4603      	mov	r3, r0
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	e01c      	b.n	8007452 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685c      	ldr	r4, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007424:	b29e      	uxth	r6, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f7ff ff7c 	bl	800732a <makeFreeRtosPriority>
 8007432:	4602      	mov	r2, r0
 8007434:	f107 030c 	add.w	r3, r7, #12
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	9200      	str	r2, [sp, #0]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	4632      	mov	r2, r6
 8007440:	4629      	mov	r1, r5
 8007442:	4620      	mov	r0, r4
 8007444:	f001 f9cd 	bl	80087e2 <xTaskCreate>
 8007448:	4603      	mov	r3, r0
 800744a:	2b01      	cmp	r3, #1
 800744c:	d001      	beq.n	8007452 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800744e:	2300      	movs	r3, #0
 8007450:	e000      	b.n	8007454 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007452:	68fb      	ldr	r3, [r7, #12]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3714      	adds	r7, #20
 8007458:	46bd      	mov	sp, r7
 800745a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800745c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <osDelay+0x16>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	e000      	b.n	8007474 <osDelay+0x18>
 8007472:	2301      	movs	r3, #1
 8007474:	4618      	mov	r0, r3
 8007476:	f001 fae9 	bl	8008a4c <vTaskDelay>
  
  return osOK;
 800747a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800747c:	4618      	mov	r0, r3
 800747e:	3710      	adds	r7, #16
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}

08007484 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4619      	mov	r1, r3
 800749a:	2001      	movs	r0, #1
 800749c:	f000 fb8b 	bl	8007bb6 <xQueueCreateMutexStatic>
 80074a0:	4603      	mov	r3, r0
 80074a2:	e003      	b.n	80074ac <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80074a4:	2001      	movs	r0, #1
 80074a6:	f000 fb6e 	bl	8007b86 <xQueueCreateMutex>
 80074aa:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80074be:	2300      	movs	r3, #0
 80074c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <osMutexWait+0x18>
    return osErrorParameter;
 80074c8:	2380      	movs	r3, #128	; 0x80
 80074ca:	e03a      	b.n	8007542 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d6:	d103      	bne.n	80074e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80074d8:	f04f 33ff 	mov.w	r3, #4294967295
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	e009      	b.n	80074f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d006      	beq.n	80074f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d101      	bne.n	80074f4 <osMutexWait+0x40>
      ticks = 1;
 80074f0:	2301      	movs	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80074f4:	f7ff ff31 	bl	800735a <inHandlerMode>
 80074f8:	4603      	mov	r3, r0
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d017      	beq.n	800752e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80074fe:	f107 0308 	add.w	r3, r7, #8
 8007502:	461a      	mov	r2, r3
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 ff6c 	bl	80083e4 <xQueueReceiveFromISR>
 800750c:	4603      	mov	r3, r0
 800750e:	2b01      	cmp	r3, #1
 8007510:	d001      	beq.n	8007516 <osMutexWait+0x62>
      return osErrorOS;
 8007512:	23ff      	movs	r3, #255	; 0xff
 8007514:	e015      	b.n	8007542 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d011      	beq.n	8007540 <osMutexWait+0x8c>
 800751c:	4b0b      	ldr	r3, [pc, #44]	; (800754c <osMutexWait+0x98>)
 800751e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007522:	601a      	str	r2, [r3, #0]
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	e008      	b.n	8007540 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f000 fe4f 	bl	80081d4 <xQueueSemaphoreTake>
 8007536:	4603      	mov	r3, r0
 8007538:	2b01      	cmp	r3, #1
 800753a:	d001      	beq.n	8007540 <osMutexWait+0x8c>
    return osErrorOS;
 800753c:	23ff      	movs	r3, #255	; 0xff
 800753e:	e000      	b.n	8007542 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	e000ed04 	.word	0xe000ed04

08007550 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007558:	2300      	movs	r3, #0
 800755a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800755c:	2300      	movs	r3, #0
 800755e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007560:	f7ff fefb 	bl	800735a <inHandlerMode>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d016      	beq.n	8007598 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800756a:	f107 0308 	add.w	r3, r7, #8
 800756e:	4619      	mov	r1, r3
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fcc9 	bl	8007f08 <xQueueGiveFromISR>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d001      	beq.n	8007580 <osMutexRelease+0x30>
      return osErrorOS;
 800757c:	23ff      	movs	r3, #255	; 0xff
 800757e:	e017      	b.n	80075b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d013      	beq.n	80075ae <osMutexRelease+0x5e>
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <osMutexRelease+0x68>)
 8007588:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
 8007596:	e00a      	b.n	80075ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007598:	2300      	movs	r3, #0
 800759a:	2200      	movs	r2, #0
 800759c:	2100      	movs	r1, #0
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fb24 	bl	8007bec <xQueueGenericSend>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d001      	beq.n	80075ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80075aa:	23ff      	movs	r3, #255	; 0xff
 80075ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80075ae:	68fb      	ldr	r3, [r7, #12]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3710      	adds	r7, #16
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b085      	sub	sp, #20
 80075c0:	af02      	add	r7, sp, #8
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	689b      	ldr	r3, [r3, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d012      	beq.n	80075f4 <osMessageCreate+0x38>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00e      	beq.n	80075f4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6818      	ldr	r0, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	689a      	ldr	r2, [r3, #8]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68dc      	ldr	r4, [r3, #12]
 80075e6:	2300      	movs	r3, #0
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	4623      	mov	r3, r4
 80075ec:	f000 f9e0 	bl	80079b0 <xQueueGenericCreateStatic>
 80075f0:	4603      	mov	r3, r0
 80075f2:	e008      	b.n	8007606 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	4619      	mov	r1, r3
 8007600:	f000 fa49 	bl	8007a96 <xQueueGenericCreate>
 8007604:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bd90      	pop	{r4, r7, pc}
	...

08007610 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800761c:	2300      	movs	r3, #0
 800761e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <osMessagePut+0x1e>
    ticks = 1;
 800762a:	2301      	movs	r3, #1
 800762c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800762e:	f7ff fe94 	bl	800735a <inHandlerMode>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d018      	beq.n	800766a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007638:	f107 0210 	add.w	r2, r7, #16
 800763c:	f107 0108 	add.w	r1, r7, #8
 8007640:	2300      	movs	r3, #0
 8007642:	68f8      	ldr	r0, [r7, #12]
 8007644:	f000 fbcc 	bl	8007de0 <xQueueGenericSendFromISR>
 8007648:	4603      	mov	r3, r0
 800764a:	2b01      	cmp	r3, #1
 800764c:	d001      	beq.n	8007652 <osMessagePut+0x42>
      return osErrorOS;
 800764e:	23ff      	movs	r3, #255	; 0xff
 8007650:	e018      	b.n	8007684 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d014      	beq.n	8007682 <osMessagePut+0x72>
 8007658:	4b0c      	ldr	r3, [pc, #48]	; (800768c <osMessagePut+0x7c>)
 800765a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	f3bf 8f4f 	dsb	sy
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	e00b      	b.n	8007682 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800766a:	f107 0108 	add.w	r1, r7, #8
 800766e:	2300      	movs	r3, #0
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 faba 	bl	8007bec <xQueueGenericSend>
 8007678:	4603      	mov	r3, r0
 800767a:	2b01      	cmp	r3, #1
 800767c:	d001      	beq.n	8007682 <osMessagePut+0x72>
      return osErrorOS;
 800767e:	23ff      	movs	r3, #255	; 0xff
 8007680:	e000      	b.n	8007684 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3718      	adds	r7, #24
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007690:	b590      	push	{r4, r7, lr}
 8007692:	b08b      	sub	sp, #44	; 0x2c
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10a      	bne.n	80076c0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	617b      	str	r3, [r7, #20]
    return event;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	461c      	mov	r4, r3
 80076b2:	f107 0314 	add.w	r3, r7, #20
 80076b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80076be:	e054      	b.n	800776a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80076c4:	2300      	movs	r3, #0
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ce:	d103      	bne.n	80076d8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80076d0:	f04f 33ff 	mov.w	r3, #4294967295
 80076d4:	627b      	str	r3, [r7, #36]	; 0x24
 80076d6:	e009      	b.n	80076ec <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d006      	beq.n	80076ec <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80076e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d101      	bne.n	80076ec <osMessageGet+0x5c>
      ticks = 1;
 80076e8:	2301      	movs	r3, #1
 80076ea:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80076ec:	f7ff fe35 	bl	800735a <inHandlerMode>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01c      	beq.n	8007730 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80076f6:	f107 0220 	add.w	r2, r7, #32
 80076fa:	f107 0314 	add.w	r3, r7, #20
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	68b8      	ldr	r0, [r7, #8]
 8007704:	f000 fe6e 	bl	80083e4 <xQueueReceiveFromISR>
 8007708:	4603      	mov	r3, r0
 800770a:	2b01      	cmp	r3, #1
 800770c:	d102      	bne.n	8007714 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800770e:	2310      	movs	r3, #16
 8007710:	617b      	str	r3, [r7, #20]
 8007712:	e001      	b.n	8007718 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007714:	2300      	movs	r3, #0
 8007716:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01d      	beq.n	800775a <osMessageGet+0xca>
 800771e:	4b15      	ldr	r3, [pc, #84]	; (8007774 <osMessageGet+0xe4>)
 8007720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007724:	601a      	str	r2, [r3, #0]
 8007726:	f3bf 8f4f 	dsb	sy
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	e014      	b.n	800775a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007730:	f107 0314 	add.w	r3, r7, #20
 8007734:	3304      	adds	r3, #4
 8007736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007738:	4619      	mov	r1, r3
 800773a:	68b8      	ldr	r0, [r7, #8]
 800773c:	f000 fc6e 	bl	800801c <xQueueReceive>
 8007740:	4603      	mov	r3, r0
 8007742:	2b01      	cmp	r3, #1
 8007744:	d102      	bne.n	800774c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007746:	2310      	movs	r3, #16
 8007748:	617b      	str	r3, [r7, #20]
 800774a:	e006      	b.n	800775a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800774c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <osMessageGet+0xc6>
 8007752:	2300      	movs	r3, #0
 8007754:	e000      	b.n	8007758 <osMessageGet+0xc8>
 8007756:	2340      	movs	r3, #64	; 0x40
 8007758:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	461c      	mov	r4, r3
 800775e:	f107 0314 	add.w	r3, r7, #20
 8007762:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	372c      	adds	r7, #44	; 0x2c
 800776e:	46bd      	mov	sp, r7
 8007770:	bd90      	pop	{r4, r7, pc}
 8007772:	bf00      	nop
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f103 0208 	add.w	r2, r3, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f04f 32ff 	mov.w	r2, #4294967295
 8007790:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f103 0208 	add.w	r2, r3, #8
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f103 0208 	add.w	r2, r3, #8
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077d2:	b480      	push	{r7}
 80077d4:	b085      	sub	sp, #20
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	68fa      	ldr	r2, [r7, #12]
 80077e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	1c5a      	adds	r2, r3, #1
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	601a      	str	r2, [r3, #0]
}
 800780e:	bf00      	nop
 8007810:	3714      	adds	r7, #20
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800781a:	b480      	push	{r7}
 800781c:	b085      	sub	sp, #20
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
 8007822:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007830:	d103      	bne.n	800783a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	e00c      	b.n	8007854 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3308      	adds	r3, #8
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	e002      	b.n	8007848 <vListInsert+0x2e>
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	60fb      	str	r3, [r7, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	429a      	cmp	r2, r3
 8007852:	d2f6      	bcs.n	8007842 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	683a      	ldr	r2, [r7, #0]
 800786e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	601a      	str	r2, [r3, #0]
}
 8007880:	bf00      	nop
 8007882:	3714      	adds	r7, #20
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	687a      	ldr	r2, [r7, #4]
 80078a0:	6892      	ldr	r2, [r2, #8]
 80078a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6852      	ldr	r2, [r2, #4]
 80078ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d103      	bne.n	80078c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	1e5a      	subs	r2, r3, #1
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
 80078e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d109      	bne.n	8007908 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80078f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f8:	f383 8811 	msr	BASEPRI, r3
 80078fc:	f3bf 8f6f 	isb	sy
 8007900:	f3bf 8f4f 	dsb	sy
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	e7fe      	b.n	8007906 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007908:	f002 f918 	bl	8009b3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681a      	ldr	r2, [r3, #0]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	441a      	add	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007938:	3b01      	subs	r3, #1
 800793a:	68f9      	ldr	r1, [r7, #12]
 800793c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800793e:	fb01 f303 	mul.w	r3, r1, r3
 8007942:	441a      	add	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	22ff      	movs	r2, #255	; 0xff
 800794c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	22ff      	movs	r2, #255	; 0xff
 8007954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d114      	bne.n	8007988 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d01a      	beq.n	800799c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	3310      	adds	r3, #16
 800796a:	4618      	mov	r0, r3
 800796c:	f001 fb02 	bl	8008f74 <xTaskRemoveFromEventList>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007976:	4b0d      	ldr	r3, [pc, #52]	; (80079ac <xQueueGenericReset+0xcc>)
 8007978:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	f3bf 8f4f 	dsb	sy
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	e009      	b.n	800799c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3310      	adds	r3, #16
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff fef3 	bl	8007778 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3324      	adds	r3, #36	; 0x24
 8007996:	4618      	mov	r0, r3
 8007998:	f7ff feee 	bl	8007778 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800799c:	f002 f8fc 	bl	8009b98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079a0:	2301      	movs	r3, #1
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3710      	adds	r7, #16
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08e      	sub	sp, #56	; 0x38
 80079b4:	af02      	add	r7, sp, #8
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <xQueueGenericCreateStatic+0x28>
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80079d6:	e7fe      	b.n	80079d6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <xQueueGenericCreateStatic+0x42>
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
 80079f0:	e7fe      	b.n	80079f0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <xQueueGenericCreateStatic+0x4e>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <xQueueGenericCreateStatic+0x52>
 80079fe:	2301      	movs	r3, #1
 8007a00:	e000      	b.n	8007a04 <xQueueGenericCreateStatic+0x54>
 8007a02:	2300      	movs	r3, #0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <xQueueGenericCreateStatic+0x6c>
 8007a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0c:	f383 8811 	msr	BASEPRI, r3
 8007a10:	f3bf 8f6f 	isb	sy
 8007a14:	f3bf 8f4f 	dsb	sy
 8007a18:	623b      	str	r3, [r7, #32]
 8007a1a:	e7fe      	b.n	8007a1a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d102      	bne.n	8007a28 <xQueueGenericCreateStatic+0x78>
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <xQueueGenericCreateStatic+0x7c>
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <xQueueGenericCreateStatic+0x7e>
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d109      	bne.n	8007a46 <xQueueGenericCreateStatic+0x96>
 8007a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a36:	f383 8811 	msr	BASEPRI, r3
 8007a3a:	f3bf 8f6f 	isb	sy
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	61fb      	str	r3, [r7, #28]
 8007a44:	e7fe      	b.n	8007a44 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a46:	2348      	movs	r3, #72	; 0x48
 8007a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	2b48      	cmp	r3, #72	; 0x48
 8007a4e:	d009      	beq.n	8007a64 <xQueueGenericCreateStatic+0xb4>
 8007a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a54:	f383 8811 	msr	BASEPRI, r3
 8007a58:	f3bf 8f6f 	isb	sy
 8007a5c:	f3bf 8f4f 	dsb	sy
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	e7fe      	b.n	8007a62 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a64:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00d      	beq.n	8007a8c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a78:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	4613      	mov	r3, r2
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	f000 f844 	bl	8007b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3730      	adds	r7, #48	; 0x30
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}

08007a96 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a96:	b580      	push	{r7, lr}
 8007a98:	b08a      	sub	sp, #40	; 0x28
 8007a9a:	af02      	add	r7, sp, #8
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d109      	bne.n	8007abe <xQueueGenericCreate+0x28>
 8007aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aae:	f383 8811 	msr	BASEPRI, r3
 8007ab2:	f3bf 8f6f 	isb	sy
 8007ab6:	f3bf 8f4f 	dsb	sy
 8007aba:	613b      	str	r3, [r7, #16]
 8007abc:	e7fe      	b.n	8007abc <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	61fb      	str	r3, [r7, #28]
 8007ac8:	e004      	b.n	8007ad4 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	fb02 f303 	mul.w	r3, r2, r3
 8007ad2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	3348      	adds	r3, #72	; 0x48
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f002 f949 	bl	8009d70 <pvPortMalloc>
 8007ade:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d011      	beq.n	8007b0a <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	3348      	adds	r3, #72	; 0x48
 8007aee:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007af0:	69bb      	ldr	r3, [r7, #24]
 8007af2:	2200      	movs	r2, #0
 8007af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007af8:	79fa      	ldrb	r2, [r7, #7]
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	9300      	str	r3, [sp, #0]
 8007afe:	4613      	mov	r3, r2
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	68b9      	ldr	r1, [r7, #8]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f000 f805 	bl	8007b14 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3720      	adds	r7, #32
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d103      	bne.n	8007b30 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	69ba      	ldr	r2, [r7, #24]
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e002      	b.n	8007b36 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b42:	2101      	movs	r1, #1
 8007b44:	69b8      	ldr	r0, [r7, #24]
 8007b46:	f7ff fecb 	bl	80078e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b4a:	bf00      	nop
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b082      	sub	sp, #8
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b72:	2300      	movs	r3, #0
 8007b74:	2200      	movs	r2, #0
 8007b76:	2100      	movs	r1, #0
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f837 	bl	8007bec <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b7e:	bf00      	nop
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}

08007b86 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b86:	b580      	push	{r7, lr}
 8007b88:	b086      	sub	sp, #24
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b90:	2301      	movs	r3, #1
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	2300      	movs	r3, #0
 8007b96:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b98:	79fb      	ldrb	r3, [r7, #7]
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	6939      	ldr	r1, [r7, #16]
 8007b9e:	6978      	ldr	r0, [r7, #20]
 8007ba0:	f7ff ff79 	bl	8007a96 <xQueueGenericCreate>
 8007ba4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f7ff ffd3 	bl	8007b52 <prvInitialiseMutex>

		return xNewQueue;
 8007bac:	68fb      	ldr	r3, [r7, #12]
	}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}

08007bb6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007bb6:	b580      	push	{r7, lr}
 8007bb8:	b088      	sub	sp, #32
 8007bba:	af02      	add	r7, sp, #8
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	6039      	str	r1, [r7, #0]
 8007bc0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	617b      	str	r3, [r7, #20]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	9300      	str	r3, [sp, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	6939      	ldr	r1, [r7, #16]
 8007bd4:	6978      	ldr	r0, [r7, #20]
 8007bd6:	f7ff feeb 	bl	80079b0 <xQueueGenericCreateStatic>
 8007bda:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007bdc:	68f8      	ldr	r0, [r7, #12]
 8007bde:	f7ff ffb8 	bl	8007b52 <prvInitialiseMutex>

		return xNewQueue;
 8007be2:	68fb      	ldr	r3, [r7, #12]
	}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b08e      	sub	sp, #56	; 0x38
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
 8007bf8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d109      	bne.n	8007c1c <xQueueGenericSend+0x30>
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c1a:	e7fe      	b.n	8007c1a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d103      	bne.n	8007c2a <xQueueGenericSend+0x3e>
 8007c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <xQueueGenericSend+0x42>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e000      	b.n	8007c30 <xQueueGenericSend+0x44>
 8007c2e:	2300      	movs	r3, #0
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d109      	bne.n	8007c48 <xQueueGenericSend+0x5c>
 8007c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	627b      	str	r3, [r7, #36]	; 0x24
 8007c46:	e7fe      	b.n	8007c46 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d103      	bne.n	8007c56 <xQueueGenericSend+0x6a>
 8007c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d101      	bne.n	8007c5a <xQueueGenericSend+0x6e>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <xQueueGenericSend+0x70>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d109      	bne.n	8007c74 <xQueueGenericSend+0x88>
 8007c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	623b      	str	r3, [r7, #32]
 8007c72:	e7fe      	b.n	8007c72 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c74:	f001 fb34 	bl	80092e0 <xTaskGetSchedulerState>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d102      	bne.n	8007c84 <xQueueGenericSend+0x98>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d101      	bne.n	8007c88 <xQueueGenericSend+0x9c>
 8007c84:	2301      	movs	r3, #1
 8007c86:	e000      	b.n	8007c8a <xQueueGenericSend+0x9e>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <xQueueGenericSend+0xb6>
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	e7fe      	b.n	8007ca0 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ca2:	f001 ff4b 	bl	8009b3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <xQueueGenericSend+0xcc>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d129      	bne.n	8007d0c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	68b9      	ldr	r1, [r7, #8]
 8007cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cbe:	f000 fc26 	bl	800850e <prvCopyDataToQueue>
 8007cc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d010      	beq.n	8007cee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cce:	3324      	adds	r3, #36	; 0x24
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f94f 	bl	8008f74 <xTaskRemoveFromEventList>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d013      	beq.n	8007d04 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007cdc:	4b3f      	ldr	r3, [pc, #252]	; (8007ddc <xQueueGenericSend+0x1f0>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	e00a      	b.n	8007d04 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007cf4:	4b39      	ldr	r3, [pc, #228]	; (8007ddc <xQueueGenericSend+0x1f0>)
 8007cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfa:	601a      	str	r2, [r3, #0]
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d04:	f001 ff48 	bl	8009b98 <vPortExitCritical>
				return pdPASS;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e063      	b.n	8007dd4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d12:	f001 ff41 	bl	8009b98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d16:	2300      	movs	r3, #0
 8007d18:	e05c      	b.n	8007dd4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d20:	f107 0314 	add.w	r3, r7, #20
 8007d24:	4618      	mov	r0, r3
 8007d26:	f001 f987 	bl	8009038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d2e:	f001 ff33 	bl	8009b98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d32:	f000 ff1d 	bl	8008b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d36:	f001 ff01 	bl	8009b3c <vPortEnterCritical>
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d103      	bne.n	8007d50 <xQueueGenericSend+0x164>
 8007d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d56:	b25b      	sxtb	r3, r3
 8007d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5c:	d103      	bne.n	8007d66 <xQueueGenericSend+0x17a>
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d66:	f001 ff17 	bl	8009b98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d6a:	1d3a      	adds	r2, r7, #4
 8007d6c:	f107 0314 	add.w	r3, r7, #20
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 f976 	bl	8009064 <xTaskCheckForTimeOut>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d124      	bne.n	8007dc8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d80:	f000 fcbd 	bl	80086fe <prvIsQueueFull>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d018      	beq.n	8007dbc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d8c:	3310      	adds	r3, #16
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4611      	mov	r1, r2
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 f8ca 	bl	8008f2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d9a:	f000 fc48 	bl	800862e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d9e:	f000 fef5 	bl	8008b8c <xTaskResumeAll>
 8007da2:	4603      	mov	r3, r0
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f47f af7c 	bne.w	8007ca2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007daa:	4b0c      	ldr	r3, [pc, #48]	; (8007ddc <xQueueGenericSend+0x1f0>)
 8007dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	f3bf 8f6f 	isb	sy
 8007dba:	e772      	b.n	8007ca2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dbe:	f000 fc36 	bl	800862e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dc2:	f000 fee3 	bl	8008b8c <xTaskResumeAll>
 8007dc6:	e76c      	b.n	8007ca2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dca:	f000 fc30 	bl	800862e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dce:	f000 fedd 	bl	8008b8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dd2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3738      	adds	r7, #56	; 0x38
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	e000ed04 	.word	0xe000ed04

08007de0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08e      	sub	sp, #56	; 0x38
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
 8007dec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d109      	bne.n	8007e0c <xQueueGenericSendFromISR+0x2c>
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0a:	e7fe      	b.n	8007e0a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d103      	bne.n	8007e1a <xQueueGenericSendFromISR+0x3a>
 8007e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <xQueueGenericSendFromISR+0x3e>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e000      	b.n	8007e20 <xQueueGenericSendFromISR+0x40>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d109      	bne.n	8007e38 <xQueueGenericSendFromISR+0x58>
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	623b      	str	r3, [r7, #32]
 8007e36:	e7fe      	b.n	8007e36 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d103      	bne.n	8007e46 <xQueueGenericSendFromISR+0x66>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d101      	bne.n	8007e4a <xQueueGenericSendFromISR+0x6a>
 8007e46:	2301      	movs	r3, #1
 8007e48:	e000      	b.n	8007e4c <xQueueGenericSendFromISR+0x6c>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d109      	bne.n	8007e64 <xQueueGenericSendFromISR+0x84>
 8007e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	61fb      	str	r3, [r7, #28]
 8007e62:	e7fe      	b.n	8007e62 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e64:	f001 ff46 	bl	8009cf4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e68:	f3ef 8211 	mrs	r2, BASEPRI
 8007e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e70:	f383 8811 	msr	BASEPRI, r3
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	61ba      	str	r2, [r7, #24]
 8007e7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d302      	bcc.n	8007e96 <xQueueGenericSendFromISR+0xb6>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d12c      	bne.n	8007ef0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	68b9      	ldr	r1, [r7, #8]
 8007ea4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ea6:	f000 fb32 	bl	800850e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007eaa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d112      	bne.n	8007eda <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d016      	beq.n	8007eea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ebe:	3324      	adds	r3, #36	; 0x24
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f001 f857 	bl	8008f74 <xTaskRemoveFromEventList>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e007      	b.n	8007eea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007eda:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ede:	3301      	adds	r3, #1
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	b25a      	sxtb	r2, r3
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007eea:	2301      	movs	r3, #1
 8007eec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007eee:	e001      	b.n	8007ef4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3738      	adds	r7, #56	; 0x38
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08e      	sub	sp, #56	; 0x38
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d109      	bne.n	8007f30 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f20:	f383 8811 	msr	BASEPRI, r3
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	623b      	str	r3, [r7, #32]
 8007f2e:	e7fe      	b.n	8007f2e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d009      	beq.n	8007f4c <xQueueGiveFromISR+0x44>
 8007f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f3c:	f383 8811 	msr	BASEPRI, r3
 8007f40:	f3bf 8f6f 	isb	sy
 8007f44:	f3bf 8f4f 	dsb	sy
 8007f48:	61fb      	str	r3, [r7, #28]
 8007f4a:	e7fe      	b.n	8007f4a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d103      	bne.n	8007f5c <xQueueGiveFromISR+0x54>
 8007f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <xQueueGiveFromISR+0x58>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e000      	b.n	8007f62 <xQueueGiveFromISR+0x5a>
 8007f60:	2300      	movs	r3, #0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d109      	bne.n	8007f7a <xQueueGiveFromISR+0x72>
 8007f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	e7fe      	b.n	8007f78 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f7a:	f001 febb 	bl	8009cf4 <vPortValidateInterruptPriority>
	__asm volatile
 8007f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	617a      	str	r2, [r7, #20]
 8007f94:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007f96:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d22b      	bcs.n	8008002 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d112      	bne.n	8007fec <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d016      	beq.n	8007ffc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	3324      	adds	r3, #36	; 0x24
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 ffce 	bl	8008f74 <xTaskRemoveFromEventList>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00e      	beq.n	8007ffc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	e007      	b.n	8007ffc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	b25a      	sxtb	r2, r3
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	637b      	str	r3, [r7, #52]	; 0x34
 8008000:	e001      	b.n	8008006 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008002:	2300      	movs	r3, #0
 8008004:	637b      	str	r3, [r7, #52]	; 0x34
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008012:	4618      	mov	r0, r3
 8008014:	3738      	adds	r7, #56	; 0x38
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
	...

0800801c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08c      	sub	sp, #48	; 0x30
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008028:	2300      	movs	r3, #0
 800802a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <xQueueReceive+0x2e>
	__asm volatile
 8008036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803a:	f383 8811 	msr	BASEPRI, r3
 800803e:	f3bf 8f6f 	isb	sy
 8008042:	f3bf 8f4f 	dsb	sy
 8008046:	623b      	str	r3, [r7, #32]
 8008048:	e7fe      	b.n	8008048 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d103      	bne.n	8008058 <xQueueReceive+0x3c>
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008054:	2b00      	cmp	r3, #0
 8008056:	d101      	bne.n	800805c <xQueueReceive+0x40>
 8008058:	2301      	movs	r3, #1
 800805a:	e000      	b.n	800805e <xQueueReceive+0x42>
 800805c:	2300      	movs	r3, #0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d109      	bne.n	8008076 <xQueueReceive+0x5a>
 8008062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008066:	f383 8811 	msr	BASEPRI, r3
 800806a:	f3bf 8f6f 	isb	sy
 800806e:	f3bf 8f4f 	dsb	sy
 8008072:	61fb      	str	r3, [r7, #28]
 8008074:	e7fe      	b.n	8008074 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008076:	f001 f933 	bl	80092e0 <xTaskGetSchedulerState>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <xQueueReceive+0x6a>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d101      	bne.n	800808a <xQueueReceive+0x6e>
 8008086:	2301      	movs	r3, #1
 8008088:	e000      	b.n	800808c <xQueueReceive+0x70>
 800808a:	2300      	movs	r3, #0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <xQueueReceive+0x88>
 8008090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008094:	f383 8811 	msr	BASEPRI, r3
 8008098:	f3bf 8f6f 	isb	sy
 800809c:	f3bf 8f4f 	dsb	sy
 80080a0:	61bb      	str	r3, [r7, #24]
 80080a2:	e7fe      	b.n	80080a2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080a4:	f001 fd4a 	bl	8009b3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d01f      	beq.n	80080f4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080b4:	68b9      	ldr	r1, [r7, #8]
 80080b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080b8:	f000 fa93 	bl	80085e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	1e5a      	subs	r2, r3, #1
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00f      	beq.n	80080ec <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	3310      	adds	r3, #16
 80080d0:	4618      	mov	r0, r3
 80080d2:	f000 ff4f 	bl	8008f74 <xTaskRemoveFromEventList>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d007      	beq.n	80080ec <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80080dc:	4b3c      	ldr	r3, [pc, #240]	; (80081d0 <xQueueReceive+0x1b4>)
 80080de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e2:	601a      	str	r2, [r3, #0]
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80080ec:	f001 fd54 	bl	8009b98 <vPortExitCritical>
				return pdPASS;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e069      	b.n	80081c8 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d103      	bne.n	8008102 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80080fa:	f001 fd4d 	bl	8009b98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080fe:	2300      	movs	r3, #0
 8008100:	e062      	b.n	80081c8 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008104:	2b00      	cmp	r3, #0
 8008106:	d106      	bne.n	8008116 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008108:	f107 0310 	add.w	r3, r7, #16
 800810c:	4618      	mov	r0, r3
 800810e:	f000 ff93 	bl	8009038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008112:	2301      	movs	r3, #1
 8008114:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008116:	f001 fd3f 	bl	8009b98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800811a:	f000 fd29 	bl	8008b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800811e:	f001 fd0d 	bl	8009b3c <vPortEnterCritical>
 8008122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008124:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008128:	b25b      	sxtb	r3, r3
 800812a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800812e:	d103      	bne.n	8008138 <xQueueReceive+0x11c>
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	2200      	movs	r2, #0
 8008134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800813e:	b25b      	sxtb	r3, r3
 8008140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008144:	d103      	bne.n	800814e <xQueueReceive+0x132>
 8008146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008148:	2200      	movs	r2, #0
 800814a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800814e:	f001 fd23 	bl	8009b98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008152:	1d3a      	adds	r2, r7, #4
 8008154:	f107 0310 	add.w	r3, r7, #16
 8008158:	4611      	mov	r1, r2
 800815a:	4618      	mov	r0, r3
 800815c:	f000 ff82 	bl	8009064 <xTaskCheckForTimeOut>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d123      	bne.n	80081ae <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008166:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008168:	f000 fab3 	bl	80086d2 <prvIsQueueEmpty>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d017      	beq.n	80081a2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008174:	3324      	adds	r3, #36	; 0x24
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f000 fed6 	bl	8008f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008182:	f000 fa54 	bl	800862e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008186:	f000 fd01 	bl	8008b8c <xTaskResumeAll>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d189      	bne.n	80080a4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008190:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <xQueueReceive+0x1b4>)
 8008192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	f3bf 8f4f 	dsb	sy
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	e780      	b.n	80080a4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081a4:	f000 fa43 	bl	800862e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081a8:	f000 fcf0 	bl	8008b8c <xTaskResumeAll>
 80081ac:	e77a      	b.n	80080a4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b0:	f000 fa3d 	bl	800862e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081b4:	f000 fcea 	bl	8008b8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ba:	f000 fa8a 	bl	80086d2 <prvIsQueueEmpty>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f43f af6f 	beq.w	80080a4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081c6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3730      	adds	r7, #48	; 0x30
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	e000ed04 	.word	0xe000ed04

080081d4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08e      	sub	sp, #56	; 0x38
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80081de:	2300      	movs	r3, #0
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80081e6:	2300      	movs	r3, #0
 80081e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d109      	bne.n	8008204 <xQueueSemaphoreTake+0x30>
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	623b      	str	r3, [r7, #32]
 8008202:	e7fe      	b.n	8008202 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <xQueueSemaphoreTake+0x4c>
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	61fb      	str	r3, [r7, #28]
 800821e:	e7fe      	b.n	800821e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008220:	f001 f85e 	bl	80092e0 <xTaskGetSchedulerState>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d102      	bne.n	8008230 <xQueueSemaphoreTake+0x5c>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d101      	bne.n	8008234 <xQueueSemaphoreTake+0x60>
 8008230:	2301      	movs	r3, #1
 8008232:	e000      	b.n	8008236 <xQueueSemaphoreTake+0x62>
 8008234:	2300      	movs	r3, #0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <xQueueSemaphoreTake+0x7a>
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	61bb      	str	r3, [r7, #24]
 800824c:	e7fe      	b.n	800824c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800824e:	f001 fc75 	bl	8009b3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008256:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800825a:	2b00      	cmp	r3, #0
 800825c:	d024      	beq.n	80082a8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800825e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008260:	1e5a      	subs	r2, r3, #1
 8008262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008264:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d104      	bne.n	8008278 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800826e:	f001 f9f1 	bl	8009654 <pvTaskIncrementMutexHeldCount>
 8008272:	4602      	mov	r2, r0
 8008274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008276:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d00f      	beq.n	80082a0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008282:	3310      	adds	r3, #16
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fe75 	bl	8008f74 <xTaskRemoveFromEventList>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d007      	beq.n	80082a0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008290:	4b53      	ldr	r3, [pc, #332]	; (80083e0 <xQueueSemaphoreTake+0x20c>)
 8008292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008296:	601a      	str	r2, [r3, #0]
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082a0:	f001 fc7a 	bl	8009b98 <vPortExitCritical>
				return pdPASS;
 80082a4:	2301      	movs	r3, #1
 80082a6:	e096      	b.n	80083d6 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d110      	bne.n	80082d0 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d009      	beq.n	80082c8 <xQueueSemaphoreTake+0xf4>
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	f383 8811 	msr	BASEPRI, r3
 80082bc:	f3bf 8f6f 	isb	sy
 80082c0:	f3bf 8f4f 	dsb	sy
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	e7fe      	b.n	80082c6 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80082c8:	f001 fc66 	bl	8009b98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082cc:	2300      	movs	r3, #0
 80082ce:	e082      	b.n	80083d6 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d106      	bne.n	80082e4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082d6:	f107 030c 	add.w	r3, r7, #12
 80082da:	4618      	mov	r0, r3
 80082dc:	f000 feac 	bl	8009038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082e0:	2301      	movs	r3, #1
 80082e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082e4:	f001 fc58 	bl	8009b98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082e8:	f000 fc42 	bl	8008b70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082ec:	f001 fc26 	bl	8009b3c <vPortEnterCritical>
 80082f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082f6:	b25b      	sxtb	r3, r3
 80082f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082fc:	d103      	bne.n	8008306 <xQueueSemaphoreTake+0x132>
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	2200      	movs	r2, #0
 8008302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800830c:	b25b      	sxtb	r3, r3
 800830e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008312:	d103      	bne.n	800831c <xQueueSemaphoreTake+0x148>
 8008314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008316:	2200      	movs	r2, #0
 8008318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800831c:	f001 fc3c 	bl	8009b98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008320:	463a      	mov	r2, r7
 8008322:	f107 030c 	add.w	r3, r7, #12
 8008326:	4611      	mov	r1, r2
 8008328:	4618      	mov	r0, r3
 800832a:	f000 fe9b 	bl	8009064 <xTaskCheckForTimeOut>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d132      	bne.n	800839a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008336:	f000 f9cc 	bl	80086d2 <prvIsQueueEmpty>
 800833a:	4603      	mov	r3, r0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d026      	beq.n	800838e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d109      	bne.n	800835c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8008348:	f001 fbf8 	bl	8009b3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800834c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 ffe3 	bl	800931c <xTaskPriorityInherit>
 8008356:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008358:	f001 fc1e 	bl	8009b98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800835c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835e:	3324      	adds	r3, #36	; 0x24
 8008360:	683a      	ldr	r2, [r7, #0]
 8008362:	4611      	mov	r1, r2
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fde1 	bl	8008f2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800836a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800836c:	f000 f95f 	bl	800862e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008370:	f000 fc0c 	bl	8008b8c <xTaskResumeAll>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	f47f af69 	bne.w	800824e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800837c:	4b18      	ldr	r3, [pc, #96]	; (80083e0 <xQueueSemaphoreTake+0x20c>)
 800837e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008382:	601a      	str	r2, [r3, #0]
 8008384:	f3bf 8f4f 	dsb	sy
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	e75f      	b.n	800824e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800838e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008390:	f000 f94d 	bl	800862e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008394:	f000 fbfa 	bl	8008b8c <xTaskResumeAll>
 8008398:	e759      	b.n	800824e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800839a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800839c:	f000 f947 	bl	800862e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083a0:	f000 fbf4 	bl	8008b8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083a6:	f000 f994 	bl	80086d2 <prvIsQueueEmpty>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	f43f af4e 	beq.w	800824e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00d      	beq.n	80083d4 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80083b8:	f001 fbc0 	bl	8009b3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80083bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083be:	f000 f88e 	bl	80084de <prvGetDisinheritPriorityAfterTimeout>
 80083c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80083c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083ca:	4618      	mov	r0, r3
 80083cc:	f001 f8aa 	bl	8009524 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80083d0:	f001 fbe2 	bl	8009b98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80083d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3738      	adds	r7, #56	; 0x38
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
 80083de:	bf00      	nop
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b08e      	sub	sp, #56	; 0x38
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	60b9      	str	r1, [r7, #8]
 80083ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <xQueueReceiveFromISR+0x2a>
 80083fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	623b      	str	r3, [r7, #32]
 800840c:	e7fe      	b.n	800840c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d103      	bne.n	800841c <xQueueReceiveFromISR+0x38>
 8008414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d101      	bne.n	8008420 <xQueueReceiveFromISR+0x3c>
 800841c:	2301      	movs	r3, #1
 800841e:	e000      	b.n	8008422 <xQueueReceiveFromISR+0x3e>
 8008420:	2300      	movs	r3, #0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d109      	bne.n	800843a <xQueueReceiveFromISR+0x56>
 8008426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	61fb      	str	r3, [r7, #28]
 8008438:	e7fe      	b.n	8008438 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800843a:	f001 fc5b 	bl	8009cf4 <vPortValidateInterruptPriority>
	__asm volatile
 800843e:	f3ef 8211 	mrs	r2, BASEPRI
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	61ba      	str	r2, [r7, #24]
 8008454:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008456:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	2b00      	cmp	r3, #0
 8008464:	d02f      	beq.n	80084c6 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008470:	68b9      	ldr	r1, [r7, #8]
 8008472:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008474:	f000 f8b5 	bl	80085e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	1e5a      	subs	r2, r3, #1
 800847c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008480:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008488:	d112      	bne.n	80084b0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	3310      	adds	r3, #16
 8008496:	4618      	mov	r0, r3
 8008498:	f000 fd6c 	bl	8008f74 <xTaskRemoveFromEventList>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00e      	beq.n	80084c0 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	601a      	str	r2, [r3, #0]
 80084ae:	e007      	b.n	80084c0 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80084b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80084b4:	3301      	adds	r3, #1
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	b25a      	sxtb	r2, r3
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80084c0:	2301      	movs	r3, #1
 80084c2:	637b      	str	r3, [r7, #52]	; 0x34
 80084c4:	e001      	b.n	80084ca <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3738      	adds	r7, #56	; 0x38
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80084de:	b480      	push	{r7}
 80084e0:	b085      	sub	sp, #20
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d006      	beq.n	80084fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f1c3 0307 	rsb	r3, r3, #7
 80084f8:	60fb      	str	r3, [r7, #12]
 80084fa:	e001      	b.n	8008500 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008500:	68fb      	ldr	r3, [r7, #12]
	}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800850e:	b580      	push	{r7, lr}
 8008510:	b086      	sub	sp, #24
 8008512:	af00      	add	r7, sp, #0
 8008514:	60f8      	str	r0, [r7, #12]
 8008516:	60b9      	str	r1, [r7, #8]
 8008518:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008522:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d10d      	bne.n	8008548 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d14d      	bne.n	80085d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	689b      	ldr	r3, [r3, #8]
 8008538:	4618      	mov	r0, r3
 800853a:	f000 ff6f 	bl	800941c <xTaskPriorityDisinherit>
 800853e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	609a      	str	r2, [r3, #8]
 8008546:	e043      	b.n	80085d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d119      	bne.n	8008582 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6858      	ldr	r0, [r3, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	461a      	mov	r2, r3
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	f001 fe03 	bl	800a164 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008566:	441a      	add	r2, r3
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	685a      	ldr	r2, [r3, #4]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	429a      	cmp	r2, r3
 8008576:	d32b      	bcc.n	80085d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	605a      	str	r2, [r3, #4]
 8008580:	e026      	b.n	80085d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68d8      	ldr	r0, [r3, #12]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	461a      	mov	r2, r3
 800858c:	68b9      	ldr	r1, [r7, #8]
 800858e:	f001 fde9 	bl	800a164 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	425b      	negs	r3, r3
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d207      	bcs.n	80085be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	689a      	ldr	r2, [r3, #8]
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	425b      	negs	r3, r3
 80085b8:	441a      	add	r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2b02      	cmp	r3, #2
 80085c2:	d105      	bne.n	80085d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80085c4:	693b      	ldr	r3, [r7, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80085d8:	697b      	ldr	r3, [r7, #20]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b082      	sub	sp, #8
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d018      	beq.n	8008626 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68da      	ldr	r2, [r3, #12]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fc:	441a      	add	r2, r3
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	68da      	ldr	r2, [r3, #12]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	429a      	cmp	r2, r3
 800860c:	d303      	bcc.n	8008616 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	68d9      	ldr	r1, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861e:	461a      	mov	r2, r3
 8008620:	6838      	ldr	r0, [r7, #0]
 8008622:	f001 fd9f 	bl	800a164 <memcpy>
	}
}
 8008626:	bf00      	nop
 8008628:	3708      	adds	r7, #8
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}

0800862e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b084      	sub	sp, #16
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008636:	f001 fa81 	bl	8009b3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008640:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008642:	e011      	b.n	8008668 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008648:	2b00      	cmp	r3, #0
 800864a:	d012      	beq.n	8008672 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3324      	adds	r3, #36	; 0x24
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fc8f 	bl	8008f74 <xTaskRemoveFromEventList>
 8008656:	4603      	mov	r3, r0
 8008658:	2b00      	cmp	r3, #0
 800865a:	d001      	beq.n	8008660 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800865c:	f000 fd62 	bl	8009124 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	3b01      	subs	r3, #1
 8008664:	b2db      	uxtb	r3, r3
 8008666:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800866c:	2b00      	cmp	r3, #0
 800866e:	dce9      	bgt.n	8008644 <prvUnlockQueue+0x16>
 8008670:	e000      	b.n	8008674 <prvUnlockQueue+0x46>
					break;
 8008672:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	22ff      	movs	r2, #255	; 0xff
 8008678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800867c:	f001 fa8c 	bl	8009b98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008680:	f001 fa5c 	bl	8009b3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800868a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800868c:	e011      	b.n	80086b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d012      	beq.n	80086bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	3310      	adds	r3, #16
 800869a:	4618      	mov	r0, r3
 800869c:	f000 fc6a 	bl	8008f74 <xTaskRemoveFromEventList>
 80086a0:	4603      	mov	r3, r0
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d001      	beq.n	80086aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80086a6:	f000 fd3d 	bl	8009124 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80086aa:	7bbb      	ldrb	r3, [r7, #14]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80086b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dce9      	bgt.n	800868e <prvUnlockQueue+0x60>
 80086ba:	e000      	b.n	80086be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80086bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	22ff      	movs	r2, #255	; 0xff
 80086c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80086c6:	f001 fa67 	bl	8009b98 <vPortExitCritical>
}
 80086ca:	bf00      	nop
 80086cc:	3710      	adds	r7, #16
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b084      	sub	sp, #16
 80086d6:	af00      	add	r7, sp, #0
 80086d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80086da:	f001 fa2f 	bl	8009b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d102      	bne.n	80086ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80086e6:	2301      	movs	r3, #1
 80086e8:	60fb      	str	r3, [r7, #12]
 80086ea:	e001      	b.n	80086f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80086ec:	2300      	movs	r3, #0
 80086ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80086f0:	f001 fa52 	bl	8009b98 <vPortExitCritical>

	return xReturn;
 80086f4:	68fb      	ldr	r3, [r7, #12]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008706:	f001 fa19 	bl	8009b3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008712:	429a      	cmp	r2, r3
 8008714:	d102      	bne.n	800871c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008716:	2301      	movs	r3, #1
 8008718:	60fb      	str	r3, [r7, #12]
 800871a:	e001      	b.n	8008720 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800871c:	2300      	movs	r3, #0
 800871e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008720:	f001 fa3a 	bl	8009b98 <vPortExitCritical>

	return xReturn;
 8008724:	68fb      	ldr	r3, [r7, #12]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3710      	adds	r7, #16
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800872e:	b580      	push	{r7, lr}
 8008730:	b08e      	sub	sp, #56	; 0x38
 8008732:	af04      	add	r7, sp, #16
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
 800873a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800873c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873e:	2b00      	cmp	r3, #0
 8008740:	d109      	bne.n	8008756 <xTaskCreateStatic+0x28>
	__asm volatile
 8008742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008746:	f383 8811 	msr	BASEPRI, r3
 800874a:	f3bf 8f6f 	isb	sy
 800874e:	f3bf 8f4f 	dsb	sy
 8008752:	623b      	str	r3, [r7, #32]
 8008754:	e7fe      	b.n	8008754 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	2b00      	cmp	r3, #0
 800875a:	d109      	bne.n	8008770 <xTaskCreateStatic+0x42>
 800875c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008760:	f383 8811 	msr	BASEPRI, r3
 8008764:	f3bf 8f6f 	isb	sy
 8008768:	f3bf 8f4f 	dsb	sy
 800876c:	61fb      	str	r3, [r7, #28]
 800876e:	e7fe      	b.n	800876e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008770:	2354      	movs	r3, #84	; 0x54
 8008772:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	2b54      	cmp	r3, #84	; 0x54
 8008778:	d009      	beq.n	800878e <xTaskCreateStatic+0x60>
 800877a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800877e:	f383 8811 	msr	BASEPRI, r3
 8008782:	f3bf 8f6f 	isb	sy
 8008786:	f3bf 8f4f 	dsb	sy
 800878a:	61bb      	str	r3, [r7, #24]
 800878c:	e7fe      	b.n	800878c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800878e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008792:	2b00      	cmp	r3, #0
 8008794:	d01e      	beq.n	80087d4 <xTaskCreateStatic+0xa6>
 8008796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01b      	beq.n	80087d4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	2202      	movs	r2, #2
 80087aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087ae:	2300      	movs	r3, #0
 80087b0:	9303      	str	r3, [sp, #12]
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	9302      	str	r3, [sp, #8]
 80087b6:	f107 0314 	add.w	r3, r7, #20
 80087ba:	9301      	str	r3, [sp, #4]
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	9300      	str	r3, [sp, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	68b9      	ldr	r1, [r7, #8]
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f000 f850 	bl	800886c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ce:	f000 f8d3 	bl	8008978 <prvAddNewTaskToReadyList>
 80087d2:	e001      	b.n	80087d8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80087d4:	2300      	movs	r3, #0
 80087d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087d8:	697b      	ldr	r3, [r7, #20]
	}
 80087da:	4618      	mov	r0, r3
 80087dc:	3728      	adds	r7, #40	; 0x28
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087e2:	b580      	push	{r7, lr}
 80087e4:	b08c      	sub	sp, #48	; 0x30
 80087e6:	af04      	add	r7, sp, #16
 80087e8:	60f8      	str	r0, [r7, #12]
 80087ea:	60b9      	str	r1, [r7, #8]
 80087ec:	603b      	str	r3, [r7, #0]
 80087ee:	4613      	mov	r3, r2
 80087f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087f2:	88fb      	ldrh	r3, [r7, #6]
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f001 faba 	bl	8009d70 <pvPortMalloc>
 80087fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00e      	beq.n	8008822 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008804:	2054      	movs	r0, #84	; 0x54
 8008806:	f001 fab3 	bl	8009d70 <pvPortMalloc>
 800880a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008812:	69fb      	ldr	r3, [r7, #28]
 8008814:	697a      	ldr	r2, [r7, #20]
 8008816:	631a      	str	r2, [r3, #48]	; 0x30
 8008818:	e005      	b.n	8008826 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800881a:	6978      	ldr	r0, [r7, #20]
 800881c:	f001 fb6a 	bl	8009ef4 <vPortFree>
 8008820:	e001      	b.n	8008826 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d017      	beq.n	800885c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	2200      	movs	r2, #0
 8008830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008834:	88fa      	ldrh	r2, [r7, #6]
 8008836:	2300      	movs	r3, #0
 8008838:	9303      	str	r3, [sp, #12]
 800883a:	69fb      	ldr	r3, [r7, #28]
 800883c:	9302      	str	r3, [sp, #8]
 800883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	68b9      	ldr	r1, [r7, #8]
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 f80e 	bl	800886c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008850:	69f8      	ldr	r0, [r7, #28]
 8008852:	f000 f891 	bl	8008978 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008856:	2301      	movs	r3, #1
 8008858:	61bb      	str	r3, [r7, #24]
 800885a:	e002      	b.n	8008862 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800885c:	f04f 33ff 	mov.w	r3, #4294967295
 8008860:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008862:	69bb      	ldr	r3, [r7, #24]
	}
 8008864:	4618      	mov	r0, r3
 8008866:	3720      	adds	r7, #32
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b088      	sub	sp, #32
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008884:	3b01      	subs	r3, #1
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f023 0307 	bic.w	r3, r3, #7
 8008892:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008894:	69bb      	ldr	r3, [r7, #24]
 8008896:	f003 0307 	and.w	r3, r3, #7
 800889a:	2b00      	cmp	r3, #0
 800889c:	d009      	beq.n	80088b2 <prvInitialiseNewTask+0x46>
 800889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	617b      	str	r3, [r7, #20]
 80088b0:	e7fe      	b.n	80088b0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d01f      	beq.n	80088f8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088b8:	2300      	movs	r3, #0
 80088ba:	61fb      	str	r3, [r7, #28]
 80088bc:	e012      	b.n	80088e4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088be:	68ba      	ldr	r2, [r7, #8]
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	4413      	add	r3, r2
 80088c4:	7819      	ldrb	r1, [r3, #0]
 80088c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c8:	69fb      	ldr	r3, [r7, #28]
 80088ca:	4413      	add	r3, r2
 80088cc:	3334      	adds	r3, #52	; 0x34
 80088ce:	460a      	mov	r2, r1
 80088d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80088d2:	68ba      	ldr	r2, [r7, #8]
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d006      	beq.n	80088ec <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	3301      	adds	r3, #1
 80088e2:	61fb      	str	r3, [r7, #28]
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	2b0f      	cmp	r3, #15
 80088e8:	d9e9      	bls.n	80088be <prvInitialiseNewTask+0x52>
 80088ea:	e000      	b.n	80088ee <prvInitialiseNewTask+0x82>
			{
				break;
 80088ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80088f6:	e003      	b.n	8008900 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80088f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088fa:	2200      	movs	r2, #0
 80088fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008902:	2b06      	cmp	r3, #6
 8008904:	d901      	bls.n	800890a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008906:	2306      	movs	r3, #6
 8008908:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800890a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800890c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008914:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008918:	2200      	movs	r2, #0
 800891a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	3304      	adds	r3, #4
 8008920:	4618      	mov	r0, r3
 8008922:	f7fe ff49 	bl	80077b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	3318      	adds	r3, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe ff44 	bl	80077b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008934:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	f1c3 0207 	rsb	r2, r3, #7
 800893c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008944:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008948:	2200      	movs	r2, #0
 800894a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800894c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894e:	2200      	movs	r2, #0
 8008950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	68f9      	ldr	r1, [r7, #12]
 8008958:	69b8      	ldr	r0, [r7, #24]
 800895a:	f000 ffcb 	bl	80098f4 <pxPortInitialiseStack>
 800895e:	4602      	mov	r2, r0
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008966:	2b00      	cmp	r3, #0
 8008968:	d002      	beq.n	8008970 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800896a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800896e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008970:	bf00      	nop
 8008972:	3720      	adds	r7, #32
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008980:	f001 f8dc 	bl	8009b3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008984:	4b2a      	ldr	r3, [pc, #168]	; (8008a30 <prvAddNewTaskToReadyList+0xb8>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	3301      	adds	r3, #1
 800898a:	4a29      	ldr	r2, [pc, #164]	; (8008a30 <prvAddNewTaskToReadyList+0xb8>)
 800898c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800898e:	4b29      	ldr	r3, [pc, #164]	; (8008a34 <prvAddNewTaskToReadyList+0xbc>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008996:	4a27      	ldr	r2, [pc, #156]	; (8008a34 <prvAddNewTaskToReadyList+0xbc>)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800899c:	4b24      	ldr	r3, [pc, #144]	; (8008a30 <prvAddNewTaskToReadyList+0xb8>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d110      	bne.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089a4:	f000 fbe2 	bl	800916c <prvInitialiseTaskLists>
 80089a8:	e00d      	b.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089aa:	4b23      	ldr	r3, [pc, #140]	; (8008a38 <prvAddNewTaskToReadyList+0xc0>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d109      	bne.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089b2:	4b20      	ldr	r3, [pc, #128]	; (8008a34 <prvAddNewTaskToReadyList+0xbc>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089bc:	429a      	cmp	r2, r3
 80089be:	d802      	bhi.n	80089c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089c0:	4a1c      	ldr	r2, [pc, #112]	; (8008a34 <prvAddNewTaskToReadyList+0xbc>)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089c6:	4b1d      	ldr	r3, [pc, #116]	; (8008a3c <prvAddNewTaskToReadyList+0xc4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3301      	adds	r3, #1
 80089cc:	4a1b      	ldr	r2, [pc, #108]	; (8008a3c <prvAddNewTaskToReadyList+0xc4>)
 80089ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d4:	2201      	movs	r2, #1
 80089d6:	409a      	lsls	r2, r3
 80089d8:	4b19      	ldr	r3, [pc, #100]	; (8008a40 <prvAddNewTaskToReadyList+0xc8>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4313      	orrs	r3, r2
 80089de:	4a18      	ldr	r2, [pc, #96]	; (8008a40 <prvAddNewTaskToReadyList+0xc8>)
 80089e0:	6013      	str	r3, [r2, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	4a15      	ldr	r2, [pc, #84]	; (8008a44 <prvAddNewTaskToReadyList+0xcc>)
 80089f0:	441a      	add	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3304      	adds	r3, #4
 80089f6:	4619      	mov	r1, r3
 80089f8:	4610      	mov	r0, r2
 80089fa:	f7fe feea 	bl	80077d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80089fe:	f001 f8cb 	bl	8009b98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a02:	4b0d      	ldr	r3, [pc, #52]	; (8008a38 <prvAddNewTaskToReadyList+0xc0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00e      	beq.n	8008a28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a0a:	4b0a      	ldr	r3, [pc, #40]	; (8008a34 <prvAddNewTaskToReadyList+0xbc>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d207      	bcs.n	8008a28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a18:	4b0b      	ldr	r3, [pc, #44]	; (8008a48 <prvAddNewTaskToReadyList+0xd0>)
 8008a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a1e:	601a      	str	r2, [r3, #0]
 8008a20:	f3bf 8f4f 	dsb	sy
 8008a24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a28:	bf00      	nop
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	20000534 	.word	0x20000534
 8008a34:	20000434 	.word	0x20000434
 8008a38:	20000540 	.word	0x20000540
 8008a3c:	20000550 	.word	0x20000550
 8008a40:	2000053c 	.word	0x2000053c
 8008a44:	20000438 	.word	0x20000438
 8008a48:	e000ed04 	.word	0xe000ed04

08008a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a54:	2300      	movs	r3, #0
 8008a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d016      	beq.n	8008a8c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a5e:	4b13      	ldr	r3, [pc, #76]	; (8008aac <vTaskDelay+0x60>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d009      	beq.n	8008a7a <vTaskDelay+0x2e>
 8008a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6a:	f383 8811 	msr	BASEPRI, r3
 8008a6e:	f3bf 8f6f 	isb	sy
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	60bb      	str	r3, [r7, #8]
 8008a78:	e7fe      	b.n	8008a78 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008a7a:	f000 f879 	bl	8008b70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a7e:	2100      	movs	r1, #0
 8008a80:	6878      	ldr	r0, [r7, #4]
 8008a82:	f000 fed1 	bl	8009828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a86:	f000 f881 	bl	8008b8c <xTaskResumeAll>
 8008a8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d107      	bne.n	8008aa2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008a92:	4b07      	ldr	r3, [pc, #28]	; (8008ab0 <vTaskDelay+0x64>)
 8008a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aa2:	bf00      	nop
 8008aa4:	3710      	adds	r7, #16
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2000055c 	.word	0x2000055c
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b08a      	sub	sp, #40	; 0x28
 8008ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008ac2:	463a      	mov	r2, r7
 8008ac4:	1d39      	adds	r1, r7, #4
 8008ac6:	f107 0308 	add.w	r3, r7, #8
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f7 fd00 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008ad0:	6839      	ldr	r1, [r7, #0]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	9202      	str	r2, [sp, #8]
 8008ad8:	9301      	str	r3, [sp, #4]
 8008ada:	2300      	movs	r3, #0
 8008adc:	9300      	str	r3, [sp, #0]
 8008ade:	2300      	movs	r3, #0
 8008ae0:	460a      	mov	r2, r1
 8008ae2:	491d      	ldr	r1, [pc, #116]	; (8008b58 <vTaskStartScheduler+0xa4>)
 8008ae4:	481d      	ldr	r0, [pc, #116]	; (8008b5c <vTaskStartScheduler+0xa8>)
 8008ae6:	f7ff fe22 	bl	800872e <xTaskCreateStatic>
 8008aea:	4602      	mov	r2, r0
 8008aec:	4b1c      	ldr	r3, [pc, #112]	; (8008b60 <vTaskStartScheduler+0xac>)
 8008aee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008af0:	4b1b      	ldr	r3, [pc, #108]	; (8008b60 <vTaskStartScheduler+0xac>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008af8:	2301      	movs	r3, #1
 8008afa:	617b      	str	r3, [r7, #20]
 8008afc:	e001      	b.n	8008b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d115      	bne.n	8008b34 <vTaskStartScheduler+0x80>
 8008b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0c:	f383 8811 	msr	BASEPRI, r3
 8008b10:	f3bf 8f6f 	isb	sy
 8008b14:	f3bf 8f4f 	dsb	sy
 8008b18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b1a:	4b12      	ldr	r3, [pc, #72]	; (8008b64 <vTaskStartScheduler+0xb0>)
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b22:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <vTaskStartScheduler+0xb4>)
 8008b24:	2201      	movs	r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b28:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <vTaskStartScheduler+0xb8>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b2e:	f000 ff67 	bl	8009a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b32:	e00d      	b.n	8008b50 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b3a:	d109      	bne.n	8008b50 <vTaskStartScheduler+0x9c>
 8008b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b40:	f383 8811 	msr	BASEPRI, r3
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	60fb      	str	r3, [r7, #12]
 8008b4e:	e7fe      	b.n	8008b4e <vTaskStartScheduler+0x9a>
}
 8008b50:	bf00      	nop
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	0800a32c 	.word	0x0800a32c
 8008b5c:	0800913d 	.word	0x0800913d
 8008b60:	20000558 	.word	0x20000558
 8008b64:	20000554 	.word	0x20000554
 8008b68:	20000540 	.word	0x20000540
 8008b6c:	20000538 	.word	0x20000538

08008b70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b70:	b480      	push	{r7}
 8008b72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008b74:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <vTaskSuspendAll+0x18>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a03      	ldr	r2, [pc, #12]	; (8008b88 <vTaskSuspendAll+0x18>)
 8008b7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008b7e:	bf00      	nop
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	2000055c 	.word	0x2000055c

08008b8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b92:	2300      	movs	r3, #0
 8008b94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b96:	2300      	movs	r3, #0
 8008b98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b9a:	4b41      	ldr	r3, [pc, #260]	; (8008ca0 <xTaskResumeAll+0x114>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d109      	bne.n	8008bb6 <xTaskResumeAll+0x2a>
 8008ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	603b      	str	r3, [r7, #0]
 8008bb4:	e7fe      	b.n	8008bb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008bb6:	f000 ffc1 	bl	8009b3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008bba:	4b39      	ldr	r3, [pc, #228]	; (8008ca0 <xTaskResumeAll+0x114>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	4a37      	ldr	r2, [pc, #220]	; (8008ca0 <xTaskResumeAll+0x114>)
 8008bc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bc4:	4b36      	ldr	r3, [pc, #216]	; (8008ca0 <xTaskResumeAll+0x114>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d161      	bne.n	8008c90 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008bcc:	4b35      	ldr	r3, [pc, #212]	; (8008ca4 <xTaskResumeAll+0x118>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d05d      	beq.n	8008c90 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bd4:	e02e      	b.n	8008c34 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bd6:	4b34      	ldr	r3, [pc, #208]	; (8008ca8 <xTaskResumeAll+0x11c>)
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	3318      	adds	r3, #24
 8008be2:	4618      	mov	r0, r3
 8008be4:	f7fe fe52 	bl	800788c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	3304      	adds	r3, #4
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fe fe4d 	bl	800788c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	409a      	lsls	r2, r3
 8008bfa:	4b2c      	ldr	r3, [pc, #176]	; (8008cac <xTaskResumeAll+0x120>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	4a2a      	ldr	r2, [pc, #168]	; (8008cac <xTaskResumeAll+0x120>)
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c08:	4613      	mov	r3, r2
 8008c0a:	009b      	lsls	r3, r3, #2
 8008c0c:	4413      	add	r3, r2
 8008c0e:	009b      	lsls	r3, r3, #2
 8008c10:	4a27      	ldr	r2, [pc, #156]	; (8008cb0 <xTaskResumeAll+0x124>)
 8008c12:	441a      	add	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3304      	adds	r3, #4
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f7fe fdd9 	bl	80077d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c24:	4b23      	ldr	r3, [pc, #140]	; (8008cb4 <xTaskResumeAll+0x128>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d302      	bcc.n	8008c34 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008c2e:	4b22      	ldr	r3, [pc, #136]	; (8008cb8 <xTaskResumeAll+0x12c>)
 8008c30:	2201      	movs	r2, #1
 8008c32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c34:	4b1c      	ldr	r3, [pc, #112]	; (8008ca8 <xTaskResumeAll+0x11c>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1cc      	bne.n	8008bd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c42:	f000 fb2d 	bl	80092a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008c46:	4b1d      	ldr	r3, [pc, #116]	; (8008cbc <xTaskResumeAll+0x130>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d010      	beq.n	8008c74 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008c52:	f000 f859 	bl	8008d08 <xTaskIncrementTick>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d002      	beq.n	8008c62 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008c5c:	4b16      	ldr	r3, [pc, #88]	; (8008cb8 <xTaskResumeAll+0x12c>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3b01      	subs	r3, #1
 8008c66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1f1      	bne.n	8008c52 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8008c6e:	4b13      	ldr	r3, [pc, #76]	; (8008cbc <xTaskResumeAll+0x130>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c74:	4b10      	ldr	r3, [pc, #64]	; (8008cb8 <xTaskResumeAll+0x12c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d009      	beq.n	8008c90 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c80:	4b0f      	ldr	r3, [pc, #60]	; (8008cc0 <xTaskResumeAll+0x134>)
 8008c82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c86:	601a      	str	r2, [r3, #0]
 8008c88:	f3bf 8f4f 	dsb	sy
 8008c8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c90:	f000 ff82 	bl	8009b98 <vPortExitCritical>

	return xAlreadyYielded;
 8008c94:	68bb      	ldr	r3, [r7, #8]
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	2000055c 	.word	0x2000055c
 8008ca4:	20000534 	.word	0x20000534
 8008ca8:	200004f4 	.word	0x200004f4
 8008cac:	2000053c 	.word	0x2000053c
 8008cb0:	20000438 	.word	0x20000438
 8008cb4:	20000434 	.word	0x20000434
 8008cb8:	20000548 	.word	0x20000548
 8008cbc:	20000544 	.word	0x20000544
 8008cc0:	e000ed04 	.word	0xe000ed04

08008cc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008cca:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <xTaskGetTickCount+0x1c>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008cd0:	687b      	ldr	r3, [r7, #4]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	370c      	adds	r7, #12
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	20000538 	.word	0x20000538

08008ce4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cea:	f001 f803 	bl	8009cf4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008cee:	2300      	movs	r3, #0
 8008cf0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008cf2:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <xTaskGetTickCountFromISR+0x20>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008cf8:	683b      	ldr	r3, [r7, #0]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	20000538 	.word	0x20000538

08008d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b086      	sub	sp, #24
 8008d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d0e:	2300      	movs	r3, #0
 8008d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d12:	4b4e      	ldr	r3, [pc, #312]	; (8008e4c <xTaskIncrementTick+0x144>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f040 8087 	bne.w	8008e2a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d1c:	4b4c      	ldr	r3, [pc, #304]	; (8008e50 <xTaskIncrementTick+0x148>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d24:	4a4a      	ldr	r2, [pc, #296]	; (8008e50 <xTaskIncrementTick+0x148>)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d11f      	bne.n	8008d70 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d30:	4b48      	ldr	r3, [pc, #288]	; (8008e54 <xTaskIncrementTick+0x14c>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <xTaskIncrementTick+0x46>
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	603b      	str	r3, [r7, #0]
 8008d4c:	e7fe      	b.n	8008d4c <xTaskIncrementTick+0x44>
 8008d4e:	4b41      	ldr	r3, [pc, #260]	; (8008e54 <xTaskIncrementTick+0x14c>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	60fb      	str	r3, [r7, #12]
 8008d54:	4b40      	ldr	r3, [pc, #256]	; (8008e58 <xTaskIncrementTick+0x150>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a3e      	ldr	r2, [pc, #248]	; (8008e54 <xTaskIncrementTick+0x14c>)
 8008d5a:	6013      	str	r3, [r2, #0]
 8008d5c:	4a3e      	ldr	r2, [pc, #248]	; (8008e58 <xTaskIncrementTick+0x150>)
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6013      	str	r3, [r2, #0]
 8008d62:	4b3e      	ldr	r3, [pc, #248]	; (8008e5c <xTaskIncrementTick+0x154>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	3301      	adds	r3, #1
 8008d68:	4a3c      	ldr	r2, [pc, #240]	; (8008e5c <xTaskIncrementTick+0x154>)
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	f000 fa98 	bl	80092a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008d70:	4b3b      	ldr	r3, [pc, #236]	; (8008e60 <xTaskIncrementTick+0x158>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d348      	bcc.n	8008e0c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d7a:	4b36      	ldr	r3, [pc, #216]	; (8008e54 <xTaskIncrementTick+0x14c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d104      	bne.n	8008d8e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d84:	4b36      	ldr	r3, [pc, #216]	; (8008e60 <xTaskIncrementTick+0x158>)
 8008d86:	f04f 32ff 	mov.w	r2, #4294967295
 8008d8a:	601a      	str	r2, [r3, #0]
					break;
 8008d8c:	e03e      	b.n	8008e0c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d8e:	4b31      	ldr	r3, [pc, #196]	; (8008e54 <xTaskIncrementTick+0x14c>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d9e:	693a      	ldr	r2, [r7, #16]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d203      	bcs.n	8008dae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008da6:	4a2e      	ldr	r2, [pc, #184]	; (8008e60 <xTaskIncrementTick+0x158>)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dac:	e02e      	b.n	8008e0c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	3304      	adds	r3, #4
 8008db2:	4618      	mov	r0, r3
 8008db4:	f7fe fd6a 	bl	800788c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d004      	beq.n	8008dca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	3318      	adds	r3, #24
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fe fd61 	bl	800788c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dce:	2201      	movs	r2, #1
 8008dd0:	409a      	lsls	r2, r3
 8008dd2:	4b24      	ldr	r3, [pc, #144]	; (8008e64 <xTaskIncrementTick+0x15c>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	4a22      	ldr	r2, [pc, #136]	; (8008e64 <xTaskIncrementTick+0x15c>)
 8008dda:	6013      	str	r3, [r2, #0]
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de0:	4613      	mov	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	4413      	add	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4a1f      	ldr	r2, [pc, #124]	; (8008e68 <xTaskIncrementTick+0x160>)
 8008dea:	441a      	add	r2, r3
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	3304      	adds	r3, #4
 8008df0:	4619      	mov	r1, r3
 8008df2:	4610      	mov	r0, r2
 8008df4:	f7fe fced 	bl	80077d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfc:	4b1b      	ldr	r3, [pc, #108]	; (8008e6c <xTaskIncrementTick+0x164>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d3b9      	bcc.n	8008d7a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e0a:	e7b6      	b.n	8008d7a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e0c:	4b17      	ldr	r3, [pc, #92]	; (8008e6c <xTaskIncrementTick+0x164>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e12:	4915      	ldr	r1, [pc, #84]	; (8008e68 <xTaskIncrementTick+0x160>)
 8008e14:	4613      	mov	r3, r2
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d907      	bls.n	8008e34 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8008e24:	2301      	movs	r3, #1
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e004      	b.n	8008e34 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008e2a:	4b11      	ldr	r3, [pc, #68]	; (8008e70 <xTaskIncrementTick+0x168>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	4a0f      	ldr	r2, [pc, #60]	; (8008e70 <xTaskIncrementTick+0x168>)
 8008e32:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008e34:	4b0f      	ldr	r3, [pc, #60]	; (8008e74 <xTaskIncrementTick+0x16c>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d001      	beq.n	8008e40 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008e40:	697b      	ldr	r3, [r7, #20]
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3718      	adds	r7, #24
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop
 8008e4c:	2000055c 	.word	0x2000055c
 8008e50:	20000538 	.word	0x20000538
 8008e54:	200004ec 	.word	0x200004ec
 8008e58:	200004f0 	.word	0x200004f0
 8008e5c:	2000054c 	.word	0x2000054c
 8008e60:	20000554 	.word	0x20000554
 8008e64:	2000053c 	.word	0x2000053c
 8008e68:	20000438 	.word	0x20000438
 8008e6c:	20000434 	.word	0x20000434
 8008e70:	20000544 	.word	0x20000544
 8008e74:	20000548 	.word	0x20000548

08008e78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e7e:	4b26      	ldr	r3, [pc, #152]	; (8008f18 <vTaskSwitchContext+0xa0>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008e86:	4b25      	ldr	r3, [pc, #148]	; (8008f1c <vTaskSwitchContext+0xa4>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008e8c:	e03e      	b.n	8008f0c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008e8e:	4b23      	ldr	r3, [pc, #140]	; (8008f1c <vTaskSwitchContext+0xa4>)
 8008e90:	2200      	movs	r2, #0
 8008e92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e94:	4b22      	ldr	r3, [pc, #136]	; (8008f20 <vTaskSwitchContext+0xa8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	fab3 f383 	clz	r3, r3
 8008ea0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	f1c3 031f 	rsb	r3, r3, #31
 8008ea8:	617b      	str	r3, [r7, #20]
 8008eaa:	491e      	ldr	r1, [pc, #120]	; (8008f24 <vTaskSwitchContext+0xac>)
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4413      	add	r3, r2
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	440b      	add	r3, r1
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	607b      	str	r3, [r7, #4]
 8008ed0:	e7fe      	b.n	8008ed0 <vTaskSwitchContext+0x58>
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	4413      	add	r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4a11      	ldr	r2, [pc, #68]	; (8008f24 <vTaskSwitchContext+0xac>)
 8008ede:	4413      	add	r3, r2
 8008ee0:	613b      	str	r3, [r7, #16]
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	685a      	ldr	r2, [r3, #4]
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	605a      	str	r2, [r3, #4]
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	3308      	adds	r3, #8
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d104      	bne.n	8008f02 <vTaskSwitchContext+0x8a>
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	685a      	ldr	r2, [r3, #4]
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	605a      	str	r2, [r3, #4]
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	4a07      	ldr	r2, [pc, #28]	; (8008f28 <vTaskSwitchContext+0xb0>)
 8008f0a:	6013      	str	r3, [r2, #0]
}
 8008f0c:	bf00      	nop
 8008f0e:	371c      	adds	r7, #28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	2000055c 	.word	0x2000055c
 8008f1c:	20000548 	.word	0x20000548
 8008f20:	2000053c 	.word	0x2000053c
 8008f24:	20000438 	.word	0x20000438
 8008f28:	20000434 	.word	0x20000434

08008f2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
 8008f34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d109      	bne.n	8008f50 <vTaskPlaceOnEventList+0x24>
 8008f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f40:	f383 8811 	msr	BASEPRI, r3
 8008f44:	f3bf 8f6f 	isb	sy
 8008f48:	f3bf 8f4f 	dsb	sy
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	e7fe      	b.n	8008f4e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f50:	4b07      	ldr	r3, [pc, #28]	; (8008f70 <vTaskPlaceOnEventList+0x44>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	3318      	adds	r3, #24
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fe fc5e 	bl	800781a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f5e:	2101      	movs	r1, #1
 8008f60:	6838      	ldr	r0, [r7, #0]
 8008f62:	f000 fc61 	bl	8009828 <prvAddCurrentTaskToDelayedList>
}
 8008f66:	bf00      	nop
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	20000434 	.word	0x20000434

08008f74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	68db      	ldr	r3, [r3, #12]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d109      	bne.n	8008f9e <xTaskRemoveFromEventList+0x2a>
 8008f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8e:	f383 8811 	msr	BASEPRI, r3
 8008f92:	f3bf 8f6f 	isb	sy
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	e7fe      	b.n	8008f9c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	3318      	adds	r3, #24
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7fe fc72 	bl	800788c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa8:	4b1d      	ldr	r3, [pc, #116]	; (8009020 <xTaskRemoveFromEventList+0xac>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d11c      	bne.n	8008fea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008fb0:	693b      	ldr	r3, [r7, #16]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fc69 	bl	800788c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	409a      	lsls	r2, r3
 8008fc2:	4b18      	ldr	r3, [pc, #96]	; (8009024 <xTaskRemoveFromEventList+0xb0>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	4a16      	ldr	r2, [pc, #88]	; (8009024 <xTaskRemoveFromEventList+0xb0>)
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	4a13      	ldr	r2, [pc, #76]	; (8009028 <xTaskRemoveFromEventList+0xb4>)
 8008fda:	441a      	add	r2, r3
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	3304      	adds	r3, #4
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fe fbf5 	bl	80077d2 <vListInsertEnd>
 8008fe8:	e005      	b.n	8008ff6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	3318      	adds	r3, #24
 8008fee:	4619      	mov	r1, r3
 8008ff0:	480e      	ldr	r0, [pc, #56]	; (800902c <xTaskRemoveFromEventList+0xb8>)
 8008ff2:	f7fe fbee 	bl	80077d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	; (8009030 <xTaskRemoveFromEventList+0xbc>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009000:	429a      	cmp	r2, r3
 8009002:	d905      	bls.n	8009010 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009004:	2301      	movs	r3, #1
 8009006:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009008:	4b0a      	ldr	r3, [pc, #40]	; (8009034 <xTaskRemoveFromEventList+0xc0>)
 800900a:	2201      	movs	r2, #1
 800900c:	601a      	str	r2, [r3, #0]
 800900e:	e001      	b.n	8009014 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8009010:	2300      	movs	r3, #0
 8009012:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009014:	697b      	ldr	r3, [r7, #20]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop
 8009020:	2000055c 	.word	0x2000055c
 8009024:	2000053c 	.word	0x2000053c
 8009028:	20000438 	.word	0x20000438
 800902c:	200004f4 	.word	0x200004f4
 8009030:	20000434 	.word	0x20000434
 8009034:	20000548 	.word	0x20000548

08009038 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009040:	4b06      	ldr	r3, [pc, #24]	; (800905c <vTaskInternalSetTimeOutState+0x24>)
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009048:	4b05      	ldr	r3, [pc, #20]	; (8009060 <vTaskInternalSetTimeOutState+0x28>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	605a      	str	r2, [r3, #4]
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr
 800905c:	2000054c 	.word	0x2000054c
 8009060:	20000538 	.word	0x20000538

08009064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d109      	bne.n	8009088 <xTaskCheckForTimeOut+0x24>
 8009074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009078:	f383 8811 	msr	BASEPRI, r3
 800907c:	f3bf 8f6f 	isb	sy
 8009080:	f3bf 8f4f 	dsb	sy
 8009084:	613b      	str	r3, [r7, #16]
 8009086:	e7fe      	b.n	8009086 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d109      	bne.n	80090a2 <xTaskCheckForTimeOut+0x3e>
 800908e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	60fb      	str	r3, [r7, #12]
 80090a0:	e7fe      	b.n	80090a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80090a2:	f000 fd4b 	bl	8009b3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80090a6:	4b1d      	ldr	r3, [pc, #116]	; (800911c <xTaskCheckForTimeOut+0xb8>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	69ba      	ldr	r2, [r7, #24]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090be:	d102      	bne.n	80090c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80090c0:	2300      	movs	r3, #0
 80090c2:	61fb      	str	r3, [r7, #28]
 80090c4:	e023      	b.n	800910e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	4b15      	ldr	r3, [pc, #84]	; (8009120 <xTaskCheckForTimeOut+0xbc>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d007      	beq.n	80090e2 <xTaskCheckForTimeOut+0x7e>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	69ba      	ldr	r2, [r7, #24]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d302      	bcc.n	80090e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80090dc:	2301      	movs	r3, #1
 80090de:	61fb      	str	r3, [r7, #28]
 80090e0:	e015      	b.n	800910e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d20b      	bcs.n	8009104 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	681a      	ldr	r2, [r3, #0]
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	1ad2      	subs	r2, r2, r3
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff ff9d 	bl	8009038 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80090fe:	2300      	movs	r3, #0
 8009100:	61fb      	str	r3, [r7, #28]
 8009102:	e004      	b.n	800910e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2200      	movs	r2, #0
 8009108:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800910a:	2301      	movs	r3, #1
 800910c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800910e:	f000 fd43 	bl	8009b98 <vPortExitCritical>

	return xReturn;
 8009112:	69fb      	ldr	r3, [r7, #28]
}
 8009114:	4618      	mov	r0, r3
 8009116:	3720      	adds	r7, #32
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	20000538 	.word	0x20000538
 8009120:	2000054c 	.word	0x2000054c

08009124 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009128:	4b03      	ldr	r3, [pc, #12]	; (8009138 <vTaskMissedYield+0x14>)
 800912a:	2201      	movs	r2, #1
 800912c:	601a      	str	r2, [r3, #0]
}
 800912e:	bf00      	nop
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20000548 	.word	0x20000548

0800913c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009144:	f000 f852 	bl	80091ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009148:	4b06      	ldr	r3, [pc, #24]	; (8009164 <prvIdleTask+0x28>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d9f9      	bls.n	8009144 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <prvIdleTask+0x2c>)
 8009152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009156:	601a      	str	r2, [r3, #0]
 8009158:	f3bf 8f4f 	dsb	sy
 800915c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009160:	e7f0      	b.n	8009144 <prvIdleTask+0x8>
 8009162:	bf00      	nop
 8009164:	20000438 	.word	0x20000438
 8009168:	e000ed04 	.word	0xe000ed04

0800916c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009172:	2300      	movs	r3, #0
 8009174:	607b      	str	r3, [r7, #4]
 8009176:	e00c      	b.n	8009192 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	4413      	add	r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4a12      	ldr	r2, [pc, #72]	; (80091cc <prvInitialiseTaskLists+0x60>)
 8009184:	4413      	add	r3, r2
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe faf6 	bl	8007778 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3301      	adds	r3, #1
 8009190:	607b      	str	r3, [r7, #4]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2b06      	cmp	r3, #6
 8009196:	d9ef      	bls.n	8009178 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009198:	480d      	ldr	r0, [pc, #52]	; (80091d0 <prvInitialiseTaskLists+0x64>)
 800919a:	f7fe faed 	bl	8007778 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800919e:	480d      	ldr	r0, [pc, #52]	; (80091d4 <prvInitialiseTaskLists+0x68>)
 80091a0:	f7fe faea 	bl	8007778 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80091a4:	480c      	ldr	r0, [pc, #48]	; (80091d8 <prvInitialiseTaskLists+0x6c>)
 80091a6:	f7fe fae7 	bl	8007778 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80091aa:	480c      	ldr	r0, [pc, #48]	; (80091dc <prvInitialiseTaskLists+0x70>)
 80091ac:	f7fe fae4 	bl	8007778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80091b0:	480b      	ldr	r0, [pc, #44]	; (80091e0 <prvInitialiseTaskLists+0x74>)
 80091b2:	f7fe fae1 	bl	8007778 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <prvInitialiseTaskLists+0x78>)
 80091b8:	4a05      	ldr	r2, [pc, #20]	; (80091d0 <prvInitialiseTaskLists+0x64>)
 80091ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80091bc:	4b0a      	ldr	r3, [pc, #40]	; (80091e8 <prvInitialiseTaskLists+0x7c>)
 80091be:	4a05      	ldr	r2, [pc, #20]	; (80091d4 <prvInitialiseTaskLists+0x68>)
 80091c0:	601a      	str	r2, [r3, #0]
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20000438 	.word	0x20000438
 80091d0:	200004c4 	.word	0x200004c4
 80091d4:	200004d8 	.word	0x200004d8
 80091d8:	200004f4 	.word	0x200004f4
 80091dc:	20000508 	.word	0x20000508
 80091e0:	20000520 	.word	0x20000520
 80091e4:	200004ec 	.word	0x200004ec
 80091e8:	200004f0 	.word	0x200004f0

080091ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80091f2:	e019      	b.n	8009228 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80091f4:	f000 fca2 	bl	8009b3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <prvCheckTasksWaitingTermination+0x4c>)
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	68db      	ldr	r3, [r3, #12]
 80091fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	4618      	mov	r0, r3
 8009206:	f7fe fb41 	bl	800788c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <prvCheckTasksWaitingTermination+0x50>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3b01      	subs	r3, #1
 8009210:	4a0a      	ldr	r2, [pc, #40]	; (800923c <prvCheckTasksWaitingTermination+0x50>)
 8009212:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009214:	4b0a      	ldr	r3, [pc, #40]	; (8009240 <prvCheckTasksWaitingTermination+0x54>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	3b01      	subs	r3, #1
 800921a:	4a09      	ldr	r2, [pc, #36]	; (8009240 <prvCheckTasksWaitingTermination+0x54>)
 800921c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800921e:	f000 fcbb 	bl	8009b98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f80e 	bl	8009244 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <prvCheckTasksWaitingTermination+0x54>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d1e1      	bne.n	80091f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009230:	bf00      	nop
 8009232:	3708      	adds	r7, #8
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}
 8009238:	20000508 	.word	0x20000508
 800923c:	20000534 	.word	0x20000534
 8009240:	2000051c 	.word	0x2000051c

08009244 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009244:	b580      	push	{r7, lr}
 8009246:	b084      	sub	sp, #16
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009252:	2b00      	cmp	r3, #0
 8009254:	d108      	bne.n	8009268 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800925a:	4618      	mov	r0, r3
 800925c:	f000 fe4a 	bl	8009ef4 <vPortFree>
				vPortFree( pxTCB );
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 fe47 	bl	8009ef4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009266:	e017      	b.n	8009298 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800926e:	2b01      	cmp	r3, #1
 8009270:	d103      	bne.n	800927a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fe3e 	bl	8009ef4 <vPortFree>
	}
 8009278:	e00e      	b.n	8009298 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009280:	2b02      	cmp	r3, #2
 8009282:	d009      	beq.n	8009298 <prvDeleteTCB+0x54>
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	60fb      	str	r3, [r7, #12]
 8009296:	e7fe      	b.n	8009296 <prvDeleteTCB+0x52>
	}
 8009298:	bf00      	nop
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a6:	4b0c      	ldr	r3, [pc, #48]	; (80092d8 <prvResetNextTaskUnblockTime+0x38>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d104      	bne.n	80092ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80092b0:	4b0a      	ldr	r3, [pc, #40]	; (80092dc <prvResetNextTaskUnblockTime+0x3c>)
 80092b2:	f04f 32ff 	mov.w	r2, #4294967295
 80092b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80092b8:	e008      	b.n	80092cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092ba:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <prvResetNextTaskUnblockTime+0x38>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68db      	ldr	r3, [r3, #12]
 80092c0:	68db      	ldr	r3, [r3, #12]
 80092c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	4a04      	ldr	r2, [pc, #16]	; (80092dc <prvResetNextTaskUnblockTime+0x3c>)
 80092ca:	6013      	str	r3, [r2, #0]
}
 80092cc:	bf00      	nop
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	200004ec 	.word	0x200004ec
 80092dc:	20000554 	.word	0x20000554

080092e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80092e6:	4b0b      	ldr	r3, [pc, #44]	; (8009314 <xTaskGetSchedulerState+0x34>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d102      	bne.n	80092f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80092ee:	2301      	movs	r3, #1
 80092f0:	607b      	str	r3, [r7, #4]
 80092f2:	e008      	b.n	8009306 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092f4:	4b08      	ldr	r3, [pc, #32]	; (8009318 <xTaskGetSchedulerState+0x38>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80092fc:	2302      	movs	r3, #2
 80092fe:	607b      	str	r3, [r7, #4]
 8009300:	e001      	b.n	8009306 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009302:	2300      	movs	r3, #0
 8009304:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009306:	687b      	ldr	r3, [r7, #4]
	}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr
 8009314:	20000540 	.word	0x20000540
 8009318:	2000055c 	.word	0x2000055c

0800931c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d069      	beq.n	8009406 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009336:	4b36      	ldr	r3, [pc, #216]	; (8009410 <xTaskPriorityInherit+0xf4>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800933c:	429a      	cmp	r2, r3
 800933e:	d259      	bcs.n	80093f4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	2b00      	cmp	r3, #0
 8009346:	db06      	blt.n	8009356 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009348:	4b31      	ldr	r3, [pc, #196]	; (8009410 <xTaskPriorityInherit+0xf4>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	f1c3 0207 	rsb	r2, r3, #7
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	6959      	ldr	r1, [r3, #20]
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800935e:	4613      	mov	r3, r2
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4a2b      	ldr	r2, [pc, #172]	; (8009414 <xTaskPriorityInherit+0xf8>)
 8009368:	4413      	add	r3, r2
 800936a:	4299      	cmp	r1, r3
 800936c:	d13a      	bne.n	80093e4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	3304      	adds	r3, #4
 8009372:	4618      	mov	r0, r3
 8009374:	f7fe fa8a 	bl	800788c <uxListRemove>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d115      	bne.n	80093aa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009382:	4924      	ldr	r1, [pc, #144]	; (8009414 <xTaskPriorityInherit+0xf8>)
 8009384:	4613      	mov	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	440b      	add	r3, r1
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <xTaskPriorityInherit+0x8e>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009398:	2201      	movs	r2, #1
 800939a:	fa02 f303 	lsl.w	r3, r2, r3
 800939e:	43da      	mvns	r2, r3
 80093a0:	4b1d      	ldr	r3, [pc, #116]	; (8009418 <xTaskPriorityInherit+0xfc>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4013      	ands	r3, r2
 80093a6:	4a1c      	ldr	r2, [pc, #112]	; (8009418 <xTaskPriorityInherit+0xfc>)
 80093a8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093aa:	4b19      	ldr	r3, [pc, #100]	; (8009410 <xTaskPriorityInherit+0xf4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	2201      	movs	r2, #1
 80093ba:	409a      	lsls	r2, r3
 80093bc:	4b16      	ldr	r3, [pc, #88]	; (8009418 <xTaskPriorityInherit+0xfc>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	4a15      	ldr	r2, [pc, #84]	; (8009418 <xTaskPriorityInherit+0xfc>)
 80093c4:	6013      	str	r3, [r2, #0]
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ca:	4613      	mov	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4a10      	ldr	r2, [pc, #64]	; (8009414 <xTaskPriorityInherit+0xf8>)
 80093d4:	441a      	add	r2, r3
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	3304      	adds	r3, #4
 80093da:	4619      	mov	r1, r3
 80093dc:	4610      	mov	r0, r2
 80093de:	f7fe f9f8 	bl	80077d2 <vListInsertEnd>
 80093e2:	e004      	b.n	80093ee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80093e4:	4b0a      	ldr	r3, [pc, #40]	; (8009410 <xTaskPriorityInherit+0xf4>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80093ee:	2301      	movs	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]
 80093f2:	e008      	b.n	8009406 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093f8:	4b05      	ldr	r3, [pc, #20]	; (8009410 <xTaskPriorityInherit+0xf4>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fe:	429a      	cmp	r2, r3
 8009400:	d201      	bcs.n	8009406 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009402:	2301      	movs	r3, #1
 8009404:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009406:	68fb      	ldr	r3, [r7, #12]
	}
 8009408:	4618      	mov	r0, r3
 800940a:	3710      	adds	r7, #16
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	20000434 	.word	0x20000434
 8009414:	20000438 	.word	0x20000438
 8009418:	2000053c 	.word	0x2000053c

0800941c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d06c      	beq.n	800950c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009432:	4b39      	ldr	r3, [pc, #228]	; (8009518 <xTaskPriorityDisinherit+0xfc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	429a      	cmp	r2, r3
 800943a:	d009      	beq.n	8009450 <xTaskPriorityDisinherit+0x34>
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	e7fe      	b.n	800944e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009454:	2b00      	cmp	r3, #0
 8009456:	d109      	bne.n	800946c <xTaskPriorityDisinherit+0x50>
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	f383 8811 	msr	BASEPRI, r3
 8009460:	f3bf 8f6f 	isb	sy
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	60bb      	str	r3, [r7, #8]
 800946a:	e7fe      	b.n	800946a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009470:	1e5a      	subs	r2, r3, #1
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800947e:	429a      	cmp	r2, r3
 8009480:	d044      	beq.n	800950c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009486:	2b00      	cmp	r3, #0
 8009488:	d140      	bne.n	800950c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	3304      	adds	r3, #4
 800948e:	4618      	mov	r0, r3
 8009490:	f7fe f9fc 	bl	800788c <uxListRemove>
 8009494:	4603      	mov	r3, r0
 8009496:	2b00      	cmp	r3, #0
 8009498:	d115      	bne.n	80094c6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949e:	491f      	ldr	r1, [pc, #124]	; (800951c <xTaskPriorityDisinherit+0x100>)
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	440b      	add	r3, r1
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d10a      	bne.n	80094c6 <xTaskPriorityDisinherit+0xaa>
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	2201      	movs	r2, #1
 80094b6:	fa02 f303 	lsl.w	r3, r2, r3
 80094ba:	43da      	mvns	r2, r3
 80094bc:	4b18      	ldr	r3, [pc, #96]	; (8009520 <xTaskPriorityDisinherit+0x104>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4013      	ands	r3, r2
 80094c2:	4a17      	ldr	r2, [pc, #92]	; (8009520 <xTaskPriorityDisinherit+0x104>)
 80094c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094d2:	f1c3 0207 	rsb	r2, r3, #7
 80094d6:	693b      	ldr	r3, [r7, #16]
 80094d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80094da:	693b      	ldr	r3, [r7, #16]
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	2201      	movs	r2, #1
 80094e0:	409a      	lsls	r2, r3
 80094e2:	4b0f      	ldr	r3, [pc, #60]	; (8009520 <xTaskPriorityDisinherit+0x104>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4313      	orrs	r3, r2
 80094e8:	4a0d      	ldr	r2, [pc, #52]	; (8009520 <xTaskPriorityDisinherit+0x104>)
 80094ea:	6013      	str	r3, [r2, #0]
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f0:	4613      	mov	r3, r2
 80094f2:	009b      	lsls	r3, r3, #2
 80094f4:	4413      	add	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4a08      	ldr	r2, [pc, #32]	; (800951c <xTaskPriorityDisinherit+0x100>)
 80094fa:	441a      	add	r2, r3
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fe f965 	bl	80077d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800950c:	697b      	ldr	r3, [r7, #20]
	}
 800950e:	4618      	mov	r0, r3
 8009510:	3718      	adds	r7, #24
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	20000434 	.word	0x20000434
 800951c:	20000438 	.word	0x20000438
 8009520:	2000053c 	.word	0x2000053c

08009524 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009524:	b580      	push	{r7, lr}
 8009526:	b088      	sub	sp, #32
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009532:	2301      	movs	r3, #1
 8009534:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	f000 8081 	beq.w	8009640 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009542:	2b00      	cmp	r3, #0
 8009544:	d109      	bne.n	800955a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8009546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954a:	f383 8811 	msr	BASEPRI, r3
 800954e:	f3bf 8f6f 	isb	sy
 8009552:	f3bf 8f4f 	dsb	sy
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	e7fe      	b.n	8009558 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800955e:	683a      	ldr	r2, [r7, #0]
 8009560:	429a      	cmp	r2, r3
 8009562:	d902      	bls.n	800956a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	61fb      	str	r3, [r7, #28]
 8009568:	e002      	b.n	8009570 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	429a      	cmp	r2, r3
 8009578:	d062      	beq.n	8009640 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800957a:	69bb      	ldr	r3, [r7, #24]
 800957c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	429a      	cmp	r2, r3
 8009582:	d15d      	bne.n	8009640 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009584:	4b30      	ldr	r3, [pc, #192]	; (8009648 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69ba      	ldr	r2, [r7, #24]
 800958a:	429a      	cmp	r2, r3
 800958c:	d109      	bne.n	80095a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60bb      	str	r3, [r7, #8]
 80095a0:	e7fe      	b.n	80095a0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	db04      	blt.n	80095c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	f1c3 0207 	rsb	r2, r3, #7
 80095bc:	69bb      	ldr	r3, [r7, #24]
 80095be:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	6959      	ldr	r1, [r3, #20]
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	4a1f      	ldr	r2, [pc, #124]	; (800964c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80095d0:	4413      	add	r3, r2
 80095d2:	4299      	cmp	r1, r3
 80095d4:	d134      	bne.n	8009640 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	3304      	adds	r3, #4
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe f956 	bl	800788c <uxListRemove>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d115      	bne.n	8009612 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095ea:	4918      	ldr	r1, [pc, #96]	; (800964c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80095ec:	4613      	mov	r3, r2
 80095ee:	009b      	lsls	r3, r3, #2
 80095f0:	4413      	add	r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10a      	bne.n	8009612 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	2201      	movs	r2, #1
 8009602:	fa02 f303 	lsl.w	r3, r2, r3
 8009606:	43da      	mvns	r2, r3
 8009608:	4b11      	ldr	r3, [pc, #68]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4013      	ands	r3, r2
 800960e:	4a10      	ldr	r2, [pc, #64]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009610:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	2201      	movs	r2, #1
 8009618:	409a      	lsls	r2, r3
 800961a:	4b0d      	ldr	r3, [pc, #52]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4313      	orrs	r3, r2
 8009620:	4a0b      	ldr	r2, [pc, #44]	; (8009650 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009622:	6013      	str	r3, [r2, #0]
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009628:	4613      	mov	r3, r2
 800962a:	009b      	lsls	r3, r3, #2
 800962c:	4413      	add	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4a06      	ldr	r2, [pc, #24]	; (800964c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009632:	441a      	add	r2, r3
 8009634:	69bb      	ldr	r3, [r7, #24]
 8009636:	3304      	adds	r3, #4
 8009638:	4619      	mov	r1, r3
 800963a:	4610      	mov	r0, r2
 800963c:	f7fe f8c9 	bl	80077d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009640:	bf00      	nop
 8009642:	3720      	adds	r7, #32
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}
 8009648:	20000434 	.word	0x20000434
 800964c:	20000438 	.word	0x20000438
 8009650:	2000053c 	.word	0x2000053c

08009654 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009658:	4b07      	ldr	r3, [pc, #28]	; (8009678 <pvTaskIncrementMutexHeldCount+0x24>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d004      	beq.n	800966a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009660:	4b05      	ldr	r3, [pc, #20]	; (8009678 <pvTaskIncrementMutexHeldCount+0x24>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009666:	3201      	adds	r2, #1
 8009668:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800966a:	4b03      	ldr	r3, [pc, #12]	; (8009678 <pvTaskIncrementMutexHeldCount+0x24>)
 800966c:	681b      	ldr	r3, [r3, #0]
	}
 800966e:	4618      	mov	r0, r3
 8009670:	46bd      	mov	sp, r7
 8009672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009676:	4770      	bx	lr
 8009678:	20000434 	.word	0x20000434

0800967c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009686:	f000 fa59 	bl	8009b3c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800968a:	4b1e      	ldr	r3, [pc, #120]	; (8009704 <ulTaskNotifyTake+0x88>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009690:	2b00      	cmp	r3, #0
 8009692:	d113      	bne.n	80096bc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009694:	4b1b      	ldr	r3, [pc, #108]	; (8009704 <ulTaskNotifyTake+0x88>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00b      	beq.n	80096bc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096a4:	2101      	movs	r1, #1
 80096a6:	6838      	ldr	r0, [r7, #0]
 80096a8:	f000 f8be 	bl	8009828 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80096ac:	4b16      	ldr	r3, [pc, #88]	; (8009708 <ulTaskNotifyTake+0x8c>)
 80096ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096b2:	601a      	str	r2, [r3, #0]
 80096b4:	f3bf 8f4f 	dsb	sy
 80096b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80096bc:	f000 fa6c 	bl	8009b98 <vPortExitCritical>

		taskENTER_CRITICAL();
 80096c0:	f000 fa3c 	bl	8009b3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80096c4:	4b0f      	ldr	r3, [pc, #60]	; (8009704 <ulTaskNotifyTake+0x88>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ca:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00c      	beq.n	80096ec <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80096d8:	4b0a      	ldr	r3, [pc, #40]	; (8009704 <ulTaskNotifyTake+0x88>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	2200      	movs	r2, #0
 80096de:	64da      	str	r2, [r3, #76]	; 0x4c
 80096e0:	e004      	b.n	80096ec <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80096e2:	4b08      	ldr	r3, [pc, #32]	; (8009704 <ulTaskNotifyTake+0x88>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	3a01      	subs	r2, #1
 80096ea:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80096ec:	4b05      	ldr	r3, [pc, #20]	; (8009704 <ulTaskNotifyTake+0x88>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80096f6:	f000 fa4f 	bl	8009b98 <vPortExitCritical>

		return ulReturn;
 80096fa:	68fb      	ldr	r3, [r7, #12]
	}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3710      	adds	r7, #16
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20000434 	.word	0x20000434
 8009708:	e000ed04 	.word	0xe000ed04

0800970c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800970c:	b580      	push	{r7, lr}
 800970e:	b08a      	sub	sp, #40	; 0x28
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d109      	bne.n	8009730 <vTaskNotifyGiveFromISR+0x24>
 800971c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009720:	f383 8811 	msr	BASEPRI, r3
 8009724:	f3bf 8f6f 	isb	sy
 8009728:	f3bf 8f4f 	dsb	sy
 800972c:	61bb      	str	r3, [r7, #24]
 800972e:	e7fe      	b.n	800972e <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009730:	f000 fae0 	bl	8009cf4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009738:	f3ef 8211 	mrs	r2, BASEPRI
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	f383 8811 	msr	BASEPRI, r3
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	f3bf 8f4f 	dsb	sy
 800974c:	617a      	str	r2, [r7, #20]
 800974e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009750:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009752:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800975a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	2202      	movs	r2, #2
 8009760:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800976c:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800976e:	7ffb      	ldrb	r3, [r7, #31]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d144      	bne.n	80097fe <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009778:	2b00      	cmp	r3, #0
 800977a:	d009      	beq.n	8009790 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 800977c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009780:	f383 8811 	msr	BASEPRI, r3
 8009784:	f3bf 8f6f 	isb	sy
 8009788:	f3bf 8f4f 	dsb	sy
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	e7fe      	b.n	800978e <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009790:	4b1f      	ldr	r3, [pc, #124]	; (8009810 <vTaskNotifyGiveFromISR+0x104>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d11c      	bne.n	80097d2 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	3304      	adds	r3, #4
 800979c:	4618      	mov	r0, r3
 800979e:	f7fe f875 	bl	800788c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a6:	2201      	movs	r2, #1
 80097a8:	409a      	lsls	r2, r3
 80097aa:	4b1a      	ldr	r3, [pc, #104]	; (8009814 <vTaskNotifyGiveFromISR+0x108>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	4a18      	ldr	r2, [pc, #96]	; (8009814 <vTaskNotifyGiveFromISR+0x108>)
 80097b2:	6013      	str	r3, [r2, #0]
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097b8:	4613      	mov	r3, r2
 80097ba:	009b      	lsls	r3, r3, #2
 80097bc:	4413      	add	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4a15      	ldr	r2, [pc, #84]	; (8009818 <vTaskNotifyGiveFromISR+0x10c>)
 80097c2:	441a      	add	r2, r3
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	3304      	adds	r3, #4
 80097c8:	4619      	mov	r1, r3
 80097ca:	4610      	mov	r0, r2
 80097cc:	f7fe f801 	bl	80077d2 <vListInsertEnd>
 80097d0:	e005      	b.n	80097de <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	3318      	adds	r3, #24
 80097d6:	4619      	mov	r1, r3
 80097d8:	4810      	ldr	r0, [pc, #64]	; (800981c <vTaskNotifyGiveFromISR+0x110>)
 80097da:	f7fd fffa 	bl	80077d2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <vTaskNotifyGiveFromISR+0x114>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d908      	bls.n	80097fe <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	2201      	movs	r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80097f8:	4b0a      	ldr	r3, [pc, #40]	; (8009824 <vTaskNotifyGiveFromISR+0x118>)
 80097fa:	2201      	movs	r2, #1
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	6a3b      	ldr	r3, [r7, #32]
 8009800:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009808:	bf00      	nop
 800980a:	3728      	adds	r7, #40	; 0x28
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	2000055c 	.word	0x2000055c
 8009814:	2000053c 	.word	0x2000053c
 8009818:	20000438 	.word	0x20000438
 800981c:	200004f4 	.word	0x200004f4
 8009820:	20000434 	.word	0x20000434
 8009824:	20000548 	.word	0x20000548

08009828 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009832:	4b29      	ldr	r3, [pc, #164]	; (80098d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009838:	4b28      	ldr	r3, [pc, #160]	; (80098dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	3304      	adds	r3, #4
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe f824 	bl	800788c <uxListRemove>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800984a:	4b24      	ldr	r3, [pc, #144]	; (80098dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009850:	2201      	movs	r2, #1
 8009852:	fa02 f303 	lsl.w	r3, r2, r3
 8009856:	43da      	mvns	r2, r3
 8009858:	4b21      	ldr	r3, [pc, #132]	; (80098e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4013      	ands	r3, r2
 800985e:	4a20      	ldr	r2, [pc, #128]	; (80098e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009860:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009868:	d10a      	bne.n	8009880 <prvAddCurrentTaskToDelayedList+0x58>
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d007      	beq.n	8009880 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009870:	4b1a      	ldr	r3, [pc, #104]	; (80098dc <prvAddCurrentTaskToDelayedList+0xb4>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	3304      	adds	r3, #4
 8009876:	4619      	mov	r1, r3
 8009878:	481a      	ldr	r0, [pc, #104]	; (80098e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800987a:	f7fd ffaa 	bl	80077d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800987e:	e026      	b.n	80098ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4413      	add	r3, r2
 8009886:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009888:	4b14      	ldr	r3, [pc, #80]	; (80098dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	429a      	cmp	r2, r3
 8009896:	d209      	bcs.n	80098ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009898:	4b13      	ldr	r3, [pc, #76]	; (80098e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	4b0f      	ldr	r3, [pc, #60]	; (80098dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3304      	adds	r3, #4
 80098a2:	4619      	mov	r1, r3
 80098a4:	4610      	mov	r0, r2
 80098a6:	f7fd ffb8 	bl	800781a <vListInsert>
}
 80098aa:	e010      	b.n	80098ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ac:	4b0f      	ldr	r3, [pc, #60]	; (80098ec <prvAddCurrentTaskToDelayedList+0xc4>)
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	4b0a      	ldr	r3, [pc, #40]	; (80098dc <prvAddCurrentTaskToDelayedList+0xb4>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f7fd ffae 	bl	800781a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098be:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68ba      	ldr	r2, [r7, #8]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d202      	bcs.n	80098ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80098c8:	4a09      	ldr	r2, [pc, #36]	; (80098f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	6013      	str	r3, [r2, #0]
}
 80098ce:	bf00      	nop
 80098d0:	3710      	adds	r7, #16
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}
 80098d6:	bf00      	nop
 80098d8:	20000538 	.word	0x20000538
 80098dc:	20000434 	.word	0x20000434
 80098e0:	2000053c 	.word	0x2000053c
 80098e4:	20000520 	.word	0x20000520
 80098e8:	200004f0 	.word	0x200004f0
 80098ec:	200004ec 	.word	0x200004ec
 80098f0:	20000554 	.word	0x20000554

080098f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	60b9      	str	r1, [r7, #8]
 80098fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	3b04      	subs	r3, #4
 8009904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800990c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	3b04      	subs	r3, #4
 8009912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	f023 0201 	bic.w	r2, r3, #1
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3b04      	subs	r3, #4
 8009922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009924:	4a0c      	ldr	r2, [pc, #48]	; (8009958 <pxPortInitialiseStack+0x64>)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b14      	subs	r3, #20
 800992e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3b04      	subs	r3, #4
 800993a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f06f 0202 	mvn.w	r2, #2
 8009942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	3b20      	subs	r3, #32
 8009948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800994a:	68fb      	ldr	r3, [r7, #12]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	0800995d 	.word	0x0800995d

0800995c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800995c:	b480      	push	{r7}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009962:	2300      	movs	r3, #0
 8009964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009966:	4b11      	ldr	r3, [pc, #68]	; (80099ac <prvTaskExitError+0x50>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996e:	d009      	beq.n	8009984 <prvTaskExitError+0x28>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e7fe      	b.n	8009982 <prvTaskExitError+0x26>
 8009984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009988:	f383 8811 	msr	BASEPRI, r3
 800998c:	f3bf 8f6f 	isb	sy
 8009990:	f3bf 8f4f 	dsb	sy
 8009994:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009996:	bf00      	nop
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d0fc      	beq.n	8009998 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800999e:	bf00      	nop
 80099a0:	3714      	adds	r7, #20
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	2000000c 	.word	0x2000000c

080099b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80099b0:	4b07      	ldr	r3, [pc, #28]	; (80099d0 <pxCurrentTCBConst2>)
 80099b2:	6819      	ldr	r1, [r3, #0]
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f380 8809 	msr	PSP, r0
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8811 	msr	BASEPRI, r0
 80099ca:	4770      	bx	lr
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst2>:
 80099d0:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80099d8:	4808      	ldr	r0, [pc, #32]	; (80099fc <prvPortStartFirstTask+0x24>)
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	6800      	ldr	r0, [r0, #0]
 80099de:	f380 8808 	msr	MSP, r0
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8814 	msr	CONTROL, r0
 80099ea:	b662      	cpsie	i
 80099ec:	b661      	cpsie	f
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	df00      	svc	0
 80099f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80099fa:	bf00      	nop
 80099fc:	e000ed08 	.word	0xe000ed08

08009a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a06:	4b44      	ldr	r3, [pc, #272]	; (8009b18 <xPortStartScheduler+0x118>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a44      	ldr	r2, [pc, #272]	; (8009b1c <xPortStartScheduler+0x11c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d109      	bne.n	8009a24 <xPortStartScheduler+0x24>
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	613b      	str	r3, [r7, #16]
 8009a22:	e7fe      	b.n	8009a22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a24:	4b3c      	ldr	r3, [pc, #240]	; (8009b18 <xPortStartScheduler+0x118>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	4a3d      	ldr	r2, [pc, #244]	; (8009b20 <xPortStartScheduler+0x120>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d109      	bne.n	8009a42 <xPortStartScheduler+0x42>
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	e7fe      	b.n	8009a40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a42:	4b38      	ldr	r3, [pc, #224]	; (8009b24 <xPortStartScheduler+0x124>)
 8009a44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	22ff      	movs	r2, #255	; 0xff
 8009a52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	781b      	ldrb	r3, [r3, #0]
 8009a58:	b2db      	uxtb	r3, r3
 8009a5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a5c:	78fb      	ldrb	r3, [r7, #3]
 8009a5e:	b2db      	uxtb	r3, r3
 8009a60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009a64:	b2da      	uxtb	r2, r3
 8009a66:	4b30      	ldr	r3, [pc, #192]	; (8009b28 <xPortStartScheduler+0x128>)
 8009a68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a6a:	4b30      	ldr	r3, [pc, #192]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009a6c:	2207      	movs	r2, #7
 8009a6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a70:	e009      	b.n	8009a86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009a72:	4b2e      	ldr	r3, [pc, #184]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	4a2c      	ldr	r2, [pc, #176]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009a7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a7c:	78fb      	ldrb	r3, [r7, #3]
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	005b      	lsls	r3, r3, #1
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a86:	78fb      	ldrb	r3, [r7, #3]
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a8e:	2b80      	cmp	r3, #128	; 0x80
 8009a90:	d0ef      	beq.n	8009a72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a92:	4b26      	ldr	r3, [pc, #152]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f1c3 0307 	rsb	r3, r3, #7
 8009a9a:	2b04      	cmp	r3, #4
 8009a9c:	d009      	beq.n	8009ab2 <xPortStartScheduler+0xb2>
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60bb      	str	r3, [r7, #8]
 8009ab0:	e7fe      	b.n	8009ab0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ab2:	4b1e      	ldr	r3, [pc, #120]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	4a1c      	ldr	r2, [pc, #112]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009aba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009abc:	4b1b      	ldr	r3, [pc, #108]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ac4:	4a19      	ldr	r2, [pc, #100]	; (8009b2c <xPortStartScheduler+0x12c>)
 8009ac6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	b2da      	uxtb	r2, r3
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009ad0:	4b17      	ldr	r3, [pc, #92]	; (8009b30 <xPortStartScheduler+0x130>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a16      	ldr	r2, [pc, #88]	; (8009b30 <xPortStartScheduler+0x130>)
 8009ad6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009ada:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009adc:	4b14      	ldr	r3, [pc, #80]	; (8009b30 <xPortStartScheduler+0x130>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a13      	ldr	r2, [pc, #76]	; (8009b30 <xPortStartScheduler+0x130>)
 8009ae2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009ae6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009ae8:	f000 f8d6 	bl	8009c98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009aec:	4b11      	ldr	r3, [pc, #68]	; (8009b34 <xPortStartScheduler+0x134>)
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009af2:	f000 f8f5 	bl	8009ce0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009af6:	4b10      	ldr	r3, [pc, #64]	; (8009b38 <xPortStartScheduler+0x138>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a0f      	ldr	r2, [pc, #60]	; (8009b38 <xPortStartScheduler+0x138>)
 8009afc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b02:	f7ff ff69 	bl	80099d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b06:	f7ff f9b7 	bl	8008e78 <vTaskSwitchContext>
	prvTaskExitError();
 8009b0a:	f7ff ff27 	bl	800995c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	e000ed00 	.word	0xe000ed00
 8009b1c:	410fc271 	.word	0x410fc271
 8009b20:	410fc270 	.word	0x410fc270
 8009b24:	e000e400 	.word	0xe000e400
 8009b28:	20000560 	.word	0x20000560
 8009b2c:	20000564 	.word	0x20000564
 8009b30:	e000ed20 	.word	0xe000ed20
 8009b34:	2000000c 	.word	0x2000000c
 8009b38:	e000ef34 	.word	0xe000ef34

08009b3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b46:	f383 8811 	msr	BASEPRI, r3
 8009b4a:	f3bf 8f6f 	isb	sy
 8009b4e:	f3bf 8f4f 	dsb	sy
 8009b52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b54:	4b0e      	ldr	r3, [pc, #56]	; (8009b90 <vPortEnterCritical+0x54>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	4a0d      	ldr	r2, [pc, #52]	; (8009b90 <vPortEnterCritical+0x54>)
 8009b5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b5e:	4b0c      	ldr	r3, [pc, #48]	; (8009b90 <vPortEnterCritical+0x54>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d10e      	bne.n	8009b84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b66:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <vPortEnterCritical+0x58>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d009      	beq.n	8009b84 <vPortEnterCritical+0x48>
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	603b      	str	r3, [r7, #0]
 8009b82:	e7fe      	b.n	8009b82 <vPortEnterCritical+0x46>
	}
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	2000000c 	.word	0x2000000c
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b9e:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <vPortExitCritical+0x4c>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d109      	bne.n	8009bba <vPortExitCritical+0x22>
 8009ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009baa:	f383 8811 	msr	BASEPRI, r3
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f3bf 8f4f 	dsb	sy
 8009bb6:	607b      	str	r3, [r7, #4]
 8009bb8:	e7fe      	b.n	8009bb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009bba:	4b0a      	ldr	r3, [pc, #40]	; (8009be4 <vPortExitCritical+0x4c>)
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	3b01      	subs	r3, #1
 8009bc0:	4a08      	ldr	r2, [pc, #32]	; (8009be4 <vPortExitCritical+0x4c>)
 8009bc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009bc4:	4b07      	ldr	r3, [pc, #28]	; (8009be4 <vPortExitCritical+0x4c>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d104      	bne.n	8009bd6 <vPortExitCritical+0x3e>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009bd6:	bf00      	nop
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	2000000c 	.word	0x2000000c
	...

08009bf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bf0:	f3ef 8009 	mrs	r0, PSP
 8009bf4:	f3bf 8f6f 	isb	sy
 8009bf8:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <pxCurrentTCBConst>)
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	f01e 0f10 	tst.w	lr, #16
 8009c00:	bf08      	it	eq
 8009c02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c0a:	6010      	str	r0, [r2, #0]
 8009c0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c14:	f380 8811 	msr	BASEPRI, r0
 8009c18:	f3bf 8f4f 	dsb	sy
 8009c1c:	f3bf 8f6f 	isb	sy
 8009c20:	f7ff f92a 	bl	8008e78 <vTaskSwitchContext>
 8009c24:	f04f 0000 	mov.w	r0, #0
 8009c28:	f380 8811 	msr	BASEPRI, r0
 8009c2c:	bc09      	pop	{r0, r3}
 8009c2e:	6819      	ldr	r1, [r3, #0]
 8009c30:	6808      	ldr	r0, [r1, #0]
 8009c32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c36:	f01e 0f10 	tst.w	lr, #16
 8009c3a:	bf08      	it	eq
 8009c3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c40:	f380 8809 	msr	PSP, r0
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	f3af 8000 	nop.w

08009c50 <pxCurrentTCBConst>:
 8009c50:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop

08009c58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c62:	f383 8811 	msr	BASEPRI, r3
 8009c66:	f3bf 8f6f 	isb	sy
 8009c6a:	f3bf 8f4f 	dsb	sy
 8009c6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c70:	f7ff f84a 	bl	8008d08 <xTaskIncrementTick>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c7a:	4b06      	ldr	r3, [pc, #24]	; (8009c94 <SysTick_Handler+0x3c>)
 8009c7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c80:	601a      	str	r2, [r3, #0]
 8009c82:	2300      	movs	r3, #0
 8009c84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	e000ed04 	.word	0xe000ed04

08009c98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <vPortSetupTimerInterrupt+0x34>)
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ca2:	4b0b      	ldr	r3, [pc, #44]	; (8009cd0 <vPortSetupTimerInterrupt+0x38>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ca8:	4b0a      	ldr	r3, [pc, #40]	; (8009cd4 <vPortSetupTimerInterrupt+0x3c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a0a      	ldr	r2, [pc, #40]	; (8009cd8 <vPortSetupTimerInterrupt+0x40>)
 8009cae:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb2:	099b      	lsrs	r3, r3, #6
 8009cb4:	4a09      	ldr	r2, [pc, #36]	; (8009cdc <vPortSetupTimerInterrupt+0x44>)
 8009cb6:	3b01      	subs	r3, #1
 8009cb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cba:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <vPortSetupTimerInterrupt+0x34>)
 8009cbc:	2207      	movs	r2, #7
 8009cbe:	601a      	str	r2, [r3, #0]
}
 8009cc0:	bf00      	nop
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	e000e010 	.word	0xe000e010
 8009cd0:	e000e018 	.word	0xe000e018
 8009cd4:	20000000 	.word	0x20000000
 8009cd8:	10624dd3 	.word	0x10624dd3
 8009cdc:	e000e014 	.word	0xe000e014

08009ce0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ce0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009cf0 <vPortEnableVFP+0x10>
 8009ce4:	6801      	ldr	r1, [r0, #0]
 8009ce6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009cea:	6001      	str	r1, [r0, #0]
 8009cec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009cee:	bf00      	nop
 8009cf0:	e000ed88 	.word	0xe000ed88

08009cf4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009cfa:	f3ef 8305 	mrs	r3, IPSR
 8009cfe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b0f      	cmp	r3, #15
 8009d04:	d913      	bls.n	8009d2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d06:	4a16      	ldr	r2, [pc, #88]	; (8009d60 <vPortValidateInterruptPriority+0x6c>)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d10:	4b14      	ldr	r3, [pc, #80]	; (8009d64 <vPortValidateInterruptPriority+0x70>)
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	7afa      	ldrb	r2, [r7, #11]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d209      	bcs.n	8009d2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	f383 8811 	msr	BASEPRI, r3
 8009d22:	f3bf 8f6f 	isb	sy
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	607b      	str	r3, [r7, #4]
 8009d2c:	e7fe      	b.n	8009d2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d2e:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <vPortValidateInterruptPriority+0x74>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <vPortValidateInterruptPriority+0x78>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	429a      	cmp	r2, r3
 8009d3c:	d909      	bls.n	8009d52 <vPortValidateInterruptPriority+0x5e>
 8009d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d42:	f383 8811 	msr	BASEPRI, r3
 8009d46:	f3bf 8f6f 	isb	sy
 8009d4a:	f3bf 8f4f 	dsb	sy
 8009d4e:	603b      	str	r3, [r7, #0]
 8009d50:	e7fe      	b.n	8009d50 <vPortValidateInterruptPriority+0x5c>
	}
 8009d52:	bf00      	nop
 8009d54:	3714      	adds	r7, #20
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	e000e3f0 	.word	0xe000e3f0
 8009d64:	20000560 	.word	0x20000560
 8009d68:	e000ed0c 	.word	0xe000ed0c
 8009d6c:	20000564 	.word	0x20000564

08009d70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b08a      	sub	sp, #40	; 0x28
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009d7c:	f7fe fef8 	bl	8008b70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d80:	4b57      	ldr	r3, [pc, #348]	; (8009ee0 <pvPortMalloc+0x170>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d101      	bne.n	8009d8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d88:	f000 f90c 	bl	8009fa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d8c:	4b55      	ldr	r3, [pc, #340]	; (8009ee4 <pvPortMalloc+0x174>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	4013      	ands	r3, r2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f040 808c 	bne.w	8009eb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01c      	beq.n	8009dda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009da0:	2208      	movs	r2, #8
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	4413      	add	r3, r2
 8009da6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f003 0307 	and.w	r3, r3, #7
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d013      	beq.n	8009dda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f023 0307 	bic.w	r3, r3, #7
 8009db8:	3308      	adds	r3, #8
 8009dba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f003 0307 	and.w	r3, r3, #7
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d009      	beq.n	8009dda <pvPortMalloc+0x6a>
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	617b      	str	r3, [r7, #20]
 8009dd8:	e7fe      	b.n	8009dd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d068      	beq.n	8009eb2 <pvPortMalloc+0x142>
 8009de0:	4b41      	ldr	r3, [pc, #260]	; (8009ee8 <pvPortMalloc+0x178>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d863      	bhi.n	8009eb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009dea:	4b40      	ldr	r3, [pc, #256]	; (8009eec <pvPortMalloc+0x17c>)
 8009dec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009dee:	4b3f      	ldr	r3, [pc, #252]	; (8009eec <pvPortMalloc+0x17c>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009df4:	e004      	b.n	8009e00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	687a      	ldr	r2, [r7, #4]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d903      	bls.n	8009e12 <pvPortMalloc+0xa2>
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f1      	bne.n	8009df6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e12:	4b33      	ldr	r3, [pc, #204]	; (8009ee0 <pvPortMalloc+0x170>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d04a      	beq.n	8009eb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2208      	movs	r2, #8
 8009e22:	4413      	add	r3, r2
 8009e24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	6a3b      	ldr	r3, [r7, #32]
 8009e2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	1ad2      	subs	r2, r2, r3
 8009e36:	2308      	movs	r3, #8
 8009e38:	005b      	lsls	r3, r3, #1
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d91e      	bls.n	8009e7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	4413      	add	r3, r2
 8009e44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f003 0307 	and.w	r3, r3, #7
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d009      	beq.n	8009e64 <pvPortMalloc+0xf4>
 8009e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	613b      	str	r3, [r7, #16]
 8009e62:	e7fe      	b.n	8009e62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	685a      	ldr	r2, [r3, #4]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	1ad2      	subs	r2, r2, r3
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e76:	69b8      	ldr	r0, [r7, #24]
 8009e78:	f000 f8f6 	bl	800a068 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e7c:	4b1a      	ldr	r3, [pc, #104]	; (8009ee8 <pvPortMalloc+0x178>)
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	4a18      	ldr	r2, [pc, #96]	; (8009ee8 <pvPortMalloc+0x178>)
 8009e88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e8a:	4b17      	ldr	r3, [pc, #92]	; (8009ee8 <pvPortMalloc+0x178>)
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b18      	ldr	r3, [pc, #96]	; (8009ef0 <pvPortMalloc+0x180>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d203      	bcs.n	8009e9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e96:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <pvPortMalloc+0x178>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a15      	ldr	r2, [pc, #84]	; (8009ef0 <pvPortMalloc+0x180>)
 8009e9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	685a      	ldr	r2, [r3, #4]
 8009ea2:	4b10      	ldr	r3, [pc, #64]	; (8009ee4 <pvPortMalloc+0x174>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009eb2:	f7fe fe6b 	bl	8008b8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	f003 0307 	and.w	r3, r3, #7
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d009      	beq.n	8009ed4 <pvPortMalloc+0x164>
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	60fb      	str	r3, [r7, #12]
 8009ed2:	e7fe      	b.n	8009ed2 <pvPortMalloc+0x162>
	return pvReturn;
 8009ed4:	69fb      	ldr	r3, [r7, #28]
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3728      	adds	r7, #40	; 0x28
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	20004170 	.word	0x20004170
 8009ee4:	2000417c 	.word	0x2000417c
 8009ee8:	20004174 	.word	0x20004174
 8009eec:	20004168 	.word	0x20004168
 8009ef0:	20004178 	.word	0x20004178

08009ef4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d046      	beq.n	8009f94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f06:	2308      	movs	r3, #8
 8009f08:	425b      	negs	r3, r3
 8009f0a:	697a      	ldr	r2, [r7, #20]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	4b20      	ldr	r3, [pc, #128]	; (8009f9c <vPortFree+0xa8>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d109      	bne.n	8009f36 <vPortFree+0x42>
 8009f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f26:	f383 8811 	msr	BASEPRI, r3
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	f3bf 8f4f 	dsb	sy
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	e7fe      	b.n	8009f34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d009      	beq.n	8009f52 <vPortFree+0x5e>
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	f383 8811 	msr	BASEPRI, r3
 8009f46:	f3bf 8f6f 	isb	sy
 8009f4a:	f3bf 8f4f 	dsb	sy
 8009f4e:	60bb      	str	r3, [r7, #8]
 8009f50:	e7fe      	b.n	8009f50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	4b11      	ldr	r3, [pc, #68]	; (8009f9c <vPortFree+0xa8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d019      	beq.n	8009f94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d115      	bne.n	8009f94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	685a      	ldr	r2, [r3, #4]
 8009f6c:	4b0b      	ldr	r3, [pc, #44]	; (8009f9c <vPortFree+0xa8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	43db      	mvns	r3, r3
 8009f72:	401a      	ands	r2, r3
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009f78:	f7fe fdfa 	bl	8008b70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	4b07      	ldr	r3, [pc, #28]	; (8009fa0 <vPortFree+0xac>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4413      	add	r3, r2
 8009f86:	4a06      	ldr	r2, [pc, #24]	; (8009fa0 <vPortFree+0xac>)
 8009f88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009f8a:	6938      	ldr	r0, [r7, #16]
 8009f8c:	f000 f86c 	bl	800a068 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009f90:	f7fe fdfc 	bl	8008b8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009f94:	bf00      	nop
 8009f96:	3718      	adds	r7, #24
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	2000417c 	.word	0x2000417c
 8009fa0:	20004174 	.word	0x20004174

08009fa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009faa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009fae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009fb0:	4b27      	ldr	r3, [pc, #156]	; (800a050 <prvHeapInit+0xac>)
 8009fb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00c      	beq.n	8009fd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	3307      	adds	r3, #7
 8009fc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f023 0307 	bic.w	r3, r3, #7
 8009fca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009fcc:	68ba      	ldr	r2, [r7, #8]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	4a1f      	ldr	r2, [pc, #124]	; (800a050 <prvHeapInit+0xac>)
 8009fd4:	4413      	add	r3, r2
 8009fd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009fdc:	4a1d      	ldr	r2, [pc, #116]	; (800a054 <prvHeapInit+0xb0>)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009fe2:	4b1c      	ldr	r3, [pc, #112]	; (800a054 <prvHeapInit+0xb0>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68ba      	ldr	r2, [r7, #8]
 8009fec:	4413      	add	r3, r2
 8009fee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ff0:	2208      	movs	r2, #8
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	1a9b      	subs	r3, r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	f023 0307 	bic.w	r3, r3, #7
 8009ffe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4a15      	ldr	r2, [pc, #84]	; (800a058 <prvHeapInit+0xb4>)
 800a004:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a006:	4b14      	ldr	r3, [pc, #80]	; (800a058 <prvHeapInit+0xb4>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2200      	movs	r2, #0
 800a00c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a00e:	4b12      	ldr	r3, [pc, #72]	; (800a058 <prvHeapInit+0xb4>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	1ad2      	subs	r2, r2, r3
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a024:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <prvHeapInit+0xb4>)
 800a026:	681a      	ldr	r2, [r3, #0]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	4a0a      	ldr	r2, [pc, #40]	; (800a05c <prvHeapInit+0xb8>)
 800a032:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	4a09      	ldr	r2, [pc, #36]	; (800a060 <prvHeapInit+0xbc>)
 800a03a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a03c:	4b09      	ldr	r3, [pc, #36]	; (800a064 <prvHeapInit+0xc0>)
 800a03e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a042:	601a      	str	r2, [r3, #0]
}
 800a044:	bf00      	nop
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	20000568 	.word	0x20000568
 800a054:	20004168 	.word	0x20004168
 800a058:	20004170 	.word	0x20004170
 800a05c:	20004178 	.word	0x20004178
 800a060:	20004174 	.word	0x20004174
 800a064:	2000417c 	.word	0x2000417c

0800a068 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a070:	4b28      	ldr	r3, [pc, #160]	; (800a114 <prvInsertBlockIntoFreeList+0xac>)
 800a072:	60fb      	str	r3, [r7, #12]
 800a074:	e002      	b.n	800a07c <prvInsertBlockIntoFreeList+0x14>
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	429a      	cmp	r2, r3
 800a084:	d8f7      	bhi.n	800a076 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	4413      	add	r3, r2
 800a092:	687a      	ldr	r2, [r7, #4]
 800a094:	429a      	cmp	r2, r3
 800a096:	d108      	bne.n	800a0aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	685a      	ldr	r2, [r3, #4]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	685b      	ldr	r3, [r3, #4]
 800a0a0:	441a      	add	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d118      	bne.n	800a0f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	4b15      	ldr	r3, [pc, #84]	; (800a118 <prvInsertBlockIntoFreeList+0xb0>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d00d      	beq.n	800a0e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	685b      	ldr	r3, [r3, #4]
 800a0d4:	441a      	add	r2, r3
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	e008      	b.n	800a0f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a0e6:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <prvInsertBlockIntoFreeList+0xb0>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	601a      	str	r2, [r3, #0]
 800a0ee:	e003      	b.n	800a0f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	429a      	cmp	r2, r3
 800a0fe:	d002      	beq.n	800a106 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr
 800a112:	bf00      	nop
 800a114:	20004168 	.word	0x20004168
 800a118:	20004170 	.word	0x20004170

0800a11c <__libc_init_array>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	4e0d      	ldr	r6, [pc, #52]	; (800a154 <__libc_init_array+0x38>)
 800a120:	4c0d      	ldr	r4, [pc, #52]	; (800a158 <__libc_init_array+0x3c>)
 800a122:	1ba4      	subs	r4, r4, r6
 800a124:	10a4      	asrs	r4, r4, #2
 800a126:	2500      	movs	r5, #0
 800a128:	42a5      	cmp	r5, r4
 800a12a:	d109      	bne.n	800a140 <__libc_init_array+0x24>
 800a12c:	4e0b      	ldr	r6, [pc, #44]	; (800a15c <__libc_init_array+0x40>)
 800a12e:	4c0c      	ldr	r4, [pc, #48]	; (800a160 <__libc_init_array+0x44>)
 800a130:	f000 f82c 	bl	800a18c <_init>
 800a134:	1ba4      	subs	r4, r4, r6
 800a136:	10a4      	asrs	r4, r4, #2
 800a138:	2500      	movs	r5, #0
 800a13a:	42a5      	cmp	r5, r4
 800a13c:	d105      	bne.n	800a14a <__libc_init_array+0x2e>
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a144:	4798      	blx	r3
 800a146:	3501      	adds	r5, #1
 800a148:	e7ee      	b.n	800a128 <__libc_init_array+0xc>
 800a14a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a14e:	4798      	blx	r3
 800a150:	3501      	adds	r5, #1
 800a152:	e7f2      	b.n	800a13a <__libc_init_array+0x1e>
 800a154:	0800a370 	.word	0x0800a370
 800a158:	0800a370 	.word	0x0800a370
 800a15c:	0800a370 	.word	0x0800a370
 800a160:	0800a374 	.word	0x0800a374

0800a164 <memcpy>:
 800a164:	b510      	push	{r4, lr}
 800a166:	1e43      	subs	r3, r0, #1
 800a168:	440a      	add	r2, r1
 800a16a:	4291      	cmp	r1, r2
 800a16c:	d100      	bne.n	800a170 <memcpy+0xc>
 800a16e:	bd10      	pop	{r4, pc}
 800a170:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a174:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a178:	e7f7      	b.n	800a16a <memcpy+0x6>

0800a17a <memset>:
 800a17a:	4402      	add	r2, r0
 800a17c:	4603      	mov	r3, r0
 800a17e:	4293      	cmp	r3, r2
 800a180:	d100      	bne.n	800a184 <memset+0xa>
 800a182:	4770      	bx	lr
 800a184:	f803 1b01 	strb.w	r1, [r3], #1
 800a188:	e7f9      	b.n	800a17e <memset+0x4>
	...

0800a18c <_init>:
 800a18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a18e:	bf00      	nop
 800a190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a192:	bc08      	pop	{r3}
 800a194:	469e      	mov	lr, r3
 800a196:	4770      	bx	lr

0800a198 <_fini>:
 800a198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19a:	bf00      	nop
 800a19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a19e:	bc08      	pop	{r3}
 800a1a0:	469e      	mov	lr, r3
 800a1a2:	4770      	bx	lr
