
RT12e-WCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08009d04  08009d04  00019d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009eb8  08009eb8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08009eb8  08009eb8  00019eb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ec0  08009ec0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ec0  08009ec0  00019ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ec4  08009ec4  00019ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08009ec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048a4  20000018  08009ee0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200048bc  08009ee0  000248bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001de13  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ffe  00000000  00000000  0003de5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000019f8  00000000  00000000  00041e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001810  00000000  00000000  00043858  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023cad  00000000  00000000  00045068  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001528c  00000000  00000000  00068d15  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d337e  00000000  00000000  0007dfa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015131f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c5c  00000000  00000000  0015139c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cec 	.word	0x08009cec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08009cec 	.word	0x08009cec

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000034 	.word	0x20000034
 8000500:	20000088 	.word	0x20000088

08000504 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b0c6      	sub	sp, #280	; 0x118
 8000508:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800050a:	f001 fa63 	bl	80019d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800050e:	f000 f919 	bl	8000744 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000512:	f000 fb21 	bl	8000b58 <MX_GPIO_Init>
	MX_DMA_Init();
 8000516:	f000 fae1 	bl	8000adc <MX_DMA_Init>
	MX_CAN1_Init();
 800051a:	f000 f97d 	bl	8000818 <MX_CAN1_Init>
	MX_CRC_Init();
 800051e:	f000 f9b1 	bl	8000884 <MX_CRC_Init>
	MX_IWDG_Init();
 8000522:	f000 f9c3 	bl	80008ac <MX_IWDG_Init>
	MX_SDIO_SD_Init();
 8000526:	f000 f9db 	bl	80008e0 <MX_SDIO_SD_Init>
	MX_SPI1_Init();
 800052a:	f000 f9f9 	bl	8000920 <MX_SPI1_Init>
	MX_UART4_Init();
 800052e:	f000 fa2d 	bl	800098c <MX_UART4_Init>
	MX_USART1_UART_Init();
 8000532:	f000 fa55 	bl	80009e0 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000536:	f000 fa7d 	bl	8000a34 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800053a:	f000 faa5 	bl	8000a88 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 800053e:	f006 f9cf 	bl	80068e0 <MX_FATFS_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of crcMutex */
	osMutexDef(crcMutex);
 8000542:	2300      	movs	r3, #0
 8000544:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8000548:	2300      	movs	r3, #0
 800054a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	crcMutexHandle = osMutexCreate(osMutex(crcMutex));
 800054e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000552:	4618      	mov	r0, r3
 8000554:	f006 fd31 	bl	8006fba <osMutexCreate>
 8000558:	4602      	mov	r2, r0
 800055a:	4b64      	ldr	r3, [pc, #400]	; (80006ec <main+0x1e8>)
 800055c:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of reportToWatchdogQueue */
	osMessageQDef(reportToWatchdogQueue, 16, osThreadId);
 800055e:	4b64      	ldr	r3, [pc, #400]	; (80006f0 <main+0x1ec>)
 8000560:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	reportToWatchdogQueueHandle = osMessageCreate(
 800056a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800056e:	2100      	movs	r1, #0
 8000570:	4618      	mov	r0, r3
 8000572:	f006 fdbf 	bl	80070f4 <osMessageCreate>
 8000576:	4602      	mov	r2, r0
 8000578:	4b5e      	ldr	r3, [pc, #376]	; (80006f4 <main+0x1f0>)
 800057a:	601a      	str	r2, [r3, #0]
			osMessageQ(reportToWatchdogQueue), NULL);

	/* definition and creation of canTransmitQueue */
	osMessageQDef(canTransmitQueue, 16, CanFrameTypedef);
 800057c:	4b5e      	ldr	r3, [pc, #376]	; (80006f8 <main+0x1f4>)
 800057e:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 8000582:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000584:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	canTransmitQueueHandle = osMessageCreate(osMessageQ(canTransmitQueue),
 8000588:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 fdb0 	bl	80070f4 <osMessageCreate>
 8000594:	4602      	mov	r2, r0
 8000596:	4b59      	ldr	r3, [pc, #356]	; (80006fc <main+0x1f8>)
 8000598:	601a      	str	r2, [r3, #0]
			NULL);

	/* definition and creation of canSubbedFramesQueue */
	osMessageQDef(canSubbedFramesQueue, 16, CanFrameTypedef);
 800059a:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <main+0x1f4>)
 800059c:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80005a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	canSubbedFramesQueueHandle = osMessageCreate(
 80005a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005aa:	2100      	movs	r1, #0
 80005ac:	4618      	mov	r0, r3
 80005ae:	f006 fda1 	bl	80070f4 <osMessageCreate>
 80005b2:	4602      	mov	r2, r0
 80005b4:	4b52      	ldr	r3, [pc, #328]	; (8000700 <main+0x1fc>)
 80005b6:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of watchdog */
	osThreadDef(watchdog, StartWatchdogTask, osPriorityNormal, 0, 128);
 80005b8:	4b52      	ldr	r3, [pc, #328]	; (8000704 <main+0x200>)
 80005ba:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80005be:	461d      	mov	r5, r3
 80005c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 80005cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f006 fc8a 	bl	8006eec <osThreadCreate>
 80005d8:	4602      	mov	r2, r0
 80005da:	4b4b      	ldr	r3, [pc, #300]	; (8000708 <main+0x204>)
 80005dc:	601a      	str	r2, [r3, #0]

	/* definition and creation of btReceive */
	osThreadDef(btReceive, StartBtReceiveTask, osPriorityLow, 0, 128);
 80005de:	4b4b      	ldr	r3, [pc, #300]	; (800070c <main+0x208>)
 80005e0:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80005e4:	461d      	mov	r5, r3
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	btReceiveHandle = osThreadCreate(osThread(btReceive), NULL);
 80005f2:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f006 fc77 	bl	8006eec <osThreadCreate>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b43      	ldr	r3, [pc, #268]	; (8000710 <main+0x20c>)
 8000602:	601a      	str	r2, [r3, #0]

	/* definition and creation of xbeeSend */
	osThreadDef(xbeeSend, StartXbeeSendTask, osPriorityIdle, 0, 128);
 8000604:	4b43      	ldr	r3, [pc, #268]	; (8000714 <main+0x210>)
 8000606:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xbeeSendHandle = osThreadCreate(osThread(xbeeSend), NULL);
 8000618:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f006 fc64 	bl	8006eec <osThreadCreate>
 8000624:	4602      	mov	r2, r0
 8000626:	4b3c      	ldr	r3, [pc, #240]	; (8000718 <main+0x214>)
 8000628:	601a      	str	r2, [r3, #0]

	/* definition and creation of xbeeReceive */
	osThreadDef(xbeeReceive, StartXbeeReceiveTask, osPriorityIdle, 0, 128);
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <main+0x218>)
 800062c:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xbeeReceiveHandle = osThreadCreate(osThread(xbeeReceive), NULL);
 800063e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f006 fc51 	bl	8006eec <osThreadCreate>
 800064a:	4602      	mov	r2, r0
 800064c:	4b34      	ldr	r3, [pc, #208]	; (8000720 <main+0x21c>)
 800064e:	601a      	str	r2, [r3, #0]

	/* definition and creation of gnssReceive */
	osThreadDef(gnssReceive, StartGnssReceiveTask, osPriorityIdle, 0, 128);
 8000650:	4b34      	ldr	r3, [pc, #208]	; (8000724 <main+0x220>)
 8000652:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gnssReceiveHandle = osThreadCreate(osThread(gnssReceive), NULL);
 8000664:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fc3e 	bl	8006eec <osThreadCreate>
 8000670:	4602      	mov	r2, r0
 8000672:	4b2d      	ldr	r3, [pc, #180]	; (8000728 <main+0x224>)
 8000674:	601a      	str	r2, [r3, #0]

	/* definition and creation of rfReceive */
	osThreadDef(rfReceive, StartRfReceiveTask, osPriorityIdle, 0, 128);
 8000676:	4b2d      	ldr	r3, [pc, #180]	; (800072c <main+0x228>)
 8000678:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rfReceiveHandle = osThreadCreate(osThread(rfReceive), NULL);
 800068a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fc2b 	bl	8006eec <osThreadCreate>
 8000696:	4602      	mov	r2, r0
 8000698:	4b25      	ldr	r3, [pc, #148]	; (8000730 <main+0x22c>)
 800069a:	601a      	str	r2, [r3, #0]

	/* definition and creation of canGatekeeper */
	osThreadDef(canGatekeeper, StartCanGatekeeperTask, osPriorityIdle, 0, 128);
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <main+0x230>)
 800069e:	f107 041c 	add.w	r4, r7, #28
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canGatekeeperHandle = osThreadCreate(osThread(canGatekeeper), NULL);
 80006b0:	f107 031c 	add.w	r3, r7, #28
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f006 fc18 	bl	8006eec <osThreadCreate>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <main+0x234>)
 80006c0:	601a      	str	r2, [r3, #0]

	/* definition and creation of sdGatekeeper */
	osThreadDef(sdGatekeeper, StartSdGatekeeperTask, osPriorityIdle, 0, 128);
 80006c2:	463b      	mov	r3, r7
 80006c4:	4a1d      	ldr	r2, [pc, #116]	; (800073c <main+0x238>)
 80006c6:	461c      	mov	r4, r3
 80006c8:	4615      	mov	r5, r2
 80006ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sdGatekeeperHandle = osThreadCreate(osThread(sdGatekeeper), NULL);
 80006d6:	463b      	mov	r3, r7
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 fc06 	bl	8006eec <osThreadCreate>
 80006e0:	4602      	mov	r2, r0
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <main+0x23c>)
 80006e4:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80006e6:	f006 fbde 	bl	8006ea6 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006ea:	e7fe      	b.n	80006ea <main+0x1e6>
 80006ec:	20004208 	.word	0x20004208
 80006f0:	08009d04 	.word	0x08009d04
 80006f4:	20004160 	.word	0x20004160
 80006f8:	08009d14 	.word	0x08009d14
 80006fc:	20004330 	.word	0x20004330
 8000700:	20004404 	.word	0x20004404
 8000704:	08009d30 	.word	0x08009d30
 8000708:	20004104 	.word	0x20004104
 800070c:	08009d58 	.word	0x08009d58
 8000710:	20004294 	.word	0x20004294
 8000714:	08009d80 	.word	0x08009d80
 8000718:	2000415c 	.word	0x2000415c
 800071c:	08009da8 	.word	0x08009da8
 8000720:	20004164 	.word	0x20004164
 8000724:	08009dd0 	.word	0x08009dd0
 8000728:	2000420c 	.word	0x2000420c
 800072c:	08009df8 	.word	0x08009df8
 8000730:	20004408 	.word	0x20004408
 8000734:	08009e24 	.word	0x08009e24
 8000738:	20004334 	.word	0x20004334
 800073c:	08009e50 	.word	0x08009e50
 8000740:	200043a0 	.word	0x200043a0

08000744 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b094      	sub	sp, #80	; 0x50
 8000748:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	2230      	movs	r2, #48	; 0x30
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f009 fac1 	bl	8009cda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000768:	2300      	movs	r3, #0
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <SystemClock_Config+0xcc>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	4a27      	ldr	r2, [pc, #156]	; (8000810 <SystemClock_Config+0xcc>)
 8000772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000776:	6413      	str	r3, [r2, #64]	; 0x40
 8000778:	4b25      	ldr	r3, [pc, #148]	; (8000810 <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000784:	2300      	movs	r3, #0
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <SystemClock_Config+0xd0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <SystemClock_Config+0xd0>)
 800078e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80007a0:	230a      	movs	r3, #10
 80007a2:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a4:	2301      	movs	r3, #1
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a8:	2310      	movs	r3, #16
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007ac:	2301      	movs	r3, #1
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b0:	2302      	movs	r3, #2
 80007b2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b4:	2300      	movs	r3, #0
 80007b6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007b8:	2310      	movs	r3, #16
 80007ba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80007bc:	23c0      	movs	r3, #192	; 0xc0
 80007be:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007c4:	2304      	movs	r3, #4
 80007c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007c8:	f107 0320 	add.w	r3, r7, #32
 80007cc:	4618      	mov	r0, r3
 80007ce:	f002 fb3f 	bl	8002e50 <HAL_RCC_OscConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x98>
		Error_Handler();
 80007d8:	f000 fd3e 	bl	8001258 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007dc:	230f      	movs	r3, #15
 80007de:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fd9a 	bl	8003330 <HAL_RCC_ClockConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <SystemClock_Config+0xc2>
		Error_Handler();
 8000802:	f000 fd29 	bl	8001258 <Error_Handler>
	}
}
 8000806:	bf00      	nop
 8000808:	3750      	adds	r7, #80	; 0x50
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40023800 	.word	0x40023800
 8000814:	40007000 	.word	0x40007000

08000818 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <MX_CAN1_Init+0x64>)
 800081e:	4a18      	ldr	r2, [pc, #96]	; (8000880 <MX_CAN1_Init+0x68>)
 8000820:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 2;
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_CAN1_Init+0x64>)
 8000824:	2202      	movs	r2, #2
 8000826:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000828:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_CAN1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_CAN1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_CAN1_Init+0x64>)
 8000836:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800083a:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_CAN1_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_CAN1_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_CAN1_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_CAN1_Init+0x64>)
 8000850:	2200      	movs	r2, #0
 8000852:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_CAN1_Init+0x64>)
 8000856:	2200      	movs	r2, #0
 8000858:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_CAN1_Init+0x64>)
 800085c:	2200      	movs	r2, #0
 800085e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_CAN1_Init+0x64>)
 8000868:	f001 f918 	bl	8001a9c <HAL_CAN_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_CAN1_Init+0x5e>
		Error_Handler();
 8000872:	f000 fcf1 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	20004378 	.word	0x20004378
 8000880:	40006400 	.word	0x40006400

08000884 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_CRC_Init+0x20>)
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <MX_CRC_Init+0x24>)
 800088c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_CRC_Init+0x20>)
 8000890:	f001 fcf6 	bl	8002280 <HAL_CRC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_CRC_Init+0x1a>
		Error_Handler();
 800089a:	f000 fcdd 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20004154 	.word	0x20004154
 80008a8:	40023000 	.word	0x40023000

080008ac <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <MX_IWDG_Init+0x30>)
 80008b4:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 4095;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008be:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008c2:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_IWDG_Init+0x2c>)
 80008c6:	f002 fa7a 	bl	8002dbe <HAL_IWDG_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_IWDG_Init+0x28>
		Error_Handler();
 80008d0:	f000 fcc2 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20004148 	.word	0x20004148
 80008dc:	40003000 	.word	0x40003000

080008e0 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008e6:	4a0d      	ldr	r2, [pc, #52]	; (800091c <MX_SDIO_SD_Init+0x3c>)
 80008e8:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80008f6:	4b08      	ldr	r3, [pc, #32]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000902:	4b05      	ldr	r3, [pc, #20]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <MX_SDIO_SD_Init+0x38>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	20004210 	.word	0x20004210
 800091c:	40012c00 	.word	0x40012c00

08000920 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000924:	4b17      	ldr	r3, [pc, #92]	; (8000984 <MX_SPI1_Init+0x64>)
 8000926:	4a18      	ldr	r2, [pc, #96]	; (8000988 <MX_SPI1_Init+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	4b16      	ldr	r3, [pc, #88]	; (8000984 <MX_SPI1_Init+0x64>)
 800092c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000930:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000932:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_SPI1_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <MX_SPI1_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_SPI1_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_SPI1_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_SPI1_Init+0x64>)
 800094c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000950:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_SPI1_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000958:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <MX_SPI1_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_SPI1_Init+0x64>)
 8000960:	2200      	movs	r2, #0
 8000962:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_SPI1_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_SPI1_Init+0x64>)
 800096c:	220a      	movs	r2, #10
 800096e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <MX_SPI1_Init+0x64>)
 8000972:	f004 f9d9 	bl	8004d28 <HAL_SPI_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_SPI1_Init+0x60>
		Error_Handler();
 800097c:	f000 fc6c 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	200042d8 	.word	0x200042d8
 8000988:	40013000 	.word	0x40013000

0800098c <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_UART4_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_UART4_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_UART4_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_UART4_Init+0x4c>)
 80009c4:	f004 fc52 	bl	800526c <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_UART4_Init+0x46>
		Error_Handler();
 80009ce:	f000 fc43 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20004298 	.word	0x20004298
 80009dc:	40004c00 	.word	0x40004c00

080009e0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <MX_USART1_UART_Init+0x50>)
 80009e8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80009ea:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USART1_UART_Init+0x4c>)
 8000a18:	f004 fc28 	bl	800526c <HAL_UART_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a22:	f000 fc19 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	200041c8 	.word	0x200041c8
 8000a30:	40011000 	.word	0x40011000

08000a34 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a38:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a3a:	4a12      	ldr	r2, [pc, #72]	; (8000a84 <MX_USART2_UART_Init+0x50>)
 8000a3c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x4c>)
 8000a6c:	f004 fbfe 	bl	800526c <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000a76:	f000 fbef 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20004338 	.word	0x20004338
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	; (8000ad8 <MX_USART3_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART3_UART_Init+0x4c>)
 8000ac0:	f004 fbd4 	bl	800526c <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000aca:	f000 fbc5 	bl	8001258 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20004108 	.word	0x20004108
 8000ad8:	40004800 	.word	0x40004800

08000adc <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_DMA_Init+0x78>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <MX_DMA_Init+0x78>)
 8000aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000af0:	6313      	str	r3, [r2, #48]	; 0x30
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_DMA_Init+0x78>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_DMA_Init+0x78>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	4a13      	ldr	r2, [pc, #76]	; (8000b54 <MX_DMA_Init+0x78>)
 8000b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0e:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <MX_DMA_Init+0x78>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2105      	movs	r1, #5
 8000b1e:	200d      	movs	r0, #13
 8000b20:	f001 fb84 	bl	800222c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000b24:	200d      	movs	r0, #13
 8000b26:	f001 fb9d 	bl	8002264 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2105      	movs	r1, #5
 8000b2e:	200f      	movs	r0, #15
 8000b30:	f001 fb7c 	bl	800222c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b34:	200f      	movs	r0, #15
 8000b36:	f001 fb95 	bl	8002264 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	203a      	movs	r0, #58	; 0x3a
 8000b40:	f001 fb74 	bl	800222c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b44:	203a      	movs	r0, #58	; 0x3a
 8000b46:	f001 fb8d 	bl	8002264 <HAL_NVIC_EnableIRQ>

}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800

08000b58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b43      	ldr	r3, [pc, #268]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a3e      	ldr	r2, [pc, #248]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b3c      	ldr	r3, [pc, #240]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a37      	ldr	r2, [pc, #220]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000bb0:	f043 0302 	orr.w	r3, r3, #2
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b35      	ldr	r3, [pc, #212]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0302 	and.w	r3, r3, #2
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000bcc:	f043 0308 	orr.w	r3, r3, #8
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0308 	and.w	r3, r3, #8
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2108      	movs	r1, #8
 8000be2:	482b      	ldr	r0, [pc, #172]	; (8000c90 <MX_GPIO_Init+0x138>)
 8000be4:	f002 f8d2 	bl	8002d8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RF_SPI1_CSN_GPIO_Port, RF_SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2110      	movs	r1, #16
 8000bec:	4829      	ldr	r0, [pc, #164]	; (8000c94 <MX_GPIO_Init+0x13c>)
 8000bee:	f002 f8cd 	bl	8002d8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f243 0134 	movw	r1, #12340	; 0x3034
 8000bf8:	4827      	ldr	r0, [pc, #156]	; (8000c98 <MX_GPIO_Init+0x140>)
 8000bfa:	f002 f8c7 	bl	8002d8c <HAL_GPIO_WritePin>
			RF_PWR_UP_Pin | RF_TRX_CE_Pin | RF_TX_EN_Pin | GNSS_FORCE_ON_Pin
					| GNSS_RESET_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : XBEE_RSSI_Pin RF_DR_Pin RF_AM_Pin */
	GPIO_InitStruct.Pin = XBEE_RSSI_Pin | RF_DR_Pin | RF_AM_Pin;
 8000bfe:	2334      	movs	r3, #52	; 0x34
 8000c00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481f      	ldr	r0, [pc, #124]	; (8000c90 <MX_GPIO_Init+0x138>)
 8000c12:	f001 ff21 	bl	8002a58 <HAL_GPIO_Init>

	/*Configure GPIO pin : XBEE_RESET_Pin */
	GPIO_InitStruct.Pin = XBEE_RESET_Pin;
 8000c16:	2308      	movs	r3, #8
 8000c18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(XBEE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4818      	ldr	r0, [pc, #96]	; (8000c90 <MX_GPIO_Init+0x138>)
 8000c2e:	f001 ff13 	bl	8002a58 <HAL_GPIO_Init>

	/*Configure GPIO pin : RF_SPI1_CSN_Pin */
	GPIO_InitStruct.Pin = RF_SPI1_CSN_Pin;
 8000c32:	2310      	movs	r3, #16
 8000c34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RF_SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x13c>)
 8000c4a:	f001 ff05 	bl	8002a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RF_CD_Pin RF_uPCLK_Pin GNSS_1PPS_Pin */
	GPIO_InitStruct.Pin = RF_CD_Pin | RF_uPCLK_Pin | GNSS_1PPS_Pin;
 8000c4e:	230b      	movs	r3, #11
 8000c50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	480d      	ldr	r0, [pc, #52]	; (8000c98 <MX_GPIO_Init+0x140>)
 8000c62:	f001 fef9 	bl	8002a58 <HAL_GPIO_Init>

	/*Configure GPIO pins : RF_PWR_UP_Pin RF_TRX_CE_Pin RF_TX_EN_Pin GNSS_FORCE_ON_Pin
	 GNSS_RESET_Pin */
	GPIO_InitStruct.Pin = RF_PWR_UP_Pin | RF_TRX_CE_Pin | RF_TX_EN_Pin
 8000c66:	f243 0334 	movw	r3, #12340	; 0x3034
 8000c6a:	617b      	str	r3, [r7, #20]
			| GNSS_FORCE_ON_Pin | GNSS_RESET_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	; (8000c98 <MX_GPIO_Init+0x140>)
 8000c80:	f001 feea 	bl	8002a58 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020800 	.word	0x40020800
 8000c94:	40020000 	.word	0x40020000
 8000c98:	40020400 	.word	0x40020400

08000c9c <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
	static BaseType_t dummy; /* Buffer for pxHigherPriorityTaskWoken flag */
	switch ((uint32_t) huart->Instance) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a11      	ldr	r2, [pc, #68]	; (8000cf0 <HAL_UART_RxCpltCallback+0x54>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d006      	beq.n	8000cbc <HAL_UART_RxCpltCallback+0x20>
 8000cae:	4a11      	ldr	r2, [pc, #68]	; (8000cf4 <HAL_UART_RxCpltCallback+0x58>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00a      	beq.n	8000cca <HAL_UART_RxCpltCallback+0x2e>
 8000cb4:	4a10      	ldr	r2, [pc, #64]	; (8000cf8 <HAL_UART_RxCpltCallback+0x5c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d00e      	beq.n	8000cd8 <HAL_UART_RxCpltCallback+0x3c>
	case (uint32_t) _WCU_GNSS_UART:
		/* Notify gnssReceive task */
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
		break;
	}
}
 8000cba:	e014      	b.n	8000ce6 <HAL_UART_RxCpltCallback+0x4a>
		vTaskNotifyGiveFromISR((TaskHandle_t) xbeeReceiveHandle, &dummy);
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <HAL_UART_RxCpltCallback+0x60>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	490f      	ldr	r1, [pc, #60]	; (8000d00 <HAL_UART_RxCpltCallback+0x64>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f008 face 	bl	8009264 <vTaskNotifyGiveFromISR>
		break;
 8000cc8:	e00d      	b.n	8000ce6 <HAL_UART_RxCpltCallback+0x4a>
		vTaskNotifyGiveFromISR((TaskHandle_t) btReceiveHandle, &dummy);
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_UART_RxCpltCallback+0x68>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	490c      	ldr	r1, [pc, #48]	; (8000d00 <HAL_UART_RxCpltCallback+0x64>)
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 fac7 	bl	8009264 <vTaskNotifyGiveFromISR>
		break;
 8000cd6:	e006      	b.n	8000ce6 <HAL_UART_RxCpltCallback+0x4a>
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
 8000cd8:	4b0b      	ldr	r3, [pc, #44]	; (8000d08 <HAL_UART_RxCpltCallback+0x6c>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4908      	ldr	r1, [pc, #32]	; (8000d00 <HAL_UART_RxCpltCallback+0x64>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f008 fac0 	bl	8009264 <vTaskNotifyGiveFromISR>
		break;
 8000ce4:	bf00      	nop
}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004c00 	.word	0x40004c00
 8000cf4:	40011000 	.word	0x40011000
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	20004164 	.word	0x20004164
 8000d00:	20000288 	.word	0x20000288
 8000d04:	20004294 	.word	0x20004294
 8000d08:	2000420c 	.word	0x2000420c

08000d0c <StartWatchdogTask>:
 * @brief  Function implementing the watchdog thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdogTask */
void StartWatchdogTask(void const *argument) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Initialize the watchdog */
	HAL_IWDG_Init(&hiwdg);
 8000d14:	484a      	ldr	r0, [pc, #296]	; (8000e40 <StartWatchdogTask+0x134>)
 8000d16:	f002 f852 	bl	8002dbe <HAL_IWDG_Init>

	/* Define key-value pair array for testing threads activity */
	struct {
		osThreadId Id;
		bool Reported;
	} reportSheet[_WCU_NUMBER_OF_WATCHED_THREADS ] = { { .Id = btReceiveHandle,
 8000d1a:	4b4a      	ldr	r3, [pc, #296]	; (8000e44 <StartWatchdogTask+0x138>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	2300      	movs	r3, #0
 8000d22:	743b      	strb	r3, [r7, #16]
 8000d24:	4b48      	ldr	r3, [pc, #288]	; (8000e48 <StartWatchdogTask+0x13c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	763b      	strb	r3, [r7, #24]
 8000d2e:	4b47      	ldr	r3, [pc, #284]	; (8000e4c <StartWatchdogTask+0x140>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 3020 	strb.w	r3, [r7, #32]
 8000d3a:	4b45      	ldr	r3, [pc, #276]	; (8000e50 <StartWatchdogTask+0x144>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000d46:	4b43      	ldr	r3, [pc, #268]	; (8000e54 <StartWatchdogTask+0x148>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			.Id = gnssReceiveHandle, .Reported = false }, { .Id =
			rfReceiveHandle, .Reported = false }, { .Id = canGatekeeperHandle,
			.Reported = false } };

	/* Buffer for reading thread IDs from the queue */
	osThreadId buff = 0x0000;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
	/* Flag raised when all watched threads have reported to the watchdog */
	bool allReported = false;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* Infinite loop */
	for (;;) {
		/* Test for all threads' activity */
		if (xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000d5c:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <StartWatchdogTask+0x14c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f107 0108 	add.w	r1, r7, #8
 8000d64:	2200      	movs	r2, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f006 fef4 	bl	8007b54 <xQueueReceive>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d161      	bne.n	8000e36 <StartWatchdogTask+0x12a>
		_WCU_REPORTTOWATCHDOG_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			/* Identify the thread that just reported and set the appropriate flag in the report sheet */
			for (uint8_t i = 0U; i < _WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d72:	2300      	movs	r3, #0
 8000d74:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d78:	e018      	b.n	8000dac <StartWatchdogTask+0xa0>
				if (buff == reportSheet[i].Id) {
 8000d7a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d84:	4413      	add	r3, r2
 8000d86:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d108      	bne.n	8000da2 <StartWatchdogTask+0x96>
					reportSheet[i].Reported = true;
 8000d90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d9a:	4413      	add	r3, r2
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	f803 2c28 	strb.w	r2, [r3, #-40]
			for (uint8_t i = 0U; i < _WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000da2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000da6:	3301      	adds	r3, #1
 8000da8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000dac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000db0:	2b04      	cmp	r3, #4
 8000db2:	d9e2      	bls.n	8000d7a <StartWatchdogTask+0x6e>
				}
			}

			/* Assume all threads reported to the watchdog */
			allReported = true;
 8000db4:	2301      	movs	r3, #1
 8000db6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			/* Test for threads that did not report */
			for (uint8_t i = 0U; i < _WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000dc0:	e015      	b.n	8000dee <StartWatchdogTask+0xe2>
				if (reportSheet[i].Reported == false) {
 8000dc2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000dc6:	00db      	lsls	r3, r3, #3
 8000dc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000dcc:	4413      	add	r3, r2
 8000dce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000dd2:	f083 0301 	eor.w	r3, r3, #1
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d003      	beq.n	8000de4 <StartWatchdogTask+0xd8>
					/* If a thread did not report to the watchdog, reset the flag and break */
					allReported = false;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8000de2:	e008      	b.n	8000df6 <StartWatchdogTask+0xea>
			for (uint8_t i = 0U; i < _WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000de4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000de8:	3301      	adds	r3, #1
 8000dea:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000dee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	d9e5      	bls.n	8000dc2 <StartWatchdogTask+0xb6>
				}
			}

			if (allReported == true) {
 8000df6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d01b      	beq.n	8000e36 <StartWatchdogTask+0x12a>
				/* If all threads have reported to the watchdog, refresh the timer */
				HAL_IWDG_Refresh(&hiwdg);
 8000dfe:	4810      	ldr	r0, [pc, #64]	; (8000e40 <StartWatchdogTask+0x134>)
 8000e00:	f002 f816 	bl	8002e30 <HAL_IWDG_Refresh>

				/* Reset the report sheet */
				for (uint8_t i = 0U; i < _WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000e04:	2300      	movs	r3, #0
 8000e06:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000e0a:	e00d      	b.n	8000e28 <StartWatchdogTask+0x11c>
						1U) {
					reportSheet[i].Reported = false;
 8000e0c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e16:	4413      	add	r3, r2
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f803 2c28 	strb.w	r2, [r3, #-40]
				for (uint8_t i = 0U; i < _WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000e1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e22:	3301      	adds	r3, #1
 8000e24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000e28:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e2c:	2b04      	cmp	r3, #4
 8000e2e:	d9ed      	bls.n	8000e0c <StartWatchdogTask+0x100>
				}

				/* Reset the flag */
				allReported = false;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		osDelay(_WCU_DEFAULT_TASK_DELAY);
 8000e36:	2001      	movs	r0, #1
 8000e38:	f006 f8ab 	bl	8006f92 <osDelay>
		if (xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000e3c:	e78e      	b.n	8000d5c <StartWatchdogTask+0x50>
 8000e3e:	bf00      	nop
 8000e40:	20004148 	.word	0x20004148
 8000e44:	20004294 	.word	0x20004294
 8000e48:	2000415c 	.word	0x2000415c
 8000e4c:	2000420c 	.word	0x2000420c
 8000e50:	20004408 	.word	0x20004408
 8000e54:	20004334 	.word	0x20004334
 8000e58:	20004160 	.word	0x20004160

08000e5c <StartBtReceiveTask>:
 * @brief Function implementing the btReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBtReceiveTask */
void StartBtReceiveTask(void const *argument) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBtReceiveTask */
	static osThreadId localId = NULL; /* Local copy of the thread's ID */
	do {
		localId = osThreadGetId();
 8000e64:	f006 f88e 	bl	8006f84 <osThreadGetId>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4b4a      	ldr	r3, [pc, #296]	; (8000f94 <StartBtReceiveTask+0x138>)
 8000e6c:	601a      	str	r2, [r3, #0]
		/* Assert localId is valid */
	} while (localId == NULL);
 8000e6e:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <StartBtReceiveTask+0x138>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f6      	beq.n	8000e64 <StartBtReceiveTask+0x8>
	static uint16_t readCrc; /* Buffer for the transmitted checksum */
	static uint16_t calculatedCrc; /* Buffer for the calculated checksum */

	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_DMA(phuart_bt, btUartRxBuff,
 8000e76:	4b48      	ldr	r3, [pc, #288]	; (8000f98 <StartBtReceiveTask+0x13c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	2214      	movs	r2, #20
 8000e7c:	4947      	ldr	r1, [pc, #284]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f004 faae 	bl	80053e0 <HAL_UART_Receive_DMA>
		_WCU_BT_UART_RX_BUFF_SIZE);

		/* Wait for message received callback */
		if (ulTaskNotifyTake(pdTRUE, _WCU_BT_UART_RX_NOTIFY_TAKE_TIMEOUT)
 8000e84:	f04f 31ff 	mov.w	r1, #4294967295
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f008 f9a3 	bl	80091d4 <ulTaskNotifyTake>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d076      	beq.n	8000f82 <StartBtReceiveTask+0x126>
			 */
			continue;
		}

		/* Validate the VER and RES/SEQ octet of the R3TP frame */
		if (btUartRxBuff[0] != _R3TP_VER0_VER_RES_SEQ_BYTE) {
 8000e94:	4b41      	ldr	r3, [pc, #260]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d174      	bne.n	8000f86 <StartBtReceiveTask+0x12a>
			 */
			continue;
		}

		/* Validate the END SEQ octets of the R3TP frame */
		if (btUartRxBuff[_R3TP_VER0_FRAME_SIZE - 2U] != _R3TP_END_SEQ_LOW_BYTE
 8000e9c:	4b3f      	ldr	r3, [pc, #252]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000e9e:	7c9b      	ldrb	r3, [r3, #18]
 8000ea0:	2bde      	cmp	r3, #222	; 0xde
			 * Log invalid END SEQ octet
			 */
		}

		/* Read checksum - note that the checksum is transmitted as little endian */
		readCrc = _READAS16BIT(btUartRxBuff[2], btUartRxBuff[1]);
 8000ea2:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	021b      	lsls	r3, r3, #8
 8000ea8:	b21a      	sxth	r2, r3
 8000eaa:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000eac:	785b      	ldrb	r3, [r3, #1]
 8000eae:	b21b      	sxth	r3, r3
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b21b      	sxth	r3, r3
 8000eb4:	b29a      	uxth	r2, r3
 8000eb6:	4b3a      	ldr	r3, [pc, #232]	; (8000fa0 <StartBtReceiveTask+0x144>)
 8000eb8:	801a      	strh	r2, [r3, #0]

		/* Clear the checksum field */
		memset(btUartRxBuff + 1U, 0x00, 2U);
 8000eba:	4b3a      	ldr	r3, [pc, #232]	; (8000fa4 <StartBtReceiveTask+0x148>)
 8000ebc:	2202      	movs	r2, #2
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f008 ff0a 	bl	8009cda <memset>

		if (osMutexWait(crcMutexHandle, _WCU_CRC_MUTEX_TIMEOUT) == osOK) {
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <StartBtReceiveTask+0x14c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f04f 31ff 	mov.w	r1, #4294967295
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 f88c 	bl	8006fec <osMutexWait>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d157      	bne.n	8000f8a <StartBtReceiveTask+0x12e>
			calculatedCrc =
					_GET16LEASTSIGNIFACTBITS(
 8000eda:	2205      	movs	r2, #5
 8000edc:	492f      	ldr	r1, [pc, #188]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000ede:	4833      	ldr	r0, [pc, #204]	; (8000fac <StartBtReceiveTask+0x150>)
 8000ee0:	f001 f9ea 	bl	80022b8 <HAL_CRC_Calculate>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
			calculatedCrc =
 8000ee8:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <StartBtReceiveTask+0x154>)
 8000eea:	801a      	strh	r2, [r3, #0]
							HAL_CRC_Calculate(&hcrc, (uint32_t*)btUartRxBuff, _WCU_BT_UART_RX_BUFF_SIZE / 4));
			osMutexRelease(crcMutexHandle);
 8000eec:	4b2e      	ldr	r3, [pc, #184]	; (8000fa8 <StartBtReceiveTask+0x14c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 f8c9 	bl	8007088 <osMutexRelease>
			 * Log CRC mutex timeout
			 */
			continue;
		}

		if (readCrc != calculatedCrc) {
 8000ef6:	4b2a      	ldr	r3, [pc, #168]	; (8000fa0 <StartBtReceiveTask+0x144>)
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	4b2d      	ldr	r3, [pc, #180]	; (8000fb0 <StartBtReceiveTask+0x154>)
 8000efc:	881b      	ldrh	r3, [r3, #0]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d145      	bne.n	8000f8e <StartBtReceiveTask+0x132>
			 */
			continue;
		}

		/* Read the CAN ID - note that the CAN ID is transmitted as little endian */
		canFrame.Header.Tx.StdId = (uint32_t) _READAS16BIT(btUartRxBuff[4],
 8000f02:	4b26      	ldr	r3, [pc, #152]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	021b      	lsls	r3, r3, #8
 8000f08:	b21a      	sxth	r2, r3
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000f0c:	78db      	ldrb	r3, [r3, #3]
 8000f0e:	b21b      	sxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b21b      	sxth	r3, r3
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <StartBtReceiveTask+0x158>)
 8000f1a:	605a      	str	r2, [r3, #4]
				btUartRxBuff[3]);
		/* Read the Data length code */
		canFrame.Header.Tx.DLC = (uint32_t) (
				btUartRxBuff[7] < _WCU_CAN_TX_BUFF_SIZE ?
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000f1e:	79db      	ldrb	r3, [r3, #7]
		canFrame.Header.Tx.DLC = (uint32_t) (
 8000f20:	2b08      	cmp	r3, #8
 8000f22:	bf28      	it	cs
 8000f24:	2308      	movcs	r3, #8
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <StartBtReceiveTask+0x158>)
 8000f2c:	615a      	str	r2, [r3, #20]
						btUartRxBuff[7] : _WCU_CAN_TX_BUFF_SIZE);

		/* Read the payload */
		for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000f2e:	2300      	movs	r3, #0
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e00d      	b.n	8000f50 <StartBtReceiveTask+0xf4>
			canFrame.Payload[i] = btUartRxBuff[8 + i];
 8000f34:	7bfb      	ldrb	r3, [r7, #15]
 8000f36:	f103 0208 	add.w	r2, r3, #8
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	4917      	ldr	r1, [pc, #92]	; (8000f9c <StartBtReceiveTask+0x140>)
 8000f3e:	5c89      	ldrb	r1, [r1, r2]
 8000f40:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <StartBtReceiveTask+0x158>)
 8000f42:	4413      	add	r3, r2
 8000f44:	460a      	mov	r2, r1
 8000f46:	f883 2020 	strb.w	r2, [r3, #32]
		for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	7bfa      	ldrb	r2, [r7, #15]
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <StartBtReceiveTask+0x158>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	d3ec      	bcc.n	8000f34 <StartBtReceiveTask+0xd8>
		}

		/* Push CAN frame to queue */
		if (xQueueSend(canTransmitQueueHandle, &canFrame,
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <StartBtReceiveTask+0x15c>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	4913      	ldr	r1, [pc, #76]	; (8000fb4 <StartBtReceiveTask+0x158>)
 8000f66:	f006 fbdd 	bl	8007724 <xQueueGenericSend>
			 * Log failed to push to queue
			 */
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &localId,
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <StartBtReceiveTask+0x160>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f04f 32ff 	mov.w	r2, #4294967295
 8000f74:	4907      	ldr	r1, [pc, #28]	; (8000f94 <StartBtReceiveTask+0x138>)
 8000f76:	f006 fbd5 	bl	8007724 <xQueueGenericSend>
			 * TODO:
			 * Log failed to push to queue
			 */
		}

		osDelay(_WCU_DEFAULT_TASK_DELAY);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f006 f809 	bl	8006f92 <osDelay>
 8000f80:	e779      	b.n	8000e76 <StartBtReceiveTask+0x1a>
			continue;
 8000f82:	bf00      	nop
 8000f84:	e777      	b.n	8000e76 <StartBtReceiveTask+0x1a>
			continue;
 8000f86:	bf00      	nop
 8000f88:	e775      	b.n	8000e76 <StartBtReceiveTask+0x1a>
			continue;
 8000f8a:	bf00      	nop
 8000f8c:	e773      	b.n	8000e76 <StartBtReceiveTask+0x1a>
			continue;
 8000f8e:	bf00      	nop
		HAL_UART_Receive_DMA(phuart_bt, btUartRxBuff,
 8000f90:	e771      	b.n	8000e76 <StartBtReceiveTask+0x1a>
 8000f92:	bf00      	nop
 8000f94:	2000028c 	.word	0x2000028c
 8000f98:	20000000 	.word	0x20000000
 8000f9c:	20000290 	.word	0x20000290
 8000fa0:	200002a4 	.word	0x200002a4
 8000fa4:	20000291 	.word	0x20000291
 8000fa8:	20004208 	.word	0x20004208
 8000fac:	20004154 	.word	0x20004154
 8000fb0:	200002a6 	.word	0x200002a6
 8000fb4:	200002a8 	.word	0x200002a8
 8000fb8:	20004330 	.word	0x20004330
 8000fbc:	20004160 	.word	0x20004160

08000fc0 <StartXbeeSendTask>:
 * @brief Function implementing the xbeeSend thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeSendTask */
void StartXbeeSendTask(void const *argument) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartXbeeSendTask */
	static osThreadId localId = NULL; /* Local copy of the thread's ID */
	do {
		localId = osThreadGetId();
 8000fc8:	f005 ffdc 	bl	8006f84 <osThreadGetId>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b48      	ldr	r3, [pc, #288]	; (80010f0 <StartXbeeSendTask+0x130>)
 8000fd0:	601a      	str	r2, [r3, #0]
		/* Assert localId is valid */
	} while (localId == NULL);
 8000fd2:	4b47      	ldr	r3, [pc, #284]	; (80010f0 <StartXbeeSendTask+0x130>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f6      	beq.n	8000fc8 <StartXbeeSendTask+0x8>
	static uint16_t calculatedCrc; /* CRC buffer */
	static uint8_t seqNum = 0U; /* Sequence number */

	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(canSubbedFramesQueueHandle, xbeeUartTxBuff,
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <StartXbeeSendTask+0x134>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	4945      	ldr	r1, [pc, #276]	; (80010f8 <StartXbeeSendTask+0x138>)
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f006 fdb6 	bl	8007b54 <xQueueReceive>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d172      	bne.n	80010d4 <StartXbeeSendTask+0x114>
				_WCU_CANSUBBEDFRAMES_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			if (frameBuff.DataDirection == RX) {
 8000fee:	4b43      	ldr	r3, [pc, #268]	; (80010fc <StartXbeeSendTask+0x13c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d16e      	bne.n	80010d4 <StartXbeeSendTask+0x114>
				/* Clear the buffer */
				memset(xbeeUartTxBuff, 0x00, _R3TP_VER0_FRAME_SIZE);
 8000ff6:	2214      	movs	r2, #20
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	483f      	ldr	r0, [pc, #252]	; (80010f8 <StartXbeeSendTask+0x138>)
 8000ffc:	f008 fe6d 	bl	8009cda <memset>

				/* Set VER and RES/SEQ field */
				xbeeUartTxBuff[0] = _R3TP_VER0_VER_RES_SEQ_BYTE;
 8001000:	4b3d      	ldr	r3, [pc, #244]	; (80010f8 <StartXbeeSendTask+0x138>)
 8001002:	2200      	movs	r2, #0
 8001004:	701a      	strb	r2, [r3, #0]

				/* Set the SEQ NUM field */
				xbeeUartTxBuff[1] = seqNum;
 8001006:	4b3e      	ldr	r3, [pc, #248]	; (8001100 <StartXbeeSendTask+0x140>)
 8001008:	781a      	ldrb	r2, [r3, #0]
 800100a:	4b3b      	ldr	r3, [pc, #236]	; (80010f8 <StartXbeeSendTask+0x138>)
 800100c:	705a      	strb	r2, [r3, #1]
				/* Increment the sequence number */
				seqNum = (seqNum < 255U) ? seqNum + 1 : 0U;
 800100e:	4b3c      	ldr	r3, [pc, #240]	; (8001100 <StartXbeeSendTask+0x140>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d004      	beq.n	8001020 <StartXbeeSendTask+0x60>
 8001016:	4b3a      	ldr	r3, [pc, #232]	; (8001100 <StartXbeeSendTask+0x140>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	b2db      	uxtb	r3, r3
 800101e:	e000      	b.n	8001022 <StartXbeeSendTask+0x62>
 8001020:	2300      	movs	r3, #0
 8001022:	4a37      	ldr	r2, [pc, #220]	; (8001100 <StartXbeeSendTask+0x140>)
 8001024:	7013      	strb	r3, [r2, #0]

				/* Set the END SEQ field */
				xbeeUartTxBuff[_R3TP_VER0_FRAME_SIZE - 2U] =
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <StartXbeeSendTask+0x138>)
 8001028:	22de      	movs	r2, #222	; 0xde
 800102a:	749a      	strb	r2, [r3, #18]
						_R3TP_END_SEQ_LOW_BYTE;
				xbeeUartTxBuff[_R3TP_VER0_FRAME_SIZE - 1U] =
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <StartXbeeSendTask+0x138>)
 800102e:	22ed      	movs	r2, #237	; 0xed
 8001030:	74da      	strb	r2, [r3, #19]
						_R3TP_END_SEQ_HIGH_BYTE;

				/* Set CAN ID field - note that the CAN ID is transmitted as little endian */
				xbeeUartTxBuff[4] = _GETLSBOF16(frameBuff.Header.Rx.StdId);
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <StartXbeeSendTask+0x13c>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <StartXbeeSendTask+0x138>)
 800103a:	711a      	strb	r2, [r3, #4]
				xbeeUartTxBuff[5] = _GETMSBOF16(frameBuff.Header.Rx.StdId);
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <StartXbeeSendTask+0x13c>)
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	b29b      	uxth	r3, r3
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	b29b      	uxth	r3, r3
 8001046:	b2da      	uxtb	r2, r3
 8001048:	4b2b      	ldr	r3, [pc, #172]	; (80010f8 <StartXbeeSendTask+0x138>)
 800104a:	715a      	strb	r2, [r3, #5]

				/* Set the DLC field */
				xbeeUartTxBuff[8] = (uint8_t) frameBuff.Header.Rx.DLC;
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <StartXbeeSendTask+0x13c>)
 800104e:	695b      	ldr	r3, [r3, #20]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <StartXbeeSendTask+0x138>)
 8001054:	721a      	strb	r2, [r3, #8]

				/* Set the DATA field */
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 8001056:	2300      	movs	r3, #0
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e00b      	b.n	8001074 <StartXbeeSendTask+0xb4>
					xbeeUartTxBuff[9 + i] = frameBuff.Payload[i];
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	3309      	adds	r3, #9
 8001062:	4926      	ldr	r1, [pc, #152]	; (80010fc <StartXbeeSendTask+0x13c>)
 8001064:	440a      	add	r2, r1
 8001066:	f892 1020 	ldrb.w	r1, [r2, #32]
 800106a:	4a23      	ldr	r2, [pc, #140]	; (80010f8 <StartXbeeSendTask+0x138>)
 800106c:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	3301      	adds	r3, #1
 8001072:	73fb      	strb	r3, [r7, #15]
 8001074:	7bfa      	ldrb	r2, [r7, #15]
 8001076:	4b21      	ldr	r3, [pc, #132]	; (80010fc <StartXbeeSendTask+0x13c>)
 8001078:	695b      	ldr	r3, [r3, #20]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3ee      	bcc.n	800105c <StartXbeeSendTask+0x9c>
				}

				if (osMutexWait(crcMutexHandle, _WCU_CRC_MUTEX_TIMEOUT)
 800107e:	4b21      	ldr	r3, [pc, #132]	; (8001104 <StartXbeeSendTask+0x144>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f04f 31ff 	mov.w	r1, #4294967295
 8001086:	4618      	mov	r0, r3
 8001088:	f005 ffb0 	bl	8006fec <osMutexWait>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d12c      	bne.n	80010ec <StartXbeeSendTask+0x12c>
						== osOK) {
					calculatedCrc =
							_GET16LEASTSIGNIFACTBITS(
 8001092:	2205      	movs	r2, #5
 8001094:	4918      	ldr	r1, [pc, #96]	; (80010f8 <StartXbeeSendTask+0x138>)
 8001096:	481c      	ldr	r0, [pc, #112]	; (8001108 <StartXbeeSendTask+0x148>)
 8001098:	f001 f90e 	bl	80022b8 <HAL_CRC_Calculate>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
					calculatedCrc =
 80010a0:	4b1a      	ldr	r3, [pc, #104]	; (800110c <StartXbeeSendTask+0x14c>)
 80010a2:	801a      	strh	r2, [r3, #0]
									HAL_CRC_Calculate(&hcrc, (uint32_t*)xbeeUartTxBuff, _R3TP_VER0_FRAME_SIZE / 4));
					osMutexRelease(crcMutexHandle);
 80010a4:	4b17      	ldr	r3, [pc, #92]	; (8001104 <StartXbeeSendTask+0x144>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f005 ffed 	bl	8007088 <osMutexRelease>

					/* Set the CRC field - note that the CRC is transmitted as little endian */
					xbeeUartTxBuff[2] = _GETLSBOF16(calculatedCrc);
 80010ae:	4b17      	ldr	r3, [pc, #92]	; (800110c <StartXbeeSendTask+0x14c>)
 80010b0:	881b      	ldrh	r3, [r3, #0]
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <StartXbeeSendTask+0x138>)
 80010b6:	709a      	strb	r2, [r3, #2]
					xbeeUartTxBuff[3] = _GETMSBOF16(calculatedCrc);
 80010b8:	4b14      	ldr	r3, [pc, #80]	; (800110c <StartXbeeSendTask+0x14c>)
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	b29b      	uxth	r3, r3
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <StartXbeeSendTask+0x138>)
 80010c4:	70da      	strb	r2, [r3, #3]
					 */
					continue;
				}

				/* Transmit frame */
				HAL_UART_Transmit_DMA(phuart_xbee, xbeeUartTxBuff,
 80010c6:	4b12      	ldr	r3, [pc, #72]	; (8001110 <StartXbeeSendTask+0x150>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2214      	movs	r2, #20
 80010cc:	490a      	ldr	r1, [pc, #40]	; (80010f8 <StartXbeeSendTask+0x138>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f91a 	bl	8005308 <HAL_UART_Transmit_DMA>
				 */
			}
		}

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &localId,
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <StartXbeeSendTask+0x154>)
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	2300      	movs	r3, #0
 80010da:	f04f 32ff 	mov.w	r2, #4294967295
 80010de:	4904      	ldr	r1, [pc, #16]	; (80010f0 <StartXbeeSendTask+0x130>)
 80010e0:	f006 fb20 	bl	8007724 <xQueueGenericSend>
			 * TODO:
			 * Log failed to push to queue
			 */
		}

		osDelay(_WCU_DEFAULT_TASK_DELAY);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f005 ff54 	bl	8006f92 <osDelay>
 80010ea:	e776      	b.n	8000fda <StartXbeeSendTask+0x1a>
					continue;
 80010ec:	bf00      	nop
		if (xQueueReceive(canSubbedFramesQueueHandle, xbeeUartTxBuff,
 80010ee:	e774      	b.n	8000fda <StartXbeeSendTask+0x1a>
 80010f0:	200002d0 	.word	0x200002d0
 80010f4:	20004404 	.word	0x20004404
 80010f8:	200002d4 	.word	0x200002d4
 80010fc:	200002e8 	.word	0x200002e8
 8001100:	20000310 	.word	0x20000310
 8001104:	20004208 	.word	0x20004208
 8001108:	20004154 	.word	0x20004154
 800110c:	20000312 	.word	0x20000312
 8001110:	20000004 	.word	0x20000004
 8001114:	20004160 	.word	0x20004160

08001118 <StartXbeeReceiveTask>:
 * @brief Function implementing the xbeeReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeReceiveTask */
void StartXbeeReceiveTask(void const *argument) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartXbeeReceiveTask */
	/* Infinite loop */
	for (;;) {
		/* Read and validate subscription (VER1) frame */
		/* CAN filter config */
		osDelay(_WCU_DEFAULT_TASK_DELAY);
 8001120:	2001      	movs	r0, #1
 8001122:	f005 ff36 	bl	8006f92 <osDelay>
 8001126:	e7fb      	b.n	8001120 <StartXbeeReceiveTask+0x8>

08001128 <StartGnssReceiveTask>:
 * @brief Function implementing the gnssReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGnssReceiveTask */
void StartGnssReceiveTask(void const *argument) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartGnssReceiveTask */
	static osThreadId localId = NULL; /* Local copy of the thread's ID */
	do {
		localId = osThreadGetId();
 8001130:	f005 ff28 	bl	8006f84 <osThreadGetId>
 8001134:	4602      	mov	r2, r0
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <StartGnssReceiveTask+0x34>)
 8001138:	601a      	str	r2, [r3, #0]
		/* Assert localId is valid */
	} while (localId == NULL);
 800113a:	4b08      	ldr	r3, [pc, #32]	; (800115c <StartGnssReceiveTask+0x34>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d0f6      	beq.n	8001130 <StartGnssReceiveTask+0x8>

	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &localId,
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <StartGnssReceiveTask+0x38>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	2300      	movs	r3, #0
 8001148:	f04f 32ff 	mov.w	r2, #4294967295
 800114c:	4903      	ldr	r1, [pc, #12]	; (800115c <StartGnssReceiveTask+0x34>)
 800114e:	f006 fae9 	bl	8007724 <xQueueGenericSend>
			 * TODO:
			 * Log failed to push to queue
			 */
		}

		osDelay(_WCU_DEFAULT_TASK_DELAY);
 8001152:	2001      	movs	r0, #1
 8001154:	f005 ff1d 	bl	8006f92 <osDelay>
		if (xQueueSend(reportToWatchdogQueueHandle, &localId,
 8001158:	e7f3      	b.n	8001142 <StartGnssReceiveTask+0x1a>
 800115a:	bf00      	nop
 800115c:	20000314 	.word	0x20000314
 8001160:	20004160 	.word	0x20004160

08001164 <StartRfReceiveTask>:
 * @brief Function implementing the rfReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfReceiveTask */
void StartRfReceiveTask(void const *argument) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartRfReceiveTask */
	static osThreadId localId = NULL; /* Local copy of the thread's ID */
	do {
		localId = osThreadGetId();
 800116c:	f005 ff0a 	bl	8006f84 <osThreadGetId>
 8001170:	4602      	mov	r2, r0
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <StartRfReceiveTask+0x34>)
 8001174:	601a      	str	r2, [r3, #0]
		/* Assert localId is valid */
	} while (localId == NULL);
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <StartRfReceiveTask+0x34>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f6      	beq.n	800116c <StartRfReceiveTask+0x8>

	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (xQueueSend(reportToWatchdogQueueHandle, &localId,
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <StartRfReceiveTask+0x38>)
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	2300      	movs	r3, #0
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	4903      	ldr	r1, [pc, #12]	; (8001198 <StartRfReceiveTask+0x34>)
 800118a:	f006 facb 	bl	8007724 <xQueueGenericSend>
			 * TODO:
			 * Log failed to push to queue
			 */
		}

		osDelay(_WCU_DEFAULT_TASK_DELAY);
 800118e:	2001      	movs	r0, #1
 8001190:	f005 feff 	bl	8006f92 <osDelay>
		if (xQueueSend(reportToWatchdogQueueHandle, &localId,
 8001194:	e7f3      	b.n	800117e <StartRfReceiveTask+0x1a>
 8001196:	bf00      	nop
 8001198:	20000318 	.word	0x20000318
 800119c:	20004160 	.word	0x20004160

080011a0 <StartCanGatekeeperTask>:
 * @brief Function implementing the canGatekeeper thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanGatekeeperTask */
void StartCanGatekeeperTask(void const *argument) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	static CanFrameTypedef frameBuff; /* CAN frame buffer */
	static uint32_t dummy; /* CAN Tx mailbox */
	/* Infinite loop */
	for (;;) {
		/* Check for outgoing messages */
		if (xQueueReceive(canTransmitQueueHandle, &frameBuff,
 80011a8:	4b17      	ldr	r3, [pc, #92]	; (8001208 <StartCanGatekeeperTask+0x68>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2200      	movs	r2, #0
 80011ae:	4917      	ldr	r1, [pc, #92]	; (800120c <StartCanGatekeeperTask+0x6c>)
 80011b0:	4618      	mov	r0, r3
 80011b2:	f006 fccf 	bl	8007b54 <xQueueReceive>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d109      	bne.n	80011d0 <StartCanGatekeeperTask+0x30>
		_WCU_CANTRANSMIT_QUEUE_RECEIVE_TIMEOUT) == pdTRUE) {
			if (frameBuff.DataDirection == TX) {
 80011bc:	4b13      	ldr	r3, [pc, #76]	; (800120c <StartCanGatekeeperTask+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <StartCanGatekeeperTask+0x30>
				HAL_CAN_AddTxMessage(&hcan1, &frameBuff.Header.Tx,
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <StartCanGatekeeperTask+0x70>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <StartCanGatekeeperTask+0x74>)
 80011c8:	4913      	ldr	r1, [pc, #76]	; (8001218 <StartCanGatekeeperTask+0x78>)
 80011ca:	4814      	ldr	r0, [pc, #80]	; (800121c <StartCanGatekeeperTask+0x7c>)
 80011cc:	f000 fd61 	bl	8001c92 <HAL_CAN_AddTxMessage>
				 */
			}
		}

		/* Check for incoming messages */
		if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) != 0U) {
 80011d0:	2100      	movs	r1, #0
 80011d2:	4812      	ldr	r0, [pc, #72]	; (800121c <StartCanGatekeeperTask+0x7c>)
 80011d4:	f000 ff4a 	bl	800206c <HAL_CAN_GetRxFifoFillLevel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d010      	beq.n	8001200 <StartCanGatekeeperTask+0x60>
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &frameBuff.Header.Rx,
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <StartCanGatekeeperTask+0x74>)
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <StartCanGatekeeperTask+0x78>)
 80011e2:	2100      	movs	r1, #0
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <StartCanGatekeeperTask+0x7c>)
 80011e6:	f000 fe2f 	bl	8001e48 <HAL_CAN_GetRxMessage>
					frameBuff.Payload);
			frameBuff.DataDirection = RX;
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <StartCanGatekeeperTask+0x6c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	701a      	strb	r2, [r3, #0]
			if (xQueueSend(canSubbedFramesQueueHandle, &frameBuff,
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <StartCanGatekeeperTask+0x80>)
 80011f2:	6818      	ldr	r0, [r3, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295
 80011fa:	4904      	ldr	r1, [pc, #16]	; (800120c <StartCanGatekeeperTask+0x6c>)
 80011fc:	f006 fa92 	bl	8007724 <xQueueGenericSend>
				 * Log failed to push to queue
				 */
			}
		}

		osDelay(_WCU_DEFAULT_TASK_DELAY);
 8001200:	2001      	movs	r0, #1
 8001202:	f005 fec6 	bl	8006f92 <osDelay>
		if (xQueueReceive(canTransmitQueueHandle, &frameBuff,
 8001206:	e7cf      	b.n	80011a8 <StartCanGatekeeperTask+0x8>
 8001208:	20004330 	.word	0x20004330
 800120c:	2000031c 	.word	0x2000031c
 8001210:	20000344 	.word	0x20000344
 8001214:	2000033c 	.word	0x2000033c
 8001218:	20000320 	.word	0x20000320
 800121c:	20004378 	.word	0x20004378
 8001220:	20004404 	.word	0x20004404

08001224 <StartSdGatekeeperTask>:
 * @brief Function implementing the sdGatekeeper thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSdGatekeeperTask */
void StartSdGatekeeperTask(void const *argument) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartSdGatekeeperTask */
	/* Infinite loop */
	for (;;) {
		osDelay(_WCU_DEFAULT_TASK_DELAY);
 800122c:	2001      	movs	r0, #1
 800122e:	f005 feb0 	bl	8006f92 <osDelay>
 8001232:	e7fb      	b.n	800122c <StartSdGatekeeperTask+0x8>

08001234 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d101      	bne.n	800124a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001246:	f000 fbe7 	bl	8001a18 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40001000 	.word	0x40001000

08001258 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
	...

08001268 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_MspInit+0x54>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	4a11      	ldr	r2, [pc, #68]	; (80012bc <HAL_MspInit+0x54>)
 8001278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800127c:	6453      	str	r3, [r2, #68]	; 0x44
 800127e:	4b0f      	ldr	r3, [pc, #60]	; (80012bc <HAL_MspInit+0x54>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	603b      	str	r3, [r7, #0]
 800128e:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <HAL_MspInit+0x54>)
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	4a0a      	ldr	r2, [pc, #40]	; (80012bc <HAL_MspInit+0x54>)
 8001294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001298:	6413      	str	r3, [r2, #64]	; 0x40
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <HAL_MspInit+0x54>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012a6:	2200      	movs	r2, #0
 80012a8:	210f      	movs	r1, #15
 80012aa:	f06f 0001 	mvn.w	r0, #1
 80012ae:	f000 ffbd 	bl	800222c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a19      	ldr	r2, [pc, #100]	; (8001344 <HAL_CAN_MspInit+0x84>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d12c      	bne.n	800133c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <HAL_CAN_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a17      	ldr	r2, [pc, #92]	; (8001348 <HAL_CAN_MspInit+0x88>)
 80012ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <HAL_CAN_MspInit+0x88>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <HAL_CAN_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a10      	ldr	r2, [pc, #64]	; (8001348 <HAL_CAN_MspInit+0x88>)
 8001308:	f043 0302 	orr.w	r3, r3, #2
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <HAL_CAN_MspInit+0x88>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800131a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800132c:	2309      	movs	r3, #9
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <HAL_CAN_MspInit+0x8c>)
 8001338:	f001 fb8e 	bl	8002a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40006400 	.word	0x40006400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0b      	ldr	r2, [pc, #44]	; (800138c <HAL_CRC_MspInit+0x3c>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d10d      	bne.n	800137e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_CRC_MspInit+0x40>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_CRC_MspInit+0x40>)
 800136c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b07      	ldr	r3, [pc, #28]	; (8001390 <HAL_CRC_MspInit+0x40>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40023000 	.word	0x40023000
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <HAL_SD_MspInit+0xd0>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d152      	bne.n	800145c <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	4a2a      	ldr	r2, [pc, #168]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013c4:	6453      	str	r3, [r2, #68]	; 0x44
 80013c6:	4b28      	ldr	r3, [pc, #160]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a23      	ldr	r2, [pc, #140]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013dc:	f043 0304 	orr.w	r3, r3, #4
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0304 	and.w	r3, r3, #4
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a1c      	ldr	r2, [pc, #112]	; (8001468 <HAL_SD_MspInit+0xd4>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <HAL_SD_MspInit+0xd4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0308 	and.w	r3, r3, #8
 8001406:	60bb      	str	r3, [r7, #8]
 8001408:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800140a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800140e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800141c:	230c      	movs	r3, #12
 800141e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4811      	ldr	r0, [pc, #68]	; (800146c <HAL_SD_MspInit+0xd8>)
 8001428:	f001 fb16 	bl	8002a58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800142c:	2304      	movs	r3, #4
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001438:	2303      	movs	r3, #3
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800143c:	230c      	movs	r3, #12
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	480a      	ldr	r0, [pc, #40]	; (8001470 <HAL_SD_MspInit+0xdc>)
 8001448:	f001 fb06 	bl	8002a58 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	2031      	movs	r0, #49	; 0x31
 8001452:	f000 feeb 	bl	800222c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001456:	2031      	movs	r0, #49	; 0x31
 8001458:	f000 ff04 	bl	8002264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40012c00 	.word	0x40012c00
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020c00 	.word	0x40020c00

08001474 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b08a      	sub	sp, #40	; 0x28
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	60da      	str	r2, [r3, #12]
 800148a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_SPI_MspInit+0x84>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d12b      	bne.n	80014ee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
 800149a:	4b18      	ldr	r3, [pc, #96]	; (80014fc <HAL_SPI_MspInit+0x88>)
 800149c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149e:	4a17      	ldr	r2, [pc, #92]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a4:	6453      	str	r3, [r2, #68]	; 0x44
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_SPI_MspInit+0x88>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SP1_SCK_Pin|RF_SPI1_MISO_Pin|RF_SPI1_MOSI_Pin;
 80014ce:	23e0      	movs	r3, #224	; 0xe0
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014de:	2305      	movs	r3, #5
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4805      	ldr	r0, [pc, #20]	; (8001500 <HAL_SPI_MspInit+0x8c>)
 80014ea:	f001 fab5 	bl	8002a58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40013000 	.word	0x40013000
 80014fc:	40023800 	.word	0x40023800
 8001500:	40020000 	.word	0x40020000

08001504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b090      	sub	sp, #64	; 0x40
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a91      	ldr	r2, [pc, #580]	; (8001768 <HAL_UART_MspInit+0x264>)
 8001522:	4293      	cmp	r3, r2
 8001524:	f040 808b 	bne.w	800163e <HAL_UART_MspInit+0x13a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
 800152c:	4b8f      	ldr	r3, [pc, #572]	; (800176c <HAL_UART_MspInit+0x268>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	4a8e      	ldr	r2, [pc, #568]	; (800176c <HAL_UART_MspInit+0x268>)
 8001532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001536:	6413      	str	r3, [r2, #64]	; 0x40
 8001538:	4b8c      	ldr	r3, [pc, #560]	; (800176c <HAL_UART_MspInit+0x268>)
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
 8001548:	4b88      	ldr	r3, [pc, #544]	; (800176c <HAL_UART_MspInit+0x268>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154c:	4a87      	ldr	r2, [pc, #540]	; (800176c <HAL_UART_MspInit+0x268>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6313      	str	r3, [r2, #48]	; 0x30
 8001554:	4b85      	ldr	r3, [pc, #532]	; (800176c <HAL_UART_MspInit+0x268>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
 800155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = XBEE_UART3_TX_Pin|XBEE_UART3_RX_Pin;
 8001560:	2303      	movs	r3, #3
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001568:	2301      	movs	r3, #1
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001570:	2308      	movs	r3, #8
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001578:	4619      	mov	r1, r3
 800157a:	487d      	ldr	r0, [pc, #500]	; (8001770 <HAL_UART_MspInit+0x26c>)
 800157c:	f001 fa6c 	bl	8002a58 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001580:	4b7c      	ldr	r3, [pc, #496]	; (8001774 <HAL_UART_MspInit+0x270>)
 8001582:	4a7d      	ldr	r2, [pc, #500]	; (8001778 <HAL_UART_MspInit+0x274>)
 8001584:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001586:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <HAL_UART_MspInit+0x270>)
 8001588:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800158c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800158e:	4b79      	ldr	r3, [pc, #484]	; (8001774 <HAL_UART_MspInit+0x270>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001594:	4b77      	ldr	r3, [pc, #476]	; (8001774 <HAL_UART_MspInit+0x270>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800159a:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_UART_MspInit+0x270>)
 800159c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a0:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015a2:	4b74      	ldr	r3, [pc, #464]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015a8:	4b72      	ldr	r3, [pc, #456]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80015ae:	4b71      	ldr	r3, [pc, #452]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b4:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015bc:	4b6d      	ldr	r3, [pc, #436]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80015c2:	486c      	ldr	r0, [pc, #432]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015c4:	f000 feac 	bl	8002320 <HAL_DMA_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80015ce:	f7ff fe43 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a67      	ldr	r2, [pc, #412]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34
 80015d8:	4a66      	ldr	r2, [pc, #408]	; (8001774 <HAL_UART_MspInit+0x270>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80015de:	4b67      	ldr	r3, [pc, #412]	; (800177c <HAL_UART_MspInit+0x278>)
 80015e0:	4a67      	ldr	r2, [pc, #412]	; (8001780 <HAL_UART_MspInit+0x27c>)
 80015e2:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80015e4:	4b65      	ldr	r3, [pc, #404]	; (800177c <HAL_UART_MspInit+0x278>)
 80015e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015ea:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ec:	4b63      	ldr	r3, [pc, #396]	; (800177c <HAL_UART_MspInit+0x278>)
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f2:	4b62      	ldr	r3, [pc, #392]	; (800177c <HAL_UART_MspInit+0x278>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	4b60      	ldr	r3, [pc, #384]	; (800177c <HAL_UART_MspInit+0x278>)
 80015fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015fe:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001600:	4b5e      	ldr	r3, [pc, #376]	; (800177c <HAL_UART_MspInit+0x278>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001606:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_UART_MspInit+0x278>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_CIRCULAR;
 800160c:	4b5b      	ldr	r3, [pc, #364]	; (800177c <HAL_UART_MspInit+0x278>)
 800160e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001612:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001614:	4b59      	ldr	r3, [pc, #356]	; (800177c <HAL_UART_MspInit+0x278>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800161a:	4b58      	ldr	r3, [pc, #352]	; (800177c <HAL_UART_MspInit+0x278>)
 800161c:	2200      	movs	r2, #0
 800161e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8001620:	4856      	ldr	r0, [pc, #344]	; (800177c <HAL_UART_MspInit+0x278>)
 8001622:	f000 fe7d 	bl	8002320 <HAL_DMA_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800162c:	f7ff fe14 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_UART_MspInit+0x278>)
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
 8001636:	4a51      	ldr	r2, [pc, #324]	; (800177c <HAL_UART_MspInit+0x278>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800163c:	e0dc      	b.n	80017f8 <HAL_UART_MspInit+0x2f4>
  else if(huart->Instance==USART1)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a50      	ldr	r2, [pc, #320]	; (8001784 <HAL_UART_MspInit+0x280>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d15c      	bne.n	8001702 <HAL_UART_MspInit+0x1fe>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
 800164c:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_UART_MspInit+0x268>)
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	4a46      	ldr	r2, [pc, #280]	; (800176c <HAL_UART_MspInit+0x268>)
 8001652:	f043 0310 	orr.w	r3, r3, #16
 8001656:	6453      	str	r3, [r2, #68]	; 0x44
 8001658:	4b44      	ldr	r3, [pc, #272]	; (800176c <HAL_UART_MspInit+0x268>)
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	f003 0310 	and.w	r3, r3, #16
 8001660:	623b      	str	r3, [r7, #32]
 8001662:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <HAL_UART_MspInit+0x268>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166c:	4a3f      	ldr	r2, [pc, #252]	; (800176c <HAL_UART_MspInit+0x268>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6313      	str	r3, [r2, #48]	; 0x30
 8001674:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_UART_MspInit+0x268>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	61fb      	str	r3, [r7, #28]
 800167e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = BT_UART1_TX_Pin|BT_UART1_RX_Pin;
 8001680:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001684:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001686:	2302      	movs	r3, #2
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001692:	2307      	movs	r3, #7
 8001694:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800169a:	4619      	mov	r1, r3
 800169c:	4834      	ldr	r0, [pc, #208]	; (8001770 <HAL_UART_MspInit+0x26c>)
 800169e:	f001 f9db 	bl	8002a58 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80016a2:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016a4:	4a39      	ldr	r2, [pc, #228]	; (800178c <HAL_UART_MspInit+0x288>)
 80016a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80016a8:	4b37      	ldr	r3, [pc, #220]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b0:	4b35      	ldr	r3, [pc, #212]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016bc:	4b32      	ldr	r3, [pc, #200]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80016d0:	4b2d      	ldr	r3, [pc, #180]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016d8:	4b2b      	ldr	r3, [pc, #172]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016de:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016e4:	4828      	ldr	r0, [pc, #160]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016e6:	f000 fe1b 	bl	8002320 <HAL_DMA_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_UART_MspInit+0x1f0>
      Error_Handler();
 80016f0:	f7ff fdb2 	bl	8001258 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a24      	ldr	r2, [pc, #144]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
 80016fa:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_UART_MspInit+0x284>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001700:	e07a      	b.n	80017f8 <HAL_UART_MspInit+0x2f4>
  else if(huart->Instance==USART2)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_UART_MspInit+0x28c>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d143      	bne.n	8001794 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART2_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <HAL_UART_MspInit+0x268>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a15      	ldr	r2, [pc, #84]	; (800176c <HAL_UART_MspInit+0x268>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <HAL_UART_MspInit+0x268>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001724:	61bb      	str	r3, [r7, #24]
 8001726:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_UART_MspInit+0x268>)
 800172e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <HAL_UART_MspInit+0x268>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	6313      	str	r3, [r2, #48]	; 0x30
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_UART_MspInit+0x268>)
 800173a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173c:	f003 0301 	and.w	r3, r3, #1
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001744:	230c      	movs	r3, #12
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001754:	2307      	movs	r3, #7
 8001756:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800175c:	4619      	mov	r1, r3
 800175e:	4804      	ldr	r0, [pc, #16]	; (8001770 <HAL_UART_MspInit+0x26c>)
 8001760:	f001 f97a 	bl	8002a58 <HAL_GPIO_Init>
}
 8001764:	e048      	b.n	80017f8 <HAL_UART_MspInit+0x2f4>
 8001766:	bf00      	nop
 8001768:	40004c00 	.word	0x40004c00
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000
 8001774:	200040a4 	.word	0x200040a4
 8001778:	40026040 	.word	0x40026040
 800177c:	200043a4 	.word	0x200043a4
 8001780:	40026070 	.word	0x40026070
 8001784:	40011000 	.word	0x40011000
 8001788:	20004168 	.word	0x20004168
 800178c:	40026440 	.word	0x40026440
 8001790:	40004400 	.word	0x40004400
  else if(huart->Instance==USART3)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a19      	ldr	r2, [pc, #100]	; (8001800 <HAL_UART_MspInit+0x2fc>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d12c      	bne.n	80017f8 <HAL_UART_MspInit+0x2f4>
    __HAL_RCC_USART3_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <HAL_UART_MspInit+0x300>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <HAL_UART_MspInit+0x300>)
 80017a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ac:	6413      	str	r3, [r2, #64]	; 0x40
 80017ae:	4b15      	ldr	r3, [pc, #84]	; (8001804 <HAL_UART_MspInit+0x300>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_UART_MspInit+0x300>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_UART_MspInit+0x300>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <HAL_UART_MspInit+0x300>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_UART4_TX_Pin|GNSS_UART4_RX_Pin;
 80017d6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017e8:	2307      	movs	r3, #7
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <HAL_UART_MspInit+0x304>)
 80017f4:	f001 f930 	bl	8002a58 <HAL_GPIO_Init>
}
 80017f8:	bf00      	nop
 80017fa:	3740      	adds	r7, #64	; 0x40
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40004800 	.word	0x40004800
 8001804:	40023800 	.word	0x40023800
 8001808:	40020400 	.word	0x40020400

0800180c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001818:	2300      	movs	r3, #0
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 800181c:	2200      	movs	r2, #0
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	2036      	movs	r0, #54	; 0x36
 8001822:	f000 fd03 	bl	800222c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001826:	2036      	movs	r0, #54	; 0x36
 8001828:	f000 fd1c 	bl	8002264 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	4b1e      	ldr	r3, [pc, #120]	; (80018ac <HAL_InitTick+0xa0>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a1d      	ldr	r2, [pc, #116]	; (80018ac <HAL_InitTick+0xa0>)
 8001836:	f043 0310 	orr.w	r3, r3, #16
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b1b      	ldr	r3, [pc, #108]	; (80018ac <HAL_InitTick+0xa0>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001848:	f107 0210 	add.w	r2, r7, #16
 800184c:	f107 0314 	add.w	r3, r7, #20
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f001 ff38 	bl	80036c8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001858:	f001 ff0e 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 800185c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_InitTick+0xa4>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	0c9b      	lsrs	r3, r3, #18
 8001868:	3b01      	subs	r3, #1
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_InitTick+0xa8>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <HAL_InitTick+0xac>)
 8001870:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_InitTick+0xa8>)
 8001874:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001878:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800187a:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_InitTick+0xa8>)
 800187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_InitTick+0xa8>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_InitTick+0xa8>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800188c:	4809      	ldr	r0, [pc, #36]	; (80018b4 <HAL_InitTick+0xa8>)
 800188e:	f003 faaf 	bl	8004df0 <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d104      	bne.n	80018a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001898:	4806      	ldr	r0, [pc, #24]	; (80018b4 <HAL_InitTick+0xa8>)
 800189a:	f003 fade 	bl	8004e5a <HAL_TIM_Base_Start_IT>
 800189e:	4603      	mov	r3, r0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3730      	adds	r7, #48	; 0x30
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	431bde83 	.word	0x431bde83
 80018b4:	2000440c 	.word	0x2000440c
 80018b8:	40001000 	.word	0x40001000

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <DMA1_Stream2_IRQHandler+0x10>)
 80018f6:	f000 fe3b 	bl	8002570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200040a4 	.word	0x200040a4

08001904 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <DMA1_Stream4_IRQHandler+0x10>)
 800190a:	f000 fe31 	bl	8002570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200043a4 	.word	0x200043a4

08001918 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <SDIO_IRQHandler+0x10>)
 800191e:	f002 f96f 	bl	8003c00 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20004210 	.word	0x20004210

0800192c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <TIM6_DAC_IRQHandler+0x10>)
 8001932:	f003 fab6 	bl	8004ea2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000440c 	.word	0x2000440c

08001940 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA2_Stream2_IRQHandler+0x10>)
 8001946:	f000 fe13 	bl	8002570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20004168 	.word	0x20004168

08001954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <SystemInit+0x28>)
 800195a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800195e:	4a07      	ldr	r2, [pc, #28]	; (800197c <SystemInit+0x28>)
 8001960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001968:	4b04      	ldr	r3, [pc, #16]	; (800197c <SystemInit+0x28>)
 800196a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800196e:	609a      	str	r2, [r3, #8]
#endif
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001984:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001986:	e003      	b.n	8001990 <LoopCopyDataInit>

08001988 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800198a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800198c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800198e:	3104      	adds	r1, #4

08001990 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001990:	480b      	ldr	r0, [pc, #44]	; (80019c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001994:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001996:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001998:	d3f6      	bcc.n	8001988 <CopyDataInit>
  ldr  r2, =_sbss
 800199a:	4a0b      	ldr	r2, [pc, #44]	; (80019c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800199c:	e002      	b.n	80019a4 <LoopFillZerobss>

0800199e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800199e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80019a0:	f842 3b04 	str.w	r3, [r2], #4

080019a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a4:	4b09      	ldr	r3, [pc, #36]	; (80019cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80019a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80019a8:	d3f9      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019aa:	f7ff ffd3 	bl	8001954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019ae:	f008 f965 	bl	8009c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019b2:	f7fe fda7 	bl	8000504 <main>
  bx  lr    
 80019b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80019b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80019bc:	08009ec8 	.word	0x08009ec8
  ldr  r0, =_sdata
 80019c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80019c4:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80019c8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80019cc:	200048bc 	.word	0x200048bc

080019d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019d8:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <HAL_Init+0x40>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0d      	ldr	r2, [pc, #52]	; (8001a14 <HAL_Init+0x40>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <HAL_Init+0x40>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_Init+0x40>)
 80019ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f0:	4b08      	ldr	r3, [pc, #32]	; (8001a14 <HAL_Init+0x40>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <HAL_Init+0x40>)
 80019f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019fc:	2003      	movs	r0, #3
 80019fe:	f000 fc0a 	bl	8002216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff ff02 	bl	800180c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a08:	f7ff fc2e 	bl	8001268 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000010 	.word	0x20000010
 8001a3c:	2000444c 	.word	0x2000444c

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	2000444c 	.word	0x2000444c

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <HAL_Delay+0x40>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000010 	.word	0x20000010

08001a9c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e0ed      	b.n	8001c8a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f7ff fc00 	bl	80012c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0202 	bic.w	r2, r2, #2
 8001ace:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad0:	f7ff ffb6 	bl	8001a40 <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ad6:	e012      	b.n	8001afe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad8:	f7ff ffb2 	bl	8001a40 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b0a      	cmp	r3, #10
 8001ae4:	d90b      	bls.n	8001afe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2205      	movs	r2, #5
 8001af6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0c5      	b.n	8001c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1e5      	bne.n	8001ad8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f042 0201 	orr.w	r2, r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b1c:	f7ff ff90 	bl	8001a40 <HAL_GetTick>
 8001b20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b22:	e012      	b.n	8001b4a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b24:	f7ff ff8c 	bl	8001a40 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	2b0a      	cmp	r3, #10
 8001b30:	d90b      	bls.n	8001b4a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2205      	movs	r2, #5
 8001b42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e09f      	b.n	8001c8a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d0e5      	beq.n	8001b24 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7e1b      	ldrb	r3, [r3, #24]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e007      	b.n	8001b82 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	7e5b      	ldrb	r3, [r3, #25]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d108      	bne.n	8001b9c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e007      	b.n	8001bac <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001baa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7e9b      	ldrb	r3, [r3, #26]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d108      	bne.n	8001bc6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0220 	orr.w	r2, r2, #32
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	e007      	b.n	8001bd6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0220 	bic.w	r2, r2, #32
 8001bd4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7edb      	ldrb	r3, [r3, #27]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d108      	bne.n	8001bf0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0210 	bic.w	r2, r2, #16
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e007      	b.n	8001c00 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0210 	orr.w	r2, r2, #16
 8001bfe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	7f1b      	ldrb	r3, [r3, #28]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d108      	bne.n	8001c1a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0208 	orr.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	e007      	b.n	8001c2a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0208 	bic.w	r2, r2, #8
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	7f5b      	ldrb	r3, [r3, #29]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d108      	bne.n	8001c44 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f042 0204 	orr.w	r2, r2, #4
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e007      	b.n	8001c54 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0204 	bic.w	r2, r2, #4
 8001c52:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	ea42 0103 	orr.w	r1, r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	1e5a      	subs	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b089      	sub	sp, #36	; 0x24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	60f8      	str	r0, [r7, #12]
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cb0:	7ffb      	ldrb	r3, [r7, #31]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d003      	beq.n	8001cbe <HAL_CAN_AddTxMessage+0x2c>
 8001cb6:	7ffb      	ldrb	r3, [r7, #31]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	f040 80b8 	bne.w	8001e2e <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d10a      	bne.n	8001cde <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d105      	bne.n	8001cde <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f000 80a0 	beq.w	8001e1e <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	0e1b      	lsrs	r3, r3, #24
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d907      	bls.n	8001cfe <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e09e      	b.n	8001e3c <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001cfe:	2201      	movs	r2, #1
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	409a      	lsls	r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10d      	bne.n	8001d2c <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d1a:	68f9      	ldr	r1, [r7, #12]
 8001d1c:	6809      	ldr	r1, [r1, #0]
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3318      	adds	r3, #24
 8001d24:	011b      	lsls	r3, r3, #4
 8001d26:	440b      	add	r3, r1
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	e00f      	b.n	8001d4c <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d36:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d3c:	68f9      	ldr	r1, [r7, #12]
 8001d3e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d40:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	3318      	adds	r3, #24
 8001d46:	011b      	lsls	r3, r3, #4
 8001d48:	440b      	add	r3, r1
 8001d4a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6819      	ldr	r1, [r3, #0]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	691a      	ldr	r2, [r3, #16]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	3318      	adds	r3, #24
 8001d58:	011b      	lsls	r3, r3, #4
 8001d5a:	440b      	add	r3, r1
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	7d1b      	ldrb	r3, [r3, #20]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d111      	bne.n	8001d8c <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3318      	adds	r3, #24
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4413      	add	r3, r2
 8001d74:	3304      	adds	r3, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	6811      	ldr	r1, [r2, #0]
 8001d7c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	3318      	adds	r3, #24
 8001d84:	011b      	lsls	r3, r3, #4
 8001d86:	440b      	add	r3, r1
 8001d88:	3304      	adds	r3, #4
 8001d8a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3307      	adds	r3, #7
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	061a      	lsls	r2, r3, #24
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	3306      	adds	r3, #6
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	3305      	adds	r3, #5
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	021b      	lsls	r3, r3, #8
 8001da6:	4313      	orrs	r3, r2
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	3204      	adds	r2, #4
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	4610      	mov	r0, r2
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	6811      	ldr	r1, [r2, #0]
 8001db4:	ea43 0200 	orr.w	r2, r3, r0
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	011b      	lsls	r3, r3, #4
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001dc2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3303      	adds	r3, #3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	061a      	lsls	r2, r3, #24
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3302      	adds	r3, #2
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	041b      	lsls	r3, r3, #16
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	4313      	orrs	r3, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	7812      	ldrb	r2, [r2, #0]
 8001de4:	4610      	mov	r0, r2
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	6811      	ldr	r1, [r2, #0]
 8001dea:	ea43 0200 	orr.w	r2, r3, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	011b      	lsls	r3, r3, #4
 8001df2:	440b      	add	r3, r1
 8001df4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001df8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3318      	adds	r3, #24
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	6811      	ldr	r1, [r2, #0]
 8001e0c:	f043 0201 	orr.w	r2, r3, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	3318      	adds	r3, #24
 8001e14:	011b      	lsls	r3, r3, #4
 8001e16:	440b      	add	r3, r1
 8001e18:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e00e      	b.n	8001e3c <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3724      	adds	r7, #36	; 0x24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
 8001e54:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5e:	7dfb      	ldrb	r3, [r7, #23]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d003      	beq.n	8001e6c <HAL_CAN_GetRxMessage+0x24>
 8001e64:	7dfb      	ldrb	r3, [r7, #23]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	f040 80f3 	bne.w	8002052 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10e      	bne.n	8001e90 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d116      	bne.n	8001eae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0e7      	b.n	8002060 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0303 	and.w	r3, r3, #3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d107      	bne.n	8001eae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e0d8      	b.n	8002060 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	331b      	adds	r3, #27
 8001eb6:	011b      	lsls	r3, r3, #4
 8001eb8:	4413      	add	r3, r2
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0204 	and.w	r2, r3, #4
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10c      	bne.n	8001ee6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	331b      	adds	r3, #27
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	4413      	add	r3, r2
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0d5b      	lsrs	r3, r3, #21
 8001edc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e00b      	b.n	8001efe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	331b      	adds	r3, #27
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	4413      	add	r3, r2
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	08db      	lsrs	r3, r3, #3
 8001ef6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	331b      	adds	r3, #27
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	4413      	add	r3, r2
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0202 	and.w	r2, r3, #2
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	331b      	adds	r3, #27
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	3304      	adds	r3, #4
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 020f 	and.w	r2, r3, #15
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	331b      	adds	r3, #27
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	331b      	adds	r3, #27
 8001f4c:	011b      	lsls	r3, r3, #4
 8001f4e:	4413      	add	r3, r2
 8001f50:	3304      	adds	r3, #4
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	0c1b      	lsrs	r3, r3, #16
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	0a1a      	lsrs	r2, r3, #8
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	3301      	adds	r3, #1
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	011b      	lsls	r3, r3, #4
 8001f94:	4413      	add	r3, r2
 8001f96:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	0c1a      	lsrs	r2, r3, #16
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	3302      	adds	r3, #2
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	011b      	lsls	r3, r3, #4
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0e1a      	lsrs	r2, r3, #24
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	3303      	adds	r3, #3
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	011b      	lsls	r3, r3, #4
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	0a1a      	lsrs	r2, r3, #8
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	3305      	adds	r3, #5
 8001fee:	b2d2      	uxtb	r2, r2
 8001ff0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	0c1a      	lsrs	r2, r3, #16
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	3306      	adds	r3, #6
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	4413      	add	r3, r2
 8002016:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	0e1a      	lsrs	r2, r3, #24
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	3307      	adds	r3, #7
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68da      	ldr	r2, [r3, #12]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0220 	orr.w	r2, r2, #32
 800203a:	60da      	str	r2, [r3, #12]
 800203c:	e007      	b.n	800204e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f042 0220 	orr.w	r2, r2, #32
 800204c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e006      	b.n	8002060 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
  }
}
 8002060:	4618      	mov	r0, r3
 8002062:	371c      	adds	r7, #28
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
 8002074:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002080:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002082:	7afb      	ldrb	r3, [r7, #11]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d002      	beq.n	800208e <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002088:	7afb      	ldrb	r3, [r7, #11]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d10f      	bne.n	80020ae <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d106      	bne.n	80020a2 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	e005      	b.n	80020ae <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f003 0303 	and.w	r3, r3, #3
 80020ac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80020ae:	68fb      	ldr	r3, [r7, #12]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr

080020bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020cc:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020d2:	68ba      	ldr	r2, [r7, #8]
 80020d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020d8:	4013      	ands	r3, r2
 80020da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <__NVIC_SetPriorityGrouping+0x44>)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	60d3      	str	r3, [r2, #12]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <__NVIC_GetPriorityGrouping+0x18>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	0a1b      	lsrs	r3, r3, #8
 800210e:	f003 0307 	and.w	r3, r3, #7
}
 8002112:	4618      	mov	r0, r3
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	4603      	mov	r3, r0
 8002128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	2b00      	cmp	r3, #0
 8002130:	db0b      	blt.n	800214a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002132:	79fb      	ldrb	r3, [r7, #7]
 8002134:	f003 021f 	and.w	r2, r3, #31
 8002138:	4907      	ldr	r1, [pc, #28]	; (8002158 <__NVIC_EnableIRQ+0x38>)
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	095b      	lsrs	r3, r3, #5
 8002140:	2001      	movs	r0, #1
 8002142:	fa00 f202 	lsl.w	r2, r0, r2
 8002146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000e100 	.word	0xe000e100

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ff4c 	bl	80020bc <__NVIC_SetPriorityGrouping>
}
 8002224:	bf00      	nop
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800223e:	f7ff ff61 	bl	8002104 <__NVIC_GetPriorityGrouping>
 8002242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	6978      	ldr	r0, [r7, #20]
 800224a:	f7ff ffb1 	bl	80021b0 <NVIC_EncodePriority>
 800224e:	4602      	mov	r2, r0
 8002250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f7ff ff80 	bl	800215c <__NVIC_SetPriority>
}
 800225c:	bf00      	nop
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff54 	bl	8002120 <__NVIC_EnableIRQ>
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	795b      	ldrb	r3, [r3, #5]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d105      	bne.n	80022a8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff f854 	bl	8001350 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2202      	movs	r2, #2
 80022cc:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f042 0201 	orr.w	r2, r2, #1
 80022dc:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
 80022e2:	e00a      	b.n	80022fa <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	441a      	add	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	d3f0      	bcc.n	80022e4 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2201      	movs	r2, #1
 800230e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002310:	693b      	ldr	r3, [r7, #16]
}
 8002312:	4618      	mov	r0, r3
 8002314:	371c      	adds	r7, #28
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fb88 	bl	8001a40 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e099      	b.n	8002470 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2202      	movs	r2, #2
 8002348:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235c:	e00f      	b.n	800237e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800235e:	f7ff fb6f 	bl	8001a40 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b05      	cmp	r3, #5
 800236a:	d908      	bls.n	800237e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e078      	b.n	8002470 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e8      	bne.n	800235e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_DMA_Init+0x158>)
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d107      	bne.n	80023e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	4313      	orrs	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0307 	bic.w	r3, r3, #7
 80023fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240e:	2b04      	cmp	r3, #4
 8002410:	d117      	bne.n	8002442 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fa9d 	bl	8002964 <DMA_CheckFifoParam>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2240      	movs	r2, #64	; 0x40
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800243e:	2301      	movs	r3, #1
 8002440:	e016      	b.n	8002470 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa54 	bl	80028f8 <DMA_CalcBaseAndBitshift>
 8002450:	4603      	mov	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002458:	223f      	movs	r2, #63	; 0x3f
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	f010803f 	.word	0xf010803f

0800247c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
 8002488:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800249a:	2b01      	cmp	r3, #1
 800249c:	d101      	bne.n	80024a2 <HAL_DMA_Start_IT+0x26>
 800249e:	2302      	movs	r3, #2
 80024a0:	e040      	b.n	8002524 <HAL_DMA_Start_IT+0xa8>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d12f      	bne.n	8002516 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	68f8      	ldr	r0, [r7, #12]
 80024cc:	f000 f9e6 	bl	800289c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d4:	223f      	movs	r2, #63	; 0x3f
 80024d6:	409a      	lsls	r2, r3
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0216 	orr.w	r2, r2, #22
 80024ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d007      	beq.n	8002504 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0208 	orr.w	r2, r2, #8
 8002502:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e005      	b.n	8002522 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800251e:	2302      	movs	r3, #2
 8002520:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002522:	7dfb      	ldrb	r3, [r7, #23]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d004      	beq.n	800254a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2280      	movs	r2, #128	; 0x80
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e00c      	b.n	8002564 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2205      	movs	r2, #5
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f022 0201 	bic.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_DMA_IRQHandler+0x258>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a92      	ldr	r2, [pc, #584]	; (80027cc <HAL_DMA_IRQHandler+0x25c>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0a9b      	lsrs	r3, r3, #10
 8002588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800259a:	2208      	movs	r2, #8
 800259c:	409a      	lsls	r2, r3
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d01a      	beq.n	80025dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0304 	and.w	r3, r3, #4
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f022 0204 	bic.w	r2, r2, #4
 80025c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c8:	2208      	movs	r2, #8
 80025ca:	409a      	lsls	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d4:	f043 0201 	orr.w	r2, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e0:	2201      	movs	r2, #1
 80025e2:	409a      	lsls	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4013      	ands	r3, r2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	695b      	ldr	r3, [r3, #20]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00b      	beq.n	8002612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025fe:	2201      	movs	r2, #1
 8002600:	409a      	lsls	r2, r3
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	f043 0202 	orr.w	r2, r3, #2
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2204      	movs	r2, #4
 8002618:	409a      	lsls	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d012      	beq.n	8002648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f003 0302 	and.w	r3, r3, #2
 800262c:	2b00      	cmp	r3, #0
 800262e:	d00b      	beq.n	8002648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002634:	2204      	movs	r2, #4
 8002636:	409a      	lsls	r2, r3
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002640:	f043 0204 	orr.w	r2, r3, #4
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	2210      	movs	r2, #16
 800264e:	409a      	lsls	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d043      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d03c      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2210      	movs	r2, #16
 800266c:	409a      	lsls	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d018      	beq.n	80026b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d108      	bne.n	80026a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d024      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
 800269e:	e01f      	b.n	80026e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01b      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	4798      	blx	r3
 80026b0:	e016      	b.n	80026e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d107      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0208 	bic.w	r2, r2, #8
 80026ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e4:	2220      	movs	r2, #32
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4013      	ands	r3, r2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 808e 	beq.w	800280e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0310 	and.w	r3, r3, #16
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	f000 8086 	beq.w	800280e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	2220      	movs	r2, #32
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b05      	cmp	r3, #5
 8002718:	d136      	bne.n	8002788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0216 	bic.w	r2, r2, #22
 8002728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_DMA_IRQHandler+0x1da>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0208 	bic.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	223f      	movs	r2, #63	; 0x3f
 8002760:	409a      	lsls	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800277a:	2b00      	cmp	r3, #0
 800277c:	d07d      	beq.n	800287a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	4798      	blx	r3
        }
        return;
 8002786:	e078      	b.n	800287a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01c      	beq.n	80027d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d108      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d030      	beq.n	800280e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	4798      	blx	r3
 80027b4:	e02b      	b.n	800280e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d027      	beq.n	800280e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
 80027c6:	e022      	b.n	800280e <HAL_DMA_IRQHandler+0x29e>
 80027c8:	20000008 	.word	0x20000008
 80027cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10f      	bne.n	80027fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0210 	bic.w	r2, r2, #16
 80027ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	2b00      	cmp	r3, #0
 8002804:	d003      	beq.n	800280e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	2b00      	cmp	r3, #0
 8002814:	d032      	beq.n	800287c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d022      	beq.n	8002868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2205      	movs	r2, #5
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	3301      	adds	r3, #1
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	429a      	cmp	r2, r3
 8002844:	d307      	bcc.n	8002856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1f2      	bne.n	800283a <HAL_DMA_IRQHandler+0x2ca>
 8002854:	e000      	b.n	8002858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	4798      	blx	r3
 8002878:	e000      	b.n	800287c <HAL_DMA_IRQHandler+0x30c>
        return;
 800287a:	bf00      	nop
    }
  }
}
 800287c:	3718      	adds	r7, #24
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop

08002884 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d108      	bne.n	80028dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028da:	e007      	b.n	80028ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	60da      	str	r2, [r3, #12]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	3b10      	subs	r3, #16
 8002908:	4a14      	ldr	r2, [pc, #80]	; (800295c <DMA_CalcBaseAndBitshift+0x64>)
 800290a:	fba2 2303 	umull	r2, r3, r2, r3
 800290e:	091b      	lsrs	r3, r3, #4
 8002910:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <DMA_CalcBaseAndBitshift+0x68>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b03      	cmp	r3, #3
 8002924:	d909      	bls.n	800293a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	1d1a      	adds	r2, r3, #4
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	659a      	str	r2, [r3, #88]	; 0x58
 8002938:	e007      	b.n	800294a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002942:	f023 0303 	bic.w	r3, r3, #3
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	aaaaaaab 	.word	0xaaaaaaab
 8002960:	08009e9c 	.word	0x08009e9c

08002964 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11f      	bne.n	80029be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	2b03      	cmp	r3, #3
 8002982:	d855      	bhi.n	8002a30 <DMA_CheckFifoParam+0xcc>
 8002984:	a201      	add	r2, pc, #4	; (adr r2, 800298c <DMA_CheckFifoParam+0x28>)
 8002986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298a:	bf00      	nop
 800298c:	0800299d 	.word	0x0800299d
 8002990:	080029af 	.word	0x080029af
 8002994:	0800299d 	.word	0x0800299d
 8002998:	08002a31 	.word	0x08002a31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d045      	beq.n	8002a34 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ac:	e042      	b.n	8002a34 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b6:	d13f      	bne.n	8002a38 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029bc:	e03c      	b.n	8002a38 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c6:	d121      	bne.n	8002a0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d836      	bhi.n	8002a3c <DMA_CheckFifoParam+0xd8>
 80029ce:	a201      	add	r2, pc, #4	; (adr r2, 80029d4 <DMA_CheckFifoParam+0x70>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	080029e5 	.word	0x080029e5
 80029d8:	080029eb 	.word	0x080029eb
 80029dc:	080029e5 	.word	0x080029e5
 80029e0:	080029fd 	.word	0x080029fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	73fb      	strb	r3, [r7, #15]
      break;
 80029e8:	e02f      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d024      	beq.n	8002a40 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029fa:	e021      	b.n	8002a40 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a04:	d11e      	bne.n	8002a44 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a0a:	e01b      	b.n	8002a44 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d902      	bls.n	8002a18 <DMA_CheckFifoParam+0xb4>
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d003      	beq.n	8002a1e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a16:	e018      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e015      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00e      	beq.n	8002a48 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2e:	e00b      	b.n	8002a48 <DMA_CheckFifoParam+0xe4>
      break;
 8002a30:	bf00      	nop
 8002a32:	e00a      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a34:	bf00      	nop
 8002a36:	e008      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a38:	bf00      	nop
 8002a3a:	e006      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a3c:	bf00      	nop
 8002a3e:	e004      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a40:	bf00      	nop
 8002a42:	e002      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;   
 8002a44:	bf00      	nop
 8002a46:	e000      	b.n	8002a4a <DMA_CheckFifoParam+0xe6>
      break;
 8002a48:	bf00      	nop
    }
  } 
  
  return status; 
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e16b      	b.n	8002d4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 815a 	bne.w	8002d46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d00b      	beq.n	8002ab2 <HAL_GPIO_Init+0x5a>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d007      	beq.n	8002ab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aa6:	2b11      	cmp	r3, #17
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	2b12      	cmp	r3, #18
 8002ab0:	d130      	bne.n	8002b14 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab8:	69fb      	ldr	r3, [r7, #28]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	2203      	movs	r2, #3
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68da      	ldr	r2, [r3, #12]
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae8:	2201      	movs	r2, #1
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 0201 	and.w	r2, r3, #1
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	005b      	lsls	r3, r3, #1
 8002b1e:	2203      	movs	r2, #3
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d003      	beq.n	8002b54 <HAL_GPIO_Init+0xfc>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b12      	cmp	r3, #18
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80b4 	beq.w	8002d46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b5f      	ldr	r3, [pc, #380]	; (8002d60 <HAL_GPIO_Init+0x308>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a5e      	ldr	r2, [pc, #376]	; (8002d60 <HAL_GPIO_Init+0x308>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b5c      	ldr	r3, [pc, #368]	; (8002d60 <HAL_GPIO_Init+0x308>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a5a      	ldr	r2, [pc, #360]	; (8002d64 <HAL_GPIO_Init+0x30c>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a51      	ldr	r2, [pc, #324]	; (8002d68 <HAL_GPIO_Init+0x310>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d02b      	beq.n	8002c7e <HAL_GPIO_Init+0x226>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a50      	ldr	r2, [pc, #320]	; (8002d6c <HAL_GPIO_Init+0x314>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d025      	beq.n	8002c7a <HAL_GPIO_Init+0x222>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <HAL_GPIO_Init+0x318>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01f      	beq.n	8002c76 <HAL_GPIO_Init+0x21e>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4e      	ldr	r2, [pc, #312]	; (8002d74 <HAL_GPIO_Init+0x31c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x21a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4d      	ldr	r2, [pc, #308]	; (8002d78 <HAL_GPIO_Init+0x320>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x216>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x212>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a4b      	ldr	r2, [pc, #300]	; (8002d80 <HAL_GPIO_Init+0x328>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x20e>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a4a      	ldr	r2, [pc, #296]	; (8002d84 <HAL_GPIO_Init+0x32c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x20a>
 8002c5e:	2307      	movs	r3, #7
 8002c60:	e00e      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c62:	2308      	movs	r3, #8
 8002c64:	e00c      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c66:	2306      	movs	r3, #6
 8002c68:	e00a      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c6a:	2305      	movs	r3, #5
 8002c6c:	e008      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	e006      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c72:	2303      	movs	r3, #3
 8002c74:	e004      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c76:	2302      	movs	r3, #2
 8002c78:	e002      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <HAL_GPIO_Init+0x228>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	69fa      	ldr	r2, [r7, #28]
 8002c82:	f002 0203 	and.w	r2, r2, #3
 8002c86:	0092      	lsls	r2, r2, #2
 8002c88:	4093      	lsls	r3, r2
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c90:	4934      	ldr	r1, [pc, #208]	; (8002d64 <HAL_GPIO_Init+0x30c>)
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	089b      	lsrs	r3, r3, #2
 8002c96:	3302      	adds	r3, #2
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	4013      	ands	r3, r2
 8002cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cc2:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cc8:	4b2f      	ldr	r3, [pc, #188]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d003      	beq.n	8002cec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cec:	4a26      	ldr	r2, [pc, #152]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cf2:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d1c:	4b1a      	ldr	r3, [pc, #104]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_GPIO_Init+0x330>)
 8002d42:	69bb      	ldr	r3, [r7, #24]
 8002d44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	3301      	adds	r3, #1
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	2b0f      	cmp	r3, #15
 8002d50:	f67f ae90 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d54:	bf00      	nop
 8002d56:	3724      	adds	r7, #36	; 0x24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40013800 	.word	0x40013800
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	40020400 	.word	0x40020400
 8002d70:	40020800 	.word	0x40020800
 8002d74:	40020c00 	.word	0x40020c00
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40021400 	.word	0x40021400
 8002d80:	40021800 	.word	0x40021800
 8002d84:	40021c00 	.word	0x40021c00
 8002d88:	40013c00 	.word	0x40013c00

08002d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d9c:	787b      	ldrb	r3, [r7, #1]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002da8:	e003      	b.n	8002db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	041a      	lsls	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	619a      	str	r2, [r3, #24]
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b084      	sub	sp, #16
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d101      	bne.n	8002dd0 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e02b      	b.n	8002e28 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f245 5255 	movw	r2, #21845	; 0x5555
 8002de2:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6892      	ldr	r2, [r2, #8]
 8002df6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002df8:	f7fe fe22 	bl	8001a40 <HAL_GetTick>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8002dfe:	e008      	b.n	8002e12 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002e00:	f7fe fe1e 	bl	8001a40 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d901      	bls.n	8002e12 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e00a      	b.n	8002e28 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1f1      	bne.n	8002e00 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8002e40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e25b      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e6e:	4ba3      	ldr	r3, [pc, #652]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d00c      	beq.n	8002e94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4ba0      	ldr	r3, [pc, #640]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e82:	2b08      	cmp	r3, #8
 8002e84:	d112      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4b9d      	ldr	r3, [pc, #628]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e92:	d10b      	bne.n	8002eac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e94:	4b99      	ldr	r3, [pc, #612]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d05b      	beq.n	8002f58 <HAL_RCC_OscConfig+0x108>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d157      	bne.n	8002f58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e236      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x74>
 8002eb6:	4b91      	ldr	r3, [pc, #580]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a90      	ldr	r2, [pc, #576]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01d      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ecc:	d10c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x98>
 8002ece:	4b8b      	ldr	r3, [pc, #556]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a8a      	ldr	r2, [pc, #552]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ed4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	4b88      	ldr	r3, [pc, #544]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a87      	ldr	r2, [pc, #540]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	e00b      	b.n	8002f00 <HAL_RCC_OscConfig+0xb0>
 8002ee8:	4b84      	ldr	r3, [pc, #528]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a83      	ldr	r2, [pc, #524]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002eee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef2:	6013      	str	r3, [r2, #0]
 8002ef4:	4b81      	ldr	r3, [pc, #516]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a80      	ldr	r2, [pc, #512]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002efe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d013      	beq.n	8002f30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fe fd9a 	bl	8001a40 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	e008      	b.n	8002f22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f10:	f7fe fd96 	bl	8001a40 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b64      	cmp	r3, #100	; 0x64
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e1fb      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f22:	4b76      	ldr	r3, [pc, #472]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d0f0      	beq.n	8002f10 <HAL_RCC_OscConfig+0xc0>
 8002f2e:	e014      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7fe fd86 	bl	8001a40 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f38:	f7fe fd82 	bl	8001a40 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b64      	cmp	r3, #100	; 0x64
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1e7      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f4a:	4b6c      	ldr	r3, [pc, #432]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1f0      	bne.n	8002f38 <HAL_RCC_OscConfig+0xe8>
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d063      	beq.n	800302e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f66:	4b65      	ldr	r3, [pc, #404]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f72:	4b62      	ldr	r3, [pc, #392]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d11c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d116      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d005      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e1bb      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa2:	4b56      	ldr	r3, [pc, #344]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4952      	ldr	r1, [pc, #328]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	e03a      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d020      	beq.n	8003002 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc0:	4b4f      	ldr	r3, [pc, #316]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc6:	f7fe fd3b 	bl	8001a40 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fcc:	e008      	b.n	8002fe0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fce:	f7fe fd37 	bl	8001a40 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d901      	bls.n	8002fe0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e19c      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe0:	4b46      	ldr	r3, [pc, #280]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d0f0      	beq.n	8002fce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fec:	4b43      	ldr	r3, [pc, #268]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	691b      	ldr	r3, [r3, #16]
 8002ff8:	00db      	lsls	r3, r3, #3
 8002ffa:	4940      	ldr	r1, [pc, #256]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
 8003000:	e015      	b.n	800302e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003002:	4b3f      	ldr	r3, [pc, #252]	; (8003100 <HAL_RCC_OscConfig+0x2b0>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003008:	f7fe fd1a 	bl	8001a40 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003010:	f7fe fd16 	bl	8001a40 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e17b      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003022:	4b36      	ldr	r3, [pc, #216]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d030      	beq.n	800309c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d016      	beq.n	8003070 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003042:	4b30      	ldr	r3, [pc, #192]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003048:	f7fe fcfa 	bl	8001a40 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003050:	f7fe fcf6 	bl	8001a40 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b02      	cmp	r3, #2
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e15b      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003064:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d0f0      	beq.n	8003050 <HAL_RCC_OscConfig+0x200>
 800306e:	e015      	b.n	800309c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003070:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x2b4>)
 8003072:	2200      	movs	r2, #0
 8003074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003076:	f7fe fce3 	bl	8001a40 <HAL_GetTick>
 800307a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	e008      	b.n	8003090 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307e:	f7fe fcdf 	bl	8001a40 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	2b02      	cmp	r3, #2
 800308a:	d901      	bls.n	8003090 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e144      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003090:	4b1a      	ldr	r3, [pc, #104]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 8003092:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1f0      	bne.n	800307e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0304 	and.w	r3, r3, #4
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030aa:	2300      	movs	r3, #0
 80030ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ae:	4b13      	ldr	r3, [pc, #76]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d10f      	bne.n	80030da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	4a0e      	ldr	r2, [pc, #56]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030da:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d121      	bne.n	800312a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a07      	ldr	r2, [pc, #28]	; (8003108 <HAL_RCC_OscConfig+0x2b8>)
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fe fca5 	bl	8001a40 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	e011      	b.n	800311e <HAL_RCC_OscConfig+0x2ce>
 80030fa:	bf00      	nop
 80030fc:	40023800 	.word	0x40023800
 8003100:	42470000 	.word	0x42470000
 8003104:	42470e80 	.word	0x42470e80
 8003108:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fc98 	bl	8001a40 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e0fd      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311e:	4b81      	ldr	r3, [pc, #516]	; (8003324 <HAL_RCC_OscConfig+0x4d4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d106      	bne.n	8003140 <HAL_RCC_OscConfig+0x2f0>
 8003132:	4b7d      	ldr	r3, [pc, #500]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003136:	4a7c      	ldr	r2, [pc, #496]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003138:	f043 0301 	orr.w	r3, r3, #1
 800313c:	6713      	str	r3, [r2, #112]	; 0x70
 800313e:	e01c      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b05      	cmp	r3, #5
 8003146:	d10c      	bne.n	8003162 <HAL_RCC_OscConfig+0x312>
 8003148:	4b77      	ldr	r3, [pc, #476]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a76      	ldr	r2, [pc, #472]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 800314e:	f043 0304 	orr.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
 8003154:	4b74      	ldr	r3, [pc, #464]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a73      	ldr	r2, [pc, #460]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	e00b      	b.n	800317a <HAL_RCC_OscConfig+0x32a>
 8003162:	4b71      	ldr	r3, [pc, #452]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	4a70      	ldr	r2, [pc, #448]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	6713      	str	r3, [r2, #112]	; 0x70
 800316e:	4b6e      	ldr	r3, [pc, #440]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a6d      	ldr	r2, [pc, #436]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003174:	f023 0304 	bic.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d015      	beq.n	80031ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fe fc5d 	bl	8001a40 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe fc59 	bl	8001a40 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e0bc      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a0:	4b61      	ldr	r3, [pc, #388]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ee      	beq.n	800318a <HAL_RCC_OscConfig+0x33a>
 80031ac:	e014      	b.n	80031d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fe fc47 	bl	8001a40 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b4:	e00a      	b.n	80031cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b6:	f7fe fc43 	bl	8001a40 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e0a6      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031cc:	4b56      	ldr	r3, [pc, #344]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80031ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1ee      	bne.n	80031b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d105      	bne.n	80031ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031de:	4b52      	ldr	r3, [pc, #328]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80031e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 8092 	beq.w	8003318 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d05c      	beq.n	80032ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d141      	bne.n	800328c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b48      	ldr	r3, [pc, #288]	; (800332c <HAL_RCC_OscConfig+0x4dc>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320e:	f7fe fc17 	bl	8001a40 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fc13 	bl	8001a40 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e078      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	4933      	ldr	r1, [pc, #204]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325e:	4b33      	ldr	r3, [pc, #204]	; (800332c <HAL_RCC_OscConfig+0x4dc>)
 8003260:	2201      	movs	r2, #1
 8003262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003264:	f7fe fbec 	bl	8001a40 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800326c:	f7fe fbe8 	bl	8001a40 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e04d      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800327e:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0x41c>
 800328a:	e045      	b.n	8003318 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328c:	4b27      	ldr	r3, [pc, #156]	; (800332c <HAL_RCC_OscConfig+0x4dc>)
 800328e:	2200      	movs	r2, #0
 8003290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003292:	f7fe fbd5 	bl	8001a40 <HAL_GetTick>
 8003296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003298:	e008      	b.n	80032ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800329a:	f7fe fbd1 	bl	8001a40 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e036      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1f0      	bne.n	800329a <HAL_RCC_OscConfig+0x44a>
 80032b8:	e02e      	b.n	8003318 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e029      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032c6:	4b18      	ldr	r3, [pc, #96]	; (8003328 <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d11c      	bne.n	8003314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d115      	bne.n	8003314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032ee:	4013      	ands	r3, r2
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10d      	bne.n	8003314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003302:	429a      	cmp	r2, r3
 8003304:	d106      	bne.n	8003314 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e000      	b.n	800331a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	40007000 	.word	0x40007000
 8003328:	40023800 	.word	0x40023800
 800332c:	42470060 	.word	0x42470060

08003330 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0cc      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003344:	4b68      	ldr	r3, [pc, #416]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 030f 	and.w	r3, r3, #15
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d90c      	bls.n	800336c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003352:	4b65      	ldr	r3, [pc, #404]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b63      	ldr	r3, [pc, #396]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d001      	beq.n	800336c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e0b8      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d020      	beq.n	80033ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003384:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4a58      	ldr	r2, [pc, #352]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800338e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b00      	cmp	r3, #0
 800339a:	d005      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800339c:	4b53      	ldr	r3, [pc, #332]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033a8:	4b50      	ldr	r3, [pc, #320]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	494d      	ldr	r1, [pc, #308]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d044      	beq.n	8003450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b47      	ldr	r3, [pc, #284]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d119      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e07f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d003      	beq.n	80033ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d107      	bne.n	80033fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ee:	4b3f      	ldr	r3, [pc, #252]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d101      	bne.n	800340e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e067      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800340e:	4b37      	ldr	r3, [pc, #220]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f023 0203 	bic.w	r2, r3, #3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	4934      	ldr	r1, [pc, #208]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	4313      	orrs	r3, r2
 800341e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003420:	f7fe fb0e 	bl	8001a40 <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003426:	e00a      	b.n	800343e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003428:	f7fe fb0a 	bl	8001a40 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	; 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e04f      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800343e:	4b2b      	ldr	r3, [pc, #172]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f003 020c 	and.w	r2, r3, #12
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	429a      	cmp	r2, r3
 800344e:	d1eb      	bne.n	8003428 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003450:	4b25      	ldr	r3, [pc, #148]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 030f 	and.w	r3, r3, #15
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	429a      	cmp	r2, r3
 800345c:	d20c      	bcs.n	8003478 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	b2d2      	uxtb	r2, r2
 8003464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003466:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	683a      	ldr	r2, [r7, #0]
 8003470:	429a      	cmp	r2, r3
 8003472:	d001      	beq.n	8003478 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e032      	b.n	80034de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0304 	and.w	r3, r3, #4
 8003480:	2b00      	cmp	r3, #0
 8003482:	d008      	beq.n	8003496 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003484:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	4916      	ldr	r1, [pc, #88]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0308 	and.w	r3, r3, #8
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d009      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	490e      	ldr	r1, [pc, #56]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034b6:	f000 f821 	bl	80034fc <HAL_RCC_GetSysClockFreq>
 80034ba:	4601      	mov	r1, r0
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	4a0a      	ldr	r2, [pc, #40]	; (80034f0 <HAL_RCC_ClockConfig+0x1c0>)
 80034c8:	5cd3      	ldrb	r3, [r2, r3]
 80034ca:	fa21 f303 	lsr.w	r3, r1, r3
 80034ce:	4a09      	ldr	r2, [pc, #36]	; (80034f4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <HAL_RCC_ClockConfig+0x1c8>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe f998 	bl	800180c <HAL_InitTick>

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40023c00 	.word	0x40023c00
 80034ec:	40023800 	.word	0x40023800
 80034f0:	08009e84 	.word	0x08009e84
 80034f4:	20000008 	.word	0x20000008
 80034f8:	2000000c 	.word	0x2000000c

080034fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003512:	4b50      	ldr	r3, [pc, #320]	; (8003654 <HAL_RCC_GetSysClockFreq+0x158>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b04      	cmp	r3, #4
 800351c:	d007      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x32>
 800351e:	2b08      	cmp	r3, #8
 8003520:	d008      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0x38>
 8003522:	2b00      	cmp	r3, #0
 8003524:	f040 808d 	bne.w	8003642 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003528:	4b4b      	ldr	r3, [pc, #300]	; (8003658 <HAL_RCC_GetSysClockFreq+0x15c>)
 800352a:	60bb      	str	r3, [r7, #8]
       break;
 800352c:	e08c      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800352e:	4b4b      	ldr	r3, [pc, #300]	; (800365c <HAL_RCC_GetSysClockFreq+0x160>)
 8003530:	60bb      	str	r3, [r7, #8]
      break;
 8003532:	e089      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003534:	4b47      	ldr	r3, [pc, #284]	; (8003654 <HAL_RCC_GetSysClockFreq+0x158>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800353e:	4b45      	ldr	r3, [pc, #276]	; (8003654 <HAL_RCC_GetSysClockFreq+0x158>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d023      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800354a:	4b42      	ldr	r3, [pc, #264]	; (8003654 <HAL_RCC_GetSysClockFreq+0x158>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	099b      	lsrs	r3, r3, #6
 8003550:	f04f 0400 	mov.w	r4, #0
 8003554:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	ea03 0501 	and.w	r5, r3, r1
 8003560:	ea04 0602 	and.w	r6, r4, r2
 8003564:	4a3d      	ldr	r2, [pc, #244]	; (800365c <HAL_RCC_GetSysClockFreq+0x160>)
 8003566:	fb02 f106 	mul.w	r1, r2, r6
 800356a:	2200      	movs	r2, #0
 800356c:	fb02 f205 	mul.w	r2, r2, r5
 8003570:	440a      	add	r2, r1
 8003572:	493a      	ldr	r1, [pc, #232]	; (800365c <HAL_RCC_GetSysClockFreq+0x160>)
 8003574:	fba5 0101 	umull	r0, r1, r5, r1
 8003578:	1853      	adds	r3, r2, r1
 800357a:	4619      	mov	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f04f 0400 	mov.w	r4, #0
 8003582:	461a      	mov	r2, r3
 8003584:	4623      	mov	r3, r4
 8003586:	f7fc fe23 	bl	80001d0 <__aeabi_uldivmod>
 800358a:	4603      	mov	r3, r0
 800358c:	460c      	mov	r4, r1
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	e049      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_RCC_GetSysClockFreq+0x158>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	ea03 0501 	and.w	r5, r3, r1
 80035a8:	ea04 0602 	and.w	r6, r4, r2
 80035ac:	4629      	mov	r1, r5
 80035ae:	4632      	mov	r2, r6
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	f04f 0400 	mov.w	r4, #0
 80035b8:	0154      	lsls	r4, r2, #5
 80035ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035be:	014b      	lsls	r3, r1, #5
 80035c0:	4619      	mov	r1, r3
 80035c2:	4622      	mov	r2, r4
 80035c4:	1b49      	subs	r1, r1, r5
 80035c6:	eb62 0206 	sbc.w	r2, r2, r6
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	f04f 0400 	mov.w	r4, #0
 80035d2:	0194      	lsls	r4, r2, #6
 80035d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035d8:	018b      	lsls	r3, r1, #6
 80035da:	1a5b      	subs	r3, r3, r1
 80035dc:	eb64 0402 	sbc.w	r4, r4, r2
 80035e0:	f04f 0100 	mov.w	r1, #0
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	00e2      	lsls	r2, r4, #3
 80035ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035ee:	00d9      	lsls	r1, r3, #3
 80035f0:	460b      	mov	r3, r1
 80035f2:	4614      	mov	r4, r2
 80035f4:	195b      	adds	r3, r3, r5
 80035f6:	eb44 0406 	adc.w	r4, r4, r6
 80035fa:	f04f 0100 	mov.w	r1, #0
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	02a2      	lsls	r2, r4, #10
 8003604:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003608:	0299      	lsls	r1, r3, #10
 800360a:	460b      	mov	r3, r1
 800360c:	4614      	mov	r4, r2
 800360e:	4618      	mov	r0, r3
 8003610:	4621      	mov	r1, r4
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f04f 0400 	mov.w	r4, #0
 8003618:	461a      	mov	r2, r3
 800361a:	4623      	mov	r3, r4
 800361c:	f7fc fdd8 	bl	80001d0 <__aeabi_uldivmod>
 8003620:	4603      	mov	r3, r0
 8003622:	460c      	mov	r4, r1
 8003624:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003626:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_GetSysClockFreq+0x158>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0c1b      	lsrs	r3, r3, #16
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	3301      	adds	r3, #1
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	fbb2 f3f3 	udiv	r3, r2, r3
 800363e:	60bb      	str	r3, [r7, #8]
      break;
 8003640:	e002      	b.n	8003648 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003644:	60bb      	str	r3, [r7, #8]
      break;
 8003646:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003648:	68bb      	ldr	r3, [r7, #8]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400
 800365c:	017d7840 	.word	0x017d7840

08003660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003664:	4b03      	ldr	r3, [pc, #12]	; (8003674 <HAL_RCC_GetHCLKFreq+0x14>)
 8003666:	681b      	ldr	r3, [r3, #0]
}
 8003668:	4618      	mov	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	20000008 	.word	0x20000008

08003678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800367c:	f7ff fff0 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 8003680:	4601      	mov	r1, r0
 8003682:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	0a9b      	lsrs	r3, r3, #10
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	4a03      	ldr	r2, [pc, #12]	; (800369c <HAL_RCC_GetPCLK1Freq+0x24>)
 800368e:	5cd3      	ldrb	r3, [r2, r3]
 8003690:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003694:	4618      	mov	r0, r3
 8003696:	bd80      	pop	{r7, pc}
 8003698:	40023800 	.word	0x40023800
 800369c:	08009e94 	.word	0x08009e94

080036a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036a4:	f7ff ffdc 	bl	8003660 <HAL_RCC_GetHCLKFreq>
 80036a8:	4601      	mov	r1, r0
 80036aa:	4b05      	ldr	r3, [pc, #20]	; (80036c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	0b5b      	lsrs	r3, r3, #13
 80036b0:	f003 0307 	and.w	r3, r3, #7
 80036b4:	4a03      	ldr	r2, [pc, #12]	; (80036c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036b6:	5cd3      	ldrb	r3, [r2, r3]
 80036b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	40023800 	.word	0x40023800
 80036c4:	08009e94 	.word	0x08009e94

080036c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	220f      	movs	r2, #15
 80036d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036d8:	4b12      	ldr	r3, [pc, #72]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0203 	and.w	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036e4:	4b0f      	ldr	r3, [pc, #60]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036f0:	4b0c      	ldr	r3, [pc, #48]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036fc:	4b09      	ldr	r3, [pc, #36]	; (8003724 <HAL_RCC_GetClockConfig+0x5c>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	08db      	lsrs	r3, r3, #3
 8003702:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <HAL_RCC_GetClockConfig+0x60>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 020f 	and.w	r2, r3, #15
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	601a      	str	r2, [r3, #0]
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
 8003722:	bf00      	nop
 8003724:	40023800 	.word	0x40023800
 8003728:	40023c00 	.word	0x40023c00

0800372c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e022      	b.n	8003784 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d105      	bne.n	8003756 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f7fd fe1f 	bl	8001394 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2203      	movs	r2, #3
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f814 	bl	800378c <HAL_SD_InitCard>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e00a      	b.n	8003784 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800378c:	b5b0      	push	{r4, r5, r7, lr}
 800378e:	b08e      	sub	sp, #56	; 0x38
 8003790:	af04      	add	r7, sp, #16
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80037a0:	2300      	movs	r3, #0
 80037a2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80037a8:	2376      	movs	r3, #118	; 0x76
 80037aa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681d      	ldr	r5, [r3, #0]
 80037b0:	466c      	mov	r4, sp
 80037b2:	f107 0314 	add.w	r3, r7, #20
 80037b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037c4:	4628      	mov	r0, r5
 80037c6:	f002 fb27 	bl	8005e18 <SDIO_Init>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80037d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e031      	b.n	8003840 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <HAL_SD_InitCard+0xbc>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 fb5f 	bl	8005eaa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <HAL_SD_InitCard+0xbc>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 ffdc 	bl	80047b0 <SD_PowerON>
 80037f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e013      	b.n	8003840 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fefb 	bl	8004614 <SD_InitCard>
 800381e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3728      	adds	r7, #40	; 0x28
 8003844:	46bd      	mov	sp, r7
 8003846:	bdb0      	pop	{r4, r5, r7, pc}
 8003848:	422580a0 	.word	0x422580a0

0800384c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08c      	sub	sp, #48	; 0x30
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
 8003858:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e0c9      	b.n	8003a08 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	f040 80c2 	bne.w	8003a06 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003888:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	441a      	add	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	429a      	cmp	r2, r3
 8003894:	d907      	bls.n	80038a6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0b0      	b.n	8003a08 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2203      	movs	r2, #3
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	2200      	movs	r2, #0
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	6812      	ldr	r2, [r2, #0]
 80038c0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80038c4:	f043 0302 	orr.w	r3, r3, #2
 80038c8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	4a50      	ldr	r2, [pc, #320]	; (8003a10 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 80038d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80038d8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	2200      	movs	r2, #0
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	3380      	adds	r3, #128	; 0x80
 80038ec:	4619      	mov	r1, r3
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	f7fe fdc1 	bl	800247c <HAL_DMA_Start_IT>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d017      	beq.n	8003930 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800390e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a40      	ldr	r2, [pc, #256]	; (8003a18 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003916:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e06b      	b.n	8003a08 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003930:	4b3a      	ldr	r3, [pc, #232]	; (8003a1c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393a:	2b01      	cmp	r3, #1
 800393c:	d002      	beq.n	8003944 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800393e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003940:	025b      	lsls	r3, r3, #9
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f44f 7100 	mov.w	r1, #512	; 0x200
 800394c:	4618      	mov	r0, r3
 800394e:	f002 fb3f 	bl	8005fd0 <SDMMC_CmdBlockLength>
 8003952:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00f      	beq.n	800397a <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a2e      	ldr	r2, [pc, #184]	; (8003a18 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003960:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e046      	b.n	8003a08 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295
 800397e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	025b      	lsls	r3, r3, #9
 8003984:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003986:	2390      	movs	r3, #144	; 0x90
 8003988:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800398a:	2302      	movs	r3, #2
 800398c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800398e:	2300      	movs	r3, #0
 8003990:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003992:	2301      	movs	r3, #1
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f107 0210 	add.w	r2, r7, #16
 800399e:	4611      	mov	r1, r2
 80039a0:	4618      	mov	r0, r3
 80039a2:	f002 fae9 	bl	8005f78 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d90a      	bls.n	80039c2 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2282      	movs	r2, #130	; 0x82
 80039b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039b8:	4618      	mov	r0, r3
 80039ba:	f002 fb4d 	bl	8006058 <SDMMC_CmdReadMultiBlock>
 80039be:	62f8      	str	r0, [r7, #44]	; 0x2c
 80039c0:	e009      	b.n	80039d6 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2281      	movs	r2, #129	; 0x81
 80039c6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039ce:	4618      	mov	r0, r3
 80039d0:	f002 fb20 	bl	8006014 <SDMMC_CmdReadSingleBlock>
 80039d4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80039d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d012      	beq.n	8003a02 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0d      	ldr	r2, [pc, #52]	; (8003a18 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	431a      	orrs	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e002      	b.n	8003a08 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8003a02:	2300      	movs	r3, #0
 8003a04:	e000      	b.n	8003a08 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3730      	adds	r7, #48	; 0x30
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	08004423 	.word	0x08004423
 8003a14:	08004495 	.word	0x08004495
 8003a18:	004005ff 	.word	0x004005ff
 8003a1c:	4225858c 	.word	0x4225858c

08003a20 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08c      	sub	sp, #48	; 0x30
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0ce      	b.n	8003be6 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f040 80c7 	bne.w	8003be4 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	441a      	add	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d907      	bls.n	8003a7a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e0b5      	b.n	8003be6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2203      	movs	r2, #3
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2200      	movs	r2, #0
 8003a88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	6812      	ldr	r2, [r2, #0]
 8003a94:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003a98:	f043 0302 	orr.w	r3, r3, #2
 8003a9c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa2:	4a53      	ldr	r2, [pc, #332]	; (8003bf0 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003aa4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	4a52      	ldr	r2, [pc, #328]	; (8003bf4 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8003aac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d002      	beq.n	8003ac4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	025b      	lsls	r3, r3, #9
 8003ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003acc:	4618      	mov	r0, r3
 8003ace:	f002 fa7f 	bl	8005fd0 <SDMMC_CmdBlockLength>
 8003ad2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00f      	beq.n	8003afa <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a46      	ldr	r2, [pc, #280]	; (8003bf8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e075      	b.n	8003be6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d90a      	bls.n	8003b16 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	22a0      	movs	r2, #160	; 0xa0
 8003b04:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f002 fae7 	bl	80060e0 <SDMMC_CmdWriteMultiBlock>
 8003b12:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003b14:	e009      	b.n	8003b2a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2290      	movs	r2, #144	; 0x90
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b22:	4618      	mov	r0, r3
 8003b24:	f002 faba 	bl	800609c <SDMMC_CmdWriteSingleBlock>
 8003b28:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d012      	beq.n	8003b56 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a30      	ldr	r2, [pc, #192]	; (8003bf8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003b36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e047      	b.n	8003be6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003b56:	4b29      	ldr	r3, [pc, #164]	; (8003bfc <HAL_SD_WriteBlocks_DMA+0x1dc>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	3380      	adds	r3, #128	; 0x80
 8003b68:	461a      	mov	r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	025b      	lsls	r3, r3, #9
 8003b6e:	089b      	lsrs	r3, r3, #2
 8003b70:	f7fe fc84 	bl	800247c <HAL_DMA_Start_IT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01c      	beq.n	8003bb4 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8003b88:	f023 0302 	bic.w	r3, r3, #2
 8003b8c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a19      	ldr	r2, [pc, #100]	; (8003bf8 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003b94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e018      	b.n	8003be6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	025b      	lsls	r3, r3, #9
 8003bbe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003bc0:	2390      	movs	r3, #144	; 0x90
 8003bc2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f107 0210 	add.w	r2, r7, #16
 8003bd8:	4611      	mov	r1, r2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f002 f9cc 	bl	8005f78 <SDIO_ConfigData>

      return HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e000      	b.n	8003be6 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003be4:	2302      	movs	r3, #2
  }
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3730      	adds	r7, #48	; 0x30
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	080043f9 	.word	0x080043f9
 8003bf4:	08004495 	.word	0x08004495
 8003bf8:	004005ff 	.word	0x004005ff
 8003bfc:	4225858c 	.word	0x4225858c

08003c00 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_SD_IRQHandler+0x2e>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 ffd8 	bl	8004bdc <SD_Read_IT>
 8003c2c:	e165      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f000 808f 	beq.w	8003d5c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6812      	ldr	r2, [r2, #0]
 8003c52:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8003c56:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003c5a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f022 0201 	bic.w	r2, r2, #1
 8003c6a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d039      	beq.n	8003cea <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0302 	and.w	r3, r3, #2
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d104      	bne.n	8003c8a <HAL_SD_IRQHandler+0x8a>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d011      	beq.n	8003cae <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f002 fa48 	bl	8006124 <SDMMC_CmdStopTransfer>
 8003c94:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d008      	beq.n	8003cae <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	431a      	orrs	r2, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f92f 	bl	8003f0c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d104      	bne.n	8003cda <HAL_SD_IRQHandler+0xda>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f002 fe9e 	bl	8006a1c <HAL_SD_RxCpltCallback>
 8003ce0:	e10b      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f002 fe90 	bl	8006a08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ce8:	e107      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f000 8102 	beq.w	8003efa <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 0320 	and.w	r3, r3, #32
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d011      	beq.n	8003d24 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f002 fa0d 	bl	8006124 <SDMMC_CmdStopTransfer>
 8003d0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8f4 	bl	8003f0c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f003 0301 	and.w	r3, r3, #1
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	f040 80e5 	bne.w	8003efa <HAL_SD_IRQHandler+0x2fa>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 80df 	bne.w	8003efa <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0208 	bic.w	r2, r2, #8
 8003d4a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f002 fe57 	bl	8006a08 <HAL_SD_TxCpltCallback>
}
 8003d5a:	e0ce      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d008      	beq.n	8003d7c <HAL_SD_IRQHandler+0x17c>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f003 0308 	and.w	r3, r3, #8
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d003      	beq.n	8003d7c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 ff82 	bl	8004c7e <SD_Write_IT>
 8003d7a:	e0be      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d82:	f240 233a 	movw	r3, #570	; 0x23a
 8003d86:	4013      	ands	r3, r2
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 80b6 	beq.w	8003efa <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	f043 0202 	orr.w	r2, r3, #2
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	f003 0308 	and.w	r3, r3, #8
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dba:	f043 0208 	orr.w	r2, r3, #8
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	f043 0210 	orr.w	r2, r3, #16
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d005      	beq.n	8003e10 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	f043 0208 	orr.w	r2, r3, #8
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f240 723a 	movw	r2, #1850	; 0x73a
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	6812      	ldr	r2, [r2, #0]
 8003e24:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8003e28:	f023 0302 	bic.w	r3, r3, #2
 8003e2c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f002 f976 	bl	8006124 <SDMMC_CmdStopTransfer>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f855 	bl	8003f0c <HAL_SD_ErrorCallback>
}
 8003e62:	e04a      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d045      	beq.n	8003efa <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d104      	bne.n	8003e82 <HAL_SD_IRQHandler+0x282>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 0320 	and.w	r3, r3, #32
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d011      	beq.n	8003ea6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e86:	4a1f      	ldr	r2, [pc, #124]	; (8003f04 <HAL_SD_IRQHandler+0x304>)
 8003e88:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fb4c 	bl	800252c <HAL_DMA_Abort_IT>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d02f      	beq.n	8003efa <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fb4a 	bl	8004538 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003ea4:	e029      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <HAL_SD_IRQHandler+0x2ba>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d011      	beq.n	8003ede <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	4a12      	ldr	r2, [pc, #72]	; (8003f08 <HAL_SD_IRQHandler+0x308>)
 8003ec0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fb30 	bl	800252c <HAL_DMA_Abort_IT>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d013      	beq.n	8003efa <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 fb65 	bl	80045a6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003edc:	e00d      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f002 fd7e 	bl	80069f4 <HAL_SD_AbortCallback>
}
 8003ef8:	e7ff      	b.n	8003efa <HAL_SD_IRQHandler+0x2fa>
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	08004539 	.word	0x08004539
 8003f08:	080045a7 	.word	0x080045a7

08003f0c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2e:	0f9b      	lsrs	r3, r3, #30
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f3a:	0e9b      	lsrs	r3, r3, #26
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	b2da      	uxtb	r2, r3
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4c:	0e1b      	lsrs	r3, r3, #24
 8003f4e:	b2db      	uxtb	r3, r3
 8003f50:	f003 0303 	and.w	r3, r3, #3
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5e:	0c1b      	lsrs	r3, r3, #16
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f6a:	0a1b      	lsrs	r3, r3, #8
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f80:	0d1b      	lsrs	r3, r3, #20
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8c:	0c1b      	lsrs	r3, r3, #16
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9e:	0bdb      	lsrs	r3, r3, #15
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fb0:	0b9b      	lsrs	r3, r3, #14
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fc2:	0b5b      	lsrs	r3, r3, #13
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fd4:	0b1b      	lsrs	r3, r3, #12
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d163      	bne.n	80040b8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ff4:	009a      	lsls	r2, r3, #2
 8003ff6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004000:	0f92      	lsrs	r2, r2, #30
 8004002:	431a      	orrs	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	0edb      	lsrs	r3, r3, #27
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	b2da      	uxtb	r2, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800401e:	0e1b      	lsrs	r3, r3, #24
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 0307 	and.w	r3, r3, #7
 8004026:	b2da      	uxtb	r2, r3
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004030:	0d5b      	lsrs	r3, r3, #21
 8004032:	b2db      	uxtb	r3, r3
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	b2da      	uxtb	r2, r3
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004042:	0c9b      	lsrs	r3, r3, #18
 8004044:	b2db      	uxtb	r3, r3
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	b2da      	uxtb	r2, r3
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004054:	0bdb      	lsrs	r3, r3, #15
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	b2da      	uxtb	r2, r3
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	7e1b      	ldrb	r3, [r3, #24]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	f003 0307 	and.w	r3, r3, #7
 8004076:	3302      	adds	r3, #2
 8004078:	2201      	movs	r2, #1
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004082:	fb02 f203 	mul.w	r2, r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	7a1b      	ldrb	r3, [r3, #8]
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	2201      	movs	r2, #1
 8004096:	409a      	lsls	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80040a4:	0a52      	lsrs	r2, r2, #9
 80040a6:	fb02 f203 	mul.w	r2, r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040b4:	661a      	str	r2, [r3, #96]	; 0x60
 80040b6:	e031      	b.n	800411c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d11d      	bne.n	80040fc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040c4:	041b      	lsls	r3, r3, #16
 80040c6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ce:	0c1b      	lsrs	r3, r3, #16
 80040d0:	431a      	orrs	r2, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	3301      	adds	r3, #1
 80040dc:	029a      	lsls	r2, r3, #10
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	661a      	str	r2, [r3, #96]	; 0x60
 80040fa:	e00f      	b.n	800411c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a58      	ldr	r2, [pc, #352]	; (8004264 <HAL_SD_GetCardCSD+0x344>)
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e09d      	b.n	8004258 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004120:	0b9b      	lsrs	r3, r3, #14
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	b2da      	uxtb	r2, r3
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004132:	09db      	lsrs	r3, r3, #7
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800413a:	b2da      	uxtb	r2, r3
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800414a:	b2da      	uxtb	r2, r3
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004154:	0fdb      	lsrs	r3, r3, #31
 8004156:	b2da      	uxtb	r2, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004160:	0f5b      	lsrs	r3, r3, #29
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f003 0303 	and.w	r3, r3, #3
 8004168:	b2da      	uxtb	r2, r3
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004172:	0e9b      	lsrs	r3, r3, #26
 8004174:	b2db      	uxtb	r3, r3
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	b2da      	uxtb	r2, r3
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	0d9b      	lsrs	r3, r3, #22
 8004186:	b2db      	uxtb	r3, r3
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	b2da      	uxtb	r2, r3
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	0d5b      	lsrs	r3, r3, #21
 8004198:	b2db      	uxtb	r3, r3
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b2:	0c1b      	lsrs	r3, r3, #16
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c6:	0bdb      	lsrs	r3, r3, #15
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	0b9b      	lsrs	r3, r3, #14
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ee:	0b5b      	lsrs	r3, r3, #13
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004202:	0b1b      	lsrs	r3, r3, #12
 8004204:	b2db      	uxtb	r3, r3
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	b2da      	uxtb	r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004216:	0a9b      	lsrs	r3, r3, #10
 8004218:	b2db      	uxtb	r3, r3
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	0a1b      	lsrs	r3, r3, #8
 800422c:	b2db      	uxtb	r3, r3
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	b2da      	uxtb	r2, r3
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	085b      	lsrs	r3, r3, #1
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004246:	b2da      	uxtb	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	004005ff 	.word	0x004005ff

08004268 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80042c0:	b5b0      	push	{r4, r5, r7, lr}
 80042c2:	b08e      	sub	sp, #56	; 0x38
 80042c4:	af04      	add	r7, sp, #16
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2203      	movs	r2, #3
 80042ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d6:	2b03      	cmp	r3, #3
 80042d8:	d02e      	beq.n	8004338 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d106      	bne.n	80042f0 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
 80042ee:	e029      	b.n	8004344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d10a      	bne.n	800430e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fb0f 	bl	800491c <SD_WideBus_Enable>
 80042fe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
 800430c:	e01a      	b.n	8004344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d10a      	bne.n	800432a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 fb4c 	bl	80049b2 <SD_WideBus_Disable>
 800431a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
 8004328:	e00c      	b.n	8004344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38
 8004336:	e005      	b.n	8004344 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004348:	2b00      	cmp	r3, #0
 800434a:	d009      	beq.n	8004360 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a18      	ldr	r2, [pc, #96]	; (80043b4 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e024      	b.n	80043aa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
 8004370:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	695b      	ldr	r3, [r3, #20]
 800437a:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681d      	ldr	r5, [r3, #0]
 8004386:	466c      	mov	r4, sp
 8004388:	f107 0318 	add.w	r3, r7, #24
 800438c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004390:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004394:	f107 030c 	add.w	r3, r7, #12
 8004398:	cb0e      	ldmia	r3, {r1, r2, r3}
 800439a:	4628      	mov	r0, r5
 800439c:	f001 fd3c 	bl	8005e18 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3728      	adds	r7, #40	; 0x28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bdb0      	pop	{r4, r5, r7, pc}
 80043b2:	bf00      	nop
 80043b4:	004005ff 	.word	0x004005ff

080043b8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b086      	sub	sp, #24
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 fa7e 	bl	80048cc <SD_SendStatus>
 80043d0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	0a5b      	lsrs	r3, r3, #9
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80043ee:	693b      	ldr	r3, [r7, #16]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3718      	adds	r7, #24
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004404:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004414:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004416:	bf00      	nop
 8004418:	3714      	adds	r7, #20
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004434:	2b82      	cmp	r3, #130	; 0x82
 8004436:	d111      	bne.n	800445c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4618      	mov	r0, r3
 800443e:	f001 fe71 	bl	8006124 <SDMMC_CmdStopTransfer>
 8004442:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d008      	beq.n	800445c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f7ff fd58 	bl	8003f0c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0208 	bic.w	r2, r2, #8
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f240 523a 	movw	r2, #1338	; 0x53a
 8004474:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f002 fac9 	bl	8006a1c <HAL_SD_RxCpltCallback>
#endif
}
 800448a:	bf00      	nop
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fe f9ee 	bl	8002884 <HAL_DMA_GetError>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d03e      	beq.n	800452c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b4:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d002      	beq.n	80044ca <SD_DMAError+0x36>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d12d      	bne.n	8004526 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a19      	ldr	r2, [pc, #100]	; (8004534 <SD_DMAError+0xa0>)
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80044e0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80044ee:	6978      	ldr	r0, [r7, #20]
 80044f0:	f7ff ff62 	bl	80043b8 <HAL_SD_GetCardState>
 80044f4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b06      	cmp	r3, #6
 80044fa:	d002      	beq.n	8004502 <SD_DMAError+0x6e>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d10a      	bne.n	8004518 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f001 fe0c 	bl	8006124 <SDMMC_CmdStopTransfer>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004512:	431a      	orrs	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004526:	6978      	ldr	r0, [r7, #20]
 8004528:	f7ff fcf0 	bl	8003f0c <HAL_SD_ErrorCallback>
#endif
  }
}
 800452c:	bf00      	nop
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	004005ff 	.word	0x004005ff

08004538 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f240 523a 	movw	r2, #1338	; 0x53a
 800454e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f7ff ff31 	bl	80043b8 <HAL_SD_GetCardState>
 8004556:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b06      	cmp	r3, #6
 800456a:	d002      	beq.n	8004572 <SD_DMATxAbort+0x3a>
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b05      	cmp	r3, #5
 8004570:	d10a      	bne.n	8004588 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f001 fdd4 	bl	8006124 <SDMMC_CmdStopTransfer>
 800457c:	4602      	mov	r2, r0
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	431a      	orrs	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	2b00      	cmp	r3, #0
 800458e:	d103      	bne.n	8004598 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f002 fa2f 	bl	80069f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004596:	e002      	b.n	800459e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f7ff fcb7 	bl	8003f0c <HAL_SD_ErrorCallback>
}
 800459e:	bf00      	nop
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f240 523a 	movw	r2, #1338	; 0x53a
 80045bc:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f7ff fefa 	bl	80043b8 <HAL_SD_GetCardState>
 80045c4:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b06      	cmp	r3, #6
 80045d8:	d002      	beq.n	80045e0 <SD_DMARxAbort+0x3a>
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	2b05      	cmp	r3, #5
 80045de:	d10a      	bne.n	80045f6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f001 fd9d 	bl	8006124 <SDMMC_CmdStopTransfer>
 80045ea:	4602      	mov	r2, r0
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f002 f9f8 	bl	80069f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004604:	e002      	b.n	800460c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f7ff fc80 	bl	8003f0c <HAL_SD_ErrorCallback>
}
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004614:	b5b0      	push	{r4, r5, r7, lr}
 8004616:	b094      	sub	sp, #80	; 0x50
 8004618:	af04      	add	r7, sp, #16
 800461a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800461c:	2301      	movs	r3, #1
 800461e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fc4f 	bl	8005ec8 <SDIO_GetPowerState>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d102      	bne.n	8004636 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004630:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004634:	e0b7      	b.n	80047a6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463a:	2b03      	cmp	r3, #3
 800463c:	d02f      	beq.n	800469e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f001 fe78 	bl	8006338 <SDMMC_CmdSendCID>
 8004648:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <SD_InitCard+0x40>
    {
      return errorstate;
 8004650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004652:	e0a8      	b.n	80047a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f001 fc79 	bl	8005f52 <SDIO_GetResponse>
 8004660:	4602      	mov	r2, r0
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2104      	movs	r1, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f001 fc70 	bl	8005f52 <SDIO_GetResponse>
 8004672:	4602      	mov	r2, r0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2108      	movs	r1, #8
 800467e:	4618      	mov	r0, r3
 8004680:	f001 fc67 	bl	8005f52 <SDIO_GetResponse>
 8004684:	4602      	mov	r2, r0
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	210c      	movs	r1, #12
 8004690:	4618      	mov	r0, r3
 8004692:	f001 fc5e 	bl	8005f52 <SDIO_GetResponse>
 8004696:	4602      	mov	r2, r0
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	2b03      	cmp	r3, #3
 80046a4:	d00d      	beq.n	80046c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f107 020e 	add.w	r2, r7, #14
 80046ae:	4611      	mov	r1, r2
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 fe7e 	bl	80063b2 <SDMMC_CmdSetRelAdd>
 80046b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	e071      	b.n	80047a6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	2b03      	cmp	r3, #3
 80046c8:	d036      	beq.n	8004738 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	461a      	mov	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	4619      	mov	r1, r3
 80046de:	4610      	mov	r0, r2
 80046e0:	f001 fe48 	bl	8006374 <SDMMC_CmdSendCSD>
 80046e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	e05a      	b.n	80047a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f001 fc2b 	bl	8005f52 <SDIO_GetResponse>
 80046fc:	4602      	mov	r2, r0
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2104      	movs	r1, #4
 8004708:	4618      	mov	r0, r3
 800470a:	f001 fc22 	bl	8005f52 <SDIO_GetResponse>
 800470e:	4602      	mov	r2, r0
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2108      	movs	r1, #8
 800471a:	4618      	mov	r0, r3
 800471c:	f001 fc19 	bl	8005f52 <SDIO_GetResponse>
 8004720:	4602      	mov	r2, r0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	210c      	movs	r1, #12
 800472c:	4618      	mov	r0, r3
 800472e:	f001 fc10 	bl	8005f52 <SDIO_GetResponse>
 8004732:	4602      	mov	r2, r0
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2104      	movs	r1, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f001 fc07 	bl	8005f52 <SDIO_GetResponse>
 8004744:	4603      	mov	r3, r0
 8004746:	0d1a      	lsrs	r2, r3, #20
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800474c:	f107 0310 	add.w	r3, r7, #16
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7ff fbe4 	bl	8003f20 <HAL_SD_GetCardCSD>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d002      	beq.n	8004764 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800475e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004762:	e020      	b.n	80047a6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6819      	ldr	r1, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800476c:	041b      	lsls	r3, r3, #16
 800476e:	f04f 0400 	mov.w	r4, #0
 8004772:	461a      	mov	r2, r3
 8004774:	4623      	mov	r3, r4
 8004776:	4608      	mov	r0, r1
 8004778:	f001 fcf6 	bl	8006168 <SDMMC_CmdSelDesel>
 800477c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800477e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <SD_InitCard+0x174>
  {
    return errorstate;
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	e00e      	b.n	80047a6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681d      	ldr	r5, [r3, #0]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	466c      	mov	r4, sp
 8004790:	f103 0210 	add.w	r2, r3, #16
 8004794:	ca07      	ldmia	r2, {r0, r1, r2}
 8004796:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800479a:	3304      	adds	r3, #4
 800479c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800479e:	4628      	mov	r0, r5
 80047a0:	f001 fb3a 	bl	8005e18 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3740      	adds	r7, #64	; 0x40
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080047b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	617b      	str	r3, [r7, #20]
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 fcf0 	bl	80061ae <SDMMC_CmdGoIdleState>
 80047ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <SD_PowerON+0x2a>
  {
    return errorstate;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	e072      	b.n	80048c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f001 fd03 	bl	80061ea <SDMMC_CmdOperCond>
 80047e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00d      	beq.n	8004808 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f001 fcd9 	bl	80061ae <SDMMC_CmdGoIdleState>
 80047fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d004      	beq.n	800480e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	e05b      	b.n	80048c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004812:	2b01      	cmp	r3, #1
 8004814:	d137      	bne.n	8004886 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f001 fd03 	bl	8006228 <SDMMC_CmdAppCommand>
 8004822:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d02d      	beq.n	8004886 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800482a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800482e:	e047      	b.n	80048c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2100      	movs	r1, #0
 8004836:	4618      	mov	r0, r3
 8004838:	f001 fcf6 	bl	8006228 <SDMMC_CmdAppCommand>
 800483c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <SD_PowerON+0x98>
    {
      return errorstate;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	e03b      	b.n	80048c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	491e      	ldr	r1, [pc, #120]	; (80048c8 <SD_PowerON+0x118>)
 800484e:	4618      	mov	r0, r3
 8004850:	f001 fd0c 	bl	800626c <SDMMC_CmdAppOperCommand>
 8004854:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800485c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004860:	e02e      	b.n	80048c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2100      	movs	r1, #0
 8004868:	4618      	mov	r0, r3
 800486a:	f001 fb72 	bl	8005f52 <SDIO_GetResponse>
 800486e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	0fdb      	lsrs	r3, r3, #31
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <SD_PowerON+0xcc>
 8004878:	2301      	movs	r3, #1
 800487a:	e000      	b.n	800487e <SD_PowerON+0xce>
 800487c:	2300      	movs	r3, #0
 800487e:	613b      	str	r3, [r7, #16]

    count++;
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	3301      	adds	r3, #1
 8004884:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800488c:	4293      	cmp	r3, r2
 800488e:	d802      	bhi.n	8004896 <SD_PowerON+0xe6>
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0cc      	beq.n	8004830 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800489c:	4293      	cmp	r3, r2
 800489e:	d902      	bls.n	80048a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80048a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048a4:	e00c      	b.n	80048c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
 80048b6:	e002      	b.n	80048be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	c1100000 	.word	0xc1100000

080048cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d102      	bne.n	80048e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80048dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80048e0:	e018      	b.n	8004914 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f001 fd80 	bl	80063f4 <SDMMC_CmdSendStatus>
 80048f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <SD_SendStatus+0x34>
  {
    return errorstate;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	e009      	b.n	8004914 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f001 fb23 	bl	8005f52 <SDIO_GetResponse>
 800490c:	4602      	mov	r2, r0
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3710      	adds	r7, #16
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2100      	movs	r1, #0
 8004932:	4618      	mov	r0, r3
 8004934:	f001 fb0d 	bl	8005f52 <SDIO_GetResponse>
 8004938:	4603      	mov	r3, r0
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004942:	d102      	bne.n	800494a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004948:	e02f      	b.n	80049aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800494a:	f107 030c 	add.w	r3, r7, #12
 800494e:	4619      	mov	r1, r3
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f879 	bl	8004a48 <SD_FindSCR>
 8004956:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	e023      	b.n	80049aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01c      	beq.n	80049a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	041b      	lsls	r3, r3, #16
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f001 fc55 	bl	8006228 <SDMMC_CmdAppCommand>
 800497e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	e00f      	b.n	80049aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2102      	movs	r1, #2
 8004990:	4618      	mov	r0, r3
 8004992:	f001 fc8e 	bl	80062b2 <SDMMC_CmdBusWidth>
 8004996:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	e003      	b.n	80049aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e001      	b.n	80049aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80049a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b086      	sub	sp, #24
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80049ba:	2300      	movs	r3, #0
 80049bc:	60fb      	str	r3, [r7, #12]
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2100      	movs	r1, #0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fac2 	bl	8005f52 <SDIO_GetResponse>
 80049ce:	4603      	mov	r3, r0
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049d8:	d102      	bne.n	80049e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80049da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80049de:	e02f      	b.n	8004a40 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80049e0:	f107 030c 	add.w	r3, r7, #12
 80049e4:	4619      	mov	r1, r3
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f82e 	bl	8004a48 <SD_FindSCR>
 80049ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	e023      	b.n	8004a40 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d01c      	beq.n	8004a3c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	041b      	lsls	r3, r3, #16
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f001 fc0a 	bl	8006228 <SDMMC_CmdAppCommand>
 8004a14:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	e00f      	b.n	8004a40 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2100      	movs	r1, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fc43 	bl	80062b2 <SDMMC_CmdBusWidth>
 8004a2c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d001      	beq.n	8004a38 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	e003      	b.n	8004a40 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e001      	b.n	8004a40 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004a3c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b08f      	sub	sp, #60	; 0x3c
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004a52:	f7fc fff5 	bl	8001a40 <HAL_GetTick>
 8004a56:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60bb      	str	r3, [r7, #8]
 8004a60:	2300      	movs	r3, #0
 8004a62:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 faae 	bl	8005fd0 <SDMMC_CmdBlockLength>
 8004a74:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7e:	e0a9      	b.n	8004bd4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a88:	041b      	lsls	r3, r3, #16
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4610      	mov	r0, r2
 8004a8e:	f001 fbcb 	bl	8006228 <SDMMC_CmdAppCommand>
 8004a92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d001      	beq.n	8004a9e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a9c:	e09a      	b.n	8004bd4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004aa4:	2308      	movs	r3, #8
 8004aa6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004aa8:	2330      	movs	r3, #48	; 0x30
 8004aaa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004aac:	2302      	movs	r3, #2
 8004aae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f107 0210 	add.w	r2, r7, #16
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f001 fa58 	bl	8005f78 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f001 fc12 	bl	80062f6 <SDMMC_CmdSendSCR>
 8004ad2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d022      	beq.n	8004b20 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	e07a      	b.n	8004bd4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00e      	beq.n	8004b0a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6819      	ldr	r1, [r3, #0]
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	f107 0208 	add.w	r2, r7, #8
 8004af8:	18d4      	adds	r4, r2, r3
 8004afa:	4608      	mov	r0, r1
 8004afc:	f001 f9b7 	bl	8005e6e <SDIO_ReadFIFO>
 8004b00:	4603      	mov	r3, r0
 8004b02:	6023      	str	r3, [r4, #0]
      index++;
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	3301      	adds	r3, #1
 8004b08:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004b0a:	f7fc ff99 	bl	8001a40 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b18:	d102      	bne.n	8004b20 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004b1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b1e:	e059      	b.n	8004bd4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b26:	f240 432a 	movw	r3, #1066	; 0x42a
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0d6      	beq.n	8004ade <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b36:	f003 0308 	and.w	r3, r3, #8
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2208      	movs	r2, #8
 8004b44:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004b46:	2308      	movs	r3, #8
 8004b48:	e044      	b.n	8004bd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004b60:	2302      	movs	r3, #2
 8004b62:	e037      	b.n	8004bd4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d005      	beq.n	8004b7e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2220      	movs	r2, #32
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004b7a:	2320      	movs	r3, #32
 8004b7c:	e02a      	b.n	8004bd4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f240 523a 	movw	r2, #1338	; 0x53a
 8004b86:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	061a      	lsls	r2, r3, #24
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004b94:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	0a1b      	lsrs	r3, r3, #8
 8004b9a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004b9e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	0e1b      	lsrs	r3, r3, #24
 8004ba4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	601a      	str	r2, [r3, #0]
    scr++;
 8004baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bac:	3304      	adds	r3, #4
 8004bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	061a      	lsls	r2, r3, #24
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004bbc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	0a1b      	lsrs	r3, r3, #8
 8004bc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bc6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	0e1b      	lsrs	r3, r3, #24
 8004bcc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	373c      	adds	r7, #60	; 0x3c
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd90      	pop	{r4, r7, pc}

08004bdc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004be8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bee:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d03f      	beq.n	8004c76 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	617b      	str	r3, [r7, #20]
 8004bfa:	e033      	b.n	8004c64 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f001 f934 	bl	8005e6e <SDIO_ReadFIFO>
 8004c06:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	3301      	adds	r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3301      	adds	r3, #1
 8004c40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	0e1b      	lsrs	r3, r3, #24
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	3301      	adds	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	2b07      	cmp	r3, #7
 8004c68:	d9c8      	bls.n	8004bfc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004c76:	bf00      	nop
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a1b      	ldr	r3, [r3, #32]
 8004c8a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d043      	beq.n	8004d20 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004c98:	2300      	movs	r3, #0
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	e037      	b.n	8004d0e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	021a      	lsls	r2, r3, #8
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	041a      	lsls	r2, r3, #16
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	061a      	lsls	r2, r3, #24
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f107 0208 	add.w	r2, r7, #8
 8004d00:	4611      	mov	r1, r2
 8004d02:	4618      	mov	r0, r3
 8004d04:	f001 f8c0 	bl	8005e88 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	617b      	str	r3, [r7, #20]
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b07      	cmp	r3, #7
 8004d12:	d9c4      	bls.n	8004c9e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004d20:	bf00      	nop
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d101      	bne.n	8004d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e056      	b.n	8004de8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fc fb8d 	bl	8001474 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d70:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	431a      	orrs	r2, r3
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	431a      	orrs	r2, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d96:	431a      	orrs	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	ea42 0103 	orr.w	r1, r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	0c1b      	lsrs	r3, r3, #16
 8004db8:	f003 0104 	and.w	r1, r3, #4
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69da      	ldr	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e01d      	b.n	8004e3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 f815 	bl	8004e46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f000 f968 	bl	8005104 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3708      	adds	r7, #8
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e4e:	bf00      	nop
 8004e50:	370c      	adds	r7, #12
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b085      	sub	sp, #20
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0201 	orr.w	r2, r2, #1
 8004e70:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b06      	cmp	r3, #6
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0201 	orr.w	r2, r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3714      	adds	r7, #20
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d122      	bne.n	8004efe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d11b      	bne.n	8004efe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f06f 0202 	mvn.w	r2, #2
 8004ece:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d003      	beq.n	8004eec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f8ee 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004eea:	e005      	b.n	8004ef8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f8e0 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f8f1 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b04      	cmp	r3, #4
 8004f0a:	d122      	bne.n	8004f52 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	f003 0304 	and.w	r3, r3, #4
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d11b      	bne.n	8004f52 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f06f 0204 	mvn.w	r2, #4
 8004f22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	699b      	ldr	r3, [r3, #24]
 8004f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f8c4 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004f3e:	e005      	b.n	8004f4c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f8b6 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f8c7 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0308 	and.w	r3, r3, #8
 8004f5c:	2b08      	cmp	r3, #8
 8004f5e:	d122      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d11b      	bne.n	8004fa6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f06f 0208 	mvn.w	r2, #8
 8004f76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	f003 0303 	and.w	r3, r3, #3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f89a 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004f92:	e005      	b.n	8004fa0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f000 f88c 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 f89d 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	f003 0310 	and.w	r3, r3, #16
 8004fb0:	2b10      	cmp	r3, #16
 8004fb2:	d122      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b10      	cmp	r3, #16
 8004fc0:	d11b      	bne.n	8004ffa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f06f 0210 	mvn.w	r2, #16
 8004fca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f870 	bl	80050c6 <HAL_TIM_IC_CaptureCallback>
 8004fe6:	e005      	b.n	8004ff4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f862 	bl	80050b2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 f873 	bl	80050da <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10e      	bne.n	8005026 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d107      	bne.n	8005026 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f06f 0201 	mvn.w	r2, #1
 800501e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f7fc f907 	bl	8001234 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005030:	2b80      	cmp	r3, #128	; 0x80
 8005032:	d10e      	bne.n	8005052 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b80      	cmp	r3, #128	; 0x80
 8005040:	d107      	bne.n	8005052 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800504a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f903 	bl	8005258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800505c:	2b40      	cmp	r3, #64	; 0x40
 800505e:	d10e      	bne.n	800507e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506a:	2b40      	cmp	r3, #64	; 0x40
 800506c:	d107      	bne.n	800507e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f838 	bl	80050ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f003 0320 	and.w	r3, r3, #32
 8005088:	2b20      	cmp	r3, #32
 800508a:	d10e      	bne.n	80050aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b20      	cmp	r3, #32
 8005098:	d107      	bne.n	80050aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f06f 0220 	mvn.w	r2, #32
 80050a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f8cd 	bl	8005244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050aa:	bf00      	nop
 80050ac:	3708      	adds	r7, #8
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b083      	sub	sp, #12
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr

080050da <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050da:	b480      	push	{r7}
 80050dc:	b083      	sub	sp, #12
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e2:	bf00      	nop
 80050e4:	370c      	adds	r7, #12
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a40      	ldr	r2, [pc, #256]	; (8005218 <TIM_Base_SetConfig+0x114>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005122:	d00f      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a3d      	ldr	r2, [pc, #244]	; (800521c <TIM_Base_SetConfig+0x118>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d00b      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a3c      	ldr	r2, [pc, #240]	; (8005220 <TIM_Base_SetConfig+0x11c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d007      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a3b      	ldr	r2, [pc, #236]	; (8005224 <TIM_Base_SetConfig+0x120>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d003      	beq.n	8005144 <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a3a      	ldr	r2, [pc, #232]	; (8005228 <TIM_Base_SetConfig+0x124>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d108      	bne.n	8005156 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800514a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a2f      	ldr	r2, [pc, #188]	; (8005218 <TIM_Base_SetConfig+0x114>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d02b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005164:	d027      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2c      	ldr	r2, [pc, #176]	; (800521c <TIM_Base_SetConfig+0x118>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d023      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2b      	ldr	r2, [pc, #172]	; (8005220 <TIM_Base_SetConfig+0x11c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <TIM_Base_SetConfig+0x120>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d01b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a29      	ldr	r2, [pc, #164]	; (8005228 <TIM_Base_SetConfig+0x124>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d017      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a28      	ldr	r2, [pc, #160]	; (800522c <TIM_Base_SetConfig+0x128>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a27      	ldr	r2, [pc, #156]	; (8005230 <TIM_Base_SetConfig+0x12c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a26      	ldr	r2, [pc, #152]	; (8005234 <TIM_Base_SetConfig+0x130>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a25      	ldr	r2, [pc, #148]	; (8005238 <TIM_Base_SetConfig+0x134>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a24      	ldr	r2, [pc, #144]	; (800523c <TIM_Base_SetConfig+0x138>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0xb2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a23      	ldr	r2, [pc, #140]	; (8005240 <TIM_Base_SetConfig+0x13c>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a0a      	ldr	r2, [pc, #40]	; (8005218 <TIM_Base_SetConfig+0x114>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a0c      	ldr	r2, [pc, #48]	; (8005228 <TIM_Base_SetConfig+0x124>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d103      	bne.n	8005204 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	615a      	str	r2, [r3, #20]
}
 800520a:	bf00      	nop
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40010400 	.word	0x40010400
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800
 8005238:	40001800 	.word	0x40001800
 800523c:	40001c00 	.word	0x40001c00
 8005240:	40002000 	.word	0x40002000

08005244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e03f      	b.n	80052fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fc f936 	bl	8001504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	; 0x24
 800529c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 fa35 	bl	8005720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2220      	movs	r2, #32
 80052f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80052fc:	2300      	movs	r3, #0
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b20      	cmp	r3, #32
 8005320:	d153      	bne.n	80053ca <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_UART_Transmit_DMA+0x26>
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e04c      	b.n	80053cc <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UART_Transmit_DMA+0x38>
 800533c:	2302      	movs	r3, #2
 800533e:	e045      	b.n	80053cc <HAL_UART_Transmit_DMA+0xc4>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	88fa      	ldrh	r2, [r7, #6]
 8005352:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	88fa      	ldrh	r2, [r7, #6]
 8005358:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2221      	movs	r2, #33	; 0x21
 8005364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	4a19      	ldr	r2, [pc, #100]	; (80053d4 <HAL_UART_Transmit_DMA+0xcc>)
 800536e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005374:	4a18      	ldr	r2, [pc, #96]	; (80053d8 <HAL_UART_Transmit_DMA+0xd0>)
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4a17      	ldr	r2, [pc, #92]	; (80053dc <HAL_UART_Transmit_DMA+0xd4>)
 800537e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	2200      	movs	r2, #0
 8005386:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005388:	f107 0308 	add.w	r3, r7, #8
 800538c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	3304      	adds	r3, #4
 800539c:	461a      	mov	r2, r3
 800539e:	88fb      	ldrh	r3, [r7, #6]
 80053a0:	f7fd f86c 	bl	800247c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695a      	ldr	r2, [r3, #20]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053c4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	08005531 	.word	0x08005531
 80053d8:	08005583 	.word	0x08005583
 80053dc:	08005623 	.word	0x08005623

080053e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d166      	bne.n	80054c8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_Receive_DMA+0x26>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e05f      	b.n	80054ca <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_UART_Receive_DMA+0x38>
 8005414:	2302      	movs	r3, #2
 8005416:	e058      	b.n	80054ca <HAL_UART_Receive_DMA+0xea>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	88fa      	ldrh	r2, [r7, #6]
 800542a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2222      	movs	r2, #34	; 0x22
 8005436:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800543e:	4a25      	ldr	r2, [pc, #148]	; (80054d4 <HAL_UART_Receive_DMA+0xf4>)
 8005440:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005446:	4a24      	ldr	r2, [pc, #144]	; (80054d8 <HAL_UART_Receive_DMA+0xf8>)
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800544e:	4a23      	ldr	r2, [pc, #140]	; (80054dc <HAL_UART_Receive_DMA+0xfc>)
 8005450:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005456:	2200      	movs	r2, #0
 8005458:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	88fb      	ldrh	r3, [r7, #6]
 8005472:	f7fd f803 	bl	800247c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005476:	2300      	movs	r3, #0
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054a2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	695a      	ldr	r2, [r3, #20]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	695a      	ldr	r2, [r3, #20]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054c2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80054c4:	2300      	movs	r3, #0
 80054c6:	e000      	b.n	80054ca <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80054c8:	2302      	movs	r3, #2
  }
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	0800559f 	.word	0x0800559f
 80054d8:	08005607 	.word	0x08005607
 80054dc:	08005623 	.word	0x08005623

080054e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80054fc:	bf00      	nop
 80054fe:	370c      	adds	r7, #12
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d113      	bne.n	8005574 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005560:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005570:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005572:	e002      	b.n	800557a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f7ff ffb3 	bl	80054e0 <HAL_UART_TxCpltCallback>
}
 800557a:	bf00      	nop
 800557c:	3710      	adds	r7, #16
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b084      	sub	sp, #16
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff ffaf 	bl	80054f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b084      	sub	sp, #16
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055aa:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d11e      	bne.n	80055f8 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68da      	ldr	r2, [r3, #12]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80055ce:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ee:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7fb fb4f 	bl	8000c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055fe:	bf00      	nop
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b084      	sub	sp, #16
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005614:	68f8      	ldr	r0, [r7, #12]
 8005616:	f7ff ff77 	bl	8005508 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800561a:	bf00      	nop
 800561c:	3710      	adds	r7, #16
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800562a:	2300      	movs	r3, #0
 800562c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	bf0c      	ite	eq
 8005642:	2301      	moveq	r3, #1
 8005644:	2300      	movne	r3, #0
 8005646:	b2db      	uxtb	r3, r3
 8005648:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b21      	cmp	r3, #33	; 0x21
 8005654:	d108      	bne.n	8005668 <UART_DMAError+0x46>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d005      	beq.n	8005668 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	2200      	movs	r2, #0
 8005660:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005662:	68b8      	ldr	r0, [r7, #8]
 8005664:	f000 f827 	bl	80056b6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005672:	2b40      	cmp	r3, #64	; 0x40
 8005674:	bf0c      	ite	eq
 8005676:	2301      	moveq	r3, #1
 8005678:	2300      	movne	r3, #0
 800567a:	b2db      	uxtb	r3, r3
 800567c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b22      	cmp	r3, #34	; 0x22
 8005688:	d108      	bne.n	800569c <UART_DMAError+0x7a>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d005      	beq.n	800569c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005696:	68b8      	ldr	r0, [r7, #8]
 8005698:	f000 f823 	bl	80056e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a0:	f043 0210 	orr.w	r2, r3, #16
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056a8:	68b8      	ldr	r0, [r7, #8]
 80056aa:	f7ff ff37 	bl	800551c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80056cc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2220      	movs	r2, #32
 80056d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056e2:	b480      	push	{r7}
 80056e4:	b083      	sub	sp, #12
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056f8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	695a      	ldr	r2, [r3, #20]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0201 	bic.w	r2, r2, #1
 8005708:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2220      	movs	r2, #32
 800570e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005712:	bf00      	nop
 8005714:	370c      	adds	r7, #12
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
	...

08005720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005724:	b085      	sub	sp, #20
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68da      	ldr	r2, [r3, #12]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689a      	ldr	r2, [r3, #8]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	431a      	orrs	r2, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	431a      	orrs	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	69db      	ldr	r3, [r3, #28]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005762:	f023 030c 	bic.w	r3, r3, #12
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6812      	ldr	r2, [r2, #0]
 800576a:	68f9      	ldr	r1, [r7, #12]
 800576c:	430b      	orrs	r3, r1
 800576e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699a      	ldr	r2, [r3, #24]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578e:	f040 818b 	bne.w	8005aa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4ac1      	ldr	r2, [pc, #772]	; (8005a9c <UART_SetConfig+0x37c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d005      	beq.n	80057a8 <UART_SetConfig+0x88>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4abf      	ldr	r2, [pc, #764]	; (8005aa0 <UART_SetConfig+0x380>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	f040 80bd 	bne.w	8005922 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80057a8:	f7fd ff7a 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 80057ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	461d      	mov	r5, r3
 80057b2:	f04f 0600 	mov.w	r6, #0
 80057b6:	46a8      	mov	r8, r5
 80057b8:	46b1      	mov	r9, r6
 80057ba:	eb18 0308 	adds.w	r3, r8, r8
 80057be:	eb49 0409 	adc.w	r4, r9, r9
 80057c2:	4698      	mov	r8, r3
 80057c4:	46a1      	mov	r9, r4
 80057c6:	eb18 0805 	adds.w	r8, r8, r5
 80057ca:	eb49 0906 	adc.w	r9, r9, r6
 80057ce:	f04f 0100 	mov.w	r1, #0
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057e2:	4688      	mov	r8, r1
 80057e4:	4691      	mov	r9, r2
 80057e6:	eb18 0005 	adds.w	r0, r8, r5
 80057ea:	eb49 0106 	adc.w	r1, r9, r6
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	461d      	mov	r5, r3
 80057f4:	f04f 0600 	mov.w	r6, #0
 80057f8:	196b      	adds	r3, r5, r5
 80057fa:	eb46 0406 	adc.w	r4, r6, r6
 80057fe:	461a      	mov	r2, r3
 8005800:	4623      	mov	r3, r4
 8005802:	f7fa fce5 	bl	80001d0 <__aeabi_uldivmod>
 8005806:	4603      	mov	r3, r0
 8005808:	460c      	mov	r4, r1
 800580a:	461a      	mov	r2, r3
 800580c:	4ba5      	ldr	r3, [pc, #660]	; (8005aa4 <UART_SetConfig+0x384>)
 800580e:	fba3 2302 	umull	r2, r3, r3, r2
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	461d      	mov	r5, r3
 800581c:	f04f 0600 	mov.w	r6, #0
 8005820:	46a9      	mov	r9, r5
 8005822:	46b2      	mov	sl, r6
 8005824:	eb19 0309 	adds.w	r3, r9, r9
 8005828:	eb4a 040a 	adc.w	r4, sl, sl
 800582c:	4699      	mov	r9, r3
 800582e:	46a2      	mov	sl, r4
 8005830:	eb19 0905 	adds.w	r9, r9, r5
 8005834:	eb4a 0a06 	adc.w	sl, sl, r6
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800584c:	4689      	mov	r9, r1
 800584e:	4692      	mov	sl, r2
 8005850:	eb19 0005 	adds.w	r0, r9, r5
 8005854:	eb4a 0106 	adc.w	r1, sl, r6
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	461d      	mov	r5, r3
 800585e:	f04f 0600 	mov.w	r6, #0
 8005862:	196b      	adds	r3, r5, r5
 8005864:	eb46 0406 	adc.w	r4, r6, r6
 8005868:	461a      	mov	r2, r3
 800586a:	4623      	mov	r3, r4
 800586c:	f7fa fcb0 	bl	80001d0 <__aeabi_uldivmod>
 8005870:	4603      	mov	r3, r0
 8005872:	460c      	mov	r4, r1
 8005874:	461a      	mov	r2, r3
 8005876:	4b8b      	ldr	r3, [pc, #556]	; (8005aa4 <UART_SetConfig+0x384>)
 8005878:	fba3 1302 	umull	r1, r3, r3, r2
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	2164      	movs	r1, #100	; 0x64
 8005880:	fb01 f303 	mul.w	r3, r1, r3
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	3332      	adds	r3, #50	; 0x32
 800588a:	4a86      	ldr	r2, [pc, #536]	; (8005aa4 <UART_SetConfig+0x384>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005898:	4498      	add	r8, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	461d      	mov	r5, r3
 800589e:	f04f 0600 	mov.w	r6, #0
 80058a2:	46a9      	mov	r9, r5
 80058a4:	46b2      	mov	sl, r6
 80058a6:	eb19 0309 	adds.w	r3, r9, r9
 80058aa:	eb4a 040a 	adc.w	r4, sl, sl
 80058ae:	4699      	mov	r9, r3
 80058b0:	46a2      	mov	sl, r4
 80058b2:	eb19 0905 	adds.w	r9, r9, r5
 80058b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80058ba:	f04f 0100 	mov.w	r1, #0
 80058be:	f04f 0200 	mov.w	r2, #0
 80058c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058ce:	4689      	mov	r9, r1
 80058d0:	4692      	mov	sl, r2
 80058d2:	eb19 0005 	adds.w	r0, r9, r5
 80058d6:	eb4a 0106 	adc.w	r1, sl, r6
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	461d      	mov	r5, r3
 80058e0:	f04f 0600 	mov.w	r6, #0
 80058e4:	196b      	adds	r3, r5, r5
 80058e6:	eb46 0406 	adc.w	r4, r6, r6
 80058ea:	461a      	mov	r2, r3
 80058ec:	4623      	mov	r3, r4
 80058ee:	f7fa fc6f 	bl	80001d0 <__aeabi_uldivmod>
 80058f2:	4603      	mov	r3, r0
 80058f4:	460c      	mov	r4, r1
 80058f6:	461a      	mov	r2, r3
 80058f8:	4b6a      	ldr	r3, [pc, #424]	; (8005aa4 <UART_SetConfig+0x384>)
 80058fa:	fba3 1302 	umull	r1, r3, r3, r2
 80058fe:	095b      	lsrs	r3, r3, #5
 8005900:	2164      	movs	r1, #100	; 0x64
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	3332      	adds	r3, #50	; 0x32
 800590c:	4a65      	ldr	r2, [pc, #404]	; (8005aa4 <UART_SetConfig+0x384>)
 800590e:	fba2 2303 	umull	r2, r3, r2, r3
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	f003 0207 	and.w	r2, r3, #7
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4442      	add	r2, r8
 800591e:	609a      	str	r2, [r3, #8]
 8005920:	e26f      	b.n	8005e02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005922:	f7fd fea9 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8005926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	461d      	mov	r5, r3
 800592c:	f04f 0600 	mov.w	r6, #0
 8005930:	46a8      	mov	r8, r5
 8005932:	46b1      	mov	r9, r6
 8005934:	eb18 0308 	adds.w	r3, r8, r8
 8005938:	eb49 0409 	adc.w	r4, r9, r9
 800593c:	4698      	mov	r8, r3
 800593e:	46a1      	mov	r9, r4
 8005940:	eb18 0805 	adds.w	r8, r8, r5
 8005944:	eb49 0906 	adc.w	r9, r9, r6
 8005948:	f04f 0100 	mov.w	r1, #0
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800595c:	4688      	mov	r8, r1
 800595e:	4691      	mov	r9, r2
 8005960:	eb18 0005 	adds.w	r0, r8, r5
 8005964:	eb49 0106 	adc.w	r1, r9, r6
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	461d      	mov	r5, r3
 800596e:	f04f 0600 	mov.w	r6, #0
 8005972:	196b      	adds	r3, r5, r5
 8005974:	eb46 0406 	adc.w	r4, r6, r6
 8005978:	461a      	mov	r2, r3
 800597a:	4623      	mov	r3, r4
 800597c:	f7fa fc28 	bl	80001d0 <__aeabi_uldivmod>
 8005980:	4603      	mov	r3, r0
 8005982:	460c      	mov	r4, r1
 8005984:	461a      	mov	r2, r3
 8005986:	4b47      	ldr	r3, [pc, #284]	; (8005aa4 <UART_SetConfig+0x384>)
 8005988:	fba3 2302 	umull	r2, r3, r3, r2
 800598c:	095b      	lsrs	r3, r3, #5
 800598e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	461d      	mov	r5, r3
 8005996:	f04f 0600 	mov.w	r6, #0
 800599a:	46a9      	mov	r9, r5
 800599c:	46b2      	mov	sl, r6
 800599e:	eb19 0309 	adds.w	r3, r9, r9
 80059a2:	eb4a 040a 	adc.w	r4, sl, sl
 80059a6:	4699      	mov	r9, r3
 80059a8:	46a2      	mov	sl, r4
 80059aa:	eb19 0905 	adds.w	r9, r9, r5
 80059ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80059b2:	f04f 0100 	mov.w	r1, #0
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059c6:	4689      	mov	r9, r1
 80059c8:	4692      	mov	sl, r2
 80059ca:	eb19 0005 	adds.w	r0, r9, r5
 80059ce:	eb4a 0106 	adc.w	r1, sl, r6
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	461d      	mov	r5, r3
 80059d8:	f04f 0600 	mov.w	r6, #0
 80059dc:	196b      	adds	r3, r5, r5
 80059de:	eb46 0406 	adc.w	r4, r6, r6
 80059e2:	461a      	mov	r2, r3
 80059e4:	4623      	mov	r3, r4
 80059e6:	f7fa fbf3 	bl	80001d0 <__aeabi_uldivmod>
 80059ea:	4603      	mov	r3, r0
 80059ec:	460c      	mov	r4, r1
 80059ee:	461a      	mov	r2, r3
 80059f0:	4b2c      	ldr	r3, [pc, #176]	; (8005aa4 <UART_SetConfig+0x384>)
 80059f2:	fba3 1302 	umull	r1, r3, r3, r2
 80059f6:	095b      	lsrs	r3, r3, #5
 80059f8:	2164      	movs	r1, #100	; 0x64
 80059fa:	fb01 f303 	mul.w	r3, r1, r3
 80059fe:	1ad3      	subs	r3, r2, r3
 8005a00:	00db      	lsls	r3, r3, #3
 8005a02:	3332      	adds	r3, #50	; 0x32
 8005a04:	4a27      	ldr	r2, [pc, #156]	; (8005aa4 <UART_SetConfig+0x384>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a12:	4498      	add	r8, r3
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	461d      	mov	r5, r3
 8005a18:	f04f 0600 	mov.w	r6, #0
 8005a1c:	46a9      	mov	r9, r5
 8005a1e:	46b2      	mov	sl, r6
 8005a20:	eb19 0309 	adds.w	r3, r9, r9
 8005a24:	eb4a 040a 	adc.w	r4, sl, sl
 8005a28:	4699      	mov	r9, r3
 8005a2a:	46a2      	mov	sl, r4
 8005a2c:	eb19 0905 	adds.w	r9, r9, r5
 8005a30:	eb4a 0a06 	adc.w	sl, sl, r6
 8005a34:	f04f 0100 	mov.w	r1, #0
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a48:	4689      	mov	r9, r1
 8005a4a:	4692      	mov	sl, r2
 8005a4c:	eb19 0005 	adds.w	r0, r9, r5
 8005a50:	eb4a 0106 	adc.w	r1, sl, r6
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	461d      	mov	r5, r3
 8005a5a:	f04f 0600 	mov.w	r6, #0
 8005a5e:	196b      	adds	r3, r5, r5
 8005a60:	eb46 0406 	adc.w	r4, r6, r6
 8005a64:	461a      	mov	r2, r3
 8005a66:	4623      	mov	r3, r4
 8005a68:	f7fa fbb2 	bl	80001d0 <__aeabi_uldivmod>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	460c      	mov	r4, r1
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <UART_SetConfig+0x384>)
 8005a74:	fba3 1302 	umull	r1, r3, r3, r2
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	2164      	movs	r1, #100	; 0x64
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	3332      	adds	r3, #50	; 0x32
 8005a86:	4a07      	ldr	r2, [pc, #28]	; (8005aa4 <UART_SetConfig+0x384>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	f003 0207 	and.w	r2, r3, #7
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4442      	add	r2, r8
 8005a98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005a9a:	e1b2      	b.n	8005e02 <UART_SetConfig+0x6e2>
 8005a9c:	40011000 	.word	0x40011000
 8005aa0:	40011400 	.word	0x40011400
 8005aa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4ad7      	ldr	r2, [pc, #860]	; (8005e0c <UART_SetConfig+0x6ec>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d005      	beq.n	8005abe <UART_SetConfig+0x39e>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4ad6      	ldr	r2, [pc, #856]	; (8005e10 <UART_SetConfig+0x6f0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	f040 80d1 	bne.w	8005c60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005abe:	f7fd fdef 	bl	80036a0 <HAL_RCC_GetPCLK2Freq>
 8005ac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	469a      	mov	sl, r3
 8005ac8:	f04f 0b00 	mov.w	fp, #0
 8005acc:	46d0      	mov	r8, sl
 8005ace:	46d9      	mov	r9, fp
 8005ad0:	eb18 0308 	adds.w	r3, r8, r8
 8005ad4:	eb49 0409 	adc.w	r4, r9, r9
 8005ad8:	4698      	mov	r8, r3
 8005ada:	46a1      	mov	r9, r4
 8005adc:	eb18 080a 	adds.w	r8, r8, sl
 8005ae0:	eb49 090b 	adc.w	r9, r9, fp
 8005ae4:	f04f 0100 	mov.w	r1, #0
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005af0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005af4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005af8:	4688      	mov	r8, r1
 8005afa:	4691      	mov	r9, r2
 8005afc:	eb1a 0508 	adds.w	r5, sl, r8
 8005b00:	eb4b 0609 	adc.w	r6, fp, r9
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	4619      	mov	r1, r3
 8005b0a:	f04f 0200 	mov.w	r2, #0
 8005b0e:	f04f 0300 	mov.w	r3, #0
 8005b12:	f04f 0400 	mov.w	r4, #0
 8005b16:	0094      	lsls	r4, r2, #2
 8005b18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b1c:	008b      	lsls	r3, r1, #2
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4623      	mov	r3, r4
 8005b22:	4628      	mov	r0, r5
 8005b24:	4631      	mov	r1, r6
 8005b26:	f7fa fb53 	bl	80001d0 <__aeabi_uldivmod>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	460c      	mov	r4, r1
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4bb8      	ldr	r3, [pc, #736]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005b32:	fba3 2302 	umull	r2, r3, r3, r2
 8005b36:	095b      	lsrs	r3, r3, #5
 8005b38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	469b      	mov	fp, r3
 8005b40:	f04f 0c00 	mov.w	ip, #0
 8005b44:	46d9      	mov	r9, fp
 8005b46:	46e2      	mov	sl, ip
 8005b48:	eb19 0309 	adds.w	r3, r9, r9
 8005b4c:	eb4a 040a 	adc.w	r4, sl, sl
 8005b50:	4699      	mov	r9, r3
 8005b52:	46a2      	mov	sl, r4
 8005b54:	eb19 090b 	adds.w	r9, r9, fp
 8005b58:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b5c:	f04f 0100 	mov.w	r1, #0
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b70:	4689      	mov	r9, r1
 8005b72:	4692      	mov	sl, r2
 8005b74:	eb1b 0509 	adds.w	r5, fp, r9
 8005b78:	eb4c 060a 	adc.w	r6, ip, sl
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	4619      	mov	r1, r3
 8005b82:	f04f 0200 	mov.w	r2, #0
 8005b86:	f04f 0300 	mov.w	r3, #0
 8005b8a:	f04f 0400 	mov.w	r4, #0
 8005b8e:	0094      	lsls	r4, r2, #2
 8005b90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b94:	008b      	lsls	r3, r1, #2
 8005b96:	461a      	mov	r2, r3
 8005b98:	4623      	mov	r3, r4
 8005b9a:	4628      	mov	r0, r5
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	f7fa fb17 	bl	80001d0 <__aeabi_uldivmod>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b9a      	ldr	r3, [pc, #616]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005baa:	fba3 1302 	umull	r1, r3, r3, r2
 8005bae:	095b      	lsrs	r3, r3, #5
 8005bb0:	2164      	movs	r1, #100	; 0x64
 8005bb2:	fb01 f303 	mul.w	r3, r1, r3
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	3332      	adds	r3, #50	; 0x32
 8005bbc:	4a95      	ldr	r2, [pc, #596]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc2:	095b      	lsrs	r3, r3, #5
 8005bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc8:	4498      	add	r8, r3
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	469b      	mov	fp, r3
 8005bce:	f04f 0c00 	mov.w	ip, #0
 8005bd2:	46d9      	mov	r9, fp
 8005bd4:	46e2      	mov	sl, ip
 8005bd6:	eb19 0309 	adds.w	r3, r9, r9
 8005bda:	eb4a 040a 	adc.w	r4, sl, sl
 8005bde:	4699      	mov	r9, r3
 8005be0:	46a2      	mov	sl, r4
 8005be2:	eb19 090b 	adds.w	r9, r9, fp
 8005be6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	f04f 0200 	mov.w	r2, #0
 8005bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005bfe:	4689      	mov	r9, r1
 8005c00:	4692      	mov	sl, r2
 8005c02:	eb1b 0509 	adds.w	r5, fp, r9
 8005c06:	eb4c 060a 	adc.w	r6, ip, sl
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	f04f 0300 	mov.w	r3, #0
 8005c18:	f04f 0400 	mov.w	r4, #0
 8005c1c:	0094      	lsls	r4, r2, #2
 8005c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c22:	008b      	lsls	r3, r1, #2
 8005c24:	461a      	mov	r2, r3
 8005c26:	4623      	mov	r3, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	f7fa fad0 	bl	80001d0 <__aeabi_uldivmod>
 8005c30:	4603      	mov	r3, r0
 8005c32:	460c      	mov	r4, r1
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b77      	ldr	r3, [pc, #476]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005c38:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	2164      	movs	r1, #100	; 0x64
 8005c40:	fb01 f303 	mul.w	r3, r1, r3
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	3332      	adds	r3, #50	; 0x32
 8005c4a:	4a72      	ldr	r2, [pc, #456]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c50:	095b      	lsrs	r3, r3, #5
 8005c52:	f003 020f 	and.w	r2, r3, #15
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4442      	add	r2, r8
 8005c5c:	609a      	str	r2, [r3, #8]
 8005c5e:	e0d0      	b.n	8005e02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c60:	f7fd fd0a 	bl	8003678 <HAL_RCC_GetPCLK1Freq>
 8005c64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	469a      	mov	sl, r3
 8005c6a:	f04f 0b00 	mov.w	fp, #0
 8005c6e:	46d0      	mov	r8, sl
 8005c70:	46d9      	mov	r9, fp
 8005c72:	eb18 0308 	adds.w	r3, r8, r8
 8005c76:	eb49 0409 	adc.w	r4, r9, r9
 8005c7a:	4698      	mov	r8, r3
 8005c7c:	46a1      	mov	r9, r4
 8005c7e:	eb18 080a 	adds.w	r8, r8, sl
 8005c82:	eb49 090b 	adc.w	r9, r9, fp
 8005c86:	f04f 0100 	mov.w	r1, #0
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005c92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005c96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005c9a:	4688      	mov	r8, r1
 8005c9c:	4691      	mov	r9, r2
 8005c9e:	eb1a 0508 	adds.w	r5, sl, r8
 8005ca2:	eb4b 0609 	adc.w	r6, fp, r9
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	4619      	mov	r1, r3
 8005cac:	f04f 0200 	mov.w	r2, #0
 8005cb0:	f04f 0300 	mov.w	r3, #0
 8005cb4:	f04f 0400 	mov.w	r4, #0
 8005cb8:	0094      	lsls	r4, r2, #2
 8005cba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cbe:	008b      	lsls	r3, r1, #2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	4623      	mov	r3, r4
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	4631      	mov	r1, r6
 8005cc8:	f7fa fa82 	bl	80001d0 <__aeabi_uldivmod>
 8005ccc:	4603      	mov	r3, r0
 8005cce:	460c      	mov	r4, r1
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	4b50      	ldr	r3, [pc, #320]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005cd4:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd8:	095b      	lsrs	r3, r3, #5
 8005cda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	469b      	mov	fp, r3
 8005ce2:	f04f 0c00 	mov.w	ip, #0
 8005ce6:	46d9      	mov	r9, fp
 8005ce8:	46e2      	mov	sl, ip
 8005cea:	eb19 0309 	adds.w	r3, r9, r9
 8005cee:	eb4a 040a 	adc.w	r4, sl, sl
 8005cf2:	4699      	mov	r9, r3
 8005cf4:	46a2      	mov	sl, r4
 8005cf6:	eb19 090b 	adds.w	r9, r9, fp
 8005cfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cfe:	f04f 0100 	mov.w	r1, #0
 8005d02:	f04f 0200 	mov.w	r2, #0
 8005d06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005d12:	4689      	mov	r9, r1
 8005d14:	4692      	mov	sl, r2
 8005d16:	eb1b 0509 	adds.w	r5, fp, r9
 8005d1a:	eb4c 060a 	adc.w	r6, ip, sl
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	4619      	mov	r1, r3
 8005d24:	f04f 0200 	mov.w	r2, #0
 8005d28:	f04f 0300 	mov.w	r3, #0
 8005d2c:	f04f 0400 	mov.w	r4, #0
 8005d30:	0094      	lsls	r4, r2, #2
 8005d32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005d36:	008b      	lsls	r3, r1, #2
 8005d38:	461a      	mov	r2, r3
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	4628      	mov	r0, r5
 8005d3e:	4631      	mov	r1, r6
 8005d40:	f7fa fa46 	bl	80001d0 <__aeabi_uldivmod>
 8005d44:	4603      	mov	r3, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b32      	ldr	r3, [pc, #200]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8005d50:	095b      	lsrs	r3, r3, #5
 8005d52:	2164      	movs	r1, #100	; 0x64
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	011b      	lsls	r3, r3, #4
 8005d5c:	3332      	adds	r3, #50	; 0x32
 8005d5e:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005d60:	fba2 2303 	umull	r2, r3, r2, r3
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d6a:	4498      	add	r8, r3
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	469b      	mov	fp, r3
 8005d70:	f04f 0c00 	mov.w	ip, #0
 8005d74:	46d9      	mov	r9, fp
 8005d76:	46e2      	mov	sl, ip
 8005d78:	eb19 0309 	adds.w	r3, r9, r9
 8005d7c:	eb4a 040a 	adc.w	r4, sl, sl
 8005d80:	4699      	mov	r9, r3
 8005d82:	46a2      	mov	sl, r4
 8005d84:	eb19 090b 	adds.w	r9, r9, fp
 8005d88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005d8c:	f04f 0100 	mov.w	r1, #0
 8005d90:	f04f 0200 	mov.w	r2, #0
 8005d94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005d9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005da0:	4689      	mov	r9, r1
 8005da2:	4692      	mov	sl, r2
 8005da4:	eb1b 0509 	adds.w	r5, fp, r9
 8005da8:	eb4c 060a 	adc.w	r6, ip, sl
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	4619      	mov	r1, r3
 8005db2:	f04f 0200 	mov.w	r2, #0
 8005db6:	f04f 0300 	mov.w	r3, #0
 8005dba:	f04f 0400 	mov.w	r4, #0
 8005dbe:	0094      	lsls	r4, r2, #2
 8005dc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005dc4:	008b      	lsls	r3, r1, #2
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	4623      	mov	r3, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	4631      	mov	r1, r6
 8005dce:	f7fa f9ff 	bl	80001d0 <__aeabi_uldivmod>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	460c      	mov	r4, r1
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	4b0e      	ldr	r3, [pc, #56]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005dda:	fba3 1302 	umull	r1, r3, r3, r2
 8005dde:	095b      	lsrs	r3, r3, #5
 8005de0:	2164      	movs	r1, #100	; 0x64
 8005de2:	fb01 f303 	mul.w	r3, r1, r3
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	3332      	adds	r3, #50	; 0x32
 8005dec:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <UART_SetConfig+0x6f4>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	f003 020f 	and.w	r2, r3, #15
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4442      	add	r2, r8
 8005dfe:	609a      	str	r2, [r3, #8]
}
 8005e00:	e7ff      	b.n	8005e02 <UART_SetConfig+0x6e2>
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e0c:	40011000 	.word	0x40011000
 8005e10:	40011400 	.word	0x40011400
 8005e14:	51eb851f 	.word	0x51eb851f

08005e18 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005e18:	b084      	sub	sp, #16
 8005e1a:	b480      	push	{r7}
 8005e1c:	b085      	sub	sp, #20
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	f107 001c 	add.w	r0, r7, #28
 8005e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005e2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005e30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005e32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005e36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005e3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005e3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005e42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005e44:	68fa      	ldr	r2, [r7, #12]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005e52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	b004      	add	sp, #16
 8005e6c:	4770      	bx	lr

08005e6e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	370c      	adds	r7, #12
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea8:	4770      	bx	lr

08005eaa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2203      	movs	r2, #3
 8005eb6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005eb8:	2002      	movs	r0, #2
 8005eba:	f7fb fdcd 	bl	8001a58 <HAL_Delay>
  
  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0303 	and.w	r3, r3, #3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b085      	sub	sp, #20
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005f08:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005f0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005f1e:	f023 030f 	bic.w	r3, r3, #15
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005f2a:	2300      	movs	r3, #0
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3714      	adds	r7, #20
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr

08005f38 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	b2db      	uxtb	r3, r3
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005f52:	b480      	push	{r7}
 8005f54:	b085      	sub	sp, #20
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	461a      	mov	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
}  
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr

08005f78 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005f9e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005fa4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005faa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0

}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3714      	adds	r7, #20
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b088      	sub	sp, #32
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005fde:	2310      	movs	r3, #16
 8005fe0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fe2:	2340      	movs	r3, #64	; 0x40
 8005fe4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ff0:	f107 0308 	add.w	r3, r7, #8
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7ff ff74 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005ffc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006000:	2110      	movs	r1, #16
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fa40 	bl	8006488 <SDMMC_GetCmdResp1>
 8006008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800600a:	69fb      	ldr	r3, [r7, #28]
}
 800600c:	4618      	mov	r0, r3
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b088      	sub	sp, #32
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006022:	2311      	movs	r3, #17
 8006024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006026:	2340      	movs	r3, #64	; 0x40
 8006028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800602e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006034:	f107 0308 	add.w	r3, r7, #8
 8006038:	4619      	mov	r1, r3
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ff52 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006040:	f241 3288 	movw	r2, #5000	; 0x1388
 8006044:	2111      	movs	r1, #17
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fa1e 	bl	8006488 <SDMMC_GetCmdResp1>
 800604c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800604e:	69fb      	ldr	r3, [r7, #28]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3720      	adds	r7, #32
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006066:	2312      	movs	r3, #18
 8006068:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800606a:	2340      	movs	r3, #64	; 0x40
 800606c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006076:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006078:	f107 0308 	add.w	r3, r7, #8
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7ff ff30 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006084:	f241 3288 	movw	r2, #5000	; 0x1388
 8006088:	2112      	movs	r1, #18
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 f9fc 	bl	8006488 <SDMMC_GetCmdResp1>
 8006090:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006092:	69fb      	ldr	r3, [r7, #28]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3720      	adds	r7, #32
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b088      	sub	sp, #32
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80060aa:	2318      	movs	r3, #24
 80060ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060ae:	2340      	movs	r3, #64	; 0x40
 80060b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060bc:	f107 0308 	add.w	r3, r7, #8
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff0e 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	2118      	movs	r1, #24
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9da 	bl	8006488 <SDMMC_GetCmdResp1>
 80060d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060d6:	69fb      	ldr	r3, [r7, #28]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3720      	adds	r7, #32
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b088      	sub	sp, #32
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80060ee:	2319      	movs	r3, #25
 80060f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060f2:	2340      	movs	r3, #64	; 0x40
 80060f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006100:	f107 0308 	add.w	r3, r7, #8
 8006104:	4619      	mov	r1, r3
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f7ff feec 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800610c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006110:	2119      	movs	r1, #25
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9b8 	bl	8006488 <SDMMC_GetCmdResp1>
 8006118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800611a:	69fb      	ldr	r3, [r7, #28]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006130:	230c      	movs	r3, #12
 8006132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006134:	2340      	movs	r3, #64	; 0x40
 8006136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006138:	2300      	movs	r3, #0
 800613a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800613c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006140:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006142:	f107 0308 	add.w	r3, r7, #8
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff fecb 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800614e:	4a05      	ldr	r2, [pc, #20]	; (8006164 <SDMMC_CmdStopTransfer+0x40>)
 8006150:	210c      	movs	r1, #12
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f998 	bl	8006488 <SDMMC_GetCmdResp1>
 8006158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800615a:	69fb      	ldr	r3, [r7, #28]
}
 800615c:	4618      	mov	r0, r3
 800615e:	3720      	adds	r7, #32
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	05f5e100 	.word	0x05f5e100

08006168 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006178:	2307      	movs	r3, #7
 800617a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800617c:	2340      	movs	r3, #64	; 0x40
 800617e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006184:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006188:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800618a:	f107 0310 	add.w	r3, r7, #16
 800618e:	4619      	mov	r1, r3
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	f7ff fea7 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006196:	f241 3288 	movw	r2, #5000	; 0x1388
 800619a:	2107      	movs	r1, #7
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f973 	bl	8006488 <SDMMC_GetCmdResp1>
 80061a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3728      	adds	r7, #40	; 0x28
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}

080061ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b088      	sub	sp, #32
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061c2:	2300      	movs	r3, #0
 80061c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061cc:	f107 0308 	add.w	r3, r7, #8
 80061d0:	4619      	mov	r1, r3
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f7ff fe86 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f92d 	bl	8006438 <SDMMC_GetCmdError>
 80061de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061e0:	69fb      	ldr	r3, [r7, #28]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3720      	adds	r7, #32
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b088      	sub	sp, #32
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80061f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80061f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80061f8:	2308      	movs	r3, #8
 80061fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061fc:	2340      	movs	r3, #64	; 0x40
 80061fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006208:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	4619      	mov	r1, r3
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	f7ff fe67 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb16 	bl	8006848 <SDMMC_GetCmdResp7>
 800621c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800621e:	69fb      	ldr	r3, [r7, #28]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3720      	adds	r7, #32
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b088      	sub	sp, #32
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006236:	2337      	movs	r3, #55	; 0x37
 8006238:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800623a:	2340      	movs	r3, #64	; 0x40
 800623c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006246:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006248:	f107 0308 	add.w	r3, r7, #8
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7ff fe48 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006254:	f241 3288 	movw	r2, #5000	; 0x1388
 8006258:	2137      	movs	r1, #55	; 0x37
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f914 	bl	8006488 <SDMMC_GetCmdResp1>
 8006260:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006262:	69fb      	ldr	r3, [r7, #28]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3720      	adds	r7, #32
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b088      	sub	sp, #32
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800627c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006282:	2329      	movs	r3, #41	; 0x29
 8006284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006286:	2340      	movs	r3, #64	; 0x40
 8006288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800628a:	2300      	movs	r3, #0
 800628c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800628e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006294:	f107 0308 	add.w	r3, r7, #8
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7ff fe22 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fa23 	bl	80066ec <SDMMC_GetCmdResp3>
 80062a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062a8:	69fb      	ldr	r3, [r7, #28]
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3720      	adds	r7, #32
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b088      	sub	sp, #32
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80062c0:	2306      	movs	r3, #6
 80062c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062c4:	2340      	movs	r3, #64	; 0x40
 80062c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062c8:	2300      	movs	r3, #0
 80062ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062d2:	f107 0308 	add.w	r3, r7, #8
 80062d6:	4619      	mov	r1, r3
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff fe03 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80062de:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e2:	2106      	movs	r1, #6
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 f8cf 	bl	8006488 <SDMMC_GetCmdResp1>
 80062ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ec:	69fb      	ldr	r3, [r7, #28]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3720      	adds	r7, #32
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b088      	sub	sp, #32
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80062fe:	2300      	movs	r3, #0
 8006300:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006302:	2333      	movs	r3, #51	; 0x33
 8006304:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006306:	2340      	movs	r3, #64	; 0x40
 8006308:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800630a:	2300      	movs	r3, #0
 800630c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800630e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006312:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006314:	f107 0308 	add.w	r3, r7, #8
 8006318:	4619      	mov	r1, r3
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7ff fde2 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8006320:	f241 3288 	movw	r2, #5000	; 0x1388
 8006324:	2133      	movs	r1, #51	; 0x33
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8ae 	bl	8006488 <SDMMC_GetCmdResp1>
 800632c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800632e:	69fb      	ldr	r3, [r7, #28]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006344:	2302      	movs	r3, #2
 8006346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006348:	23c0      	movs	r3, #192	; 0xc0
 800634a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800634c:	2300      	movs	r3, #0
 800634e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006356:	f107 0308 	add.w	r3, r7, #8
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7ff fdc1 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f97c 	bl	8006660 <SDMMC_GetCmdResp2>
 8006368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800636a:	69fb      	ldr	r3, [r7, #28]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3720      	adds	r7, #32
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b088      	sub	sp, #32
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006382:	2309      	movs	r3, #9
 8006384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006386:	23c0      	movs	r3, #192	; 0xc0
 8006388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800638a:	2300      	movs	r3, #0
 800638c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800638e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006392:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006394:	f107 0308 	add.w	r3, r7, #8
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7ff fda2 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f95d 	bl	8006660 <SDMMC_GetCmdResp2>
 80063a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063a8:	69fb      	ldr	r3, [r7, #28]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3720      	adds	r7, #32
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b088      	sub	sp, #32
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80063c0:	2303      	movs	r3, #3
 80063c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063c4:	2340      	movs	r3, #64	; 0x40
 80063c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063c8:	2300      	movs	r3, #0
 80063ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063d2:	f107 0308 	add.w	r3, r7, #8
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7ff fd83 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80063de:	683a      	ldr	r2, [r7, #0]
 80063e0:	2103      	movs	r1, #3
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f9bc 	bl	8006760 <SDMMC_GetCmdResp6>
 80063e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063ea:	69fb      	ldr	r3, [r7, #28]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3720      	adds	r7, #32
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006402:	230d      	movs	r3, #13
 8006404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006406:	2340      	movs	r3, #64	; 0x40
 8006408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800640e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006414:	f107 0308 	add.w	r3, r7, #8
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fd62 	bl	8005ee4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006420:	f241 3288 	movw	r2, #5000	; 0x1388
 8006424:	210d      	movs	r1, #13
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f82e 	bl	8006488 <SDMMC_GetCmdResp1>
 800642c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800642e:	69fb      	ldr	r3, [r7, #28]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3720      	adds	r7, #32
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006438:	b490      	push	{r4, r7}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006440:	4b0f      	ldr	r3, [pc, #60]	; (8006480 <SDMMC_GetCmdError+0x48>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a0f      	ldr	r2, [pc, #60]	; (8006484 <SDMMC_GetCmdError+0x4c>)
 8006446:	fba2 2303 	umull	r2, r3, r2, r3
 800644a:	0a5b      	lsrs	r3, r3, #9
 800644c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006450:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006454:	4623      	mov	r3, r4
 8006456:	1e5c      	subs	r4, r3, #1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800645c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006460:	e009      	b.n	8006476 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646a:	2b00      	cmp	r3, #0
 800646c:	d0f2      	beq.n	8006454 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	22c5      	movs	r2, #197	; 0xc5
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bc90      	pop	{r4, r7}
 800647e:	4770      	bx	lr
 8006480:	20000008 	.word	0x20000008
 8006484:	10624dd3 	.word	0x10624dd3

08006488 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006488:	b590      	push	{r4, r7, lr}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	460b      	mov	r3, r1
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006496:	4b6f      	ldr	r3, [pc, #444]	; (8006654 <SDMMC_GetCmdResp1+0x1cc>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a6f      	ldr	r2, [pc, #444]	; (8006658 <SDMMC_GetCmdResp1+0x1d0>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	0a5b      	lsrs	r3, r3, #9
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80064a8:	4623      	mov	r3, r4
 80064aa:	1e5c      	subs	r4, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80064b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80064b4:	e0c9      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f0      	beq.n	80064a8 <SDMMC_GetCmdResp1+0x20>
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1eb      	bne.n	80064a8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d004      	beq.n	80064e6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2204      	movs	r2, #4
 80064e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80064e2:	2304      	movs	r3, #4
 80064e4:	e0b1      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d004      	beq.n	80064fc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2201      	movs	r2, #1
 80064f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e0a6      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	22c5      	movs	r2, #197	; 0xc5
 8006500:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7ff fd18 	bl	8005f38 <SDIO_GetCommandResponse>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	7afb      	ldrb	r3, [r7, #11]
 800650e:	4293      	cmp	r3, r2
 8006510:	d001      	beq.n	8006516 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006512:	2301      	movs	r3, #1
 8006514:	e099      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006516:	2100      	movs	r1, #0
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f7ff fd1a 	bl	8005f52 <SDIO_GetResponse>
 800651e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	4b4e      	ldr	r3, [pc, #312]	; (800665c <SDMMC_GetCmdResp1+0x1d4>)
 8006524:	4013      	ands	r3, r2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800652a:	2300      	movs	r3, #0
 800652c:	e08d      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2b00      	cmp	r3, #0
 8006532:	da02      	bge.n	800653a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006538:	e087      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006544:	2340      	movs	r3, #64	; 0x40
 8006546:	e080      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800654e:	2b00      	cmp	r3, #0
 8006550:	d001      	beq.n	8006556 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	e079      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006564:	e071      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006574:	e069      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006584:	e061      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006590:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006594:	e059      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80065a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065a4:	e051      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d002      	beq.n	80065b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80065b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065b4:	e049      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80065c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065c4:	e041      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80065d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065d4:	e039      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80065e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80065e4:	e031      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80065f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80065f4:	e029      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d002      	beq.n	8006606 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006600:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006604:	e021      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006610:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006614:	e019      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006624:	e011      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006630:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006634:	e009      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b00      	cmp	r3, #0
 800663e:	d002      	beq.n	8006646 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006640:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006644:	e001      	b.n	800664a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800664a:	4618      	mov	r0, r3
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	bd90      	pop	{r4, r7, pc}
 8006652:	bf00      	nop
 8006654:	20000008 	.word	0x20000008
 8006658:	10624dd3 	.word	0x10624dd3
 800665c:	fdffe008 	.word	0xfdffe008

08006660 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006660:	b490      	push	{r4, r7}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006668:	4b1e      	ldr	r3, [pc, #120]	; (80066e4 <SDMMC_GetCmdResp2+0x84>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a1e      	ldr	r2, [pc, #120]	; (80066e8 <SDMMC_GetCmdResp2+0x88>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	0a5b      	lsrs	r3, r3, #9
 8006674:	f241 3288 	movw	r2, #5000	; 0x1388
 8006678:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800667c:	4623      	mov	r3, r4
 800667e:	1e5c      	subs	r4, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006688:	e026      	b.n	80066d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0f0      	beq.n	800667c <SDMMC_GetCmdResp2+0x1c>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1eb      	bne.n	800667c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d004      	beq.n	80066ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2204      	movs	r2, #4
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066b6:	2304      	movs	r3, #4
 80066b8:	e00e      	b.n	80066d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d004      	beq.n	80066d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e003      	b.n	80066d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	22c5      	movs	r2, #197	; 0xc5
 80066d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bc90      	pop	{r4, r7}
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop
 80066e4:	20000008 	.word	0x20000008
 80066e8:	10624dd3 	.word	0x10624dd3

080066ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80066ec:	b490      	push	{r4, r7}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066f4:	4b18      	ldr	r3, [pc, #96]	; (8006758 <SDMMC_GetCmdResp3+0x6c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a18      	ldr	r2, [pc, #96]	; (800675c <SDMMC_GetCmdResp3+0x70>)
 80066fa:	fba2 2303 	umull	r2, r3, r2, r3
 80066fe:	0a5b      	lsrs	r3, r3, #9
 8006700:	f241 3288 	movw	r2, #5000	; 0x1388
 8006704:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006708:	4623      	mov	r3, r4
 800670a:	1e5c      	subs	r4, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	d102      	bne.n	8006716 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006714:	e01b      	b.n	800674e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800671a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0f0      	beq.n	8006708 <SDMMC_GetCmdResp3+0x1c>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1eb      	bne.n	8006708 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006734:	f003 0304 	and.w	r3, r3, #4
 8006738:	2b00      	cmp	r3, #0
 800673a:	d004      	beq.n	8006746 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2204      	movs	r2, #4
 8006740:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006742:	2304      	movs	r3, #4
 8006744:	e003      	b.n	800674e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	22c5      	movs	r2, #197	; 0xc5
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bc90      	pop	{r4, r7}
 8006756:	4770      	bx	lr
 8006758:	20000008 	.word	0x20000008
 800675c:	10624dd3 	.word	0x10624dd3

08006760 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	460b      	mov	r3, r1
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800676e:	4b34      	ldr	r3, [pc, #208]	; (8006840 <SDMMC_GetCmdResp6+0xe0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a34      	ldr	r2, [pc, #208]	; (8006844 <SDMMC_GetCmdResp6+0xe4>)
 8006774:	fba2 2303 	umull	r2, r3, r2, r3
 8006778:	0a5b      	lsrs	r3, r3, #9
 800677a:	f241 3288 	movw	r2, #5000	; 0x1388
 800677e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006782:	4623      	mov	r3, r4
 8006784:	1e5c      	subs	r4, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d102      	bne.n	8006790 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800678a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800678e:	e052      	b.n	8006836 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006794:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <SDMMC_GetCmdResp6+0x22>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1eb      	bne.n	8006782 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d004      	beq.n	80067c0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2204      	movs	r2, #4
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80067bc:	2304      	movs	r3, #4
 80067be:	e03a      	b.n	8006836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067c4:	f003 0301 	and.w	r3, r3, #1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d004      	beq.n	80067d6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e02f      	b.n	8006836 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80067d6:	68f8      	ldr	r0, [r7, #12]
 80067d8:	f7ff fbae 	bl	8005f38 <SDIO_GetCommandResponse>
 80067dc:	4603      	mov	r3, r0
 80067de:	461a      	mov	r2, r3
 80067e0:	7afb      	ldrb	r3, [r7, #11]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d001      	beq.n	80067ea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e025      	b.n	8006836 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	22c5      	movs	r2, #197	; 0xc5
 80067ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80067f0:	2100      	movs	r1, #0
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fbad 	bl	8005f52 <SDIO_GetResponse>
 80067f8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d106      	bne.n	8006812 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	0c1b      	lsrs	r3, r3, #16
 8006808:	b29a      	uxth	r2, r3
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800680e:	2300      	movs	r3, #0
 8006810:	e011      	b.n	8006836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800681c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006820:	e009      	b.n	8006836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800682c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006830:	e001      	b.n	8006836 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006836:	4618      	mov	r0, r3
 8006838:	371c      	adds	r7, #28
 800683a:	46bd      	mov	sp, r7
 800683c:	bd90      	pop	{r4, r7, pc}
 800683e:	bf00      	nop
 8006840:	20000008 	.word	0x20000008
 8006844:	10624dd3 	.word	0x10624dd3

08006848 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006848:	b490      	push	{r4, r7}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006850:	4b21      	ldr	r3, [pc, #132]	; (80068d8 <SDMMC_GetCmdResp7+0x90>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a21      	ldr	r2, [pc, #132]	; (80068dc <SDMMC_GetCmdResp7+0x94>)
 8006856:	fba2 2303 	umull	r2, r3, r2, r3
 800685a:	0a5b      	lsrs	r3, r3, #9
 800685c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006860:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006864:	4623      	mov	r3, r4
 8006866:	1e5c      	subs	r4, r3, #1
 8006868:	2b00      	cmp	r3, #0
 800686a:	d102      	bne.n	8006872 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800686c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006870:	e02c      	b.n	80068cc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006876:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800687e:	2b00      	cmp	r3, #0
 8006880:	d0f0      	beq.n	8006864 <SDMMC_GetCmdResp7+0x1c>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1eb      	bne.n	8006864 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d004      	beq.n	80068a2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2204      	movs	r2, #4
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800689e:	2304      	movs	r3, #4
 80068a0:	e014      	b.n	80068cc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068a6:	f003 0301 	and.w	r3, r3, #1
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e009      	b.n	80068cc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2240      	movs	r2, #64	; 0x40
 80068c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80068ca:	2300      	movs	r3, #0
  
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bc90      	pop	{r4, r7}
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20000008 	.word	0x20000008
 80068dc:	10624dd3 	.word	0x10624dd3

080068e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80068e4:	4904      	ldr	r1, [pc, #16]	; (80068f8 <MX_FATFS_Init+0x18>)
 80068e6:	4805      	ldr	r0, [pc, #20]	; (80068fc <MX_FATFS_Init+0x1c>)
 80068e8:	f000 faa4 	bl	8006e34 <FATFS_LinkDriver>
 80068ec:	4603      	mov	r3, r0
 80068ee:	461a      	mov	r2, r3
 80068f0:	4b03      	ldr	r3, [pc, #12]	; (8006900 <MX_FATFS_Init+0x20>)
 80068f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80068f4:	bf00      	nop
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20004454 	.word	0x20004454
 80068fc:	08009ea4 	.word	0x08009ea4
 8006900:	20004450 	.word	0x20004450

08006904 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800690e:	f000 f896 	bl	8006a3e <BSP_SD_IsDetected>
 8006912:	4603      	mov	r3, r0
 8006914:	2b01      	cmp	r3, #1
 8006916:	d001      	beq.n	800691c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e012      	b.n	8006942 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800691c:	480b      	ldr	r0, [pc, #44]	; (800694c <BSP_SD_Init+0x48>)
 800691e:	f7fc ff05 	bl	800372c <HAL_SD_Init>
 8006922:	4603      	mov	r3, r0
 8006924:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006926:	79fb      	ldrb	r3, [r7, #7]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d109      	bne.n	8006940 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800692c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006930:	4806      	ldr	r0, [pc, #24]	; (800694c <BSP_SD_Init+0x48>)
 8006932:	f7fd fcc5 	bl	80042c0 <HAL_SD_ConfigWideBusOperation>
 8006936:	4603      	mov	r3, r0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800693c:	2301      	movs	r3, #1
 800693e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006940:	79fb      	ldrb	r3, [r7, #7]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	20004210 	.word	0x20004210

08006950 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b086      	sub	sp, #24
 8006954:	af00      	add	r7, sp, #0
 8006956:	60f8      	str	r0, [r7, #12]
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800695c:	2300      	movs	r3, #0
 800695e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	68f9      	ldr	r1, [r7, #12]
 8006966:	4806      	ldr	r0, [pc, #24]	; (8006980 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006968:	f7fc ff70 	bl	800384c <HAL_SD_ReadBlocks_DMA>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8006976:	7dfb      	ldrb	r3, [r7, #23]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20004210 	.word	0x20004210

08006984 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	4806      	ldr	r0, [pc, #24]	; (80069b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800699c:	f7fd f840 	bl	8003a20 <HAL_SD_WriteBlocks_DMA>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d001      	beq.n	80069aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80069aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20004210 	.word	0x20004210

080069b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80069bc:	4805      	ldr	r0, [pc, #20]	; (80069d4 <BSP_SD_GetCardState+0x1c>)
 80069be:	f7fd fcfb 	bl	80043b8 <HAL_SD_GetCardState>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	bf14      	ite	ne
 80069c8:	2301      	movne	r3, #1
 80069ca:	2300      	moveq	r3, #0
 80069cc:	b2db      	uxtb	r3, r3
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	20004210 	.word	0x20004210

080069d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80069e0:	6879      	ldr	r1, [r7, #4]
 80069e2:	4803      	ldr	r0, [pc, #12]	; (80069f0 <BSP_SD_GetCardInfo+0x18>)
 80069e4:	f7fd fc40 	bl	8004268 <HAL_SD_GetCardInfo>
}
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	20004210 	.word	0x20004210

080069f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80069fc:	f000 f818 	bl	8006a30 <BSP_SD_AbortCallback>
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006a10:	f000 f9a8 	bl	8006d64 <BSP_SD_WriteCpltCallback>
}
 8006a14:	bf00      	nop
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006a24:	f000 f9ac 	bl	8006d80 <BSP_SD_ReadCpltCallback>
}
 8006a28:	bf00      	nop
 8006a2a:	3708      	adds	r7, #8
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006a30:	b480      	push	{r7}
 8006a32:	af00      	add	r7, sp, #0

}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	b083      	sub	sp, #12
 8006a42:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006a44:	2301      	movs	r3, #1
 8006a46:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006a48:	79fb      	ldrb	r3, [r7, #7]
 8006a4a:	b2db      	uxtb	r3, r3
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	370c      	adds	r7, #12
 8006a50:	46bd      	mov	sp, r7
 8006a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a56:	4770      	bx	lr

08006a58 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8006a60:	f000 fa34 	bl	8006ecc <osKernelSysTick>
 8006a64:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8006a66:	e006      	b.n	8006a76 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006a68:	f7ff ffa6 	bl	80069b8 <BSP_SD_GetCardState>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d101      	bne.n	8006a76 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	e009      	b.n	8006a8a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8006a76:	f000 fa29 	bl	8006ecc <osKernelSysTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	687a      	ldr	r2, [r7, #4]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d8f0      	bhi.n	8006a68 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006a86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006a9e:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <SD_CheckStatus+0x38>)
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006aa4:	f7ff ff88 	bl	80069b8 <BSP_SD_GetCardState>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d107      	bne.n	8006abe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006aae:	4b07      	ldr	r3, [pc, #28]	; (8006acc <SD_CheckStatus+0x38>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	b2da      	uxtb	r2, r3
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <SD_CheckStatus+0x38>)
 8006abc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006abe:	4b03      	ldr	r3, [pc, #12]	; (8006acc <SD_CheckStatus+0x38>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	b2db      	uxtb	r3, r3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	20000011 	.word	0x20000011

08006ad0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006ad0:	b590      	push	{r4, r7, lr}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8006ada:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <SD_initialize+0x8c>)
 8006adc:	2201      	movs	r2, #1
 8006ade:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8006ae0:	f000 f9e8 	bl	8006eb4 <osKernelRunning>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d030      	beq.n	8006b4c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006aea:	f7ff ff0b 	bl	8006904 <BSP_SD_Init>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d107      	bne.n	8006b04 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff ffcc 	bl	8006a94 <SD_CheckStatus>
 8006afc:	4603      	mov	r3, r0
 8006afe:	461a      	mov	r2, r3
 8006b00:	4b16      	ldr	r3, [pc, #88]	; (8006b5c <SD_initialize+0x8c>)
 8006b02:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006b04:	4b15      	ldr	r3, [pc, #84]	; (8006b5c <SD_initialize+0x8c>)
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d01e      	beq.n	8006b4c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8006b0e:	4b14      	ldr	r3, [pc, #80]	; (8006b60 <SD_initialize+0x90>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10e      	bne.n	8006b34 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8006b16:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <SD_initialize+0x94>)
 8006b18:	f107 0408 	add.w	r4, r7, #8
 8006b1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8006b22:	f107 0308 	add.w	r3, r7, #8
 8006b26:	2100      	movs	r1, #0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 fae3 	bl	80070f4 <osMessageCreate>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <SD_initialize+0x90>)
 8006b32:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8006b34:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <SD_initialize+0x90>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d107      	bne.n	8006b4c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8006b3c:	4b07      	ldr	r3, [pc, #28]	; (8006b5c <SD_initialize+0x8c>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	4b04      	ldr	r3, [pc, #16]	; (8006b5c <SD_initialize+0x8c>)
 8006b4a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006b4c:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <SD_initialize+0x8c>)
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	b2db      	uxtb	r3, r3
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd90      	pop	{r4, r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000011 	.word	0x20000011
 8006b60:	20000348 	.word	0x20000348
 8006b64:	08009e6c 	.word	0x08009e6c

08006b68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	4603      	mov	r3, r0
 8006b70:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006b72:	79fb      	ldrb	r3, [r7, #7]
 8006b74:	4618      	mov	r0, r3
 8006b76:	f7ff ff8d 	bl	8006a94 <SD_CheckStatus>
 8006b7a:	4603      	mov	r3, r0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3708      	adds	r7, #8
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	; 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60b9      	str	r1, [r7, #8]
 8006b8c:	607a      	str	r2, [r7, #4]
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	4603      	mov	r3, r0
 8006b92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006b9a:	f247 5030 	movw	r0, #30000	; 0x7530
 8006b9e:	f7ff ff5b 	bl	8006a58 <SD_CheckStatusWithTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	da02      	bge.n	8006bae <SD_read+0x2a>
  {
    return res;
 8006ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bac:	e032      	b.n	8006c14 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	6879      	ldr	r1, [r7, #4]
 8006bb2:	68b8      	ldr	r0, [r7, #8]
 8006bb4:	f7ff fecc 	bl	8006950 <BSP_SD_ReadBlocks_DMA>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8006bbe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d124      	bne.n	8006c10 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006bc6:	4b15      	ldr	r3, [pc, #84]	; (8006c1c <SD_read+0x98>)
 8006bc8:	6819      	ldr	r1, [r3, #0]
 8006bca:	f107 0314 	add.w	r3, r7, #20
 8006bce:	f247 5230 	movw	r2, #30000	; 0x7530
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 faf8 	bl	80071c8 <osMessageGet>

    if (event.status == osEventMessage)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2b10      	cmp	r3, #16
 8006bdc:	d118      	bne.n	8006c10 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d115      	bne.n	8006c10 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8006be4:	f000 f972 	bl	8006ecc <osKernelSysTick>
 8006be8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006bea:	e008      	b.n	8006bfe <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006bec:	f7ff fee4 	bl	80069b8 <BSP_SD_GetCardState>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <SD_read+0x7a>
              {
                res = RES_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006bfc:	e008      	b.n	8006c10 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8006bfe:	f000 f965 	bl	8006ecc <osKernelSysTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	f247 522f 	movw	r2, #29999	; 0x752f
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d9ed      	bls.n	8006bec <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3728      	adds	r7, #40	; 0x28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	20000348 	.word	0x20000348

08006c20 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b08a      	sub	sp, #40	; 0x28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]
 8006c2a:	603b      	str	r3, [r7, #0]
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006c36:	f247 5030 	movw	r0, #30000	; 0x7530
 8006c3a:	f7ff ff0d 	bl	8006a58 <SD_CheckStatusWithTimeout>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	da02      	bge.n	8006c4a <SD_write+0x2a>
  {
    return res;
 8006c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c48:	e02e      	b.n	8006ca8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	6879      	ldr	r1, [r7, #4]
 8006c4e:	68b8      	ldr	r0, [r7, #8]
 8006c50:	f7ff fe98 	bl	8006984 <BSP_SD_WriteBlocks_DMA>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d124      	bne.n	8006ca4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <SD_write+0x90>)
 8006c5c:	6819      	ldr	r1, [r3, #0]
 8006c5e:	f107 0314 	add.w	r3, r7, #20
 8006c62:	f247 5230 	movw	r2, #30000	; 0x7530
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 faae 	bl	80071c8 <osMessageGet>

    if (event.status == osEventMessage)
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2b10      	cmp	r3, #16
 8006c70:	d118      	bne.n	8006ca4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d115      	bne.n	8006ca4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8006c78:	f000 f928 	bl	8006ecc <osKernelSysTick>
 8006c7c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006c7e:	e008      	b.n	8006c92 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c80:	f7ff fe9a 	bl	80069b8 <BSP_SD_GetCardState>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d103      	bne.n	8006c92 <SD_write+0x72>
          {
            res = RES_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8006c90:	e008      	b.n	8006ca4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8006c92:	f000 f91b 	bl	8006ecc <osKernelSysTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6a3b      	ldr	r3, [r7, #32]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	f247 522f 	movw	r2, #29999	; 0x752f
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d9ed      	bls.n	8006c80 <SD_write+0x60>
    }

  }
#endif

  return res;
 8006ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	3728      	adds	r7, #40	; 0x28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}
 8006cb0:	20000348 	.word	0x20000348

08006cb4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08c      	sub	sp, #48	; 0x30
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	603a      	str	r2, [r7, #0]
 8006cbe:	71fb      	strb	r3, [r7, #7]
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006cca:	4b25      	ldr	r3, [pc, #148]	; (8006d60 <SD_ioctl+0xac>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	f003 0301 	and.w	r3, r3, #1
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d001      	beq.n	8006cdc <SD_ioctl+0x28>
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e03c      	b.n	8006d56 <SD_ioctl+0xa2>

  switch (cmd)
 8006cdc:	79bb      	ldrb	r3, [r7, #6]
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d834      	bhi.n	8006d4c <SD_ioctl+0x98>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <SD_ioctl+0x34>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006cf9 	.word	0x08006cf9
 8006cec:	08006d01 	.word	0x08006d01
 8006cf0:	08006d19 	.word	0x08006d19
 8006cf4:	08006d33 	.word	0x08006d33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006cfe:	e028      	b.n	8006d52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006d00:	f107 030c 	add.w	r3, r7, #12
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7ff fe67 	bl	80069d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006d10:	2300      	movs	r3, #0
 8006d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006d16:	e01c      	b.n	8006d52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006d18:	f107 030c 	add.w	r3, r7, #12
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f7ff fe5b 	bl	80069d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	b29a      	uxth	r2, r3
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006d30:	e00f      	b.n	8006d52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006d32:	f107 030c 	add.w	r3, r7, #12
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff fe4e 	bl	80069d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	0a5a      	lsrs	r2, r3, #9
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006d44:	2300      	movs	r3, #0
 8006d46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006d4a:	e002      	b.n	8006d52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006d4c:	2304      	movs	r3, #4
 8006d4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3730      	adds	r7, #48	; 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000011 	.word	0x20000011

08006d64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8006d68:	4b04      	ldr	r3, [pc, #16]	; (8006d7c <BSP_SD_WriteCpltCallback+0x18>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2102      	movs	r1, #2
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 f9e9 	bl	8007148 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006d76:	bf00      	nop
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000348 	.word	0x20000348

08006d80 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8006d84:	4b04      	ldr	r3, [pc, #16]	; (8006d98 <BSP_SD_ReadCpltCallback+0x18>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f000 f9db 	bl	8007148 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8006d92:	bf00      	nop
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20000348 	.word	0x20000348

08006d9c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4613      	mov	r3, r2
 8006da8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006daa:	2301      	movs	r3, #1
 8006dac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006dae:	2300      	movs	r3, #0
 8006db0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006db2:	4b1f      	ldr	r3, [pc, #124]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006db4:	7a5b      	ldrb	r3, [r3, #9]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d131      	bne.n	8006e20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006dbc:	4b1c      	ldr	r3, [pc, #112]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006dbe:	7a5b      	ldrb	r3, [r3, #9]
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	4b1a      	ldr	r3, [pc, #104]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006dc6:	2100      	movs	r1, #0
 8006dc8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006dca:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006dcc:	7a5b      	ldrb	r3, [r3, #9]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	4a17      	ldr	r2, [pc, #92]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006dda:	4b15      	ldr	r3, [pc, #84]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006ddc:	7a5b      	ldrb	r3, [r3, #9]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006de4:	4413      	add	r3, r2
 8006de6:	79fa      	ldrb	r2, [r7, #7]
 8006de8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006dea:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006dec:	7a5b      	ldrb	r3, [r3, #9]
 8006dee:	b2db      	uxtb	r3, r3
 8006df0:	1c5a      	adds	r2, r3, #1
 8006df2:	b2d1      	uxtb	r1, r2
 8006df4:	4a0e      	ldr	r2, [pc, #56]	; (8006e30 <FATFS_LinkDriverEx+0x94>)
 8006df6:	7251      	strb	r1, [r2, #9]
 8006df8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006dfa:	7dbb      	ldrb	r3, [r7, #22]
 8006dfc:	3330      	adds	r3, #48	; 0x30
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	3301      	adds	r3, #1
 8006e08:	223a      	movs	r2, #58	; 0x3a
 8006e0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	3302      	adds	r3, #2
 8006e10:	222f      	movs	r2, #47	; 0x2f
 8006e12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	3303      	adds	r3, #3
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	371c      	adds	r7, #28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	2000034c 	.word	0x2000034c

08006e34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	6839      	ldr	r1, [r7, #0]
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff ffaa 	bl	8006d9c <FATFS_LinkDriverEx>
 8006e48:	4603      	mov	r3, r0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006e52:	b480      	push	{r7}
 8006e54:	b085      	sub	sp, #20
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	4603      	mov	r3, r0
 8006e5a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006e64:	2b84      	cmp	r3, #132	; 0x84
 8006e66:	d005      	beq.n	8006e74 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006e68:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3303      	adds	r3, #3
 8006e72:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006e74:	68fb      	ldr	r3, [r7, #12]
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3714      	adds	r7, #20
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b083      	sub	sp, #12
 8006e86:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e88:	f3ef 8305 	mrs	r3, IPSR
 8006e8c:	607b      	str	r3, [r7, #4]
  return(result);
 8006e8e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	bf14      	ite	ne
 8006e94:	2301      	movne	r3, #1
 8006e96:	2300      	moveq	r3, #0
 8006e98:	b2db      	uxtb	r3, r3
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	370c      	adds	r7, #12
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006eaa:	f001 fb9f 	bl	80085ec <vTaskStartScheduler>
  
  return osOK;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8006eb8:	f001 ffbe 	bl	8008e38 <xTaskGetSchedulerState>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <osKernelRunning+0x12>
    return 0;
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e000      	b.n	8006ec8 <osKernelRunning+0x14>
  else
    return 1;
 8006ec6:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006ed0:	f7ff ffd7 	bl	8006e82 <inHandlerMode>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006eda:	f001 fc9f 	bl	800881c <xTaskGetTickCountFromISR>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	e002      	b.n	8006ee8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006ee2:	f001 fc8b 	bl	80087fc <xTaskGetTickCount>
 8006ee6:	4603      	mov	r3, r0
  }
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	bd80      	pop	{r7, pc}

08006eec <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eee:	b089      	sub	sp, #36	; 0x24
 8006ef0:	af04      	add	r7, sp, #16
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d020      	beq.n	8006f40 <osThreadCreate+0x54>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	699b      	ldr	r3, [r3, #24]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d01c      	beq.n	8006f40 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685c      	ldr	r4, [r3, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681d      	ldr	r5, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691e      	ldr	r6, [r3, #16]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f7ff ff9a 	bl	8006e52 <makeFreeRtosPriority>
 8006f1e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f28:	9202      	str	r2, [sp, #8]
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	9100      	str	r1, [sp, #0]
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	4632      	mov	r2, r6
 8006f32:	4629      	mov	r1, r5
 8006f34:	4620      	mov	r0, r4
 8006f36:	f001 f996 	bl	8008266 <xTaskCreateStatic>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	e01c      	b.n	8006f7a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685c      	ldr	r4, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006f4c:	b29e      	uxth	r6, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006f54:	4618      	mov	r0, r3
 8006f56:	f7ff ff7c 	bl	8006e52 <makeFreeRtosPriority>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	f107 030c 	add.w	r3, r7, #12
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	9200      	str	r2, [sp, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	4632      	mov	r2, r6
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4620      	mov	r0, r4
 8006f6c:	f001 f9d5 	bl	800831a <xTaskCreate>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d001      	beq.n	8006f7a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006f76:	2300      	movs	r3, #0
 8006f78:	e000      	b.n	8006f7c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006f84 <osThreadGetId>:
* @brief  Return the thread ID of the current running thread.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadGetId shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadGetId (void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
  return xTaskGetCurrentTaskHandle();
 8006f88:	f001 ff46 	bl	8008e18 <xTaskGetCurrentTaskHandle>
 8006f8c:	4603      	mov	r3, r0
#else
	return NULL;
#endif
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d001      	beq.n	8006fa8 <osDelay+0x16>
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	e000      	b.n	8006faa <osDelay+0x18>
 8006fa8:	2301      	movs	r3, #1
 8006faa:	4618      	mov	r0, r3
 8006fac:	f001 faea 	bl	8008584 <vTaskDelay>
  
  return osOK;
 8006fb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	4619      	mov	r1, r3
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f000 fb8c 	bl	80076ee <xQueueCreateMutexStatic>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	e003      	b.n	8006fe2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006fda:	2001      	movs	r0, #1
 8006fdc:	f000 fb6f 	bl	80076be <xQueueCreateMutex>
 8006fe0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3708      	adds	r7, #8
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <osMutexWait+0x18>
    return osErrorParameter;
 8007000:	2380      	movs	r3, #128	; 0x80
 8007002:	e03a      	b.n	800707a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d103      	bne.n	8007018 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	60fb      	str	r3, [r7, #12]
 8007016:	e009      	b.n	800702c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d006      	beq.n	800702c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <osMutexWait+0x40>
      ticks = 1;
 8007028:	2301      	movs	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800702c:	f7ff ff29 	bl	8006e82 <inHandlerMode>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d017      	beq.n	8007066 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007036:	f107 0308 	add.w	r3, r7, #8
 800703a:	461a      	mov	r2, r3
 800703c:	2100      	movs	r1, #0
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 ff6c 	bl	8007f1c <xQueueReceiveFromISR>
 8007044:	4603      	mov	r3, r0
 8007046:	2b01      	cmp	r3, #1
 8007048:	d001      	beq.n	800704e <osMutexWait+0x62>
      return osErrorOS;
 800704a:	23ff      	movs	r3, #255	; 0xff
 800704c:	e015      	b.n	800707a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d011      	beq.n	8007078 <osMutexWait+0x8c>
 8007054:	4b0b      	ldr	r3, [pc, #44]	; (8007084 <osMutexWait+0x98>)
 8007056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	f3bf 8f4f 	dsb	sy
 8007060:	f3bf 8f6f 	isb	sy
 8007064:	e008      	b.n	8007078 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fe4f 	bl	8007d0c <xQueueSemaphoreTake>
 800706e:	4603      	mov	r3, r0
 8007070:	2b01      	cmp	r3, #1
 8007072:	d001      	beq.n	8007078 <osMutexWait+0x8c>
    return osErrorOS;
 8007074:	23ff      	movs	r3, #255	; 0xff
 8007076:	e000      	b.n	800707a <osMutexWait+0x8e>
  }
  
  return osOK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	e000ed04 	.word	0xe000ed04

08007088 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007090:	2300      	movs	r3, #0
 8007092:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007094:	2300      	movs	r3, #0
 8007096:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007098:	f7ff fef3 	bl	8006e82 <inHandlerMode>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d016      	beq.n	80070d0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80070a2:	f107 0308 	add.w	r3, r7, #8
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fcc9 	bl	8007a40 <xQueueGiveFromISR>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d001      	beq.n	80070b8 <osMutexRelease+0x30>
      return osErrorOS;
 80070b4:	23ff      	movs	r3, #255	; 0xff
 80070b6:	e017      	b.n	80070e8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d013      	beq.n	80070e6 <osMutexRelease+0x5e>
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <osMutexRelease+0x68>)
 80070c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	f3bf 8f6f 	isb	sy
 80070ce:	e00a      	b.n	80070e6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80070d0:	2300      	movs	r3, #0
 80070d2:	2200      	movs	r2, #0
 80070d4:	2100      	movs	r1, #0
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 fb24 	bl	8007724 <xQueueGenericSend>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d001      	beq.n	80070e6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80070e2:	23ff      	movs	r3, #255	; 0xff
 80070e4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80070e6:	68fb      	ldr	r3, [r7, #12]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	e000ed04 	.word	0xe000ed04

080070f4 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af02      	add	r7, sp, #8
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d012      	beq.n	800712c <osMessageCreate+0x38>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6818      	ldr	r0, [r3, #0]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6859      	ldr	r1, [r3, #4]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	68dc      	ldr	r4, [r3, #12]
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	4623      	mov	r3, r4
 8007124:	f000 f9e0 	bl	80074e8 <xQueueGenericCreateStatic>
 8007128:	4603      	mov	r3, r0
 800712a:	e008      	b.n	800713e <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	4619      	mov	r1, r3
 8007138:	f000 fa49 	bl	80075ce <xQueueGenericCreate>
 800713c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	bd90      	pop	{r4, r7, pc}
	...

08007148 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b086      	sub	sp, #24
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	60b9      	str	r1, [r7, #8]
 8007152:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007154:	2300      	movs	r3, #0
 8007156:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <osMessagePut+0x1e>
    ticks = 1;
 8007162:	2301      	movs	r3, #1
 8007164:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007166:	f7ff fe8c 	bl	8006e82 <inHandlerMode>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d018      	beq.n	80071a2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007170:	f107 0210 	add.w	r2, r7, #16
 8007174:	f107 0108 	add.w	r1, r7, #8
 8007178:	2300      	movs	r3, #0
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 fbcc 	bl	8007918 <xQueueGenericSendFromISR>
 8007180:	4603      	mov	r3, r0
 8007182:	2b01      	cmp	r3, #1
 8007184:	d001      	beq.n	800718a <osMessagePut+0x42>
      return osErrorOS;
 8007186:	23ff      	movs	r3, #255	; 0xff
 8007188:	e018      	b.n	80071bc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d014      	beq.n	80071ba <osMessagePut+0x72>
 8007190:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <osMessagePut+0x7c>)
 8007192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	f3bf 8f4f 	dsb	sy
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	e00b      	b.n	80071ba <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80071a2:	f107 0108 	add.w	r1, r7, #8
 80071a6:	2300      	movs	r3, #0
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 faba 	bl	8007724 <xQueueGenericSend>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d001      	beq.n	80071ba <osMessagePut+0x72>
      return osErrorOS;
 80071b6:	23ff      	movs	r3, #255	; 0xff
 80071b8:	e000      	b.n	80071bc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3718      	adds	r7, #24
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80071c8:	b590      	push	{r4, r7, lr}
 80071ca:	b08b      	sub	sp, #44	; 0x2c
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80071d8:	2300      	movs	r3, #0
 80071da:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d10a      	bne.n	80071f8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80071e2:	2380      	movs	r3, #128	; 0x80
 80071e4:	617b      	str	r3, [r7, #20]
    return event;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	461c      	mov	r4, r3
 80071ea:	f107 0314 	add.w	r3, r7, #20
 80071ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071f6:	e054      	b.n	80072a2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80071f8:	2300      	movs	r3, #0
 80071fa:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007206:	d103      	bne.n	8007210 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007208:	f04f 33ff 	mov.w	r3, #4294967295
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
 800720e:	e009      	b.n	8007224 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d006      	beq.n	8007224 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <osMessageGet+0x5c>
      ticks = 1;
 8007220:	2301      	movs	r3, #1
 8007222:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007224:	f7ff fe2d 	bl	8006e82 <inHandlerMode>
 8007228:	4603      	mov	r3, r0
 800722a:	2b00      	cmp	r3, #0
 800722c:	d01c      	beq.n	8007268 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800722e:	f107 0220 	add.w	r2, r7, #32
 8007232:	f107 0314 	add.w	r3, r7, #20
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	68b8      	ldr	r0, [r7, #8]
 800723c:	f000 fe6e 	bl	8007f1c <xQueueReceiveFromISR>
 8007240:	4603      	mov	r3, r0
 8007242:	2b01      	cmp	r3, #1
 8007244:	d102      	bne.n	800724c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007246:	2310      	movs	r3, #16
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	e001      	b.n	8007250 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800724c:	2300      	movs	r3, #0
 800724e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d01d      	beq.n	8007292 <osMessageGet+0xca>
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <osMessageGet+0xe4>)
 8007258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	f3bf 8f6f 	isb	sy
 8007266:	e014      	b.n	8007292 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007268:	f107 0314 	add.w	r3, r7, #20
 800726c:	3304      	adds	r3, #4
 800726e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007270:	4619      	mov	r1, r3
 8007272:	68b8      	ldr	r0, [r7, #8]
 8007274:	f000 fc6e 	bl	8007b54 <xQueueReceive>
 8007278:	4603      	mov	r3, r0
 800727a:	2b01      	cmp	r3, #1
 800727c:	d102      	bne.n	8007284 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800727e:	2310      	movs	r3, #16
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	e006      	b.n	8007292 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	2b00      	cmp	r3, #0
 8007288:	d101      	bne.n	800728e <osMessageGet+0xc6>
 800728a:	2300      	movs	r3, #0
 800728c:	e000      	b.n	8007290 <osMessageGet+0xc8>
 800728e:	2340      	movs	r3, #64	; 0x40
 8007290:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	461c      	mov	r4, r3
 8007296:	f107 0314 	add.w	r3, r7, #20
 800729a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800729e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	372c      	adds	r7, #44	; 0x2c
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd90      	pop	{r4, r7, pc}
 80072aa:	bf00      	nop
 80072ac:	e000ed04 	.word	0xe000ed04

080072b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f103 0208 	add.w	r2, r3, #8
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f04f 32ff 	mov.w	r2, #4294967295
 80072c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f103 0208 	add.w	r2, r3, #8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f103 0208 	add.w	r2, r3, #8
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80072e4:	bf00      	nop
 80072e6:	370c      	adds	r7, #12
 80072e8:	46bd      	mov	sp, r7
 80072ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ee:	4770      	bx	lr

080072f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80072fe:	bf00      	nop
 8007300:	370c      	adds	r7, #12
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800730a:	b480      	push	{r7}
 800730c:	b085      	sub	sp, #20
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	1c5a      	adds	r2, r3, #1
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	601a      	str	r2, [r3, #0]
}
 8007346:	bf00      	nop
 8007348:	3714      	adds	r7, #20
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007352:	b480      	push	{r7}
 8007354:	b085      	sub	sp, #20
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007368:	d103      	bne.n	8007372 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e00c      	b.n	800738c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	3308      	adds	r3, #8
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	e002      	b.n	8007380 <vListInsert+0x2e>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	429a      	cmp	r2, r3
 800738a:	d2f6      	bcs.n	800737a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	683a      	ldr	r2, [r7, #0]
 800739a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	601a      	str	r2, [r3, #0]
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr

080073c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b085      	sub	sp, #20
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	691b      	ldr	r3, [r3, #16]
 80073d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	6892      	ldr	r2, [r2, #8]
 80073da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	6852      	ldr	r2, [r2, #4]
 80073e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d103      	bne.n	80073f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	1e5a      	subs	r2, r3, #1
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d109      	bne.n	8007440 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60bb      	str	r3, [r7, #8]
 800743e:	e7fe      	b.n	800743e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007440:	f002 f92c 	bl	800969c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800744c:	68f9      	ldr	r1, [r7, #12]
 800744e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007450:	fb01 f303 	mul.w	r3, r1, r3
 8007454:	441a      	add	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2200      	movs	r2, #0
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007470:	3b01      	subs	r3, #1
 8007472:	68f9      	ldr	r1, [r7, #12]
 8007474:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	441a      	add	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	22ff      	movs	r2, #255	; 0xff
 8007484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	22ff      	movs	r2, #255	; 0xff
 800748c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d114      	bne.n	80074c0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	691b      	ldr	r3, [r3, #16]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01a      	beq.n	80074d4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3310      	adds	r3, #16
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 fb02 	bl	8008aac <xTaskRemoveFromEventList>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d012      	beq.n	80074d4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80074ae:	4b0d      	ldr	r3, [pc, #52]	; (80074e4 <xQueueGenericReset+0xcc>)
 80074b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b4:	601a      	str	r2, [r3, #0]
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	e009      	b.n	80074d4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3310      	adds	r3, #16
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7ff fef3 	bl	80072b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3324      	adds	r3, #36	; 0x24
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7ff feee 	bl	80072b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80074d4:	f002 f910 	bl	80096f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80074d8:	2301      	movs	r3, #1
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	e000ed04 	.word	0xe000ed04

080074e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08e      	sub	sp, #56	; 0x38
 80074ec:	af02      	add	r7, sp, #8
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d109      	bne.n	8007510 <xQueueGenericCreateStatic+0x28>
 80074fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007500:	f383 8811 	msr	BASEPRI, r3
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	62bb      	str	r3, [r7, #40]	; 0x28
 800750e:	e7fe      	b.n	800750e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <xQueueGenericCreateStatic+0x42>
 8007516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	627b      	str	r3, [r7, #36]	; 0x24
 8007528:	e7fe      	b.n	8007528 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <xQueueGenericCreateStatic+0x4e>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <xQueueGenericCreateStatic+0x52>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <xQueueGenericCreateStatic+0x54>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d109      	bne.n	8007554 <xQueueGenericCreateStatic+0x6c>
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	f383 8811 	msr	BASEPRI, r3
 8007548:	f3bf 8f6f 	isb	sy
 800754c:	f3bf 8f4f 	dsb	sy
 8007550:	623b      	str	r3, [r7, #32]
 8007552:	e7fe      	b.n	8007552 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d102      	bne.n	8007560 <xQueueGenericCreateStatic+0x78>
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <xQueueGenericCreateStatic+0x7c>
 8007560:	2301      	movs	r3, #1
 8007562:	e000      	b.n	8007566 <xQueueGenericCreateStatic+0x7e>
 8007564:	2300      	movs	r3, #0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d109      	bne.n	800757e <xQueueGenericCreateStatic+0x96>
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	61fb      	str	r3, [r7, #28]
 800757c:	e7fe      	b.n	800757c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800757e:	2348      	movs	r3, #72	; 0x48
 8007580:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	2b48      	cmp	r3, #72	; 0x48
 8007586:	d009      	beq.n	800759c <xQueueGenericCreateStatic+0xb4>
 8007588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800758c:	f383 8811 	msr	BASEPRI, r3
 8007590:	f3bf 8f6f 	isb	sy
 8007594:	f3bf 8f4f 	dsb	sy
 8007598:	61bb      	str	r3, [r7, #24]
 800759a:	e7fe      	b.n	800759a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800759c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80075a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80075a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80075b0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80075b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075b6:	9300      	str	r3, [sp, #0]
 80075b8:	4613      	mov	r3, r2
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	68b9      	ldr	r1, [r7, #8]
 80075be:	68f8      	ldr	r0, [r7, #12]
 80075c0:	f000 f844 	bl	800764c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80075c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3730      	adds	r7, #48	; 0x30
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b08a      	sub	sp, #40	; 0x28
 80075d2:	af02      	add	r7, sp, #8
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	4613      	mov	r3, r2
 80075da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <xQueueGenericCreate+0x28>
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	e7fe      	b.n	80075f4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d102      	bne.n	8007602 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80075fc:	2300      	movs	r3, #0
 80075fe:	61fb      	str	r3, [r7, #28]
 8007600:	e004      	b.n	800760c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	fb02 f303 	mul.w	r3, r2, r3
 800760a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800760c:	69fb      	ldr	r3, [r7, #28]
 800760e:	3348      	adds	r3, #72	; 0x48
 8007610:	4618      	mov	r0, r3
 8007612:	f002 f95d 	bl	80098d0 <pvPortMalloc>
 8007616:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d011      	beq.n	8007642 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	3348      	adds	r3, #72	; 0x48
 8007626:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007628:	69bb      	ldr	r3, [r7, #24]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007630:	79fa      	ldrb	r2, [r7, #7]
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4613      	mov	r3, r2
 8007638:	697a      	ldr	r2, [r7, #20]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f805 	bl	800764c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007642:	69bb      	ldr	r3, [r7, #24]
	}
 8007644:	4618      	mov	r0, r3
 8007646:	3720      	adds	r7, #32
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d103      	bne.n	8007668 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	601a      	str	r2, [r3, #0]
 8007666:	e002      	b.n	800766e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007674:	69bb      	ldr	r3, [r7, #24]
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800767a:	2101      	movs	r1, #1
 800767c:	69b8      	ldr	r0, [r7, #24]
 800767e:	f7ff fecb 	bl	8007418 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007682:	bf00      	nop
 8007684:	3710      	adds	r7, #16
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800768a:	b580      	push	{r7, lr}
 800768c:	b082      	sub	sp, #8
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00e      	beq.n	80076b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80076aa:	2300      	movs	r3, #0
 80076ac:	2200      	movs	r2, #0
 80076ae:	2100      	movs	r1, #0
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 f837 	bl	8007724 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b086      	sub	sp, #24
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	4603      	mov	r3, r0
 80076c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076c8:	2301      	movs	r3, #1
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	2300      	movs	r3, #0
 80076ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	461a      	mov	r2, r3
 80076d4:	6939      	ldr	r1, [r7, #16]
 80076d6:	6978      	ldr	r0, [r7, #20]
 80076d8:	f7ff ff79 	bl	80075ce <xQueueGenericCreate>
 80076dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f7ff ffd3 	bl	800768a <prvInitialiseMutex>

		return xNewQueue;
 80076e4:	68fb      	ldr	r3, [r7, #12]
	}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3718      	adds	r7, #24
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}

080076ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b088      	sub	sp, #32
 80076f2:	af02      	add	r7, sp, #8
 80076f4:	4603      	mov	r3, r0
 80076f6:	6039      	str	r1, [r7, #0]
 80076f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80076fa:	2301      	movs	r3, #1
 80076fc:	617b      	str	r3, [r7, #20]
 80076fe:	2300      	movs	r3, #0
 8007700:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	9300      	str	r3, [sp, #0]
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	2200      	movs	r2, #0
 800770a:	6939      	ldr	r1, [r7, #16]
 800770c:	6978      	ldr	r0, [r7, #20]
 800770e:	f7ff feeb 	bl	80074e8 <xQueueGenericCreateStatic>
 8007712:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff ffb8 	bl	800768a <prvInitialiseMutex>

		return xNewQueue;
 800771a:	68fb      	ldr	r3, [r7, #12]
	}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b08e      	sub	sp, #56	; 0x38
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	607a      	str	r2, [r7, #4]
 8007730:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007732:	2300      	movs	r3, #0
 8007734:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	2b00      	cmp	r3, #0
 800773e:	d109      	bne.n	8007754 <xQueueGenericSend+0x30>
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	62bb      	str	r3, [r7, #40]	; 0x28
 8007752:	e7fe      	b.n	8007752 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d103      	bne.n	8007762 <xQueueGenericSend+0x3e>
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775e:	2b00      	cmp	r3, #0
 8007760:	d101      	bne.n	8007766 <xQueueGenericSend+0x42>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueGenericSend+0x44>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d109      	bne.n	8007780 <xQueueGenericSend+0x5c>
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	f383 8811 	msr	BASEPRI, r3
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	f3bf 8f4f 	dsb	sy
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
 800777e:	e7fe      	b.n	800777e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d103      	bne.n	800778e <xQueueGenericSend+0x6a>
 8007786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778a:	2b01      	cmp	r3, #1
 800778c:	d101      	bne.n	8007792 <xQueueGenericSend+0x6e>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <xQueueGenericSend+0x70>
 8007792:	2300      	movs	r3, #0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <xQueueGenericSend+0x88>
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	623b      	str	r3, [r7, #32]
 80077aa:	e7fe      	b.n	80077aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ac:	f001 fb44 	bl	8008e38 <xTaskGetSchedulerState>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <xQueueGenericSend+0x98>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <xQueueGenericSend+0x9c>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <xQueueGenericSend+0x9e>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d109      	bne.n	80077da <xQueueGenericSend+0xb6>
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	e7fe      	b.n	80077d8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077da:	f001 ff5f 	bl	800969c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d302      	bcc.n	80077f0 <xQueueGenericSend+0xcc>
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d129      	bne.n	8007844 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f0:	683a      	ldr	r2, [r7, #0]
 80077f2:	68b9      	ldr	r1, [r7, #8]
 80077f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077f6:	f000 fc26 	bl	8008046 <prvCopyDataToQueue>
 80077fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d010      	beq.n	8007826 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	3324      	adds	r3, #36	; 0x24
 8007808:	4618      	mov	r0, r3
 800780a:	f001 f94f 	bl	8008aac <xTaskRemoveFromEventList>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d013      	beq.n	800783c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007814:	4b3f      	ldr	r3, [pc, #252]	; (8007914 <xQueueGenericSend+0x1f0>)
 8007816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800781a:	601a      	str	r2, [r3, #0]
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	f3bf 8f6f 	isb	sy
 8007824:	e00a      	b.n	800783c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d007      	beq.n	800783c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800782c:	4b39      	ldr	r3, [pc, #228]	; (8007914 <xQueueGenericSend+0x1f0>)
 800782e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007832:	601a      	str	r2, [r3, #0]
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800783c:	f001 ff5c 	bl	80096f8 <vPortExitCritical>
				return pdPASS;
 8007840:	2301      	movs	r3, #1
 8007842:	e063      	b.n	800790c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d103      	bne.n	8007852 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800784a:	f001 ff55 	bl	80096f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800784e:	2300      	movs	r3, #0
 8007850:	e05c      	b.n	800790c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007858:	f107 0314 	add.w	r3, r7, #20
 800785c:	4618      	mov	r0, r3
 800785e:	f001 f987 	bl	8008b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007862:	2301      	movs	r3, #1
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007866:	f001 ff47 	bl	80096f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800786a:	f000 ff1d 	bl	80086a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800786e:	f001 ff15 	bl	800969c <vPortEnterCritical>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007878:	b25b      	sxtb	r3, r3
 800787a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787e:	d103      	bne.n	8007888 <xQueueGenericSend+0x164>
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800788e:	b25b      	sxtb	r3, r3
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007894:	d103      	bne.n	800789e <xQueueGenericSend+0x17a>
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	2200      	movs	r2, #0
 800789a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800789e:	f001 ff2b 	bl	80096f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078a2:	1d3a      	adds	r2, r7, #4
 80078a4:	f107 0314 	add.w	r3, r7, #20
 80078a8:	4611      	mov	r1, r2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 f976 	bl	8008b9c <xTaskCheckForTimeOut>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d124      	bne.n	8007900 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078b8:	f000 fcbd 	bl	8008236 <prvIsQueueFull>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d018      	beq.n	80078f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c4:	3310      	adds	r3, #16
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4611      	mov	r1, r2
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f8ca 	bl	8008a64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078d2:	f000 fc48 	bl	8008166 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078d6:	f000 fef5 	bl	80086c4 <xTaskResumeAll>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f47f af7c 	bne.w	80077da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80078e2:	4b0c      	ldr	r3, [pc, #48]	; (8007914 <xQueueGenericSend+0x1f0>)
 80078e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	f3bf 8f6f 	isb	sy
 80078f2:	e772      	b.n	80077da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078f6:	f000 fc36 	bl	8008166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078fa:	f000 fee3 	bl	80086c4 <xTaskResumeAll>
 80078fe:	e76c      	b.n	80077da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007900:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007902:	f000 fc30 	bl	8008166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007906:	f000 fedd 	bl	80086c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800790a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800790c:	4618      	mov	r0, r3
 800790e:	3738      	adds	r7, #56	; 0x38
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	e000ed04 	.word	0xe000ed04

08007918 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b08e      	sub	sp, #56	; 0x38
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
 8007924:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	2b00      	cmp	r3, #0
 800792e:	d109      	bne.n	8007944 <xQueueGenericSendFromISR+0x2c>
 8007930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	627b      	str	r3, [r7, #36]	; 0x24
 8007942:	e7fe      	b.n	8007942 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <xQueueGenericSendFromISR+0x3a>
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <xQueueGenericSendFromISR+0x3e>
 8007952:	2301      	movs	r3, #1
 8007954:	e000      	b.n	8007958 <xQueueGenericSendFromISR+0x40>
 8007956:	2300      	movs	r3, #0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d109      	bne.n	8007970 <xQueueGenericSendFromISR+0x58>
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	623b      	str	r3, [r7, #32]
 800796e:	e7fe      	b.n	800796e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d103      	bne.n	800797e <xQueueGenericSendFromISR+0x66>
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	2b01      	cmp	r3, #1
 800797c:	d101      	bne.n	8007982 <xQueueGenericSendFromISR+0x6a>
 800797e:	2301      	movs	r3, #1
 8007980:	e000      	b.n	8007984 <xQueueGenericSendFromISR+0x6c>
 8007982:	2300      	movs	r3, #0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <xQueueGenericSendFromISR+0x84>
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	61fb      	str	r3, [r7, #28]
 800799a:	e7fe      	b.n	800799a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800799c:	f001 ff5a 	bl	8009854 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079a0:	f3ef 8211 	mrs	r2, BASEPRI
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	61ba      	str	r2, [r7, #24]
 80079b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d302      	bcc.n	80079ce <xQueueGenericSendFromISR+0xb6>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d12c      	bne.n	8007a28 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079d8:	683a      	ldr	r2, [r7, #0]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079de:	f000 fb32 	bl	8008046 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80079e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079ea:	d112      	bne.n	8007a12 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d016      	beq.n	8007a22 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	3324      	adds	r3, #36	; 0x24
 80079f8:	4618      	mov	r0, r3
 80079fa:	f001 f857 	bl	8008aac <xTaskRemoveFromEventList>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00e      	beq.n	8007a22 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d00b      	beq.n	8007a22 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	601a      	str	r2, [r3, #0]
 8007a10:	e007      	b.n	8007a22 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007a16:	3301      	adds	r3, #1
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	b25a      	sxtb	r2, r3
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a22:	2301      	movs	r3, #1
 8007a24:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007a26:	e001      	b.n	8007a2c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3738      	adds	r7, #56	; 0x38
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08e      	sub	sp, #56	; 0x38
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d109      	bne.n	8007a68 <xQueueGiveFromISR+0x28>
	__asm volatile
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	e7fe      	b.n	8007a66 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d009      	beq.n	8007a84 <xQueueGiveFromISR+0x44>
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	61fb      	str	r3, [r7, #28]
 8007a82:	e7fe      	b.n	8007a82 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <xQueueGiveFromISR+0x54>
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d101      	bne.n	8007a98 <xQueueGiveFromISR+0x58>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <xQueueGiveFromISR+0x5a>
 8007a98:	2300      	movs	r3, #0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <xQueueGiveFromISR+0x72>
 8007a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa2:	f383 8811 	msr	BASEPRI, r3
 8007aa6:	f3bf 8f6f 	isb	sy
 8007aaa:	f3bf 8f4f 	dsb	sy
 8007aae:	61bb      	str	r3, [r7, #24]
 8007ab0:	e7fe      	b.n	8007ab0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ab2:	f001 fecf 	bl	8009854 <vPortValidateInterruptPriority>
	__asm volatile
 8007ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	617a      	str	r2, [r7, #20]
 8007acc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007ace:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d22b      	bcs.n	8007b3a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aee:	1c5a      	adds	r2, r3, #1
 8007af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007af4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d112      	bne.n	8007b24 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d016      	beq.n	8007b34 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	3324      	adds	r3, #36	; 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 ffce 	bl	8008aac <xTaskRemoveFromEventList>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00e      	beq.n	8007b34 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e007      	b.n	8007b34 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b28:	3301      	adds	r3, #1
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	b25a      	sxtb	r2, r3
 8007b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007b34:	2301      	movs	r3, #1
 8007b36:	637b      	str	r3, [r7, #52]	; 0x34
 8007b38:	e001      	b.n	8007b3e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3738      	adds	r7, #56	; 0x38
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
	...

08007b54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08c      	sub	sp, #48	; 0x30
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d109      	bne.n	8007b82 <xQueueReceive+0x2e>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	623b      	str	r3, [r7, #32]
 8007b80:	e7fe      	b.n	8007b80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d103      	bne.n	8007b90 <xQueueReceive+0x3c>
 8007b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <xQueueReceive+0x40>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <xQueueReceive+0x42>
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <xQueueReceive+0x5a>
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	61fb      	str	r3, [r7, #28]
 8007bac:	e7fe      	b.n	8007bac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bae:	f001 f943 	bl	8008e38 <xTaskGetSchedulerState>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d102      	bne.n	8007bbe <xQueueReceive+0x6a>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d101      	bne.n	8007bc2 <xQueueReceive+0x6e>
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e000      	b.n	8007bc4 <xQueueReceive+0x70>
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d109      	bne.n	8007bdc <xQueueReceive+0x88>
 8007bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bcc:	f383 8811 	msr	BASEPRI, r3
 8007bd0:	f3bf 8f6f 	isb	sy
 8007bd4:	f3bf 8f4f 	dsb	sy
 8007bd8:	61bb      	str	r3, [r7, #24]
 8007bda:	e7fe      	b.n	8007bda <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bdc:	f001 fd5e 	bl	800969c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d01f      	beq.n	8007c2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bec:	68b9      	ldr	r1, [r7, #8]
 8007bee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007bf0:	f000 fa93 	bl	800811a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	1e5a      	subs	r2, r3, #1
 8007bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bfe:	691b      	ldr	r3, [r3, #16]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00f      	beq.n	8007c24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	3310      	adds	r3, #16
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 ff4f 	bl	8008aac <xTaskRemoveFromEventList>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c14:	4b3c      	ldr	r3, [pc, #240]	; (8007d08 <xQueueReceive+0x1b4>)
 8007c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1a:	601a      	str	r2, [r3, #0]
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c24:	f001 fd68 	bl	80096f8 <vPortExitCritical>
				return pdPASS;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e069      	b.n	8007d00 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d103      	bne.n	8007c3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c32:	f001 fd61 	bl	80096f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c36:	2300      	movs	r3, #0
 8007c38:	e062      	b.n	8007d00 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d106      	bne.n	8007c4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c40:	f107 0310 	add.w	r3, r7, #16
 8007c44:	4618      	mov	r0, r3
 8007c46:	f000 ff93 	bl	8008b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c4e:	f001 fd53 	bl	80096f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c52:	f000 fd29 	bl	80086a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c56:	f001 fd21 	bl	800969c <vPortEnterCritical>
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c60:	b25b      	sxtb	r3, r3
 8007c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c66:	d103      	bne.n	8007c70 <xQueueReceive+0x11c>
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c76:	b25b      	sxtb	r3, r3
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d103      	bne.n	8007c86 <xQueueReceive+0x132>
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	2200      	movs	r2, #0
 8007c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c86:	f001 fd37 	bl	80096f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c8a:	1d3a      	adds	r2, r7, #4
 8007c8c:	f107 0310 	add.w	r3, r7, #16
 8007c90:	4611      	mov	r1, r2
 8007c92:	4618      	mov	r0, r3
 8007c94:	f000 ff82 	bl	8008b9c <xTaskCheckForTimeOut>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d123      	bne.n	8007ce6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca0:	f000 fab3 	bl	800820a <prvIsQueueEmpty>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d017      	beq.n	8007cda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	3324      	adds	r3, #36	; 0x24
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	4611      	mov	r1, r2
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f000 fed6 	bl	8008a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cba:	f000 fa54 	bl	8008166 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cbe:	f000 fd01 	bl	80086c4 <xTaskResumeAll>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d189      	bne.n	8007bdc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <xQueueReceive+0x1b4>)
 8007cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cce:	601a      	str	r2, [r3, #0]
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	e780      	b.n	8007bdc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cdc:	f000 fa43 	bl	8008166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ce0:	f000 fcf0 	bl	80086c4 <xTaskResumeAll>
 8007ce4:	e77a      	b.n	8007bdc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ce8:	f000 fa3d 	bl	8008166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cec:	f000 fcea 	bl	80086c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cf2:	f000 fa8a 	bl	800820a <prvIsQueueEmpty>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f43f af6f 	beq.w	8007bdc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3730      	adds	r7, #48	; 0x30
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	e000ed04 	.word	0xe000ed04

08007d0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b08e      	sub	sp, #56	; 0x38
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d16:	2300      	movs	r3, #0
 8007d18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d109      	bne.n	8007d3c <xQueueSemaphoreTake+0x30>
 8007d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d2c:	f383 8811 	msr	BASEPRI, r3
 8007d30:	f3bf 8f6f 	isb	sy
 8007d34:	f3bf 8f4f 	dsb	sy
 8007d38:	623b      	str	r3, [r7, #32]
 8007d3a:	e7fe      	b.n	8007d3a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d009      	beq.n	8007d58 <xQueueSemaphoreTake+0x4c>
 8007d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	61fb      	str	r3, [r7, #28]
 8007d56:	e7fe      	b.n	8007d56 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d58:	f001 f86e 	bl	8008e38 <xTaskGetSchedulerState>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d102      	bne.n	8007d68 <xQueueSemaphoreTake+0x5c>
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <xQueueSemaphoreTake+0x60>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e000      	b.n	8007d6e <xQueueSemaphoreTake+0x62>
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d109      	bne.n	8007d86 <xQueueSemaphoreTake+0x7a>
 8007d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d76:	f383 8811 	msr	BASEPRI, r3
 8007d7a:	f3bf 8f6f 	isb	sy
 8007d7e:	f3bf 8f4f 	dsb	sy
 8007d82:	61bb      	str	r3, [r7, #24]
 8007d84:	e7fe      	b.n	8007d84 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d86:	f001 fc89 	bl	800969c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d024      	beq.n	8007de0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d98:	1e5a      	subs	r2, r3, #1
 8007d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d104      	bne.n	8007db0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007da6:	f001 fa01 	bl	80091ac <pvTaskIncrementMutexHeldCount>
 8007daa:	4602      	mov	r2, r0
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d00f      	beq.n	8007dd8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	3310      	adds	r3, #16
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 fe75 	bl	8008aac <xTaskRemoveFromEventList>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007dc8:	4b53      	ldr	r3, [pc, #332]	; (8007f18 <xQueueSemaphoreTake+0x20c>)
 8007dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dd8:	f001 fc8e 	bl	80096f8 <vPortExitCritical>
				return pdPASS;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e096      	b.n	8007f0e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d110      	bne.n	8007e08 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d009      	beq.n	8007e00 <xQueueSemaphoreTake+0xf4>
 8007dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df0:	f383 8811 	msr	BASEPRI, r3
 8007df4:	f3bf 8f6f 	isb	sy
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	e7fe      	b.n	8007dfe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e00:	f001 fc7a 	bl	80096f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e04:	2300      	movs	r3, #0
 8007e06:	e082      	b.n	8007f0e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e0e:	f107 030c 	add.w	r3, r7, #12
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 feac 	bl	8008b70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e1c:	f001 fc6c 	bl	80096f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e20:	f000 fc42 	bl	80086a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e24:	f001 fc3a 	bl	800969c <vPortEnterCritical>
 8007e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e2e:	b25b      	sxtb	r3, r3
 8007e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e34:	d103      	bne.n	8007e3e <xQueueSemaphoreTake+0x132>
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e44:	b25b      	sxtb	r3, r3
 8007e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e4a:	d103      	bne.n	8007e54 <xQueueSemaphoreTake+0x148>
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e54:	f001 fc50 	bl	80096f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e58:	463a      	mov	r2, r7
 8007e5a:	f107 030c 	add.w	r3, r7, #12
 8007e5e:	4611      	mov	r1, r2
 8007e60:	4618      	mov	r0, r3
 8007e62:	f000 fe9b 	bl	8008b9c <xTaskCheckForTimeOut>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d132      	bne.n	8007ed2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007e6e:	f000 f9cc 	bl	800820a <prvIsQueueEmpty>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d026      	beq.n	8007ec6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d109      	bne.n	8007e94 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8007e80:	f001 fc0c 	bl	800969c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f000 fff3 	bl	8008e74 <xTaskPriorityInherit>
 8007e8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007e90:	f001 fc32 	bl	80096f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	3324      	adds	r3, #36	; 0x24
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fde1 	bl	8008a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ea4:	f000 f95f 	bl	8008166 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ea8:	f000 fc0c 	bl	80086c4 <xTaskResumeAll>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f47f af69 	bne.w	8007d86 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8007eb4:	4b18      	ldr	r3, [pc, #96]	; (8007f18 <xQueueSemaphoreTake+0x20c>)
 8007eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	f3bf 8f6f 	isb	sy
 8007ec4:	e75f      	b.n	8007d86 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ec8:	f000 f94d 	bl	8008166 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ecc:	f000 fbfa 	bl	80086c4 <xTaskResumeAll>
 8007ed0:	e759      	b.n	8007d86 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007ed2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ed4:	f000 f947 	bl	8008166 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ed8:	f000 fbf4 	bl	80086c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007edc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ede:	f000 f994 	bl	800820a <prvIsQueueEmpty>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	f43f af4e 	beq.w	8007d86 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00d      	beq.n	8007f0c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8007ef0:	f001 fbd4 	bl	800969c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ef6:	f000 f88e 	bl	8008016 <prvGetDisinheritPriorityAfterTimeout>
 8007efa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 f8ba 	bl	800907c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f08:	f001 fbf6 	bl	80096f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3738      	adds	r7, #56	; 0x38
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	e000ed04 	.word	0xe000ed04

08007f1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b08e      	sub	sp, #56	; 0x38
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <xQueueReceiveFromISR+0x2a>
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	623b      	str	r3, [r7, #32]
 8007f44:	e7fe      	b.n	8007f44 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <xQueueReceiveFromISR+0x38>
 8007f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d101      	bne.n	8007f58 <xQueueReceiveFromISR+0x3c>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e000      	b.n	8007f5a <xQueueReceiveFromISR+0x3e>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d109      	bne.n	8007f72 <xQueueReceiveFromISR+0x56>
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	61fb      	str	r3, [r7, #28]
 8007f70:	e7fe      	b.n	8007f70 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f72:	f001 fc6f 	bl	8009854 <vPortValidateInterruptPriority>
	__asm volatile
 8007f76:	f3ef 8211 	mrs	r2, BASEPRI
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	61ba      	str	r2, [r7, #24]
 8007f8c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007f8e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d02f      	beq.n	8007ffe <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fa8:	68b9      	ldr	r1, [r7, #8]
 8007faa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fac:	f000 f8b5 	bl	800811a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb2:	1e5a      	subs	r2, r3, #1
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007fb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc0:	d112      	bne.n	8007fe8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d016      	beq.n	8007ff8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	3310      	adds	r3, #16
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 fd6c 	bl	8008aac <xTaskRemoveFromEventList>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00b      	beq.n	8007ff8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e007      	b.n	8007ff8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fec:	3301      	adds	r3, #1
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	b25a      	sxtb	r2, r3
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	637b      	str	r3, [r7, #52]	; 0x34
 8007ffc:	e001      	b.n	8008002 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	637b      	str	r3, [r7, #52]	; 0x34
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800800c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800800e:	4618      	mov	r0, r3
 8008010:	3738      	adds	r7, #56	; 0x38
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008016:	b480      	push	{r7}
 8008018:	b085      	sub	sp, #20
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f1c3 0307 	rsb	r3, r3, #7
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e001      	b.n	8008038 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008034:	2300      	movs	r3, #0
 8008036:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008038:	68fb      	ldr	r3, [r7, #12]
	}
 800803a:	4618      	mov	r0, r3
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b086      	sub	sp, #24
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10d      	bne.n	8008080 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d14d      	bne.n	8008108 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 ff7f 	bl	8008f74 <xTaskPriorityDisinherit>
 8008076:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2200      	movs	r2, #0
 800807c:	609a      	str	r2, [r3, #8]
 800807e:	e043      	b.n	8008108 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d119      	bne.n	80080ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6858      	ldr	r0, [r3, #4]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808e:	461a      	mov	r2, r3
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	f001 fe17 	bl	8009cc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	685a      	ldr	r2, [r3, #4]
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	441a      	add	r2, r3
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	685a      	ldr	r2, [r3, #4]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d32b      	bcc.n	8008108 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	605a      	str	r2, [r3, #4]
 80080b8:	e026      	b.n	8008108 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	68d8      	ldr	r0, [r3, #12]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c2:	461a      	mov	r2, r3
 80080c4:	68b9      	ldr	r1, [r7, #8]
 80080c6:	f001 fdfd 	bl	8009cc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d2:	425b      	negs	r3, r3
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d207      	bcs.n	80080f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	689a      	ldr	r2, [r3, #8]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	425b      	negs	r3, r3
 80080f0:	441a      	add	r2, r3
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d105      	bne.n	8008108 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	3b01      	subs	r3, #1
 8008106:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	1c5a      	adds	r2, r3, #1
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008110:	697b      	ldr	r3, [r7, #20]
}
 8008112:	4618      	mov	r0, r3
 8008114:	3718      	adds	r7, #24
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b082      	sub	sp, #8
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	2b00      	cmp	r3, #0
 800812a:	d018      	beq.n	800815e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	68da      	ldr	r2, [r3, #12]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008134:	441a      	add	r2, r3
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	68da      	ldr	r2, [r3, #12]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689b      	ldr	r3, [r3, #8]
 8008142:	429a      	cmp	r2, r3
 8008144:	d303      	bcc.n	800814e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	68d9      	ldr	r1, [r3, #12]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008156:	461a      	mov	r2, r3
 8008158:	6838      	ldr	r0, [r7, #0]
 800815a:	f001 fdb3 	bl	8009cc4 <memcpy>
	}
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800816e:	f001 fa95 	bl	800969c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008178:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800817a:	e011      	b.n	80081a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	d012      	beq.n	80081aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3324      	adds	r3, #36	; 0x24
 8008188:	4618      	mov	r0, r3
 800818a:	f000 fc8f 	bl	8008aac <xTaskRemoveFromEventList>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008194:	f000 fd62 	bl	8008c5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008198:	7bfb      	ldrb	r3, [r7, #15]
 800819a:	3b01      	subs	r3, #1
 800819c:	b2db      	uxtb	r3, r3
 800819e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	dce9      	bgt.n	800817c <prvUnlockQueue+0x16>
 80081a8:	e000      	b.n	80081ac <prvUnlockQueue+0x46>
					break;
 80081aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	22ff      	movs	r2, #255	; 0xff
 80081b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081b4:	f001 faa0 	bl	80096f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081b8:	f001 fa70 	bl	800969c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c4:	e011      	b.n	80081ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d012      	beq.n	80081f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3310      	adds	r3, #16
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 fc6a 	bl	8008aac <xTaskRemoveFromEventList>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d001      	beq.n	80081e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081de:	f000 fd3d 	bl	8008c5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081e2:	7bbb      	ldrb	r3, [r7, #14]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	dce9      	bgt.n	80081c6 <prvUnlockQueue+0x60>
 80081f2:	e000      	b.n	80081f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	22ff      	movs	r2, #255	; 0xff
 80081fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081fe:	f001 fa7b 	bl	80096f8 <vPortExitCritical>
}
 8008202:	bf00      	nop
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008212:	f001 fa43 	bl	800969c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821a:	2b00      	cmp	r3, #0
 800821c:	d102      	bne.n	8008224 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800821e:	2301      	movs	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	e001      	b.n	8008228 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008224:	2300      	movs	r3, #0
 8008226:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008228:	f001 fa66 	bl	80096f8 <vPortExitCritical>

	return xReturn;
 800822c:	68fb      	ldr	r3, [r7, #12]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800823e:	f001 fa2d 	bl	800969c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	429a      	cmp	r2, r3
 800824c:	d102      	bne.n	8008254 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800824e:	2301      	movs	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
 8008252:	e001      	b.n	8008258 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008258:	f001 fa4e 	bl	80096f8 <vPortExitCritical>

	return xReturn;
 800825c:	68fb      	ldr	r3, [r7, #12]
}
 800825e:	4618      	mov	r0, r3
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}

08008266 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008266:	b580      	push	{r7, lr}
 8008268:	b08e      	sub	sp, #56	; 0x38
 800826a:	af04      	add	r7, sp, #16
 800826c:	60f8      	str	r0, [r7, #12]
 800826e:	60b9      	str	r1, [r7, #8]
 8008270:	607a      	str	r2, [r7, #4]
 8008272:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008276:	2b00      	cmp	r3, #0
 8008278:	d109      	bne.n	800828e <xTaskCreateStatic+0x28>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	623b      	str	r3, [r7, #32]
 800828c:	e7fe      	b.n	800828c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	2b00      	cmp	r3, #0
 8008292:	d109      	bne.n	80082a8 <xTaskCreateStatic+0x42>
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e7fe      	b.n	80082a6 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082a8:	2354      	movs	r3, #84	; 0x54
 80082aa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2b54      	cmp	r3, #84	; 0x54
 80082b0:	d009      	beq.n	80082c6 <xTaskCreateStatic+0x60>
 80082b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	61bb      	str	r3, [r7, #24]
 80082c4:	e7fe      	b.n	80082c4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80082c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80082c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01e      	beq.n	800830c <xTaskCreateStatic+0xa6>
 80082ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d01b      	beq.n	800830c <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80082de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e0:	2202      	movs	r2, #2
 80082e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80082e6:	2300      	movs	r3, #0
 80082e8:	9303      	str	r3, [sp, #12]
 80082ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ec:	9302      	str	r3, [sp, #8]
 80082ee:	f107 0314 	add.w	r3, r7, #20
 80082f2:	9301      	str	r3, [sp, #4]
 80082f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f6:	9300      	str	r3, [sp, #0]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	68b9      	ldr	r1, [r7, #8]
 80082fe:	68f8      	ldr	r0, [r7, #12]
 8008300:	f000 f850 	bl	80083a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008304:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008306:	f000 f8d3 	bl	80084b0 <prvAddNewTaskToReadyList>
 800830a:	e001      	b.n	8008310 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800830c:	2300      	movs	r3, #0
 800830e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008310:	697b      	ldr	r3, [r7, #20]
	}
 8008312:	4618      	mov	r0, r3
 8008314:	3728      	adds	r7, #40	; 0x28
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}

0800831a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800831a:	b580      	push	{r7, lr}
 800831c:	b08c      	sub	sp, #48	; 0x30
 800831e:	af04      	add	r7, sp, #16
 8008320:	60f8      	str	r0, [r7, #12]
 8008322:	60b9      	str	r1, [r7, #8]
 8008324:	603b      	str	r3, [r7, #0]
 8008326:	4613      	mov	r3, r2
 8008328:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800832a:	88fb      	ldrh	r3, [r7, #6]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4618      	mov	r0, r3
 8008330:	f001 face 	bl	80098d0 <pvPortMalloc>
 8008334:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800833c:	2054      	movs	r0, #84	; 0x54
 800833e:	f001 fac7 	bl	80098d0 <pvPortMalloc>
 8008342:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d003      	beq.n	8008352 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	697a      	ldr	r2, [r7, #20]
 800834e:	631a      	str	r2, [r3, #48]	; 0x30
 8008350:	e005      	b.n	800835e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008352:	6978      	ldr	r0, [r7, #20]
 8008354:	f001 fb7e 	bl	8009a54 <vPortFree>
 8008358:	e001      	b.n	800835e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800835a:	2300      	movs	r3, #0
 800835c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800835e:	69fb      	ldr	r3, [r7, #28]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d017      	beq.n	8008394 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800836c:	88fa      	ldrh	r2, [r7, #6]
 800836e:	2300      	movs	r3, #0
 8008370:	9303      	str	r3, [sp, #12]
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	9302      	str	r3, [sp, #8]
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008378:	9301      	str	r3, [sp, #4]
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 f80e 	bl	80083a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008388:	69f8      	ldr	r0, [r7, #28]
 800838a:	f000 f891 	bl	80084b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800838e:	2301      	movs	r3, #1
 8008390:	61bb      	str	r3, [r7, #24]
 8008392:	e002      	b.n	800839a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008394:	f04f 33ff 	mov.w	r3, #4294967295
 8008398:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800839a:	69bb      	ldr	r3, [r7, #24]
	}
 800839c:	4618      	mov	r0, r3
 800839e:	3720      	adds	r7, #32
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b088      	sub	sp, #32
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80083bc:	3b01      	subs	r3, #1
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	f023 0307 	bic.w	r3, r3, #7
 80083ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80083cc:	69bb      	ldr	r3, [r7, #24]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <prvInitialiseNewTask+0x46>
 80083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	e7fe      	b.n	80083e8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01f      	beq.n	8008430 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083f0:	2300      	movs	r3, #0
 80083f2:	61fb      	str	r3, [r7, #28]
 80083f4:	e012      	b.n	800841c <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	69fb      	ldr	r3, [r7, #28]
 80083fa:	4413      	add	r3, r2
 80083fc:	7819      	ldrb	r1, [r3, #0]
 80083fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008400:	69fb      	ldr	r3, [r7, #28]
 8008402:	4413      	add	r3, r2
 8008404:	3334      	adds	r3, #52	; 0x34
 8008406:	460a      	mov	r2, r1
 8008408:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800840a:	68ba      	ldr	r2, [r7, #8]
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	4413      	add	r3, r2
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d006      	beq.n	8008424 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	3301      	adds	r3, #1
 800841a:	61fb      	str	r3, [r7, #28]
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	2b0f      	cmp	r3, #15
 8008420:	d9e9      	bls.n	80083f6 <prvInitialiseNewTask+0x52>
 8008422:	e000      	b.n	8008426 <prvInitialiseNewTask+0x82>
			{
				break;
 8008424:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008428:	2200      	movs	r2, #0
 800842a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800842e:	e003      	b.n	8008438 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	2b06      	cmp	r3, #6
 800843c:	d901      	bls.n	8008442 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800843e:	2306      	movs	r3, #6
 8008440:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008446:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800844c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	2200      	movs	r2, #0
 8008452:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008456:	3304      	adds	r3, #4
 8008458:	4618      	mov	r0, r3
 800845a:	f7fe ff49 	bl	80072f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800845e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008460:	3318      	adds	r3, #24
 8008462:	4618      	mov	r0, r3
 8008464:	f7fe ff44 	bl	80072f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800846c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	f1c3 0207 	rsb	r2, r3, #7
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800847c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800847e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008480:	2200      	movs	r2, #0
 8008482:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800848c:	683a      	ldr	r2, [r7, #0]
 800848e:	68f9      	ldr	r1, [r7, #12]
 8008490:	69b8      	ldr	r0, [r7, #24]
 8008492:	f000 ffdb 	bl	800944c <pxPortInitialiseStack>
 8008496:	4602      	mov	r2, r0
 8008498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d002      	beq.n	80084a8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084a6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084a8:	bf00      	nop
 80084aa:	3720      	adds	r7, #32
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084b8:	f001 f8f0 	bl	800969c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084bc:	4b2a      	ldr	r3, [pc, #168]	; (8008568 <prvAddNewTaskToReadyList+0xb8>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	3301      	adds	r3, #1
 80084c2:	4a29      	ldr	r2, [pc, #164]	; (8008568 <prvAddNewTaskToReadyList+0xb8>)
 80084c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084c6:	4b29      	ldr	r3, [pc, #164]	; (800856c <prvAddNewTaskToReadyList+0xbc>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084ce:	4a27      	ldr	r2, [pc, #156]	; (800856c <prvAddNewTaskToReadyList+0xbc>)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084d4:	4b24      	ldr	r3, [pc, #144]	; (8008568 <prvAddNewTaskToReadyList+0xb8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d110      	bne.n	80084fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084dc:	f000 fbe2 	bl	8008ca4 <prvInitialiseTaskLists>
 80084e0:	e00d      	b.n	80084fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <prvAddNewTaskToReadyList+0xc0>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d109      	bne.n	80084fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084ea:	4b20      	ldr	r3, [pc, #128]	; (800856c <prvAddNewTaskToReadyList+0xbc>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d802      	bhi.n	80084fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084f8:	4a1c      	ldr	r2, [pc, #112]	; (800856c <prvAddNewTaskToReadyList+0xbc>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084fe:	4b1d      	ldr	r3, [pc, #116]	; (8008574 <prvAddNewTaskToReadyList+0xc4>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <prvAddNewTaskToReadyList+0xc4>)
 8008506:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850c:	2201      	movs	r2, #1
 800850e:	409a      	lsls	r2, r3
 8008510:	4b19      	ldr	r3, [pc, #100]	; (8008578 <prvAddNewTaskToReadyList+0xc8>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4313      	orrs	r3, r2
 8008516:	4a18      	ldr	r2, [pc, #96]	; (8008578 <prvAddNewTaskToReadyList+0xc8>)
 8008518:	6013      	str	r3, [r2, #0]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851e:	4613      	mov	r3, r2
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4a15      	ldr	r2, [pc, #84]	; (800857c <prvAddNewTaskToReadyList+0xcc>)
 8008528:	441a      	add	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	3304      	adds	r3, #4
 800852e:	4619      	mov	r1, r3
 8008530:	4610      	mov	r0, r2
 8008532:	f7fe feea 	bl	800730a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008536:	f001 f8df 	bl	80096f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800853a:	4b0d      	ldr	r3, [pc, #52]	; (8008570 <prvAddNewTaskToReadyList+0xc0>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00e      	beq.n	8008560 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008542:	4b0a      	ldr	r3, [pc, #40]	; (800856c <prvAddNewTaskToReadyList+0xbc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854c:	429a      	cmp	r2, r3
 800854e:	d207      	bcs.n	8008560 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008550:	4b0b      	ldr	r3, [pc, #44]	; (8008580 <prvAddNewTaskToReadyList+0xd0>)
 8008552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	f3bf 8f4f 	dsb	sy
 800855c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20000458 	.word	0x20000458
 800856c:	20000358 	.word	0x20000358
 8008570:	20000464 	.word	0x20000464
 8008574:	20000474 	.word	0x20000474
 8008578:	20000460 	.word	0x20000460
 800857c:	2000035c 	.word	0x2000035c
 8008580:	e000ed04 	.word	0xe000ed04

08008584 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800858c:	2300      	movs	r3, #0
 800858e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d016      	beq.n	80085c4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008596:	4b13      	ldr	r3, [pc, #76]	; (80085e4 <vTaskDelay+0x60>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d009      	beq.n	80085b2 <vTaskDelay+0x2e>
 800859e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a2:	f383 8811 	msr	BASEPRI, r3
 80085a6:	f3bf 8f6f 	isb	sy
 80085aa:	f3bf 8f4f 	dsb	sy
 80085ae:	60bb      	str	r3, [r7, #8]
 80085b0:	e7fe      	b.n	80085b0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80085b2:	f000 f879 	bl	80086a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085b6:	2100      	movs	r1, #0
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f000 fee1 	bl	8009380 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085be:	f000 f881 	bl	80086c4 <xTaskResumeAll>
 80085c2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d107      	bne.n	80085da <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80085ca:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <vTaskDelay+0x64>)
 80085cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085da:	bf00      	nop
 80085dc:	3710      	adds	r7, #16
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000480 	.word	0x20000480
 80085e8:	e000ed04 	.word	0xe000ed04

080085ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08a      	sub	sp, #40	; 0x28
 80085f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085f2:	2300      	movs	r3, #0
 80085f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085f6:	2300      	movs	r3, #0
 80085f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80085fa:	463a      	mov	r2, r7
 80085fc:	1d39      	adds	r1, r7, #4
 80085fe:	f107 0308 	add.w	r3, r7, #8
 8008602:	4618      	mov	r0, r3
 8008604:	f7f7 ff64 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	9202      	str	r2, [sp, #8]
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	2300      	movs	r3, #0
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	2300      	movs	r3, #0
 8008618:	460a      	mov	r2, r1
 800861a:	491d      	ldr	r1, [pc, #116]	; (8008690 <vTaskStartScheduler+0xa4>)
 800861c:	481d      	ldr	r0, [pc, #116]	; (8008694 <vTaskStartScheduler+0xa8>)
 800861e:	f7ff fe22 	bl	8008266 <xTaskCreateStatic>
 8008622:	4602      	mov	r2, r0
 8008624:	4b1c      	ldr	r3, [pc, #112]	; (8008698 <vTaskStartScheduler+0xac>)
 8008626:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008628:	4b1b      	ldr	r3, [pc, #108]	; (8008698 <vTaskStartScheduler+0xac>)
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d002      	beq.n	8008636 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e001      	b.n	800863a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008636:	2300      	movs	r3, #0
 8008638:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b01      	cmp	r3, #1
 800863e:	d115      	bne.n	800866c <vTaskStartScheduler+0x80>
 8008640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008644:	f383 8811 	msr	BASEPRI, r3
 8008648:	f3bf 8f6f 	isb	sy
 800864c:	f3bf 8f4f 	dsb	sy
 8008650:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008652:	4b12      	ldr	r3, [pc, #72]	; (800869c <vTaskStartScheduler+0xb0>)
 8008654:	f04f 32ff 	mov.w	r2, #4294967295
 8008658:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800865a:	4b11      	ldr	r3, [pc, #68]	; (80086a0 <vTaskStartScheduler+0xb4>)
 800865c:	2201      	movs	r2, #1
 800865e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008660:	4b10      	ldr	r3, [pc, #64]	; (80086a4 <vTaskStartScheduler+0xb8>)
 8008662:	2200      	movs	r2, #0
 8008664:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008666:	f000 ff7b 	bl	8009560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800866a:	e00d      	b.n	8008688 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d109      	bne.n	8008688 <vTaskStartScheduler+0x9c>
 8008674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008678:	f383 8811 	msr	BASEPRI, r3
 800867c:	f3bf 8f6f 	isb	sy
 8008680:	f3bf 8f4f 	dsb	sy
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	e7fe      	b.n	8008686 <vTaskStartScheduler+0x9a>
}
 8008688:	bf00      	nop
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}
 8008690:	08009e7c 	.word	0x08009e7c
 8008694:	08008c75 	.word	0x08008c75
 8008698:	2000047c 	.word	0x2000047c
 800869c:	20000478 	.word	0x20000478
 80086a0:	20000464 	.word	0x20000464
 80086a4:	2000045c 	.word	0x2000045c

080086a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086a8:	b480      	push	{r7}
 80086aa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <vTaskSuspendAll+0x18>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	3301      	adds	r3, #1
 80086b2:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <vTaskSuspendAll+0x18>)
 80086b4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80086b6:	bf00      	nop
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000480 	.word	0x20000480

080086c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b084      	sub	sp, #16
 80086c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086ca:	2300      	movs	r3, #0
 80086cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80086ce:	2300      	movs	r3, #0
 80086d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80086d2:	4b41      	ldr	r3, [pc, #260]	; (80087d8 <xTaskResumeAll+0x114>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d109      	bne.n	80086ee <xTaskResumeAll+0x2a>
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	603b      	str	r3, [r7, #0]
 80086ec:	e7fe      	b.n	80086ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80086ee:	f000 ffd5 	bl	800969c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80086f2:	4b39      	ldr	r3, [pc, #228]	; (80087d8 <xTaskResumeAll+0x114>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	4a37      	ldr	r2, [pc, #220]	; (80087d8 <xTaskResumeAll+0x114>)
 80086fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fc:	4b36      	ldr	r3, [pc, #216]	; (80087d8 <xTaskResumeAll+0x114>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d161      	bne.n	80087c8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008704:	4b35      	ldr	r3, [pc, #212]	; (80087dc <xTaskResumeAll+0x118>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d05d      	beq.n	80087c8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800870c:	e02e      	b.n	800876c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870e:	4b34      	ldr	r3, [pc, #208]	; (80087e0 <xTaskResumeAll+0x11c>)
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3318      	adds	r3, #24
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fe52 	bl	80073c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	3304      	adds	r3, #4
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fe4d 	bl	80073c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872e:	2201      	movs	r2, #1
 8008730:	409a      	lsls	r2, r3
 8008732:	4b2c      	ldr	r3, [pc, #176]	; (80087e4 <xTaskResumeAll+0x120>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4313      	orrs	r3, r2
 8008738:	4a2a      	ldr	r2, [pc, #168]	; (80087e4 <xTaskResumeAll+0x120>)
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	4a27      	ldr	r2, [pc, #156]	; (80087e8 <xTaskResumeAll+0x124>)
 800874a:	441a      	add	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	3304      	adds	r3, #4
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f7fe fdd9 	bl	800730a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800875c:	4b23      	ldr	r3, [pc, #140]	; (80087ec <xTaskResumeAll+0x128>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008762:	429a      	cmp	r2, r3
 8008764:	d302      	bcc.n	800876c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8008766:	4b22      	ldr	r3, [pc, #136]	; (80087f0 <xTaskResumeAll+0x12c>)
 8008768:	2201      	movs	r2, #1
 800876a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800876c:	4b1c      	ldr	r3, [pc, #112]	; (80087e0 <xTaskResumeAll+0x11c>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1cc      	bne.n	800870e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d001      	beq.n	800877e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800877a:	f000 fb2d 	bl	8008dd8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800877e:	4b1d      	ldr	r3, [pc, #116]	; (80087f4 <xTaskResumeAll+0x130>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d010      	beq.n	80087ac <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800878a:	f000 f859 	bl	8008840 <xTaskIncrementTick>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008794:	4b16      	ldr	r3, [pc, #88]	; (80087f0 <xTaskResumeAll+0x12c>)
 8008796:	2201      	movs	r2, #1
 8008798:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3b01      	subs	r3, #1
 800879e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d1f1      	bne.n	800878a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80087a6:	4b13      	ldr	r3, [pc, #76]	; (80087f4 <xTaskResumeAll+0x130>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087ac:	4b10      	ldr	r3, [pc, #64]	; (80087f0 <xTaskResumeAll+0x12c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d009      	beq.n	80087c8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087b4:	2301      	movs	r3, #1
 80087b6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087b8:	4b0f      	ldr	r3, [pc, #60]	; (80087f8 <xTaskResumeAll+0x134>)
 80087ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087be:	601a      	str	r2, [r3, #0]
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087c8:	f000 ff96 	bl	80096f8 <vPortExitCritical>

	return xAlreadyYielded;
 80087cc:	68bb      	ldr	r3, [r7, #8]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000480 	.word	0x20000480
 80087dc:	20000458 	.word	0x20000458
 80087e0:	20000418 	.word	0x20000418
 80087e4:	20000460 	.word	0x20000460
 80087e8:	2000035c 	.word	0x2000035c
 80087ec:	20000358 	.word	0x20000358
 80087f0:	2000046c 	.word	0x2000046c
 80087f4:	20000468 	.word	0x20000468
 80087f8:	e000ed04 	.word	0xe000ed04

080087fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008802:	4b05      	ldr	r3, [pc, #20]	; (8008818 <xTaskGetTickCount+0x1c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008808:	687b      	ldr	r3, [r7, #4]
}
 800880a:	4618      	mov	r0, r3
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	2000045c 	.word	0x2000045c

0800881c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b082      	sub	sp, #8
 8008820:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008822:	f001 f817 	bl	8009854 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008826:	2300      	movs	r3, #0
 8008828:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800882a:	4b04      	ldr	r3, [pc, #16]	; (800883c <xTaskGetTickCountFromISR+0x20>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008830:	683b      	ldr	r3, [r7, #0]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	2000045c 	.word	0x2000045c

08008840 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008846:	2300      	movs	r3, #0
 8008848:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884a:	4b4e      	ldr	r3, [pc, #312]	; (8008984 <xTaskIncrementTick+0x144>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	f040 8087 	bne.w	8008962 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008854:	4b4c      	ldr	r3, [pc, #304]	; (8008988 <xTaskIncrementTick+0x148>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800885c:	4a4a      	ldr	r2, [pc, #296]	; (8008988 <xTaskIncrementTick+0x148>)
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d11f      	bne.n	80088a8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008868:	4b48      	ldr	r3, [pc, #288]	; (800898c <xTaskIncrementTick+0x14c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d009      	beq.n	8008886 <xTaskIncrementTick+0x46>
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	e7fe      	b.n	8008884 <xTaskIncrementTick+0x44>
 8008886:	4b41      	ldr	r3, [pc, #260]	; (800898c <xTaskIncrementTick+0x14c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	60fb      	str	r3, [r7, #12]
 800888c:	4b40      	ldr	r3, [pc, #256]	; (8008990 <xTaskIncrementTick+0x150>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a3e      	ldr	r2, [pc, #248]	; (800898c <xTaskIncrementTick+0x14c>)
 8008892:	6013      	str	r3, [r2, #0]
 8008894:	4a3e      	ldr	r2, [pc, #248]	; (8008990 <xTaskIncrementTick+0x150>)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	4b3e      	ldr	r3, [pc, #248]	; (8008994 <xTaskIncrementTick+0x154>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	3301      	adds	r3, #1
 80088a0:	4a3c      	ldr	r2, [pc, #240]	; (8008994 <xTaskIncrementTick+0x154>)
 80088a2:	6013      	str	r3, [r2, #0]
 80088a4:	f000 fa98 	bl	8008dd8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088a8:	4b3b      	ldr	r3, [pc, #236]	; (8008998 <xTaskIncrementTick+0x158>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	693a      	ldr	r2, [r7, #16]
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d348      	bcc.n	8008944 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088b2:	4b36      	ldr	r3, [pc, #216]	; (800898c <xTaskIncrementTick+0x14c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d104      	bne.n	80088c6 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088bc:	4b36      	ldr	r3, [pc, #216]	; (8008998 <xTaskIncrementTick+0x158>)
 80088be:	f04f 32ff 	mov.w	r2, #4294967295
 80088c2:	601a      	str	r2, [r3, #0]
					break;
 80088c4:	e03e      	b.n	8008944 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c6:	4b31      	ldr	r3, [pc, #196]	; (800898c <xTaskIncrementTick+0x14c>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088d6:	693a      	ldr	r2, [r7, #16]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d203      	bcs.n	80088e6 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088de:	4a2e      	ldr	r2, [pc, #184]	; (8008998 <xTaskIncrementTick+0x158>)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088e4:	e02e      	b.n	8008944 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	3304      	adds	r3, #4
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fe fd6a 	bl	80073c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	3318      	adds	r3, #24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f7fe fd61 	bl	80073c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	2201      	movs	r2, #1
 8008908:	409a      	lsls	r2, r3
 800890a:	4b24      	ldr	r3, [pc, #144]	; (800899c <xTaskIncrementTick+0x15c>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	4313      	orrs	r3, r2
 8008910:	4a22      	ldr	r2, [pc, #136]	; (800899c <xTaskIncrementTick+0x15c>)
 8008912:	6013      	str	r3, [r2, #0]
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008918:	4613      	mov	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4413      	add	r3, r2
 800891e:	009b      	lsls	r3, r3, #2
 8008920:	4a1f      	ldr	r2, [pc, #124]	; (80089a0 <xTaskIncrementTick+0x160>)
 8008922:	441a      	add	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	3304      	adds	r3, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4610      	mov	r0, r2
 800892c:	f7fe fced 	bl	800730a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008934:	4b1b      	ldr	r3, [pc, #108]	; (80089a4 <xTaskIncrementTick+0x164>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	429a      	cmp	r2, r3
 800893c:	d3b9      	bcc.n	80088b2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800893e:	2301      	movs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008942:	e7b6      	b.n	80088b2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008944:	4b17      	ldr	r3, [pc, #92]	; (80089a4 <xTaskIncrementTick+0x164>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800894a:	4915      	ldr	r1, [pc, #84]	; (80089a0 <xTaskIncrementTick+0x160>)
 800894c:	4613      	mov	r3, r2
 800894e:	009b      	lsls	r3, r3, #2
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	440b      	add	r3, r1
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2b01      	cmp	r3, #1
 800895a:	d907      	bls.n	800896c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800895c:	2301      	movs	r3, #1
 800895e:	617b      	str	r3, [r7, #20]
 8008960:	e004      	b.n	800896c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008962:	4b11      	ldr	r3, [pc, #68]	; (80089a8 <xTaskIncrementTick+0x168>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	3301      	adds	r3, #1
 8008968:	4a0f      	ldr	r2, [pc, #60]	; (80089a8 <xTaskIncrementTick+0x168>)
 800896a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800896c:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <xTaskIncrementTick+0x16c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008978:	697b      	ldr	r3, [r7, #20]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	20000480 	.word	0x20000480
 8008988:	2000045c 	.word	0x2000045c
 800898c:	20000410 	.word	0x20000410
 8008990:	20000414 	.word	0x20000414
 8008994:	20000470 	.word	0x20000470
 8008998:	20000478 	.word	0x20000478
 800899c:	20000460 	.word	0x20000460
 80089a0:	2000035c 	.word	0x2000035c
 80089a4:	20000358 	.word	0x20000358
 80089a8:	20000468 	.word	0x20000468
 80089ac:	2000046c 	.word	0x2000046c

080089b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	b087      	sub	sp, #28
 80089b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089b6:	4b26      	ldr	r3, [pc, #152]	; (8008a50 <vTaskSwitchContext+0xa0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089be:	4b25      	ldr	r3, [pc, #148]	; (8008a54 <vTaskSwitchContext+0xa4>)
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089c4:	e03e      	b.n	8008a44 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80089c6:	4b23      	ldr	r3, [pc, #140]	; (8008a54 <vTaskSwitchContext+0xa4>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089cc:	4b22      	ldr	r3, [pc, #136]	; (8008a58 <vTaskSwitchContext+0xa8>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	fab3 f383 	clz	r3, r3
 80089d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80089da:	7afb      	ldrb	r3, [r7, #11]
 80089dc:	f1c3 031f 	rsb	r3, r3, #31
 80089e0:	617b      	str	r3, [r7, #20]
 80089e2:	491e      	ldr	r1, [pc, #120]	; (8008a5c <vTaskSwitchContext+0xac>)
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d109      	bne.n	8008a0a <vTaskSwitchContext+0x5a>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	607b      	str	r3, [r7, #4]
 8008a08:	e7fe      	b.n	8008a08 <vTaskSwitchContext+0x58>
 8008a0a:	697a      	ldr	r2, [r7, #20]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4a11      	ldr	r2, [pc, #68]	; (8008a5c <vTaskSwitchContext+0xac>)
 8008a16:	4413      	add	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	685a      	ldr	r2, [r3, #4]
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	605a      	str	r2, [r3, #4]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	685a      	ldr	r2, [r3, #4]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d104      	bne.n	8008a3a <vTaskSwitchContext+0x8a>
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	605a      	str	r2, [r3, #4]
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	4a07      	ldr	r2, [pc, #28]	; (8008a60 <vTaskSwitchContext+0xb0>)
 8008a42:	6013      	str	r3, [r2, #0]
}
 8008a44:	bf00      	nop
 8008a46:	371c      	adds	r7, #28
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20000480 	.word	0x20000480
 8008a54:	2000046c 	.word	0x2000046c
 8008a58:	20000460 	.word	0x20000460
 8008a5c:	2000035c 	.word	0x2000035c
 8008a60:	20000358 	.word	0x20000358

08008a64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d109      	bne.n	8008a88 <vTaskPlaceOnEventList+0x24>
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60fb      	str	r3, [r7, #12]
 8008a86:	e7fe      	b.n	8008a86 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a88:	4b07      	ldr	r3, [pc, #28]	; (8008aa8 <vTaskPlaceOnEventList+0x44>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3318      	adds	r3, #24
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7fe fc5e 	bl	8007352 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a96:	2101      	movs	r1, #1
 8008a98:	6838      	ldr	r0, [r7, #0]
 8008a9a:	f000 fc71 	bl	8009380 <prvAddCurrentTaskToDelayedList>
}
 8008a9e:	bf00      	nop
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20000358 	.word	0x20000358

08008aac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <xTaskRemoveFromEventList+0x2a>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	60fb      	str	r3, [r7, #12]
 8008ad4:	e7fe      	b.n	8008ad4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	3318      	adds	r3, #24
 8008ada:	4618      	mov	r0, r3
 8008adc:	f7fe fc72 	bl	80073c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ae0:	4b1d      	ldr	r3, [pc, #116]	; (8008b58 <xTaskRemoveFromEventList+0xac>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11c      	bne.n	8008b22 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fe fc69 	bl	80073c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af6:	2201      	movs	r2, #1
 8008af8:	409a      	lsls	r2, r3
 8008afa:	4b18      	ldr	r3, [pc, #96]	; (8008b5c <xTaskRemoveFromEventList+0xb0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	4a16      	ldr	r2, [pc, #88]	; (8008b5c <xTaskRemoveFromEventList+0xb0>)
 8008b02:	6013      	str	r3, [r2, #0]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b08:	4613      	mov	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4413      	add	r3, r2
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	4a13      	ldr	r2, [pc, #76]	; (8008b60 <xTaskRemoveFromEventList+0xb4>)
 8008b12:	441a      	add	r2, r3
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4619      	mov	r1, r3
 8008b1a:	4610      	mov	r0, r2
 8008b1c:	f7fe fbf5 	bl	800730a <vListInsertEnd>
 8008b20:	e005      	b.n	8008b2e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3318      	adds	r3, #24
 8008b26:	4619      	mov	r1, r3
 8008b28:	480e      	ldr	r0, [pc, #56]	; (8008b64 <xTaskRemoveFromEventList+0xb8>)
 8008b2a:	f7fe fbee 	bl	800730a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b32:	4b0d      	ldr	r3, [pc, #52]	; (8008b68 <xTaskRemoveFromEventList+0xbc>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	d905      	bls.n	8008b48 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b40:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <xTaskRemoveFromEventList+0xc0>)
 8008b42:	2201      	movs	r2, #1
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	e001      	b.n	8008b4c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b4c:	697b      	ldr	r3, [r7, #20]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3718      	adds	r7, #24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	20000480 	.word	0x20000480
 8008b5c:	20000460 	.word	0x20000460
 8008b60:	2000035c 	.word	0x2000035c
 8008b64:	20000418 	.word	0x20000418
 8008b68:	20000358 	.word	0x20000358
 8008b6c:	2000046c 	.word	0x2000046c

08008b70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <vTaskInternalSetTimeOutState+0x24>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <vTaskInternalSetTimeOutState+0x28>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	605a      	str	r2, [r3, #4]
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	20000470 	.word	0x20000470
 8008b98:	2000045c 	.word	0x2000045c

08008b9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <xTaskCheckForTimeOut+0x24>
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	e7fe      	b.n	8008bbe <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d109      	bne.n	8008bda <xTaskCheckForTimeOut+0x3e>
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	60fb      	str	r3, [r7, #12]
 8008bd8:	e7fe      	b.n	8008bd8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008bda:	f000 fd5f 	bl	800969c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bde:	4b1d      	ldr	r3, [pc, #116]	; (8008c54 <xTaskCheckForTimeOut+0xb8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bf6:	d102      	bne.n	8008bfe <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	61fb      	str	r3, [r7, #28]
 8008bfc:	e023      	b.n	8008c46 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <xTaskCheckForTimeOut+0xbc>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d007      	beq.n	8008c1a <xTaskCheckForTimeOut+0x7e>
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d302      	bcc.n	8008c1a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008c14:	2301      	movs	r3, #1
 8008c16:	61fb      	str	r3, [r7, #28]
 8008c18:	e015      	b.n	8008c46 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d20b      	bcs.n	8008c3c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f7ff ff9d 	bl	8008b70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61fb      	str	r3, [r7, #28]
 8008c3a:	e004      	b.n	8008c46 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c42:	2301      	movs	r3, #1
 8008c44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c46:	f000 fd57 	bl	80096f8 <vPortExitCritical>

	return xReturn;
 8008c4a:	69fb      	ldr	r3, [r7, #28]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3720      	adds	r7, #32
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	2000045c 	.word	0x2000045c
 8008c58:	20000470 	.word	0x20000470

08008c5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c60:	4b03      	ldr	r3, [pc, #12]	; (8008c70 <vTaskMissedYield+0x14>)
 8008c62:	2201      	movs	r2, #1
 8008c64:	601a      	str	r2, [r3, #0]
}
 8008c66:	bf00      	nop
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	2000046c 	.word	0x2000046c

08008c74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c7c:	f000 f852 	bl	8008d24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c80:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <prvIdleTask+0x28>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d9f9      	bls.n	8008c7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c88:	4b05      	ldr	r3, [pc, #20]	; (8008ca0 <prvIdleTask+0x2c>)
 8008c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c98:	e7f0      	b.n	8008c7c <prvIdleTask+0x8>
 8008c9a:	bf00      	nop
 8008c9c:	2000035c 	.word	0x2000035c
 8008ca0:	e000ed04 	.word	0xe000ed04

08008ca4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008caa:	2300      	movs	r3, #0
 8008cac:	607b      	str	r3, [r7, #4]
 8008cae:	e00c      	b.n	8008cca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4a12      	ldr	r2, [pc, #72]	; (8008d04 <prvInitialiseTaskLists+0x60>)
 8008cbc:	4413      	add	r3, r2
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe faf6 	bl	80072b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	607b      	str	r3, [r7, #4]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b06      	cmp	r3, #6
 8008cce:	d9ef      	bls.n	8008cb0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cd0:	480d      	ldr	r0, [pc, #52]	; (8008d08 <prvInitialiseTaskLists+0x64>)
 8008cd2:	f7fe faed 	bl	80072b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cd6:	480d      	ldr	r0, [pc, #52]	; (8008d0c <prvInitialiseTaskLists+0x68>)
 8008cd8:	f7fe faea 	bl	80072b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cdc:	480c      	ldr	r0, [pc, #48]	; (8008d10 <prvInitialiseTaskLists+0x6c>)
 8008cde:	f7fe fae7 	bl	80072b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ce2:	480c      	ldr	r0, [pc, #48]	; (8008d14 <prvInitialiseTaskLists+0x70>)
 8008ce4:	f7fe fae4 	bl	80072b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ce8:	480b      	ldr	r0, [pc, #44]	; (8008d18 <prvInitialiseTaskLists+0x74>)
 8008cea:	f7fe fae1 	bl	80072b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cee:	4b0b      	ldr	r3, [pc, #44]	; (8008d1c <prvInitialiseTaskLists+0x78>)
 8008cf0:	4a05      	ldr	r2, [pc, #20]	; (8008d08 <prvInitialiseTaskLists+0x64>)
 8008cf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	; (8008d20 <prvInitialiseTaskLists+0x7c>)
 8008cf6:	4a05      	ldr	r2, [pc, #20]	; (8008d0c <prvInitialiseTaskLists+0x68>)
 8008cf8:	601a      	str	r2, [r3, #0]
}
 8008cfa:	bf00      	nop
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	2000035c 	.word	0x2000035c
 8008d08:	200003e8 	.word	0x200003e8
 8008d0c:	200003fc 	.word	0x200003fc
 8008d10:	20000418 	.word	0x20000418
 8008d14:	2000042c 	.word	0x2000042c
 8008d18:	20000444 	.word	0x20000444
 8008d1c:	20000410 	.word	0x20000410
 8008d20:	20000414 	.word	0x20000414

08008d24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b082      	sub	sp, #8
 8008d28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d2a:	e019      	b.n	8008d60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d2c:	f000 fcb6 	bl	800969c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <prvCheckTasksWaitingTermination+0x4c>)
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	f7fe fb41 	bl	80073c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d42:	4b0c      	ldr	r3, [pc, #48]	; (8008d74 <prvCheckTasksWaitingTermination+0x50>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3b01      	subs	r3, #1
 8008d48:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <prvCheckTasksWaitingTermination+0x50>)
 8008d4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d4c:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <prvCheckTasksWaitingTermination+0x54>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3b01      	subs	r3, #1
 8008d52:	4a09      	ldr	r2, [pc, #36]	; (8008d78 <prvCheckTasksWaitingTermination+0x54>)
 8008d54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d56:	f000 fccf 	bl	80096f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f80e 	bl	8008d7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d60:	4b05      	ldr	r3, [pc, #20]	; (8008d78 <prvCheckTasksWaitingTermination+0x54>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e1      	bne.n	8008d2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d68:	bf00      	nop
 8008d6a:	3708      	adds	r7, #8
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	2000042c 	.word	0x2000042c
 8008d74:	20000458 	.word	0x20000458
 8008d78:	20000440 	.word	0x20000440

08008d7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d108      	bne.n	8008da0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d92:	4618      	mov	r0, r3
 8008d94:	f000 fe5e 	bl	8009a54 <vPortFree>
				vPortFree( pxTCB );
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fe5b 	bl	8009a54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d9e:	e017      	b.n	8008dd0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008da6:	2b01      	cmp	r3, #1
 8008da8:	d103      	bne.n	8008db2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fe52 	bl	8009a54 <vPortFree>
	}
 8008db0:	e00e      	b.n	8008dd0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d009      	beq.n	8008dd0 <prvDeleteTCB+0x54>
 8008dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc0:	f383 8811 	msr	BASEPRI, r3
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	f3bf 8f4f 	dsb	sy
 8008dcc:	60fb      	str	r3, [r7, #12]
 8008dce:	e7fe      	b.n	8008dce <prvDeleteTCB+0x52>
	}
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <prvResetNextTaskUnblockTime+0x38>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d104      	bne.n	8008df2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008de8:	4b0a      	ldr	r3, [pc, #40]	; (8008e14 <prvResetNextTaskUnblockTime+0x3c>)
 8008dea:	f04f 32ff 	mov.w	r2, #4294967295
 8008dee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008df0:	e008      	b.n	8008e04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df2:	4b07      	ldr	r3, [pc, #28]	; (8008e10 <prvResetNextTaskUnblockTime+0x38>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	68db      	ldr	r3, [r3, #12]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	4a04      	ldr	r2, [pc, #16]	; (8008e14 <prvResetNextTaskUnblockTime+0x3c>)
 8008e02:	6013      	str	r3, [r2, #0]
}
 8008e04:	bf00      	nop
 8008e06:	370c      	adds	r7, #12
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	20000410 	.word	0x20000410
 8008e14:	20000478 	.word	0x20000478

08008e18 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008e18:	b480      	push	{r7}
 8008e1a:	b083      	sub	sp, #12
 8008e1c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008e1e:	4b05      	ldr	r3, [pc, #20]	; (8008e34 <xTaskGetCurrentTaskHandle+0x1c>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008e24:	687b      	ldr	r3, [r7, #4]
	}
 8008e26:	4618      	mov	r0, r3
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000358 	.word	0x20000358

08008e38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e38:	b480      	push	{r7}
 8008e3a:	b083      	sub	sp, #12
 8008e3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e3e:	4b0b      	ldr	r3, [pc, #44]	; (8008e6c <xTaskGetSchedulerState+0x34>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d102      	bne.n	8008e4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e46:	2301      	movs	r3, #1
 8008e48:	607b      	str	r3, [r7, #4]
 8008e4a:	e008      	b.n	8008e5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e4c:	4b08      	ldr	r3, [pc, #32]	; (8008e70 <xTaskGetSchedulerState+0x38>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d102      	bne.n	8008e5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e54:	2302      	movs	r3, #2
 8008e56:	607b      	str	r3, [r7, #4]
 8008e58:	e001      	b.n	8008e5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e5e:	687b      	ldr	r3, [r7, #4]
	}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20000464 	.word	0x20000464
 8008e70:	20000480 	.word	0x20000480

08008e74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d069      	beq.n	8008f5e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e8e:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <xTaskPriorityInherit+0xf4>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d259      	bcs.n	8008f4c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	db06      	blt.n	8008eae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ea0:	4b31      	ldr	r3, [pc, #196]	; (8008f68 <xTaskPriorityInherit+0xf4>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea6:	f1c3 0207 	rsb	r2, r3, #7
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	6959      	ldr	r1, [r3, #20]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	009b      	lsls	r3, r3, #2
 8008eba:	4413      	add	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4a2b      	ldr	r2, [pc, #172]	; (8008f6c <xTaskPriorityInherit+0xf8>)
 8008ec0:	4413      	add	r3, r2
 8008ec2:	4299      	cmp	r1, r3
 8008ec4:	d13a      	bne.n	8008f3c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	3304      	adds	r3, #4
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fa7a 	bl	80073c4 <uxListRemove>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d115      	bne.n	8008f02 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eda:	4924      	ldr	r1, [pc, #144]	; (8008f6c <xTaskPriorityInherit+0xf8>)
 8008edc:	4613      	mov	r3, r2
 8008ede:	009b      	lsls	r3, r3, #2
 8008ee0:	4413      	add	r3, r2
 8008ee2:	009b      	lsls	r3, r3, #2
 8008ee4:	440b      	add	r3, r1
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <xTaskPriorityInherit+0x8e>
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef6:	43da      	mvns	r2, r3
 8008ef8:	4b1d      	ldr	r3, [pc, #116]	; (8008f70 <xTaskPriorityInherit+0xfc>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4013      	ands	r3, r2
 8008efe:	4a1c      	ldr	r2, [pc, #112]	; (8008f70 <xTaskPriorityInherit+0xfc>)
 8008f00:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f02:	4b19      	ldr	r3, [pc, #100]	; (8008f68 <xTaskPriorityInherit+0xf4>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f10:	2201      	movs	r2, #1
 8008f12:	409a      	lsls	r2, r3
 8008f14:	4b16      	ldr	r3, [pc, #88]	; (8008f70 <xTaskPriorityInherit+0xfc>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	4a15      	ldr	r2, [pc, #84]	; (8008f70 <xTaskPriorityInherit+0xfc>)
 8008f1c:	6013      	str	r3, [r2, #0]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	4a10      	ldr	r2, [pc, #64]	; (8008f6c <xTaskPriorityInherit+0xf8>)
 8008f2c:	441a      	add	r2, r3
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	3304      	adds	r3, #4
 8008f32:	4619      	mov	r1, r3
 8008f34:	4610      	mov	r0, r2
 8008f36:	f7fe f9e8 	bl	800730a <vListInsertEnd>
 8008f3a:	e004      	b.n	8008f46 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008f3c:	4b0a      	ldr	r3, [pc, #40]	; (8008f68 <xTaskPriorityInherit+0xf4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008f46:	2301      	movs	r3, #1
 8008f48:	60fb      	str	r3, [r7, #12]
 8008f4a:	e008      	b.n	8008f5e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <xTaskPriorityInherit+0xf4>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d201      	bcs.n	8008f5e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
	}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3710      	adds	r7, #16
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}
 8008f68:	20000358 	.word	0x20000358
 8008f6c:	2000035c 	.word	0x2000035c
 8008f70:	20000460 	.word	0x20000460

08008f74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008f80:	2300      	movs	r3, #0
 8008f82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d06c      	beq.n	8009064 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008f8a:	4b39      	ldr	r3, [pc, #228]	; (8009070 <xTaskPriorityDisinherit+0xfc>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d009      	beq.n	8008fa8 <xTaskPriorityDisinherit+0x34>
 8008f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f98:	f383 8811 	msr	BASEPRI, r3
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e7fe      	b.n	8008fa6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d109      	bne.n	8008fc4 <xTaskPriorityDisinherit+0x50>
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	60bb      	str	r3, [r7, #8]
 8008fc2:	e7fe      	b.n	8008fc2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fc8:	1e5a      	subs	r2, r3, #1
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d044      	beq.n	8009064 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d140      	bne.n	8009064 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fe f9ec 	bl	80073c4 <uxListRemove>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d115      	bne.n	800901e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff6:	491f      	ldr	r1, [pc, #124]	; (8009074 <xTaskPriorityDisinherit+0x100>)
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	4413      	add	r3, r2
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	440b      	add	r3, r1
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <xTaskPriorityDisinherit+0xaa>
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900c:	2201      	movs	r2, #1
 800900e:	fa02 f303 	lsl.w	r3, r2, r3
 8009012:	43da      	mvns	r2, r3
 8009014:	4b18      	ldr	r3, [pc, #96]	; (8009078 <xTaskPriorityDisinherit+0x104>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4013      	ands	r3, r2
 800901a:	4a17      	ldr	r2, [pc, #92]	; (8009078 <xTaskPriorityDisinherit+0x104>)
 800901c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902a:	f1c3 0207 	rsb	r2, r3, #7
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009036:	2201      	movs	r2, #1
 8009038:	409a      	lsls	r2, r3
 800903a:	4b0f      	ldr	r3, [pc, #60]	; (8009078 <xTaskPriorityDisinherit+0x104>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4313      	orrs	r3, r2
 8009040:	4a0d      	ldr	r2, [pc, #52]	; (8009078 <xTaskPriorityDisinherit+0x104>)
 8009042:	6013      	str	r3, [r2, #0]
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009048:	4613      	mov	r3, r2
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4a08      	ldr	r2, [pc, #32]	; (8009074 <xTaskPriorityDisinherit+0x100>)
 8009052:	441a      	add	r2, r3
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3304      	adds	r3, #4
 8009058:	4619      	mov	r1, r3
 800905a:	4610      	mov	r0, r2
 800905c:	f7fe f955 	bl	800730a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009064:	697b      	ldr	r3, [r7, #20]
	}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop
 8009070:	20000358 	.word	0x20000358
 8009074:	2000035c 	.word	0x2000035c
 8009078:	20000460 	.word	0x20000460

0800907c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
 8009084:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800908a:	2301      	movs	r3, #1
 800908c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	f000 8081 	beq.w	8009198 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	e7fe      	b.n	80090b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090b6:	683a      	ldr	r2, [r7, #0]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d902      	bls.n	80090c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	61fb      	str	r3, [r7, #28]
 80090c0:	e002      	b.n	80090c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090cc:	69fa      	ldr	r2, [r7, #28]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d062      	beq.n	8009198 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d6:	697a      	ldr	r2, [r7, #20]
 80090d8:	429a      	cmp	r2, r3
 80090da:	d15d      	bne.n	8009198 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80090dc:	4b30      	ldr	r3, [pc, #192]	; (80091a0 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	69ba      	ldr	r2, [r7, #24]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d109      	bne.n	80090fa <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	60bb      	str	r3, [r7, #8]
 80090f8:	e7fe      	b.n	80090f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090fe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	699b      	ldr	r3, [r3, #24]
 800910a:	2b00      	cmp	r3, #0
 800910c:	db04      	blt.n	8009118 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	f1c3 0207 	rsb	r2, r3, #7
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	6959      	ldr	r1, [r3, #20]
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	4613      	mov	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009128:	4413      	add	r3, r2
 800912a:	4299      	cmp	r1, r3
 800912c:	d134      	bne.n	8009198 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	3304      	adds	r3, #4
 8009132:	4618      	mov	r0, r3
 8009134:	f7fe f946 	bl	80073c4 <uxListRemove>
 8009138:	4603      	mov	r3, r0
 800913a:	2b00      	cmp	r3, #0
 800913c:	d115      	bne.n	800916a <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800913e:	69bb      	ldr	r3, [r7, #24]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	4918      	ldr	r1, [pc, #96]	; (80091a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009144:	4613      	mov	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4413      	add	r3, r2
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	440b      	add	r3, r1
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <vTaskPriorityDisinheritAfterTimeout+0xee>
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009158:	2201      	movs	r2, #1
 800915a:	fa02 f303 	lsl.w	r3, r2, r3
 800915e:	43da      	mvns	r2, r3
 8009160:	4b11      	ldr	r3, [pc, #68]	; (80091a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4013      	ands	r3, r2
 8009166:	4a10      	ldr	r2, [pc, #64]	; (80091a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009168:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916e:	2201      	movs	r2, #1
 8009170:	409a      	lsls	r2, r3
 8009172:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4313      	orrs	r3, r2
 8009178:	4a0b      	ldr	r2, [pc, #44]	; (80091a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800917a:	6013      	str	r3, [r2, #0]
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009180:	4613      	mov	r3, r2
 8009182:	009b      	lsls	r3, r3, #2
 8009184:	4413      	add	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4a06      	ldr	r2, [pc, #24]	; (80091a4 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800918a:	441a      	add	r2, r3
 800918c:	69bb      	ldr	r3, [r7, #24]
 800918e:	3304      	adds	r3, #4
 8009190:	4619      	mov	r1, r3
 8009192:	4610      	mov	r0, r2
 8009194:	f7fe f8b9 	bl	800730a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009198:	bf00      	nop
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	20000358 	.word	0x20000358
 80091a4:	2000035c 	.word	0x2000035c
 80091a8:	20000460 	.word	0x20000460

080091ac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80091b0:	4b07      	ldr	r3, [pc, #28]	; (80091d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80091b8:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091be:	3201      	adds	r2, #1
 80091c0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80091c2:	4b03      	ldr	r3, [pc, #12]	; (80091d0 <pvTaskIncrementMutexHeldCount+0x24>)
 80091c4:	681b      	ldr	r3, [r3, #0]
	}
 80091c6:	4618      	mov	r0, r3
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr
 80091d0:	20000358 	.word	0x20000358

080091d4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80091de:	f000 fa5d 	bl	800969c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80091e2:	4b1e      	ldr	r3, [pc, #120]	; (800925c <ulTaskNotifyTake+0x88>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d113      	bne.n	8009214 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80091ec:	4b1b      	ldr	r3, [pc, #108]	; (800925c <ulTaskNotifyTake+0x88>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d00b      	beq.n	8009214 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80091fc:	2101      	movs	r1, #1
 80091fe:	6838      	ldr	r0, [r7, #0]
 8009200:	f000 f8be 	bl	8009380 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8009204:	4b16      	ldr	r3, [pc, #88]	; (8009260 <ulTaskNotifyTake+0x8c>)
 8009206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800920a:	601a      	str	r2, [r3, #0]
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009214:	f000 fa70 	bl	80096f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009218:	f000 fa40 	bl	800969c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800921c:	4b0f      	ldr	r3, [pc, #60]	; (800925c <ulTaskNotifyTake+0x88>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009222:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d00c      	beq.n	8009244 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d004      	beq.n	800923a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8009230:	4b0a      	ldr	r3, [pc, #40]	; (800925c <ulTaskNotifyTake+0x88>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2200      	movs	r2, #0
 8009236:	64da      	str	r2, [r3, #76]	; 0x4c
 8009238:	e004      	b.n	8009244 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800923a:	4b08      	ldr	r3, [pc, #32]	; (800925c <ulTaskNotifyTake+0x88>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	3a01      	subs	r2, #1
 8009242:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009244:	4b05      	ldr	r3, [pc, #20]	; (800925c <ulTaskNotifyTake+0x88>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800924e:	f000 fa53 	bl	80096f8 <vPortExitCritical>

		return ulReturn;
 8009252:	68fb      	ldr	r3, [r7, #12]
	}
 8009254:	4618      	mov	r0, r3
 8009256:	3710      	adds	r7, #16
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	20000358 	.word	0x20000358
 8009260:	e000ed04 	.word	0xe000ed04

08009264 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009264:	b580      	push	{r7, lr}
 8009266:	b08a      	sub	sp, #40	; 0x28
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d109      	bne.n	8009288 <vTaskNotifyGiveFromISR+0x24>
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	e7fe      	b.n	8009286 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009288:	f000 fae4 	bl	8009854 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 8009290:	f3ef 8211 	mrs	r2, BASEPRI
 8009294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	617a      	str	r2, [r7, #20]
 80092a6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80092a8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092aa:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80092b2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	2202      	movs	r2, #2
 80092b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092c0:	1c5a      	adds	r2, r3, #1
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80092c6:	7ffb      	ldrb	r3, [r7, #31]
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d144      	bne.n	8009356 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80092cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d009      	beq.n	80092e8 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	e7fe      	b.n	80092e6 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e8:	4b1f      	ldr	r3, [pc, #124]	; (8009368 <vTaskNotifyGiveFromISR+0x104>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d11c      	bne.n	800932a <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	3304      	adds	r3, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe f865 	bl	80073c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fe:	2201      	movs	r2, #1
 8009300:	409a      	lsls	r2, r3
 8009302:	4b1a      	ldr	r3, [pc, #104]	; (800936c <vTaskNotifyGiveFromISR+0x108>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4313      	orrs	r3, r2
 8009308:	4a18      	ldr	r2, [pc, #96]	; (800936c <vTaskNotifyGiveFromISR+0x108>)
 800930a:	6013      	str	r3, [r2, #0]
 800930c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009310:	4613      	mov	r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	009b      	lsls	r3, r3, #2
 8009318:	4a15      	ldr	r2, [pc, #84]	; (8009370 <vTaskNotifyGiveFromISR+0x10c>)
 800931a:	441a      	add	r2, r3
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	3304      	adds	r3, #4
 8009320:	4619      	mov	r1, r3
 8009322:	4610      	mov	r0, r2
 8009324:	f7fd fff1 	bl	800730a <vListInsertEnd>
 8009328:	e005      	b.n	8009336 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800932a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800932c:	3318      	adds	r3, #24
 800932e:	4619      	mov	r1, r3
 8009330:	4810      	ldr	r0, [pc, #64]	; (8009374 <vTaskNotifyGiveFromISR+0x110>)
 8009332:	f7fd ffea 	bl	800730a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933a:	4b0f      	ldr	r3, [pc, #60]	; (8009378 <vTaskNotifyGiveFromISR+0x114>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009340:	429a      	cmp	r2, r3
 8009342:	d908      	bls.n	8009356 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	2201      	movs	r2, #1
 800934e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8009350:	4b0a      	ldr	r3, [pc, #40]	; (800937c <vTaskNotifyGiveFromISR+0x118>)
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8009360:	bf00      	nop
 8009362:	3728      	adds	r7, #40	; 0x28
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}
 8009368:	20000480 	.word	0x20000480
 800936c:	20000460 	.word	0x20000460
 8009370:	2000035c 	.word	0x2000035c
 8009374:	20000418 	.word	0x20000418
 8009378:	20000358 	.word	0x20000358
 800937c:	2000046c 	.word	0x2000046c

08009380 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800938a:	4b29      	ldr	r3, [pc, #164]	; (8009430 <prvAddCurrentTaskToDelayedList+0xb0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009390:	4b28      	ldr	r3, [pc, #160]	; (8009434 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	3304      	adds	r3, #4
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe f814 	bl	80073c4 <uxListRemove>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d10b      	bne.n	80093ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80093a2:	4b24      	ldr	r3, [pc, #144]	; (8009434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	2201      	movs	r2, #1
 80093aa:	fa02 f303 	lsl.w	r3, r2, r3
 80093ae:	43da      	mvns	r2, r3
 80093b0:	4b21      	ldr	r3, [pc, #132]	; (8009438 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4013      	ands	r3, r2
 80093b6:	4a20      	ldr	r2, [pc, #128]	; (8009438 <prvAddCurrentTaskToDelayedList+0xb8>)
 80093b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093c0:	d10a      	bne.n	80093d8 <prvAddCurrentTaskToDelayedList+0x58>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d007      	beq.n	80093d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093c8:	4b1a      	ldr	r3, [pc, #104]	; (8009434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	481a      	ldr	r0, [pc, #104]	; (800943c <prvAddCurrentTaskToDelayedList+0xbc>)
 80093d2:	f7fd ff9a 	bl	800730a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80093d6:	e026      	b.n	8009426 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4413      	add	r3, r2
 80093de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80093e0:	4b14      	ldr	r3, [pc, #80]	; (8009434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68ba      	ldr	r2, [r7, #8]
 80093e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d209      	bcs.n	8009404 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80093f0:	4b13      	ldr	r3, [pc, #76]	; (8009440 <prvAddCurrentTaskToDelayedList+0xc0>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	4b0f      	ldr	r3, [pc, #60]	; (8009434 <prvAddCurrentTaskToDelayedList+0xb4>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3304      	adds	r3, #4
 80093fa:	4619      	mov	r1, r3
 80093fc:	4610      	mov	r0, r2
 80093fe:	f7fd ffa8 	bl	8007352 <vListInsert>
}
 8009402:	e010      	b.n	8009426 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009404:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009406:	681a      	ldr	r2, [r3, #0]
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <prvAddCurrentTaskToDelayedList+0xb4>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	3304      	adds	r3, #4
 800940e:	4619      	mov	r1, r3
 8009410:	4610      	mov	r0, r2
 8009412:	f7fd ff9e 	bl	8007352 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009416:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68ba      	ldr	r2, [r7, #8]
 800941c:	429a      	cmp	r2, r3
 800941e:	d202      	bcs.n	8009426 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009420:	4a09      	ldr	r2, [pc, #36]	; (8009448 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	6013      	str	r3, [r2, #0]
}
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	2000045c 	.word	0x2000045c
 8009434:	20000358 	.word	0x20000358
 8009438:	20000460 	.word	0x20000460
 800943c:	20000444 	.word	0x20000444
 8009440:	20000414 	.word	0x20000414
 8009444:	20000410 	.word	0x20000410
 8009448:	20000478 	.word	0x20000478

0800944c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800944c:	b480      	push	{r7}
 800944e:	b085      	sub	sp, #20
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3b04      	subs	r3, #4
 800945c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009464:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3b04      	subs	r3, #4
 800946a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	f023 0201 	bic.w	r2, r3, #1
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	3b04      	subs	r3, #4
 800947a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800947c:	4a0c      	ldr	r2, [pc, #48]	; (80094b0 <pxPortInitialiseStack+0x64>)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3b14      	subs	r3, #20
 8009486:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3b04      	subs	r3, #4
 8009492:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f06f 0202 	mvn.w	r2, #2
 800949a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	3b20      	subs	r3, #32
 80094a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094a2:	68fb      	ldr	r3, [r7, #12]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr
 80094b0:	080094b5 	.word	0x080094b5

080094b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094be:	4b11      	ldr	r3, [pc, #68]	; (8009504 <prvTaskExitError+0x50>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c6:	d009      	beq.n	80094dc <prvTaskExitError+0x28>
	__asm volatile
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	e7fe      	b.n	80094da <prvTaskExitError+0x26>
 80094dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e0:	f383 8811 	msr	BASEPRI, r3
 80094e4:	f3bf 8f6f 	isb	sy
 80094e8:	f3bf 8f4f 	dsb	sy
 80094ec:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094ee:	bf00      	nop
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d0fc      	beq.n	80094f0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094f6:	bf00      	nop
 80094f8:	3714      	adds	r7, #20
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	20000014 	.word	0x20000014
	...

08009510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009510:	4b07      	ldr	r3, [pc, #28]	; (8009530 <pxCurrentTCBConst2>)
 8009512:	6819      	ldr	r1, [r3, #0]
 8009514:	6808      	ldr	r0, [r1, #0]
 8009516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951a:	f380 8809 	msr	PSP, r0
 800951e:	f3bf 8f6f 	isb	sy
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f380 8811 	msr	BASEPRI, r0
 800952a:	4770      	bx	lr
 800952c:	f3af 8000 	nop.w

08009530 <pxCurrentTCBConst2>:
 8009530:	20000358 	.word	0x20000358
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009534:	bf00      	nop
 8009536:	bf00      	nop

08009538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009538:	4808      	ldr	r0, [pc, #32]	; (800955c <prvPortStartFirstTask+0x24>)
 800953a:	6800      	ldr	r0, [r0, #0]
 800953c:	6800      	ldr	r0, [r0, #0]
 800953e:	f380 8808 	msr	MSP, r0
 8009542:	f04f 0000 	mov.w	r0, #0
 8009546:	f380 8814 	msr	CONTROL, r0
 800954a:	b662      	cpsie	i
 800954c:	b661      	cpsie	f
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
 8009556:	df00      	svc	0
 8009558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800955a:	bf00      	nop
 800955c:	e000ed08 	.word	0xe000ed08

08009560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009566:	4b44      	ldr	r3, [pc, #272]	; (8009678 <xPortStartScheduler+0x118>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a44      	ldr	r2, [pc, #272]	; (800967c <xPortStartScheduler+0x11c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d109      	bne.n	8009584 <xPortStartScheduler+0x24>
 8009570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	613b      	str	r3, [r7, #16]
 8009582:	e7fe      	b.n	8009582 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009584:	4b3c      	ldr	r3, [pc, #240]	; (8009678 <xPortStartScheduler+0x118>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a3d      	ldr	r2, [pc, #244]	; (8009680 <xPortStartScheduler+0x120>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d109      	bne.n	80095a2 <xPortStartScheduler+0x42>
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	e7fe      	b.n	80095a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095a2:	4b38      	ldr	r3, [pc, #224]	; (8009684 <xPortStartScheduler+0x124>)
 80095a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	781b      	ldrb	r3, [r3, #0]
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	22ff      	movs	r2, #255	; 0xff
 80095b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	b2db      	uxtb	r3, r3
 80095ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	4b30      	ldr	r3, [pc, #192]	; (8009688 <xPortStartScheduler+0x128>)
 80095c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095ca:	4b30      	ldr	r3, [pc, #192]	; (800968c <xPortStartScheduler+0x12c>)
 80095cc:	2207      	movs	r2, #7
 80095ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095d0:	e009      	b.n	80095e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80095d2:	4b2e      	ldr	r3, [pc, #184]	; (800968c <xPortStartScheduler+0x12c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	3b01      	subs	r3, #1
 80095d8:	4a2c      	ldr	r2, [pc, #176]	; (800968c <xPortStartScheduler+0x12c>)
 80095da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095dc:	78fb      	ldrb	r3, [r7, #3]
 80095de:	b2db      	uxtb	r3, r3
 80095e0:	005b      	lsls	r3, r3, #1
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095e6:	78fb      	ldrb	r3, [r7, #3]
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ee:	2b80      	cmp	r3, #128	; 0x80
 80095f0:	d0ef      	beq.n	80095d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095f2:	4b26      	ldr	r3, [pc, #152]	; (800968c <xPortStartScheduler+0x12c>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f1c3 0307 	rsb	r3, r3, #7
 80095fa:	2b04      	cmp	r3, #4
 80095fc:	d009      	beq.n	8009612 <xPortStartScheduler+0xb2>
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	60bb      	str	r3, [r7, #8]
 8009610:	e7fe      	b.n	8009610 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009612:	4b1e      	ldr	r3, [pc, #120]	; (800968c <xPortStartScheduler+0x12c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	021b      	lsls	r3, r3, #8
 8009618:	4a1c      	ldr	r2, [pc, #112]	; (800968c <xPortStartScheduler+0x12c>)
 800961a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800961c:	4b1b      	ldr	r3, [pc, #108]	; (800968c <xPortStartScheduler+0x12c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009624:	4a19      	ldr	r2, [pc, #100]	; (800968c <xPortStartScheduler+0x12c>)
 8009626:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	b2da      	uxtb	r2, r3
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009630:	4b17      	ldr	r3, [pc, #92]	; (8009690 <xPortStartScheduler+0x130>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a16      	ldr	r2, [pc, #88]	; (8009690 <xPortStartScheduler+0x130>)
 8009636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800963a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800963c:	4b14      	ldr	r3, [pc, #80]	; (8009690 <xPortStartScheduler+0x130>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a13      	ldr	r2, [pc, #76]	; (8009690 <xPortStartScheduler+0x130>)
 8009642:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009646:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009648:	f000 f8d6 	bl	80097f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800964c:	4b11      	ldr	r3, [pc, #68]	; (8009694 <xPortStartScheduler+0x134>)
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009652:	f000 f8f5 	bl	8009840 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009656:	4b10      	ldr	r3, [pc, #64]	; (8009698 <xPortStartScheduler+0x138>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a0f      	ldr	r2, [pc, #60]	; (8009698 <xPortStartScheduler+0x138>)
 800965c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009660:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009662:	f7ff ff69 	bl	8009538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009666:	f7ff f9a3 	bl	80089b0 <vTaskSwitchContext>
	prvTaskExitError();
 800966a:	f7ff ff23 	bl	80094b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3718      	adds	r7, #24
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	e000ed00 	.word	0xe000ed00
 800967c:	410fc271 	.word	0x410fc271
 8009680:	410fc270 	.word	0x410fc270
 8009684:	e000e400 	.word	0xe000e400
 8009688:	20000484 	.word	0x20000484
 800968c:	20000488 	.word	0x20000488
 8009690:	e000ed20 	.word	0xe000ed20
 8009694:	20000014 	.word	0x20000014
 8009698:	e000ef34 	.word	0xe000ef34

0800969c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a6:	f383 8811 	msr	BASEPRI, r3
 80096aa:	f3bf 8f6f 	isb	sy
 80096ae:	f3bf 8f4f 	dsb	sy
 80096b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096b4:	4b0e      	ldr	r3, [pc, #56]	; (80096f0 <vPortEnterCritical+0x54>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	3301      	adds	r3, #1
 80096ba:	4a0d      	ldr	r2, [pc, #52]	; (80096f0 <vPortEnterCritical+0x54>)
 80096bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096be:	4b0c      	ldr	r3, [pc, #48]	; (80096f0 <vPortEnterCritical+0x54>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d10e      	bne.n	80096e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <vPortEnterCritical+0x58>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	b2db      	uxtb	r3, r3
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d009      	beq.n	80096e4 <vPortEnterCritical+0x48>
 80096d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d4:	f383 8811 	msr	BASEPRI, r3
 80096d8:	f3bf 8f6f 	isb	sy
 80096dc:	f3bf 8f4f 	dsb	sy
 80096e0:	603b      	str	r3, [r7, #0]
 80096e2:	e7fe      	b.n	80096e2 <vPortEnterCritical+0x46>
	}
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr
 80096f0:	20000014 	.word	0x20000014
 80096f4:	e000ed04 	.word	0xe000ed04

080096f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096fe:	4b11      	ldr	r3, [pc, #68]	; (8009744 <vPortExitCritical+0x4c>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d109      	bne.n	800971a <vPortExitCritical+0x22>
 8009706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800970a:	f383 8811 	msr	BASEPRI, r3
 800970e:	f3bf 8f6f 	isb	sy
 8009712:	f3bf 8f4f 	dsb	sy
 8009716:	607b      	str	r3, [r7, #4]
 8009718:	e7fe      	b.n	8009718 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800971a:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <vPortExitCritical+0x4c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3b01      	subs	r3, #1
 8009720:	4a08      	ldr	r2, [pc, #32]	; (8009744 <vPortExitCritical+0x4c>)
 8009722:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <vPortExitCritical+0x4c>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d104      	bne.n	8009736 <vPortExitCritical+0x3e>
 800972c:	2300      	movs	r3, #0
 800972e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	20000014 	.word	0x20000014
	...

08009750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009750:	f3ef 8009 	mrs	r0, PSP
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	4b15      	ldr	r3, [pc, #84]	; (80097b0 <pxCurrentTCBConst>)
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	f01e 0f10 	tst.w	lr, #16
 8009760:	bf08      	it	eq
 8009762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976a:	6010      	str	r0, [r2, #0]
 800976c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009774:	f380 8811 	msr	BASEPRI, r0
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f7ff f916 	bl	80089b0 <vTaskSwitchContext>
 8009784:	f04f 0000 	mov.w	r0, #0
 8009788:	f380 8811 	msr	BASEPRI, r0
 800978c:	bc09      	pop	{r0, r3}
 800978e:	6819      	ldr	r1, [r3, #0]
 8009790:	6808      	ldr	r0, [r1, #0]
 8009792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009796:	f01e 0f10 	tst.w	lr, #16
 800979a:	bf08      	it	eq
 800979c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097a0:	f380 8809 	msr	PSP, r0
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4770      	bx	lr
 80097aa:	bf00      	nop
 80097ac:	f3af 8000 	nop.w

080097b0 <pxCurrentTCBConst>:
 80097b0:	20000358 	.word	0x20000358
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097b4:	bf00      	nop
 80097b6:	bf00      	nop

080097b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
	__asm volatile
 80097be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c2:	f383 8811 	msr	BASEPRI, r3
 80097c6:	f3bf 8f6f 	isb	sy
 80097ca:	f3bf 8f4f 	dsb	sy
 80097ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097d0:	f7ff f836 	bl	8008840 <xTaskIncrementTick>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d003      	beq.n	80097e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097da:	4b06      	ldr	r3, [pc, #24]	; (80097f4 <SysTick_Handler+0x3c>)
 80097dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e0:	601a      	str	r2, [r3, #0]
 80097e2:	2300      	movs	r3, #0
 80097e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	e000ed04 	.word	0xe000ed04

080097f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097fc:	4b0b      	ldr	r3, [pc, #44]	; (800982c <vPortSetupTimerInterrupt+0x34>)
 80097fe:	2200      	movs	r2, #0
 8009800:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009802:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <vPortSetupTimerInterrupt+0x38>)
 8009804:	2200      	movs	r2, #0
 8009806:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <vPortSetupTimerInterrupt+0x3c>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a0a      	ldr	r2, [pc, #40]	; (8009838 <vPortSetupTimerInterrupt+0x40>)
 800980e:	fba2 2303 	umull	r2, r3, r2, r3
 8009812:	099b      	lsrs	r3, r3, #6
 8009814:	4a09      	ldr	r2, [pc, #36]	; (800983c <vPortSetupTimerInterrupt+0x44>)
 8009816:	3b01      	subs	r3, #1
 8009818:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800981a:	4b04      	ldr	r3, [pc, #16]	; (800982c <vPortSetupTimerInterrupt+0x34>)
 800981c:	2207      	movs	r2, #7
 800981e:	601a      	str	r2, [r3, #0]
}
 8009820:	bf00      	nop
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
 800982a:	bf00      	nop
 800982c:	e000e010 	.word	0xe000e010
 8009830:	e000e018 	.word	0xe000e018
 8009834:	20000008 	.word	0x20000008
 8009838:	10624dd3 	.word	0x10624dd3
 800983c:	e000e014 	.word	0xe000e014

08009840 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009840:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009850 <vPortEnableVFP+0x10>
 8009844:	6801      	ldr	r1, [r0, #0]
 8009846:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800984a:	6001      	str	r1, [r0, #0]
 800984c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800984e:	bf00      	nop
 8009850:	e000ed88 	.word	0xe000ed88

08009854 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009854:	b480      	push	{r7}
 8009856:	b085      	sub	sp, #20
 8009858:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800985a:	f3ef 8305 	mrs	r3, IPSR
 800985e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b0f      	cmp	r3, #15
 8009864:	d913      	bls.n	800988e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009866:	4a16      	ldr	r2, [pc, #88]	; (80098c0 <vPortValidateInterruptPriority+0x6c>)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009870:	4b14      	ldr	r3, [pc, #80]	; (80098c4 <vPortValidateInterruptPriority+0x70>)
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	7afa      	ldrb	r2, [r7, #11]
 8009876:	429a      	cmp	r2, r3
 8009878:	d209      	bcs.n	800988e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	607b      	str	r3, [r7, #4]
 800988c:	e7fe      	b.n	800988c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800988e:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <vPortValidateInterruptPriority+0x74>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009896:	4b0d      	ldr	r3, [pc, #52]	; (80098cc <vPortValidateInterruptPriority+0x78>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	429a      	cmp	r2, r3
 800989c:	d909      	bls.n	80098b2 <vPortValidateInterruptPriority+0x5e>
 800989e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098a2:	f383 8811 	msr	BASEPRI, r3
 80098a6:	f3bf 8f6f 	isb	sy
 80098aa:	f3bf 8f4f 	dsb	sy
 80098ae:	603b      	str	r3, [r7, #0]
 80098b0:	e7fe      	b.n	80098b0 <vPortValidateInterruptPriority+0x5c>
	}
 80098b2:	bf00      	nop
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	e000e3f0 	.word	0xe000e3f0
 80098c4:	20000484 	.word	0x20000484
 80098c8:	e000ed0c 	.word	0xe000ed0c
 80098cc:	20000488 	.word	0x20000488

080098d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b08a      	sub	sp, #40	; 0x28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098d8:	2300      	movs	r3, #0
 80098da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098dc:	f7fe fee4 	bl	80086a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098e0:	4b57      	ldr	r3, [pc, #348]	; (8009a40 <pvPortMalloc+0x170>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d101      	bne.n	80098ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098e8:	f000 f90c 	bl	8009b04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098ec:	4b55      	ldr	r3, [pc, #340]	; (8009a44 <pvPortMalloc+0x174>)
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	4013      	ands	r3, r2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	f040 808c 	bne.w	8009a12 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01c      	beq.n	800993a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009900:	2208      	movs	r2, #8
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4413      	add	r3, r2
 8009906:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	2b00      	cmp	r3, #0
 8009910:	d013      	beq.n	800993a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f023 0307 	bic.w	r3, r3, #7
 8009918:	3308      	adds	r3, #8
 800991a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f003 0307 	and.w	r3, r3, #7
 8009922:	2b00      	cmp	r3, #0
 8009924:	d009      	beq.n	800993a <pvPortMalloc+0x6a>
 8009926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800992a:	f383 8811 	msr	BASEPRI, r3
 800992e:	f3bf 8f6f 	isb	sy
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	617b      	str	r3, [r7, #20]
 8009938:	e7fe      	b.n	8009938 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d068      	beq.n	8009a12 <pvPortMalloc+0x142>
 8009940:	4b41      	ldr	r3, [pc, #260]	; (8009a48 <pvPortMalloc+0x178>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	429a      	cmp	r2, r3
 8009948:	d863      	bhi.n	8009a12 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800994a:	4b40      	ldr	r3, [pc, #256]	; (8009a4c <pvPortMalloc+0x17c>)
 800994c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800994e:	4b3f      	ldr	r3, [pc, #252]	; (8009a4c <pvPortMalloc+0x17c>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009954:	e004      	b.n	8009960 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	429a      	cmp	r2, r3
 8009968:	d903      	bls.n	8009972 <pvPortMalloc+0xa2>
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f1      	bne.n	8009956 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009972:	4b33      	ldr	r3, [pc, #204]	; (8009a40 <pvPortMalloc+0x170>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009978:	429a      	cmp	r2, r3
 800997a:	d04a      	beq.n	8009a12 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2208      	movs	r2, #8
 8009982:	4413      	add	r3, r2
 8009984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	1ad2      	subs	r2, r2, r3
 8009996:	2308      	movs	r3, #8
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	429a      	cmp	r2, r3
 800999c:	d91e      	bls.n	80099dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800999e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4413      	add	r3, r2
 80099a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d009      	beq.n	80099c4 <pvPortMalloc+0xf4>
 80099b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
 80099c2:	e7fe      	b.n	80099c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	685a      	ldr	r2, [r3, #4]
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	1ad2      	subs	r2, r2, r3
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099d6:	69b8      	ldr	r0, [r7, #24]
 80099d8:	f000 f8f6 	bl	8009bc8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099dc:	4b1a      	ldr	r3, [pc, #104]	; (8009a48 <pvPortMalloc+0x178>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	4a18      	ldr	r2, [pc, #96]	; (8009a48 <pvPortMalloc+0x178>)
 80099e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099ea:	4b17      	ldr	r3, [pc, #92]	; (8009a48 <pvPortMalloc+0x178>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b18      	ldr	r3, [pc, #96]	; (8009a50 <pvPortMalloc+0x180>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	429a      	cmp	r2, r3
 80099f4:	d203      	bcs.n	80099fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099f6:	4b14      	ldr	r3, [pc, #80]	; (8009a48 <pvPortMalloc+0x178>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a15      	ldr	r2, [pc, #84]	; (8009a50 <pvPortMalloc+0x180>)
 80099fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80099fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <pvPortMalloc+0x174>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0e:	2200      	movs	r2, #0
 8009a10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a12:	f7fe fe57 	bl	80086c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d009      	beq.n	8009a34 <pvPortMalloc+0x164>
 8009a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a24:	f383 8811 	msr	BASEPRI, r3
 8009a28:	f3bf 8f6f 	isb	sy
 8009a2c:	f3bf 8f4f 	dsb	sy
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e7fe      	b.n	8009a32 <pvPortMalloc+0x162>
	return pvReturn;
 8009a34:	69fb      	ldr	r3, [r7, #28]
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3728      	adds	r7, #40	; 0x28
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20004094 	.word	0x20004094
 8009a44:	200040a0 	.word	0x200040a0
 8009a48:	20004098 	.word	0x20004098
 8009a4c:	2000408c 	.word	0x2000408c
 8009a50:	2000409c 	.word	0x2000409c

08009a54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d046      	beq.n	8009af4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a66:	2308      	movs	r3, #8
 8009a68:	425b      	negs	r3, r3
 8009a6a:	697a      	ldr	r2, [r7, #20]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	4b20      	ldr	r3, [pc, #128]	; (8009afc <vPortFree+0xa8>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <vPortFree+0x42>
 8009a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60fb      	str	r3, [r7, #12]
 8009a94:	e7fe      	b.n	8009a94 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <vPortFree+0x5e>
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	60bb      	str	r3, [r7, #8]
 8009ab0:	e7fe      	b.n	8009ab0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ab2:	693b      	ldr	r3, [r7, #16]
 8009ab4:	685a      	ldr	r2, [r3, #4]
 8009ab6:	4b11      	ldr	r3, [pc, #68]	; (8009afc <vPortFree+0xa8>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4013      	ands	r3, r2
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d019      	beq.n	8009af4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d115      	bne.n	8009af4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ac8:	693b      	ldr	r3, [r7, #16]
 8009aca:	685a      	ldr	r2, [r3, #4]
 8009acc:	4b0b      	ldr	r3, [pc, #44]	; (8009afc <vPortFree+0xa8>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	43db      	mvns	r3, r3
 8009ad2:	401a      	ands	r2, r3
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ad8:	f7fe fde6 	bl	80086a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <vPortFree+0xac>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4413      	add	r3, r2
 8009ae6:	4a06      	ldr	r2, [pc, #24]	; (8009b00 <vPortFree+0xac>)
 8009ae8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009aea:	6938      	ldr	r0, [r7, #16]
 8009aec:	f000 f86c 	bl	8009bc8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009af0:	f7fe fde8 	bl	80086c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009af4:	bf00      	nop
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200040a0 	.word	0x200040a0
 8009b00:	20004098 	.word	0x20004098

08009b04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b04:	b480      	push	{r7}
 8009b06:	b085      	sub	sp, #20
 8009b08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b10:	4b27      	ldr	r3, [pc, #156]	; (8009bb0 <prvHeapInit+0xac>)
 8009b12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	f003 0307 	and.w	r3, r3, #7
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00c      	beq.n	8009b38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3307      	adds	r3, #7
 8009b22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 0307 	bic.w	r3, r3, #7
 8009b2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	1ad3      	subs	r3, r2, r3
 8009b32:	4a1f      	ldr	r2, [pc, #124]	; (8009bb0 <prvHeapInit+0xac>)
 8009b34:	4413      	add	r3, r2
 8009b36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b3c:	4a1d      	ldr	r2, [pc, #116]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b42:	4b1c      	ldr	r3, [pc, #112]	; (8009bb4 <prvHeapInit+0xb0>)
 8009b44:	2200      	movs	r2, #0
 8009b46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b50:	2208      	movs	r2, #8
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	1a9b      	subs	r3, r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f023 0307 	bic.w	r3, r3, #7
 8009b5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4a15      	ldr	r2, [pc, #84]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b66:	4b14      	ldr	r3, [pc, #80]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b6e:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009b84:	4b0c      	ldr	r3, [pc, #48]	; (8009bb8 <prvHeapInit+0xb4>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	4a0a      	ldr	r2, [pc, #40]	; (8009bbc <prvHeapInit+0xb8>)
 8009b92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	4a09      	ldr	r2, [pc, #36]	; (8009bc0 <prvHeapInit+0xbc>)
 8009b9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009b9c:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <prvHeapInit+0xc0>)
 8009b9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ba2:	601a      	str	r2, [r3, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	3714      	adds	r7, #20
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	2000048c 	.word	0x2000048c
 8009bb4:	2000408c 	.word	0x2000408c
 8009bb8:	20004094 	.word	0x20004094
 8009bbc:	2000409c 	.word	0x2000409c
 8009bc0:	20004098 	.word	0x20004098
 8009bc4:	200040a0 	.word	0x200040a0

08009bc8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bd0:	4b28      	ldr	r3, [pc, #160]	; (8009c74 <prvInsertBlockIntoFreeList+0xac>)
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	e002      	b.n	8009bdc <prvInsertBlockIntoFreeList+0x14>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d8f7      	bhi.n	8009bd6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	68ba      	ldr	r2, [r7, #8]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d108      	bne.n	8009c0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	441a      	add	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	685b      	ldr	r3, [r3, #4]
 8009c12:	68ba      	ldr	r2, [r7, #8]
 8009c14:	441a      	add	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d118      	bne.n	8009c50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <prvInsertBlockIntoFreeList+0xb0>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	429a      	cmp	r2, r3
 8009c28:	d00d      	beq.n	8009c46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	441a      	add	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	601a      	str	r2, [r3, #0]
 8009c44:	e008      	b.n	8009c58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c46:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <prvInsertBlockIntoFreeList+0xb0>)
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	601a      	str	r2, [r3, #0]
 8009c4e:	e003      	b.n	8009c58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c58:	68fa      	ldr	r2, [r7, #12]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d002      	beq.n	8009c66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c66:	bf00      	nop
 8009c68:	3714      	adds	r7, #20
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	2000408c 	.word	0x2000408c
 8009c78:	20004094 	.word	0x20004094

08009c7c <__libc_init_array>:
 8009c7c:	b570      	push	{r4, r5, r6, lr}
 8009c7e:	4e0d      	ldr	r6, [pc, #52]	; (8009cb4 <__libc_init_array+0x38>)
 8009c80:	4c0d      	ldr	r4, [pc, #52]	; (8009cb8 <__libc_init_array+0x3c>)
 8009c82:	1ba4      	subs	r4, r4, r6
 8009c84:	10a4      	asrs	r4, r4, #2
 8009c86:	2500      	movs	r5, #0
 8009c88:	42a5      	cmp	r5, r4
 8009c8a:	d109      	bne.n	8009ca0 <__libc_init_array+0x24>
 8009c8c:	4e0b      	ldr	r6, [pc, #44]	; (8009cbc <__libc_init_array+0x40>)
 8009c8e:	4c0c      	ldr	r4, [pc, #48]	; (8009cc0 <__libc_init_array+0x44>)
 8009c90:	f000 f82c 	bl	8009cec <_init>
 8009c94:	1ba4      	subs	r4, r4, r6
 8009c96:	10a4      	asrs	r4, r4, #2
 8009c98:	2500      	movs	r5, #0
 8009c9a:	42a5      	cmp	r5, r4
 8009c9c:	d105      	bne.n	8009caa <__libc_init_array+0x2e>
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ca4:	4798      	blx	r3
 8009ca6:	3501      	adds	r5, #1
 8009ca8:	e7ee      	b.n	8009c88 <__libc_init_array+0xc>
 8009caa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009cae:	4798      	blx	r3
 8009cb0:	3501      	adds	r5, #1
 8009cb2:	e7f2      	b.n	8009c9a <__libc_init_array+0x1e>
 8009cb4:	08009ec0 	.word	0x08009ec0
 8009cb8:	08009ec0 	.word	0x08009ec0
 8009cbc:	08009ec0 	.word	0x08009ec0
 8009cc0:	08009ec4 	.word	0x08009ec4

08009cc4 <memcpy>:
 8009cc4:	b510      	push	{r4, lr}
 8009cc6:	1e43      	subs	r3, r0, #1
 8009cc8:	440a      	add	r2, r1
 8009cca:	4291      	cmp	r1, r2
 8009ccc:	d100      	bne.n	8009cd0 <memcpy+0xc>
 8009cce:	bd10      	pop	{r4, pc}
 8009cd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cd8:	e7f7      	b.n	8009cca <memcpy+0x6>

08009cda <memset>:
 8009cda:	4402      	add	r2, r0
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d100      	bne.n	8009ce4 <memset+0xa>
 8009ce2:	4770      	bx	lr
 8009ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce8:	e7f9      	b.n	8009cde <memset+0x4>
	...

08009cec <_init>:
 8009cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cee:	bf00      	nop
 8009cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cf2:	bc08      	pop	{r3}
 8009cf4:	469e      	mov	lr, r3
 8009cf6:	4770      	bx	lr

08009cf8 <_fini>:
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cfa:	bf00      	nop
 8009cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfe:	bc08      	pop	{r3}
 8009d00:	469e      	mov	lr, r3
 8009d02:	4770      	bx	lr
