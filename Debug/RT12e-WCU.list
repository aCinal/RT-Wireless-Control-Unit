
RT12e-WCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d214  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  0800d3a4  0800d3a4  0001d3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d928  0800d928  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800d928  0800d928  0001d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d930  0800d930  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d930  0800d930  0001d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d934  0800d934  0001d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800d938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000866c  20000010  0800d948  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000867c  0800d948  0002867c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021409  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046cf  00000000  00000000  00041449  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb0  00000000  00000000  00045b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a88  00000000  00000000  000477c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000251e8  00000000  00000000  00049250  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018e15  00000000  00000000  0006e438  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4b1e  00000000  00000000  0008724d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bd6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c8  00000000  00000000  0015bde8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d38c 	.word	0x0800d38c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800d38c 	.word	0x0800d38c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0ce      	sub	sp, #312	; 0x138
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 ffbd 	bl	8002498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f93f 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fb39 	bl	8000b98 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 fb07 	bl	8000b38 <MX_DMA_Init>
  MX_CAN1_Init();
 800052a:	f000 f9a3 	bl	8000874 <MX_CAN1_Init>
  MX_CRC_Init();
 800052e:	f000 f9d7 	bl	80008e0 <MX_CRC_Init>
  MX_IWDG_Init();
 8000532:	f000 f9e9 	bl	8000908 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 8000536:	f000 fa01 	bl	800093c <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800053a:	f000 fa1f 	bl	800097c <MX_SPI1_Init>
  MX_UART4_Init();
 800053e:	f000 fa53 	bl	80009e8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000542:	f000 fa7b 	bl	8000a3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000546:	f000 faa3 	bl	8000a90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800054a:	f000 facb 	bl	8000ae4 <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800054e:	f007 f8db 	bl	8007708 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of crcMutex */
  osMutexDef(crcMutex);
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000558:	2300      	movs	r3, #0
 800055a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  crcMutexHandle = osMutexCreate(osMutex(crcMutex));
 800055e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000562:	4618      	mov	r0, r3
 8000564:	f009 ff76 	bl	800a454 <osMutexCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b74      	ldr	r3, [pc, #464]	; (800073c <main+0x228>)
 800056c:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of reportToWatchdogQueue */
  osMessageQDef(reportToWatchdogQueue, 16, osThreadId);
 800056e:	4b74      	ldr	r3, [pc, #464]	; (8000740 <main+0x22c>)
 8000570:	f507 7490 	add.w	r4, r7, #288	; 0x120
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  reportToWatchdogQueueHandle = osMessageCreate(osMessageQ(reportToWatchdogQueue), NULL);
 800057a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f00a f8ce 	bl	800a722 <osMessageCreate>
 8000586:	4602      	mov	r2, r0
 8000588:	4b6e      	ldr	r3, [pc, #440]	; (8000744 <main+0x230>)
 800058a:	601a      	str	r2, [r3, #0]

  /* definition and creation of canTransmitQueue */
  osMessageQDef(canTransmitQueue, 16, CanFrameTypedef);
 800058c:	4b6e      	ldr	r3, [pc, #440]	; (8000748 <main+0x234>)
 800058e:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canTransmitQueueHandle = osMessageCreate(osMessageQ(canTransmitQueue), NULL);
 8000598:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f00a f8bf 	bl	800a722 <osMessageCreate>
 80005a4:	4602      	mov	r2, r0
 80005a6:	4b69      	ldr	r3, [pc, #420]	; (800074c <main+0x238>)
 80005a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of canReceiveQueue */
  osMessageQDef(canReceiveQueue, 16, CanFrameTypedef);
 80005aa:	4b67      	ldr	r3, [pc, #412]	; (8000748 <main+0x234>)
 80005ac:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80005b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canReceiveQueueHandle = osMessageCreate(osMessageQ(canReceiveQueue), NULL);
 80005b6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f00a f8b0 	bl	800a722 <osMessageCreate>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b62      	ldr	r3, [pc, #392]	; (8000750 <main+0x23c>)
 80005c6:	601a      	str	r2, [r3, #0]

  /* definition and creation of sdSubscriptionQueue */
  osMessageQDef(sdSubscriptionQueue, 32, uint32_t);
 80005c8:	4b62      	ldr	r3, [pc, #392]	; (8000754 <main+0x240>)
 80005ca:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdSubscriptionQueueHandle = osMessageCreate(osMessageQ(sdSubscriptionQueue), NULL);
 80005d4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f00a f8a1 	bl	800a722 <osMessageCreate>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <main+0x244>)
 80005e4:	601a      	str	r2, [r3, #0]

  /* definition and creation of logErrorQueue */
  osMessageQDef(logErrorQueue, 16, const char*);
 80005e6:	4b56      	ldr	r3, [pc, #344]	; (8000740 <main+0x22c>)
 80005e8:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80005ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  logErrorQueueHandle = osMessageCreate(osMessageQ(logErrorQueue), NULL);
 80005f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f00a f892 	bl	800a722 <osMessageCreate>
 80005fe:	4602      	mov	r2, r0
 8000600:	4b56      	ldr	r3, [pc, #344]	; (800075c <main+0x248>)
 8000602:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, StartWatchdogTask, osPriorityNormal, 0, 128);
 8000604:	4b56      	ldr	r3, [pc, #344]	; (8000760 <main+0x24c>)
 8000606:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800060a:	461d      	mov	r5, r3
 800060c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800060e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000610:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000614:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 8000618:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f009 feb8 	bl	800a394 <osThreadCreate>
 8000624:	4602      	mov	r2, r0
 8000626:	4b4f      	ldr	r3, [pc, #316]	; (8000764 <main+0x250>)
 8000628:	601a      	str	r2, [r3, #0]

  /* definition and creation of btReceive */
  osThreadDef(btReceive, StartBtReceiveTask, osPriorityNormal, 0, 128);
 800062a:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <main+0x254>)
 800062c:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000630:	461d      	mov	r5, r3
 8000632:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000634:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000636:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800063a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  btReceiveHandle = osThreadCreate(osThread(btReceive), NULL);
 800063e:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f009 fea5 	bl	800a394 <osThreadCreate>
 800064a:	4602      	mov	r2, r0
 800064c:	4b47      	ldr	r3, [pc, #284]	; (800076c <main+0x258>)
 800064e:	601a      	str	r2, [r3, #0]

  /* definition and creation of xbeeSend */
  osThreadDef(xbeeSend, StartXbeeSendTask, osPriorityNormal, 0, 128);
 8000650:	4b47      	ldr	r3, [pc, #284]	; (8000770 <main+0x25c>)
 8000652:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000656:	461d      	mov	r5, r3
 8000658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800065c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeSendHandle = osThreadCreate(osThread(xbeeSend), NULL);
 8000664:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f009 fe92 	bl	800a394 <osThreadCreate>
 8000670:	4602      	mov	r2, r0
 8000672:	4b40      	ldr	r3, [pc, #256]	; (8000774 <main+0x260>)
 8000674:	601a      	str	r2, [r3, #0]

  /* definition and creation of xbeeReceive */
  osThreadDef(xbeeReceive, StartXbeeReceiveTask, osPriorityNormal, 0, 128);
 8000676:	4b40      	ldr	r3, [pc, #256]	; (8000778 <main+0x264>)
 8000678:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800067c:	461d      	mov	r5, r3
 800067e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000680:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000682:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000686:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeReceiveHandle = osThreadCreate(osThread(xbeeReceive), NULL);
 800068a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f009 fe7f 	bl	800a394 <osThreadCreate>
 8000696:	4602      	mov	r2, r0
 8000698:	4b38      	ldr	r3, [pc, #224]	; (800077c <main+0x268>)
 800069a:	601a      	str	r2, [r3, #0]

  /* definition and creation of gnssReceive */
  osThreadDef(gnssReceive, StartGnssReceiveTask, osPriorityNormal, 0, 128);
 800069c:	4b38      	ldr	r3, [pc, #224]	; (8000780 <main+0x26c>)
 800069e:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006a2:	461d      	mov	r5, r3
 80006a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gnssReceiveHandle = osThreadCreate(osThread(gnssReceive), NULL);
 80006b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f009 fe6c 	bl	800a394 <osThreadCreate>
 80006bc:	4602      	mov	r2, r0
 80006be:	4b31      	ldr	r3, [pc, #196]	; (8000784 <main+0x270>)
 80006c0:	601a      	str	r2, [r3, #0]

  /* definition and creation of rfReceive */
  osThreadDef(rfReceive, StartRfReceiveTask, osPriorityNormal, 0, 128);
 80006c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006c6:	4a30      	ldr	r2, [pc, #192]	; (8000788 <main+0x274>)
 80006c8:	461c      	mov	r4, r3
 80006ca:	4615      	mov	r5, r2
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfReceiveHandle = osThreadCreate(osThread(rfReceive), NULL);
 80006d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f009 fe58 	bl	800a394 <osThreadCreate>
 80006e4:	4602      	mov	r2, r0
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <main+0x278>)
 80006e8:	601a      	str	r2, [r3, #0]

  /* definition and creation of canGatekeeper */
  osThreadDef(canGatekeeper, StartCanGatekeeperTask, osPriorityNormal, 0, 128);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4a28      	ldr	r2, [pc, #160]	; (8000790 <main+0x27c>)
 80006f0:	461c      	mov	r4, r3
 80006f2:	4615      	mov	r5, r2
 80006f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canGatekeeperHandle = osThreadCreate(osThread(canGatekeeper), NULL);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	2100      	movs	r1, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f009 fe44 	bl	800a394 <osThreadCreate>
 800070c:	4602      	mov	r2, r0
 800070e:	4b21      	ldr	r3, [pc, #132]	; (8000794 <main+0x280>)
 8000710:	601a      	str	r2, [r3, #0]

  /* definition and creation of sdGatekeeper */
  osThreadDef(sdGatekeeper, StartSdGatekeeperTask, osPriorityNormal, 0, 2048);
 8000712:	463b      	mov	r3, r7
 8000714:	4a20      	ldr	r2, [pc, #128]	; (8000798 <main+0x284>)
 8000716:	461c      	mov	r4, r3
 8000718:	4615      	mov	r5, r2
 800071a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800071c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800071e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000722:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdGatekeeperHandle = osThreadCreate(osThread(sdGatekeeper), NULL);
 8000726:	463b      	mov	r3, r7
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f009 fe32 	bl	800a394 <osThreadCreate>
 8000730:	4602      	mov	r2, r0
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <main+0x288>)
 8000734:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000736:	f009 fe0a 	bl	800a34e <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800073a:	e7fe      	b.n	800073a <main+0x226>
 800073c:	200063dc 	.word	0x200063dc
 8000740:	0800d3a4 	.word	0x0800d3a4
 8000744:	200062d4 	.word	0x200062d4
 8000748:	0800d3b4 	.word	0x0800d3b4
 800074c:	20006510 	.word	0x20006510
 8000750:	2000650c 	.word	0x2000650c
 8000754:	0800d3c4 	.word	0x0800d3c4
 8000758:	20006468 	.word	0x20006468
 800075c:	20006470 	.word	0x20006470
 8000760:	0800d3e0 	.word	0x0800d3e0
 8000764:	20006278 	.word	0x20006278
 8000768:	0800d408 	.word	0x0800d408
 800076c:	2000646c 	.word	0x2000646c
 8000770:	0800d430 	.word	0x0800d430
 8000774:	200062d0 	.word	0x200062d0
 8000778:	0800d458 	.word	0x0800d458
 800077c:	200062d8 	.word	0x200062d8
 8000780:	0800d480 	.word	0x0800d480
 8000784:	200063e0 	.word	0x200063e0
 8000788:	0800d4a8 	.word	0x0800d4a8
 800078c:	20006584 	.word	0x20006584
 8000790:	0800d4d4 	.word	0x0800d4d4
 8000794:	20006514 	.word	0x20006514
 8000798:	0800d500 	.word	0x0800d500
 800079c:	20006580 	.word	0x20006580

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2230      	movs	r2, #48	; 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f00c fde3 	bl	800d37a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b28      	ldr	r3, [pc, #160]	; (800086c <SystemClock_Config+0xcc>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a27      	ldr	r2, [pc, #156]	; (800086c <SystemClock_Config+0xcc>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b25      	ldr	r3, [pc, #148]	; (800086c <SystemClock_Config+0xcc>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <SystemClock_Config+0xd0>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a21      	ldr	r2, [pc, #132]	; (8000870 <SystemClock_Config+0xd0>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1f      	ldr	r3, [pc, #124]	; (8000870 <SystemClock_Config+0xd0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007fc:	230a      	movs	r3, #10
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800080c:	2302      	movs	r3, #2
 800080e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000810:	2300      	movs	r3, #0
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000814:	2310      	movs	r3, #16
 8000816:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000818:	23c0      	movs	r3, #192	; 0xc0
 800081a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800081c:	2302      	movs	r3, #2
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000820:	2304      	movs	r3, #4
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	4618      	mov	r0, r3
 800082a:	f003 f955 	bl	8003ad8 <HAL_RCC_OscConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000834:	f001 f9d6 	bl	8001be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000838:	230f      	movs	r3, #15
 800083a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800083c:	2300      	movs	r3, #0
 800083e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f003 fbb0 	bl	8003fb8 <HAL_RCC_ClockConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800085e:	f001 f9c1 	bl	8001be4 <Error_Handler>
  }
}
 8000862:	bf00      	nop
 8000864:	3750      	adds	r7, #80	; 0x50
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000878:	4b17      	ldr	r3, [pc, #92]	; (80008d8 <MX_CAN1_Init+0x64>)
 800087a:	4a18      	ldr	r2, [pc, #96]	; (80008dc <MX_CAN1_Init+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_CAN1_Init+0x64>)
 8000880:	2202      	movs	r2, #2
 8000882:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_CAN1_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_CAN1_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_CAN1_Init+0x64>)
 8000892:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000896:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MX_CAN1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008a4:	4b0c      	ldr	r3, [pc, #48]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_CAN1_Init+0x64>)
 80008c4:	f001 fe4c 	bl	8002560 <HAL_CAN_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80008ce:	f001 f989 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20006558 	.word	0x20006558
 80008dc:	40006400 	.word	0x40006400

080008e0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_CRC_Init+0x20>)
 80008e6:	4a07      	ldr	r2, [pc, #28]	; (8000904 <MX_CRC_Init+0x24>)
 80008e8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_CRC_Init+0x20>)
 80008ec:	f002 fb0c 	bl	8002f08 <HAL_CRC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008f6:	f001 f975 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200062c8 	.word	0x200062c8
 8000904:	40023000 	.word	0x40023000

08000908 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_IWDG_Init+0x2c>)
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <MX_IWDG_Init+0x30>)
 8000910:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_IWDG_Init+0x2c>)
 8000914:	2200      	movs	r2, #0
 8000916:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_IWDG_Init+0x2c>)
 800091a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800091e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000920:	4804      	ldr	r0, [pc, #16]	; (8000934 <MX_IWDG_Init+0x2c>)
 8000922:	f003 f890 	bl	8003a46 <HAL_IWDG_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800092c:	f001 f95a 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200062bc 	.word	0x200062bc
 8000938:	40003000 	.word	0x40003000

0800093c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_SDIO_SD_Init+0x38>)
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <MX_SDIO_SD_Init+0x3c>)
 8000944:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_SDIO_SD_Init+0x38>)
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_SDIO_SD_Init+0x38>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_SDIO_SD_Init+0x38>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_SDIO_SD_Init+0x38>)
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <MX_SDIO_SD_Init+0x38>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <MX_SDIO_SD_Init+0x38>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	200063e4 	.word	0x200063e4
 8000978:	40012c00 	.word	0x40012c00

0800097c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000980:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_SPI1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	; 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_SPI1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	; (80009e0 <MX_SPI1_Init+0x64>)
 80009ce:	f004 ffef 	bl	80059b0 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f001 f904 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200064b4 	.word	0x200064b4
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_UART4_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <MX_UART4_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009f2:	4b10      	ldr	r3, [pc, #64]	; (8000a34 <MX_UART4_Init+0x4c>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_UART4_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_UART4_Init+0x4c>)
 8000a20:	f005 fa68 	bl	8005ef4 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f001 f8db 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20006474 	.word	0x20006474
 8000a38:	40004c00 	.word	0x40004c00

08000a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a40:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_USART1_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_USART1_UART_Init+0x4c>)
 8000a74:	f005 fa3e 	bl	8005ef4 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f001 f8b1 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000633c 	.word	0x2000633c
 8000a8c:	40011000 	.word	0x40011000

08000a90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a94:	4b11      	ldr	r3, [pc, #68]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a96:	4a12      	ldr	r2, [pc, #72]	; (8000ae0 <MX_USART2_UART_Init+0x50>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b10      	ldr	r3, [pc, #64]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	; (8000adc <MX_USART2_UART_Init+0x4c>)
 8000ac8:	f005 fa14 	bl	8005ef4 <HAL_UART_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad2:	f001 f887 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20006518 	.word	0x20006518
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	; (8000b34 <MX_USART3_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aee:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_USART3_UART_Init+0x4c>)
 8000b1c:	f005 f9ea 	bl	8005ef4 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f001 f85d 	bl	8001be4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	2000627c 	.word	0x2000627c
 8000b34:	40004800 	.word	0x40004800

08000b38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <MX_DMA_Init+0x5c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a13      	ldr	r2, [pc, #76]	; (8000b94 <MX_DMA_Init+0x5c>)
 8000b48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_DMA_Init+0x5c>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2105      	movs	r1, #5
 8000b5e:	203a      	movs	r0, #58	; 0x3a
 8000b60:	f002 f9a8 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b64:	203a      	movs	r0, #58	; 0x3a
 8000b66:	f002 f9c1 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2105      	movs	r1, #5
 8000b6e:	203b      	movs	r0, #59	; 0x3b
 8000b70:	f002 f9a0 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b74:	203b      	movs	r0, #59	; 0x3b
 8000b76:	f002 f9b9 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2105      	movs	r1, #5
 8000b7e:	2045      	movs	r0, #69	; 0x45
 8000b80:	f002 f998 	bl	8002eb4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b84:	2045      	movs	r0, #69	; 0x45
 8000b86:	f002 f9b1 	bl	8002eec <HAL_NVIC_EnableIRQ>

}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	4b46      	ldr	r3, [pc, #280]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a45      	ldr	r2, [pc, #276]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b43      	ldr	r3, [pc, #268]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b3f      	ldr	r3, [pc, #252]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a3e      	ldr	r2, [pc, #248]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bd4:	f043 0301 	orr.w	r3, r3, #1
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0301 	and.w	r3, r3, #1
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a37      	ldr	r2, [pc, #220]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bf0:	f043 0302 	orr.w	r3, r3, #2
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0302 	and.w	r3, r3, #2
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	4b31      	ldr	r3, [pc, #196]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a30      	ldr	r2, [pc, #192]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000c0c:	f043 0308 	orr.w	r3, r3, #8
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b2e      	ldr	r3, [pc, #184]	; (8000ccc <MX_GPIO_Init+0x134>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	607b      	str	r3, [r7, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2108      	movs	r1, #8
 8000c22:	482b      	ldr	r0, [pc, #172]	; (8000cd0 <MX_GPIO_Init+0x138>)
 8000c24:	f002 fef6 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI1_CSN_GPIO_Port, RF_SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2110      	movs	r1, #16
 8000c2c:	4829      	ldr	r0, [pc, #164]	; (8000cd4 <MX_GPIO_Init+0x13c>)
 8000c2e:	f002 fef1 	bl	8003a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_PWR_UP_Pin|RF_TRX_CE_Pin|RF_TX_EN_Pin|GNSS_FORCE_ON_Pin 
 8000c32:	2200      	movs	r2, #0
 8000c34:	f243 0134 	movw	r1, #12340	; 0x3034
 8000c38:	4827      	ldr	r0, [pc, #156]	; (8000cd8 <MX_GPIO_Init+0x140>)
 8000c3a:	f002 feeb 	bl	8003a14 <HAL_GPIO_WritePin>
                          |GNSS_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : XBEE_RSSI_Pin RF_DR_Pin RF_AM_Pin */
  GPIO_InitStruct.Pin = XBEE_RSSI_Pin|RF_DR_Pin|RF_AM_Pin;
 8000c3e:	2334      	movs	r3, #52	; 0x34
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	481f      	ldr	r0, [pc, #124]	; (8000cd0 <MX_GPIO_Init+0x138>)
 8000c52:	f002 fd45 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_RESET_Pin */
  GPIO_InitStruct.Pin = XBEE_RESET_Pin;
 8000c56:	2308      	movs	r3, #8
 8000c58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XBEE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4818      	ldr	r0, [pc, #96]	; (8000cd0 <MX_GPIO_Init+0x138>)
 8000c6e:	f002 fd37 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = RF_SPI1_CSN_Pin;
 8000c72:	2310      	movs	r3, #16
 8000c74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c76:	2301      	movs	r3, #1
 8000c78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	4619      	mov	r1, r3
 8000c88:	4812      	ldr	r0, [pc, #72]	; (8000cd4 <MX_GPIO_Init+0x13c>)
 8000c8a:	f002 fd29 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CD_Pin RF_uPCLK_Pin GNSS_1PPS_Pin */
  GPIO_InitStruct.Pin = RF_CD_Pin|RF_uPCLK_Pin|GNSS_1PPS_Pin;
 8000c8e:	230b      	movs	r3, #11
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_GPIO_Init+0x140>)
 8000ca2:	f002 fd1d 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_PWR_UP_Pin RF_TRX_CE_Pin RF_TX_EN_Pin GNSS_FORCE_ON_Pin 
                           GNSS_RESET_Pin */
  GPIO_InitStruct.Pin = RF_PWR_UP_Pin|RF_TRX_CE_Pin|RF_TX_EN_Pin|GNSS_FORCE_ON_Pin 
 8000ca6:	f243 0334 	movw	r3, #12340	; 0x3034
 8000caa:	617b      	str	r3, [r7, #20]
                          |GNSS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_GPIO_Init+0x140>)
 8000cc0:	f002 fd0e 	bl	80036e0 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020000 	.word	0x40020000
 8000cd8:	40020400 	.word	0x40020400

08000cdc <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	static BaseType_t dummy; /* Buffer for pxHigherPriorityTaskWoken flag */
	switch ((uint32_t) huart->Instance) {
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0c      	ldr	r2, [pc, #48]	; (8000d1c <HAL_UART_RxCpltCallback+0x40>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d00a      	beq.n	8000d04 <HAL_UART_RxCpltCallback+0x28>
 8000cee:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <HAL_UART_RxCpltCallback+0x44>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d000      	beq.n	8000cf6 <HAL_UART_RxCpltCallback+0x1a>
	case (uint32_t) GNSS_UART_INSTANCE:
		/* Notify gnssReceive task */
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
		break;
	}
}
 8000cf4:	e00d      	b.n	8000d12 <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) btReceiveHandle, &dummy);
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_UART_RxCpltCallback+0x48>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	490b      	ldr	r1, [pc, #44]	; (8000d28 <HAL_UART_RxCpltCallback+0x4c>)
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f00b fe05 	bl	800c90c <vTaskNotifyGiveFromISR>
		break;
 8000d02:	e006      	b.n	8000d12 <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
 8000d04:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_UART_RxCpltCallback+0x50>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4907      	ldr	r1, [pc, #28]	; (8000d28 <HAL_UART_RxCpltCallback+0x4c>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00b fdfe 	bl	800c90c <vTaskNotifyGiveFromISR>
		break;
 8000d10:	bf00      	nop
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	40011000 	.word	0x40011000
 8000d24:	2000646c 	.word	0x2000646c
 8000d28:	20000280 	.word	0x20000280
 8000d2c:	200063e0 	.word	0x200063e0

08000d30 <StartWatchdogTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdogTask */
void StartWatchdogTask(void const * argument)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08e      	sub	sp, #56	; 0x38
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Initialize the watchdog */
	HAL_IWDG_Init(&hiwdg);
 8000d38:	4847      	ldr	r0, [pc, #284]	; (8000e58 <StartWatchdogTask+0x128>)
 8000d3a:	f002 fe84 	bl	8003a46 <HAL_IWDG_Init>

	/* Define key-value pair array for testing threads activity */
	struct {
		osThreadId Id;
		bool Reported;
	} reportSheet[WCU_NUMBER_OF_WATCHED_THREADS ] = { { .Id = btReceiveHandle,
 8000d3e:	4b47      	ldr	r3, [pc, #284]	; (8000e5c <StartWatchdogTask+0x12c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	2300      	movs	r3, #0
 8000d46:	743b      	strb	r3, [r7, #16]
 8000d48:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <StartWatchdogTask+0x130>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	763b      	strb	r3, [r7, #24]
 8000d52:	4b44      	ldr	r3, [pc, #272]	; (8000e64 <StartWatchdogTask+0x134>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	61fb      	str	r3, [r7, #28]
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 3020 	strb.w	r3, [r7, #32]
 8000d5e:	4b42      	ldr	r3, [pc, #264]	; (8000e68 <StartWatchdogTask+0x138>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000d6a:	4b40      	ldr	r3, [pc, #256]	; (8000e6c <StartWatchdogTask+0x13c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	bool allReported; /* Flag raised when all watched threads have reported to the watchdog */

	/* Infinite loop */
	for (;;) {
		/* Test for all threads' activity */
		if (pdTRUE == xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000d76:	4b3e      	ldr	r3, [pc, #248]	; (8000e70 <StartWatchdogTask+0x140>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f107 0108 	add.w	r1, r7, #8
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00a f9fd 	bl	800b180 <xQueueReceive>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d161      	bne.n	8000e50 <StartWatchdogTask+0x120>
		WCU_REPORTTOWATCHDOGQUEUE_RECEIVE_TIMEOUT)) {
			/* Identify the thread that just reported and set the appropriate flag in the report sheet */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d92:	e018      	b.n	8000dc6 <StartWatchdogTask+0x96>
				if (buff == reportSheet[i].Id) {
 8000d94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d9e:	4413      	add	r3, r2
 8000da0:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	429a      	cmp	r2, r3
 8000da8:	d108      	bne.n	8000dbc <StartWatchdogTask+0x8c>
					reportSheet[i].Reported = true;
 8000daa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000db4:	4413      	add	r3, r2
 8000db6:	2201      	movs	r2, #1
 8000db8:	f803 2c28 	strb.w	r2, [r3, #-40]
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000dbc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000dc6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000dca:	2b04      	cmp	r3, #4
 8000dcc:	d9e2      	bls.n	8000d94 <StartWatchdogTask+0x64>
				}
			}

			/* Assume all threads reported to the watchdog */
			allReported = true;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			/* Test for threads that did not report */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000dda:	e015      	b.n	8000e08 <StartWatchdogTask+0xd8>
				if (reportSheet[i].Reported == false) {
 8000ddc:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000de0:	00db      	lsls	r3, r3, #3
 8000de2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000de6:	4413      	add	r3, r2
 8000de8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000dec:	f083 0301 	eor.w	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <StartWatchdogTask+0xce>
					/* If a thread did not report to the watchdog, reset the flag and break */
					allReported = false;
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8000dfc:	e008      	b.n	8000e10 <StartWatchdogTask+0xe0>
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000dfe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e02:	3301      	adds	r3, #1
 8000e04:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000e08:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000e0c:	2b04      	cmp	r3, #4
 8000e0e:	d9e5      	bls.n	8000ddc <StartWatchdogTask+0xac>
				}
			}

			if (true == allReported) {
 8000e10:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d01b      	beq.n	8000e50 <StartWatchdogTask+0x120>
				/* If all threads have reported to the watchdog, refresh the timer */
				HAL_IWDG_Refresh(&hiwdg);
 8000e18:	480f      	ldr	r0, [pc, #60]	; (8000e58 <StartWatchdogTask+0x128>)
 8000e1a:	f002 fe4d 	bl	8003ab8 <HAL_IWDG_Refresh>

				/* Reset the report sheet */
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000e24:	e00d      	b.n	8000e42 <StartWatchdogTask+0x112>
						1U) {
					reportSheet[i].Reported = false;
 8000e26:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e2a:	00db      	lsls	r3, r3, #3
 8000e2c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e30:	4413      	add	r3, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	f803 2c28 	strb.w	r2, [r3, #-40]
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000e38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000e42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	d9ed      	bls.n	8000e26 <StartWatchdogTask+0xf6>
				}

				/* Reset the flag */
				allReported = false;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f009 faeb 	bl	800a42c <osDelay>
		if (pdTRUE == xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000e56:	e78e      	b.n	8000d76 <StartWatchdogTask+0x46>
 8000e58:	200062bc 	.word	0x200062bc
 8000e5c:	2000646c 	.word	0x2000646c
 8000e60:	200062d0 	.word	0x200062d0
 8000e64:	200063e0 	.word	0x200063e0
 8000e68:	20006584 	.word	0x20006584
 8000e6c:	20006514 	.word	0x20006514
 8000e70:	200062d4 	.word	0x200062d4

08000e74 <StartBtReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBtReceiveTask */
void StartBtReceiveTask(void const * argument)
{
 8000e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e76:	b08b      	sub	sp, #44	; 0x2c
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	static uint16_t readCrc; /* Buffer for the transmitted CRC */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */

	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000e7c:	2214      	movs	r2, #20
 8000e7e:	498e      	ldr	r1, [pc, #568]	; (80010b8 <StartBtReceiveTask+0x244>)
 8000e80:	488e      	ldr	r0, [pc, #568]	; (80010bc <StartBtReceiveTask+0x248>)
 8000e82:	f005 f9c3 	bl	800620c <HAL_UART_Receive_DMA>
		WCU_BT_UART_RX_BUFF_SIZE);

		/* Wait for notify from ISR/message received callback */
		if (0UL < ulTaskNotifyTake(pdTRUE,
 8000e86:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f00b fcf6 	bl	800c87c <ulTaskNotifyTake>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	f000 8181 	beq.w	800119a <StartBtReceiveTask+0x326>
		WCU_BT_UART_RX_NOTIFY_TAKE_TIMEOUT)) {
			/* Validate the VER and RES/SEQ field */
			if (R3TP_VER0_VER_RES_SEQ_BYTE != btUartRxBuff[0]) {
 8000e98:	4b87      	ldr	r3, [pc, #540]	; (80010b8 <StartBtReceiveTask+0x244>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d032      	beq.n	8000f06 <StartBtReceiveTask+0x92>
				LOGERROR("Invalid VER/RES/SEQ in btReceive\r\n");
 8000ea0:	2022      	movs	r0, #34	; 0x22
 8000ea2:	f00c f865 	bl	800cf70 <pvPortMalloc>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	623b      	str	r3, [r7, #32]
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 81b1 	beq.w	8001214 <StartBtReceiveTask+0x3a0>
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	4a82      	ldr	r2, [pc, #520]	; (80010c0 <StartBtReceiveTask+0x24c>)
 8000eb6:	4614      	mov	r4, r2
 8000eb8:	469c      	mov	ip, r3
 8000eba:	f104 0e20 	add.w	lr, r4, #32
 8000ebe:	4665      	mov	r5, ip
 8000ec0:	4626      	mov	r6, r4
 8000ec2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000ec4:	6028      	str	r0, [r5, #0]
 8000ec6:	6069      	str	r1, [r5, #4]
 8000ec8:	60aa      	str	r2, [r5, #8]
 8000eca:	60eb      	str	r3, [r5, #12]
 8000ecc:	3410      	adds	r4, #16
 8000ece:	f10c 0c10 	add.w	ip, ip, #16
 8000ed2:	4574      	cmp	r4, lr
 8000ed4:	d1f3      	bne.n	8000ebe <StartBtReceiveTask+0x4a>
 8000ed6:	4663      	mov	r3, ip
 8000ed8:	4622      	mov	r2, r4
 8000eda:	8811      	ldrh	r1, [r2, #0]
 8000edc:	7892      	ldrb	r2, [r2, #2]
 8000ede:	8019      	strh	r1, [r3, #0]
 8000ee0:	709a      	strb	r2, [r3, #2]
 8000ee2:	4b78      	ldr	r3, [pc, #480]	; (80010c4 <StartBtReceiveTask+0x250>)
 8000ee4:	6818      	ldr	r0, [r3, #0]
 8000ee6:	f107 0120 	add.w	r1, r7, #32
 8000eea:	2300      	movs	r3, #0
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	f009 ff2e 	bl	800ad50 <xQueueGenericSend>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	f000 818c 	beq.w	8001214 <StartBtReceiveTask+0x3a0>
 8000efc:	6a3b      	ldr	r3, [r7, #32]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00c f8f8 	bl	800d0f4 <vPortFree>
				continue;
 8000f04:	e186      	b.n	8001214 <StartBtReceiveTask+0x3a0>
			}

			/* Validate the END SEQ field */
			if ((R3TP_END_SEQ_LOW_BYTE
					!= btUartRxBuff[R3TP_VER0_FRAME_SIZE - 2U])
 8000f06:	4b6c      	ldr	r3, [pc, #432]	; (80010b8 <StartBtReceiveTask+0x244>)
 8000f08:	7c9b      	ldrb	r3, [r3, #18]
			if ((R3TP_END_SEQ_LOW_BYTE
 8000f0a:	2bde      	cmp	r3, #222	; 0xde
 8000f0c:	d103      	bne.n	8000f16 <StartBtReceiveTask+0xa2>
					|| (R3TP_END_SEQ_HIGH_BYTE
							!= btUartRxBuff[R3TP_VER0_FRAME_SIZE - 1U])) {
 8000f0e:	4b6a      	ldr	r3, [pc, #424]	; (80010b8 <StartBtReceiveTask+0x244>)
 8000f10:	7cdb      	ldrb	r3, [r3, #19]
					|| (R3TP_END_SEQ_HIGH_BYTE
 8000f12:	2bed      	cmp	r3, #237	; 0xed
 8000f14:	d02c      	beq.n	8000f70 <StartBtReceiveTask+0xfc>
				LOGERROR("Invalid END SEQ in btReceive\r\n");
 8000f16:	201e      	movs	r0, #30
 8000f18:	f00c f82a 	bl	800cf70 <pvPortMalloc>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	61fb      	str	r3, [r7, #28]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	f000 8178 	beq.w	8001218 <StartBtReceiveTask+0x3a4>
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	4a67      	ldr	r2, [pc, #412]	; (80010c8 <StartBtReceiveTask+0x254>)
 8000f2c:	461d      	mov	r5, r3
 8000f2e:	4614      	mov	r4, r2
 8000f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f32:	6028      	str	r0, [r5, #0]
 8000f34:	6069      	str	r1, [r5, #4]
 8000f36:	60aa      	str	r2, [r5, #8]
 8000f38:	60eb      	str	r3, [r5, #12]
 8000f3a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000f3c:	6128      	str	r0, [r5, #16]
 8000f3e:	6169      	str	r1, [r5, #20]
 8000f40:	61aa      	str	r2, [r5, #24]
 8000f42:	8823      	ldrh	r3, [r4, #0]
 8000f44:	78a2      	ldrb	r2, [r4, #2]
 8000f46:	83ab      	strh	r3, [r5, #28]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	77ab      	strb	r3, [r5, #30]
 8000f4c:	4b5d      	ldr	r3, [pc, #372]	; (80010c4 <StartBtReceiveTask+0x250>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	f107 011c 	add.w	r1, r7, #28
 8000f54:	2300      	movs	r3, #0
 8000f56:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5a:	f009 fef9 	bl	800ad50 <xQueueGenericSend>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f000 8159 	beq.w	8001218 <StartBtReceiveTask+0x3a4>
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f00c f8c3 	bl	800d0f4 <vPortFree>
				continue;
 8000f6e:	e153      	b.n	8001218 <StartBtReceiveTask+0x3a4>
			}

			/* Read CRC - note that the CRC is transmitted as little endian */
			readCrc = READAS16BIT(btUartRxBuff[3], btUartRxBuff[2]);
 8000f70:	4b51      	ldr	r3, [pc, #324]	; (80010b8 <StartBtReceiveTask+0x244>)
 8000f72:	78db      	ldrb	r3, [r3, #3]
 8000f74:	021b      	lsls	r3, r3, #8
 8000f76:	b21a      	sxth	r2, r3
 8000f78:	4b4f      	ldr	r3, [pc, #316]	; (80010b8 <StartBtReceiveTask+0x244>)
 8000f7a:	789b      	ldrb	r3, [r3, #2]
 8000f7c:	b21b      	sxth	r3, r3
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	b21b      	sxth	r3, r3
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b51      	ldr	r3, [pc, #324]	; (80010cc <StartBtReceiveTask+0x258>)
 8000f86:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(btUartRxBuff + 2U, 0x00, 2U);
 8000f88:	4b51      	ldr	r3, [pc, #324]	; (80010d0 <StartBtReceiveTask+0x25c>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00c f9f3 	bl	800d37a <memset>

			/* Calculate the CRC */
			if (osOK == osMutexWait(crcMutexHandle, WCU_CRCMUTEX_TIMEOUT)) {
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <StartBtReceiveTask+0x260>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f009 fa71 	bl	800a484 <osMutexWait>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d114      	bne.n	8000fd2 <StartBtReceiveTask+0x15e>
				calculatedCrc =
						GET16LSBITS(
 8000fa8:	2205      	movs	r2, #5
 8000faa:	4943      	ldr	r1, [pc, #268]	; (80010b8 <StartBtReceiveTask+0x244>)
 8000fac:	484a      	ldr	r0, [pc, #296]	; (80010d8 <StartBtReceiveTask+0x264>)
 8000fae:	f001 ffc7 	bl	8002f40 <HAL_CRC_Calculate>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	b29a      	uxth	r2, r3
				calculatedCrc =
 8000fb6:	4b49      	ldr	r3, [pc, #292]	; (80010dc <StartBtReceiveTask+0x268>)
 8000fb8:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t*)btUartRxBuff, WCU_BT_UART_RX_BUFF_SIZE / 4U));
				osMutexRelease(crcMutexHandle);
 8000fba:	4b46      	ldr	r3, [pc, #280]	; (80010d4 <StartBtReceiveTask+0x260>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f009 faae 	bl	800a520 <osMutexRelease>
				LOGERROR("crcMutex timeout in btReceive\r\n");
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 8000fc4:	4b41      	ldr	r3, [pc, #260]	; (80010cc <StartBtReceiveTask+0x258>)
 8000fc6:	881a      	ldrh	r2, [r3, #0]
 8000fc8:	4b44      	ldr	r3, [pc, #272]	; (80010dc <StartBtReceiveTask+0x268>)
 8000fca:	881b      	ldrh	r3, [r3, #0]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	d055      	beq.n	800107c <StartBtReceiveTask+0x208>
 8000fd0:	e028      	b.n	8001024 <StartBtReceiveTask+0x1b0>
				LOGERROR("crcMutex timeout in btReceive\r\n");
 8000fd2:	201f      	movs	r0, #31
 8000fd4:	f00b ffcc 	bl	800cf70 <pvPortMalloc>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	61bb      	str	r3, [r7, #24]
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	f000 811c 	beq.w	800121c <StartBtReceiveTask+0x3a8>
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	4a3e      	ldr	r2, [pc, #248]	; (80010e0 <StartBtReceiveTask+0x26c>)
 8000fe8:	461c      	mov	r4, r3
 8000fea:	4615      	mov	r5, r2
 8000fec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fee:	6020      	str	r0, [r4, #0]
 8000ff0:	6061      	str	r1, [r4, #4]
 8000ff2:	60a2      	str	r2, [r4, #8]
 8000ff4:	60e3      	str	r3, [r4, #12]
 8000ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff8:	6120      	str	r0, [r4, #16]
 8000ffa:	6161      	str	r1, [r4, #20]
 8000ffc:	61a2      	str	r2, [r4, #24]
 8000ffe:	61e3      	str	r3, [r4, #28]
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <StartBtReceiveTask+0x250>)
 8001002:	6818      	ldr	r0, [r3, #0]
 8001004:	f107 0118 	add.w	r1, r7, #24
 8001008:	2300      	movs	r3, #0
 800100a:	f04f 32ff 	mov.w	r2, #4294967295
 800100e:	f009 fe9f 	bl	800ad50 <xQueueGenericSend>
 8001012:	4603      	mov	r3, r0
 8001014:	2b01      	cmp	r3, #1
 8001016:	f000 8101 	beq.w	800121c <StartBtReceiveTask+0x3a8>
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	4618      	mov	r0, r3
 800101e:	f00c f869 	bl	800d0f4 <vPortFree>
				continue;
 8001022:	e0fb      	b.n	800121c <StartBtReceiveTask+0x3a8>
				LOGERROR("Invalid CRC in btReceive\r\n");
 8001024:	201a      	movs	r0, #26
 8001026:	f00b ffa3 	bl	800cf70 <pvPortMalloc>
 800102a:	4603      	mov	r3, r0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	2b00      	cmp	r3, #0
 8001032:	f000 80f5 	beq.w	8001220 <StartBtReceiveTask+0x3ac>
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <StartBtReceiveTask+0x270>)
 800103a:	461d      	mov	r5, r3
 800103c:	4614      	mov	r4, r2
 800103e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001040:	6028      	str	r0, [r5, #0]
 8001042:	6069      	str	r1, [r5, #4]
 8001044:	60aa      	str	r2, [r5, #8]
 8001046:	60eb      	str	r3, [r5, #12]
 8001048:	cc03      	ldmia	r4!, {r0, r1}
 800104a:	6128      	str	r0, [r5, #16]
 800104c:	6169      	str	r1, [r5, #20]
 800104e:	8823      	ldrh	r3, [r4, #0]
 8001050:	78a2      	ldrb	r2, [r4, #2]
 8001052:	832b      	strh	r3, [r5, #24]
 8001054:	4613      	mov	r3, r2
 8001056:	76ab      	strb	r3, [r5, #26]
 8001058:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <StartBtReceiveTask+0x250>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f107 0114 	add.w	r1, r7, #20
 8001060:	2300      	movs	r3, #0
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	f009 fe73 	bl	800ad50 <xQueueGenericSend>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	f000 80d7 	beq.w	8001220 <StartBtReceiveTask+0x3ac>
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	4618      	mov	r0, r3
 8001076:	f00c f83d 	bl	800d0f4 <vPortFree>
				continue;
 800107a:	e0d1      	b.n	8001220 <StartBtReceiveTask+0x3ac>
			}

			/* Read the CAN ID - note that the CAN ID is transmitted as little endian */
			canFrame.Header.Tx.StdId = READAS32BIT(btUartRxBuff[7],
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <StartBtReceiveTask+0x244>)
 800107e:	79db      	ldrb	r3, [r3, #7]
 8001080:	061a      	lsls	r2, r3, #24
 8001082:	4b0d      	ldr	r3, [pc, #52]	; (80010b8 <StartBtReceiveTask+0x244>)
 8001084:	799b      	ldrb	r3, [r3, #6]
 8001086:	041b      	lsls	r3, r3, #16
 8001088:	431a      	orrs	r2, r3
 800108a:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <StartBtReceiveTask+0x244>)
 800108c:	795b      	ldrb	r3, [r3, #5]
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	4313      	orrs	r3, r2
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <StartBtReceiveTask+0x244>)
 8001094:	7912      	ldrb	r2, [r2, #4]
 8001096:	4313      	orrs	r3, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <StartBtReceiveTask+0x274>)
 800109c:	605a      	str	r2, [r3, #4]
					btUartRxBuff[6], btUartRxBuff[5], btUartRxBuff[4]);
			/* Read the Data Length Code */
			canFrame.Header.Tx.DLC = (uint32_t) (
					btUartRxBuff[8] < WCU_CAN_PAYLOAD_SIZE ?
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <StartBtReceiveTask+0x244>)
 80010a0:	7a1b      	ldrb	r3, [r3, #8]
			canFrame.Header.Tx.DLC = (uint32_t) (
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	bf28      	it	cs
 80010a6:	2308      	movcs	r3, #8
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	461a      	mov	r2, r3
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <StartBtReceiveTask+0x274>)
 80010ae:	615a      	str	r2, [r3, #20]
							btUartRxBuff[8] : WCU_CAN_PAYLOAD_SIZE);

			/* Read the payload */
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010b6:	e02b      	b.n	8001110 <StartBtReceiveTask+0x29c>
 80010b8:	20000284 	.word	0x20000284
 80010bc:	2000633c 	.word	0x2000633c
 80010c0:	0800d51c 	.word	0x0800d51c
 80010c4:	20006470 	.word	0x20006470
 80010c8:	0800d540 	.word	0x0800d540
 80010cc:	20000298 	.word	0x20000298
 80010d0:	20000286 	.word	0x20000286
 80010d4:	200063dc 	.word	0x200063dc
 80010d8:	200062c8 	.word	0x200062c8
 80010dc:	2000029a 	.word	0x2000029a
 80010e0:	0800d560 	.word	0x0800d560
 80010e4:	0800d580 	.word	0x0800d580
 80010e8:	2000029c 	.word	0x2000029c
				canFrame.Payload[i] = btUartRxBuff[9 + i];
 80010ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f0:	f103 0209 	add.w	r2, r3, #9
 80010f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010f8:	494a      	ldr	r1, [pc, #296]	; (8001224 <StartBtReceiveTask+0x3b0>)
 80010fa:	5c89      	ldrb	r1, [r1, r2]
 80010fc:	4a4a      	ldr	r2, [pc, #296]	; (8001228 <StartBtReceiveTask+0x3b4>)
 80010fe:	4413      	add	r3, r2
 8001100:	460a      	mov	r2, r1
 8001102:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8001106:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800110a:	3301      	adds	r3, #1
 800110c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001110:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <StartBtReceiveTask+0x3b4>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	429a      	cmp	r2, r3
 800111a:	d3e7      	bcc.n	80010ec <StartBtReceiveTask+0x278>
			}

			/* Push CAN frame to queue */
			if (pdTRUE
					!= xQueueSend(canTransmitQueueHandle, &canFrame,
 800111c:	4b43      	ldr	r3, [pc, #268]	; (800122c <StartBtReceiveTask+0x3b8>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	f04f 32ff 	mov.w	r2, #4294967295
 8001126:	4940      	ldr	r1, [pc, #256]	; (8001228 <StartBtReceiveTask+0x3b4>)
 8001128:	f009 fe12 	bl	800ad50 <xQueueGenericSend>
 800112c:	4603      	mov	r3, r0
			if (pdTRUE
 800112e:	2b01      	cmp	r3, #1
 8001130:	d033      	beq.n	800119a <StartBtReceiveTask+0x326>
							WCU_CANTRANSMITQUEUE_SEND_TIMEOUT)) {
				LOGERROR("btReceive failed to send to canTransmitQueue\r\n");
 8001132:	202e      	movs	r0, #46	; 0x2e
 8001134:	f00b ff1c 	bl	800cf70 <pvPortMalloc>
 8001138:	4603      	mov	r3, r0
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d02b      	beq.n	800119a <StartBtReceiveTask+0x326>
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <StartBtReceiveTask+0x3bc>)
 8001146:	4615      	mov	r5, r2
 8001148:	469c      	mov	ip, r3
 800114a:	f105 0e20 	add.w	lr, r5, #32
 800114e:	4664      	mov	r4, ip
 8001150:	462e      	mov	r6, r5
 8001152:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001154:	6020      	str	r0, [r4, #0]
 8001156:	6061      	str	r1, [r4, #4]
 8001158:	60a2      	str	r2, [r4, #8]
 800115a:	60e3      	str	r3, [r4, #12]
 800115c:	3510      	adds	r5, #16
 800115e:	f10c 0c10 	add.w	ip, ip, #16
 8001162:	4575      	cmp	r5, lr
 8001164:	d1f3      	bne.n	800114e <StartBtReceiveTask+0x2da>
 8001166:	4664      	mov	r4, ip
 8001168:	462b      	mov	r3, r5
 800116a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800116c:	6020      	str	r0, [r4, #0]
 800116e:	6061      	str	r1, [r4, #4]
 8001170:	60a2      	str	r2, [r4, #8]
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	81a2      	strh	r2, [r4, #12]
 8001178:	73a3      	strb	r3, [r4, #14]
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <StartBtReceiveTask+0x3c0>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f107 0110 	add.w	r1, r7, #16
 8001182:	2300      	movs	r3, #0
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	f009 fde2 	bl	800ad50 <xQueueGenericSend>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d003      	beq.n	800119a <StartBtReceiveTask+0x326>
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4618      	mov	r0, r3
 8001196:	f00b ffad 	bl	800d0f4 <vPortFree>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &btReceiveHandle,
 800119a:	4b27      	ldr	r3, [pc, #156]	; (8001238 <StartBtReceiveTask+0x3c4>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	2300      	movs	r3, #0
 80011a0:	f04f 32ff 	mov.w	r2, #4294967295
 80011a4:	4925      	ldr	r1, [pc, #148]	; (800123c <StartBtReceiveTask+0x3c8>)
 80011a6:	f009 fdd3 	bl	800ad50 <xQueueGenericSend>
 80011aa:	4603      	mov	r3, r0
		if (pdTRUE
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d02d      	beq.n	800120c <StartBtReceiveTask+0x398>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			LOGERROR("btReceive failed to send to reportToWatchdogQueue\r\n");
 80011b0:	2033      	movs	r0, #51	; 0x33
 80011b2:	f00b fedd 	bl	800cf70 <pvPortMalloc>
 80011b6:	4603      	mov	r3, r0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d025      	beq.n	800120c <StartBtReceiveTask+0x398>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4a1f      	ldr	r2, [pc, #124]	; (8001240 <StartBtReceiveTask+0x3cc>)
 80011c4:	4614      	mov	r4, r2
 80011c6:	469c      	mov	ip, r3
 80011c8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011cc:	4665      	mov	r5, ip
 80011ce:	4626      	mov	r6, r4
 80011d0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011d2:	6028      	str	r0, [r5, #0]
 80011d4:	6069      	str	r1, [r5, #4]
 80011d6:	60aa      	str	r2, [r5, #8]
 80011d8:	60eb      	str	r3, [r5, #12]
 80011da:	3410      	adds	r4, #16
 80011dc:	f10c 0c10 	add.w	ip, ip, #16
 80011e0:	4574      	cmp	r4, lr
 80011e2:	d1f3      	bne.n	80011cc <StartBtReceiveTask+0x358>
 80011e4:	4663      	mov	r3, ip
 80011e6:	4622      	mov	r2, r4
 80011e8:	6810      	ldr	r0, [r2, #0]
 80011ea:	6018      	str	r0, [r3, #0]
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <StartBtReceiveTask+0x3c0>)
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f107 010c 	add.w	r1, r7, #12
 80011f4:	2300      	movs	r3, #0
 80011f6:	f04f 32ff 	mov.w	r2, #4294967295
 80011fa:	f009 fda9 	bl	800ad50 <xQueueGenericSend>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <StartBtReceiveTask+0x398>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4618      	mov	r0, r3
 8001208:	f00b ff74 	bl	800d0f4 <vPortFree>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800120c:	2001      	movs	r0, #1
 800120e:	f009 f90d 	bl	800a42c <osDelay>
 8001212:	e633      	b.n	8000e7c <StartBtReceiveTask+0x8>
				continue;
 8001214:	bf00      	nop
 8001216:	e631      	b.n	8000e7c <StartBtReceiveTask+0x8>
				continue;
 8001218:	bf00      	nop
 800121a:	e62f      	b.n	8000e7c <StartBtReceiveTask+0x8>
				continue;
 800121c:	bf00      	nop
 800121e:	e62d      	b.n	8000e7c <StartBtReceiveTask+0x8>
				continue;
 8001220:	bf00      	nop
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8001222:	e62b      	b.n	8000e7c <StartBtReceiveTask+0x8>
 8001224:	20000284 	.word	0x20000284
 8001228:	2000029c 	.word	0x2000029c
 800122c:	20006510 	.word	0x20006510
 8001230:	0800d59c 	.word	0x0800d59c
 8001234:	20006470 	.word	0x20006470
 8001238:	200062d4 	.word	0x200062d4
 800123c:	2000646c 	.word	0x2000646c
 8001240:	0800d5cc 	.word	0x0800d5cc

08001244 <StartXbeeSendTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeSendTask */
void StartXbeeSendTask(void const * argument)
{
 8001244:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	static uint8_t xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE]; /* UART Tx buffer */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */
	static uint8_t seqNum = 0U; /* Sequence number */

	/* Activate XBEE Pro by driving the XBEE_RESET pin high */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_SET);
 800124c:	2201      	movs	r2, #1
 800124e:	2108      	movs	r1, #8
 8001250:	488e      	ldr	r0, [pc, #568]	; (800148c <StartXbeeSendTask+0x248>)
 8001252:	f002 fbdf 	bl	8003a14 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for (;;) {
		if (pdTRUE == xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 8001256:	4b8e      	ldr	r3, [pc, #568]	; (8001490 <StartXbeeSendTask+0x24c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2200      	movs	r2, #0
 800125c:	498d      	ldr	r1, [pc, #564]	; (8001494 <StartXbeeSendTask+0x250>)
 800125e:	4618      	mov	r0, r3
 8001260:	f009 ff8e 	bl	800b180 <xQueueReceive>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	f040 80cf 	bne.w	800140a <StartXbeeSendTask+0x1c6>
		WCU_CANRECEIVEQUEUE_RECEIVE_TIMEOUT)) {
			if (RX == frameBuff.DataDirection) {
 800126c:	4b8a      	ldr	r3, [pc, #552]	; (8001498 <StartXbeeSendTask+0x254>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	2b01      	cmp	r3, #1
 8001272:	f040 809c 	bne.w	80013ae <StartXbeeSendTask+0x16a>
				/* Clear the buffer */
				memset(xbeeUartTxBuff, 0x00, R3TP_VER0_FRAME_SIZE);
 8001276:	2214      	movs	r2, #20
 8001278:	2100      	movs	r1, #0
 800127a:	4886      	ldr	r0, [pc, #536]	; (8001494 <StartXbeeSendTask+0x250>)
 800127c:	f00c f87d 	bl	800d37a <memset>

				/* Set VER and RES/SEQ field */
				xbeeUartTxBuff[0] = R3TP_VER0_VER_RES_SEQ_BYTE;
 8001280:	4b84      	ldr	r3, [pc, #528]	; (8001494 <StartXbeeSendTask+0x250>)
 8001282:	2200      	movs	r2, #0
 8001284:	701a      	strb	r2, [r3, #0]

				/* Set the SEQ NUM field */
				xbeeUartTxBuff[1] = seqNum;
 8001286:	4b85      	ldr	r3, [pc, #532]	; (800149c <StartXbeeSendTask+0x258>)
 8001288:	781a      	ldrb	r2, [r3, #0]
 800128a:	4b82      	ldr	r3, [pc, #520]	; (8001494 <StartXbeeSendTask+0x250>)
 800128c:	705a      	strb	r2, [r3, #1]
				/* Increment the sequence number */
				seqNum = (seqNum < 255U) ? seqNum + 1 : 0U;
 800128e:	4b83      	ldr	r3, [pc, #524]	; (800149c <StartXbeeSendTask+0x258>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2bff      	cmp	r3, #255	; 0xff
 8001294:	d004      	beq.n	80012a0 <StartXbeeSendTask+0x5c>
 8001296:	4b81      	ldr	r3, [pc, #516]	; (800149c <StartXbeeSendTask+0x258>)
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	e000      	b.n	80012a2 <StartXbeeSendTask+0x5e>
 80012a0:	2300      	movs	r3, #0
 80012a2:	4a7e      	ldr	r2, [pc, #504]	; (800149c <StartXbeeSendTask+0x258>)
 80012a4:	7013      	strb	r3, [r2, #0]

				/* Set the END SEQ field */
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 2U] =
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <StartXbeeSendTask+0x250>)
 80012a8:	22de      	movs	r2, #222	; 0xde
 80012aa:	749a      	strb	r2, [r3, #18]
				R3TP_END_SEQ_LOW_BYTE;
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 1U] =
 80012ac:	4b79      	ldr	r3, [pc, #484]	; (8001494 <StartXbeeSendTask+0x250>)
 80012ae:	22ed      	movs	r2, #237	; 0xed
 80012b0:	74da      	strb	r2, [r3, #19]
				R3TP_END_SEQ_HIGH_BYTE;

				/* Set CAN ID field - note that the CAN ID is transmitted as little endian */
				xbeeUartTxBuff[4] = GETLSBOF16(frameBuff.Header.Rx.StdId);
 80012b2:	4b79      	ldr	r3, [pc, #484]	; (8001498 <StartXbeeSendTask+0x254>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	4b76      	ldr	r3, [pc, #472]	; (8001494 <StartXbeeSendTask+0x250>)
 80012ba:	711a      	strb	r2, [r3, #4]
				xbeeUartTxBuff[5] = GETMSBOF16(frameBuff.Header.Rx.StdId);
 80012bc:	4b76      	ldr	r3, [pc, #472]	; (8001498 <StartXbeeSendTask+0x254>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	0a1b      	lsrs	r3, r3, #8
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b72      	ldr	r3, [pc, #456]	; (8001494 <StartXbeeSendTask+0x250>)
 80012ca:	715a      	strb	r2, [r3, #5]

				/* Set the DLC field */
				xbeeUartTxBuff[8] = (uint8_t) frameBuff.Header.Rx.DLC;
 80012cc:	4b72      	ldr	r3, [pc, #456]	; (8001498 <StartXbeeSendTask+0x254>)
 80012ce:	695b      	ldr	r3, [r3, #20]
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <StartXbeeSendTask+0x250>)
 80012d4:	721a      	strb	r2, [r3, #8]

				/* Set the DATA field */
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
 80012da:	e00b      	b.n	80012f4 <StartXbeeSendTask+0xb0>
					xbeeUartTxBuff[9 + i] = frameBuff.Payload[i];
 80012dc:	7dfa      	ldrb	r2, [r7, #23]
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	3309      	adds	r3, #9
 80012e2:	496d      	ldr	r1, [pc, #436]	; (8001498 <StartXbeeSendTask+0x254>)
 80012e4:	440a      	add	r2, r1
 80012e6:	f892 1020 	ldrb.w	r1, [r2, #32]
 80012ea:	4a6a      	ldr	r2, [pc, #424]	; (8001494 <StartXbeeSendTask+0x250>)
 80012ec:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	3301      	adds	r3, #1
 80012f2:	75fb      	strb	r3, [r7, #23]
 80012f4:	7dfa      	ldrb	r2, [r7, #23]
 80012f6:	4b68      	ldr	r3, [pc, #416]	; (8001498 <StartXbeeSendTask+0x254>)
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3ee      	bcc.n	80012dc <StartXbeeSendTask+0x98>
				}

				/* Calculate the CRC */
				if (osOK
						== osMutexWait(crcMutexHandle, WCU_CRCMUTEX_TIMEOUT)) {
 80012fe:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <StartXbeeSendTask+0x25c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f04f 31ff 	mov.w	r1, #4294967295
 8001306:	4618      	mov	r0, r3
 8001308:	f009 f8bc 	bl	800a484 <osMutexWait>
 800130c:	4603      	mov	r3, r0
				if (osOK
 800130e:	2b00      	cmp	r3, #0
 8001310:	d121      	bne.n	8001356 <StartXbeeSendTask+0x112>
					calculatedCrc =
							GET16LSBITS(
 8001312:	2205      	movs	r2, #5
 8001314:	495f      	ldr	r1, [pc, #380]	; (8001494 <StartXbeeSendTask+0x250>)
 8001316:	4863      	ldr	r0, [pc, #396]	; (80014a4 <StartXbeeSendTask+0x260>)
 8001318:	f001 fe12 	bl	8002f40 <HAL_CRC_Calculate>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
					calculatedCrc =
 8001320:	4b61      	ldr	r3, [pc, #388]	; (80014a8 <StartXbeeSendTask+0x264>)
 8001322:	801a      	strh	r2, [r3, #0]
									HAL_CRC_Calculate(&hcrc, (uint32_t*)xbeeUartTxBuff, R3TP_VER0_FRAME_SIZE / 4));
					osMutexRelease(crcMutexHandle);
 8001324:	4b5e      	ldr	r3, [pc, #376]	; (80014a0 <StartXbeeSendTask+0x25c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f009 f8f9 	bl	800a520 <osMutexRelease>

					/* Set the CRC field - note that the CRC is transmitted as little endian */
					xbeeUartTxBuff[2] = GETLSBOF16(calculatedCrc);
 800132e:	4b5e      	ldr	r3, [pc, #376]	; (80014a8 <StartXbeeSendTask+0x264>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b57      	ldr	r3, [pc, #348]	; (8001494 <StartXbeeSendTask+0x250>)
 8001336:	709a      	strb	r2, [r3, #2]
					xbeeUartTxBuff[3] = GETMSBOF16(calculatedCrc);
 8001338:	4b5b      	ldr	r3, [pc, #364]	; (80014a8 <StartXbeeSendTask+0x264>)
 800133a:	881b      	ldrh	r3, [r3, #0]
 800133c:	0a1b      	lsrs	r3, r3, #8
 800133e:	b29b      	uxth	r3, r3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b54      	ldr	r3, [pc, #336]	; (8001494 <StartXbeeSendTask+0x250>)
 8001344:	70da      	strb	r2, [r3, #3]
					LOGERROR("crcMutex timeout in xbeeSend\r\n");
					continue;
				}

				/* Transmit frame */
				HAL_UART_Transmit(&XBEE_UART_HANDLE, xbeeUartTxBuff,
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	2214      	movs	r2, #20
 800134c:	4951      	ldr	r1, [pc, #324]	; (8001494 <StartXbeeSendTask+0x250>)
 800134e:	4857      	ldr	r0, [pc, #348]	; (80014ac <StartXbeeSendTask+0x268>)
 8001350:	f004 fe1d 	bl	8005f8e <HAL_UART_Transmit>
 8001354:	e059      	b.n	800140a <StartXbeeSendTask+0x1c6>
					LOGERROR("crcMutex timeout in xbeeSend\r\n");
 8001356:	201e      	movs	r0, #30
 8001358:	f00b fe0a 	bl	800cf70 <pvPortMalloc>
 800135c:	4603      	mov	r3, r0
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	f000 8090 	beq.w	8001488 <StartXbeeSendTask+0x244>
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	4a51      	ldr	r2, [pc, #324]	; (80014b0 <StartXbeeSendTask+0x26c>)
 800136c:	461d      	mov	r5, r3
 800136e:	4614      	mov	r4, r2
 8001370:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001372:	6028      	str	r0, [r5, #0]
 8001374:	6069      	str	r1, [r5, #4]
 8001376:	60aa      	str	r2, [r5, #8]
 8001378:	60eb      	str	r3, [r5, #12]
 800137a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800137c:	6128      	str	r0, [r5, #16]
 800137e:	6169      	str	r1, [r5, #20]
 8001380:	61aa      	str	r2, [r5, #24]
 8001382:	8823      	ldrh	r3, [r4, #0]
 8001384:	78a2      	ldrb	r2, [r4, #2]
 8001386:	83ab      	strh	r3, [r5, #28]
 8001388:	4613      	mov	r3, r2
 800138a:	77ab      	strb	r3, [r5, #30]
 800138c:	4b49      	ldr	r3, [pc, #292]	; (80014b4 <StartXbeeSendTask+0x270>)
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	f107 0110 	add.w	r1, r7, #16
 8001394:	2300      	movs	r3, #0
 8001396:	f04f 32ff 	mov.w	r2, #4294967295
 800139a:	f009 fcd9 	bl	800ad50 <xQueueGenericSend>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d071      	beq.n	8001488 <StartXbeeSendTask+0x244>
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f00b fea4 	bl	800d0f4 <vPortFree>
					continue;
 80013ac:	e06c      	b.n	8001488 <StartXbeeSendTask+0x244>
				R3TP_VER0_FRAME_SIZE, WCU_XBEE_UART_TX_TIMEOUT);

			} else {
				/* Log error */
				LOGERROR("Invalid DataDirection in xbeeSend\r\n");
 80013ae:	2023      	movs	r0, #35	; 0x23
 80013b0:	f00b fdde 	bl	800cf70 <pvPortMalloc>
 80013b4:	4603      	mov	r3, r0
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d025      	beq.n	800140a <StartXbeeSendTask+0x1c6>
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4a3d      	ldr	r2, [pc, #244]	; (80014b8 <StartXbeeSendTask+0x274>)
 80013c2:	4614      	mov	r4, r2
 80013c4:	469c      	mov	ip, r3
 80013c6:	f104 0e20 	add.w	lr, r4, #32
 80013ca:	4665      	mov	r5, ip
 80013cc:	4626      	mov	r6, r4
 80013ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013d0:	6028      	str	r0, [r5, #0]
 80013d2:	6069      	str	r1, [r5, #4]
 80013d4:	60aa      	str	r2, [r5, #8]
 80013d6:	60eb      	str	r3, [r5, #12]
 80013d8:	3410      	adds	r4, #16
 80013da:	f10c 0c10 	add.w	ip, ip, #16
 80013de:	4574      	cmp	r4, lr
 80013e0:	d1f3      	bne.n	80013ca <StartXbeeSendTask+0x186>
 80013e2:	4663      	mov	r3, ip
 80013e4:	4622      	mov	r2, r4
 80013e6:	6810      	ldr	r0, [r2, #0]
 80013e8:	6018      	str	r0, [r3, #0]
 80013ea:	4b32      	ldr	r3, [pc, #200]	; (80014b4 <StartXbeeSendTask+0x270>)
 80013ec:	6818      	ldr	r0, [r3, #0]
 80013ee:	f107 010c 	add.w	r1, r7, #12
 80013f2:	2300      	movs	r3, #0
 80013f4:	f04f 32ff 	mov.w	r2, #4294967295
 80013f8:	f009 fcaa 	bl	800ad50 <xQueueGenericSend>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d003      	beq.n	800140a <StartXbeeSendTask+0x1c6>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4618      	mov	r0, r3
 8001406:	f00b fe75 	bl	800d0f4 <vPortFree>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &xbeeSendHandle,
 800140a:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <StartXbeeSendTask+0x278>)
 800140c:	6818      	ldr	r0, [r3, #0]
 800140e:	2300      	movs	r3, #0
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	492a      	ldr	r1, [pc, #168]	; (80014c0 <StartXbeeSendTask+0x27c>)
 8001416:	f009 fc9b 	bl	800ad50 <xQueueGenericSend>
 800141a:	4603      	mov	r3, r0
		if (pdTRUE
 800141c:	2b01      	cmp	r3, #1
 800141e:	d02f      	beq.n	8001480 <StartXbeeSendTask+0x23c>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("xbeeSend failed to send to reportToWatchdogQueue\r\n");
 8001420:	2032      	movs	r0, #50	; 0x32
 8001422:	f00b fda5 	bl	800cf70 <pvPortMalloc>
 8001426:	4603      	mov	r3, r0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d027      	beq.n	8001480 <StartXbeeSendTask+0x23c>
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <StartXbeeSendTask+0x280>)
 8001434:	4614      	mov	r4, r2
 8001436:	469c      	mov	ip, r3
 8001438:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800143c:	4665      	mov	r5, ip
 800143e:	4626      	mov	r6, r4
 8001440:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001442:	6028      	str	r0, [r5, #0]
 8001444:	6069      	str	r1, [r5, #4]
 8001446:	60aa      	str	r2, [r5, #8]
 8001448:	60eb      	str	r3, [r5, #12]
 800144a:	3410      	adds	r4, #16
 800144c:	f10c 0c10 	add.w	ip, ip, #16
 8001450:	4574      	cmp	r4, lr
 8001452:	d1f3      	bne.n	800143c <StartXbeeSendTask+0x1f8>
 8001454:	4663      	mov	r3, ip
 8001456:	4622      	mov	r2, r4
 8001458:	8811      	ldrh	r1, [r2, #0]
 800145a:	7892      	ldrb	r2, [r2, #2]
 800145c:	8019      	strh	r1, [r3, #0]
 800145e:	709a      	strb	r2, [r3, #2]
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <StartXbeeSendTask+0x270>)
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	f107 0108 	add.w	r1, r7, #8
 8001468:	2300      	movs	r3, #0
 800146a:	f04f 32ff 	mov.w	r2, #4294967295
 800146e:	f009 fc6f 	bl	800ad50 <xQueueGenericSend>
 8001472:	4603      	mov	r3, r0
 8001474:	2b01      	cmp	r3, #1
 8001476:	d003      	beq.n	8001480 <StartXbeeSendTask+0x23c>
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	4618      	mov	r0, r3
 800147c:	f00b fe3a 	bl	800d0f4 <vPortFree>
		}

		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001480:	2001      	movs	r0, #1
 8001482:	f008 ffd3 	bl	800a42c <osDelay>
 8001486:	e6e6      	b.n	8001256 <StartXbeeSendTask+0x12>
					continue;
 8001488:	bf00      	nop
		if (pdTRUE == xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 800148a:	e6e4      	b.n	8001256 <StartXbeeSendTask+0x12>
 800148c:	40020800 	.word	0x40020800
 8001490:	2000650c 	.word	0x2000650c
 8001494:	200002c4 	.word	0x200002c4
 8001498:	200002d8 	.word	0x200002d8
 800149c:	20000300 	.word	0x20000300
 80014a0:	200063dc 	.word	0x200063dc
 80014a4:	200062c8 	.word	0x200062c8
 80014a8:	20000302 	.word	0x20000302
 80014ac:	20006474 	.word	0x20006474
 80014b0:	0800d600 	.word	0x0800d600
 80014b4:	20006470 	.word	0x20006470
 80014b8:	0800d620 	.word	0x0800d620
 80014bc:	200062d4 	.word	0x200062d4
 80014c0:	200062d0 	.word	0x200062d0
 80014c4:	0800d644 	.word	0x0800d644

080014c8 <StartXbeeReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeReceiveTask */
void StartXbeeReceiveTask(void const * argument)
{
 80014c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ca:	b089      	sub	sp, #36	; 0x24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	static uint32_t subscription[R3TP_VER1_MAX_FRAME_NUM]; /* Buffer for telemetry subscription CAN IDs */

	/* Infinite loop */
	for (;;) {
		/* Listen for the subscription (VER1) frame */
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 80014d0:	f04f 33ff 	mov.w	r3, #4294967295
 80014d4:	2201      	movs	r2, #1
 80014d6:	49a2      	ldr	r1, [pc, #648]	; (8001760 <StartXbeeReceiveTask+0x298>)
 80014d8:	48a2      	ldr	r0, [pc, #648]	; (8001764 <StartXbeeReceiveTask+0x29c>)
 80014da:	f004 fdf1 	bl	80060c0 <HAL_UART_Receive>
		WCU_XBEE_UART_RX_TIMEOUT);
		/* Validate the VER and RES/SEQ field */
		if (R3TP_VER1_VER_RES_SEQ_BYTE == xbeeUartRxBuff[0]) {
 80014de:	4ba0      	ldr	r3, [pc, #640]	; (8001760 <StartXbeeReceiveTask+0x298>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b20      	cmp	r3, #32
 80014e4:	f040 818c 	bne.w	8001800 <StartXbeeReceiveTask+0x338>
			/* On valid version byte, receive SEQ NUM, CHECKSUM and FRAME NUM */
			HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff + 1, 7,
 80014e8:	499f      	ldr	r1, [pc, #636]	; (8001768 <StartXbeeReceiveTask+0x2a0>)
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	2207      	movs	r2, #7
 80014f0:	489c      	ldr	r0, [pc, #624]	; (8001764 <StartXbeeReceiveTask+0x29c>)
 80014f2:	f004 fde5 	bl	80060c0 <HAL_UART_Receive>
			WCU_XBEE_UART_RX_TIMEOUT);

			/* Read the FRAME NUM field */
			frameNum = READAS32BIT(xbeeUartRxBuff[7], xbeeUartRxBuff[6],
 80014f6:	4b9a      	ldr	r3, [pc, #616]	; (8001760 <StartXbeeReceiveTask+0x298>)
 80014f8:	79db      	ldrb	r3, [r3, #7]
 80014fa:	061a      	lsls	r2, r3, #24
 80014fc:	4b98      	ldr	r3, [pc, #608]	; (8001760 <StartXbeeReceiveTask+0x298>)
 80014fe:	799b      	ldrb	r3, [r3, #6]
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	431a      	orrs	r2, r3
 8001504:	4b96      	ldr	r3, [pc, #600]	; (8001760 <StartXbeeReceiveTask+0x298>)
 8001506:	795b      	ldrb	r3, [r3, #5]
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	4313      	orrs	r3, r2
 800150c:	4a94      	ldr	r2, [pc, #592]	; (8001760 <StartXbeeReceiveTask+0x298>)
 800150e:	7912      	ldrb	r2, [r2, #4]
 8001510:	4313      	orrs	r3, r2
 8001512:	461a      	mov	r2, r3
 8001514:	4b95      	ldr	r3, [pc, #596]	; (800176c <StartXbeeReceiveTask+0x2a4>)
 8001516:	601a      	str	r2, [r3, #0]
					xbeeUartRxBuff[5], xbeeUartRxBuff[4]);

			/* Assert the payload won't overflow the buffer */
			if (frameNum > R3TP_VER1_MAX_FRAME_NUM) {
 8001518:	4b94      	ldr	r3, [pc, #592]	; (800176c <StartXbeeReceiveTask+0x2a4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b1c      	cmp	r3, #28
 800151e:	d932      	bls.n	8001586 <StartXbeeReceiveTask+0xbe>
				/* Log error */
				LOGERROR("Invalid FRAME NUM in xbeeReceive\r\n");
 8001520:	2022      	movs	r0, #34	; 0x22
 8001522:	f00b fd25 	bl	800cf70 <pvPortMalloc>
 8001526:	4603      	mov	r3, r0
 8001528:	61bb      	str	r3, [r7, #24]
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 816b 	beq.w	8001808 <StartXbeeReceiveTask+0x340>
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	4a8e      	ldr	r2, [pc, #568]	; (8001770 <StartXbeeReceiveTask+0x2a8>)
 8001536:	4614      	mov	r4, r2
 8001538:	469c      	mov	ip, r3
 800153a:	f104 0e20 	add.w	lr, r4, #32
 800153e:	4665      	mov	r5, ip
 8001540:	4626      	mov	r6, r4
 8001542:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001544:	6028      	str	r0, [r5, #0]
 8001546:	6069      	str	r1, [r5, #4]
 8001548:	60aa      	str	r2, [r5, #8]
 800154a:	60eb      	str	r3, [r5, #12]
 800154c:	3410      	adds	r4, #16
 800154e:	f10c 0c10 	add.w	ip, ip, #16
 8001552:	4574      	cmp	r4, lr
 8001554:	d1f3      	bne.n	800153e <StartXbeeReceiveTask+0x76>
 8001556:	4663      	mov	r3, ip
 8001558:	4622      	mov	r2, r4
 800155a:	8811      	ldrh	r1, [r2, #0]
 800155c:	7892      	ldrb	r2, [r2, #2]
 800155e:	8019      	strh	r1, [r3, #0]
 8001560:	709a      	strb	r2, [r3, #2]
 8001562:	4b84      	ldr	r3, [pc, #528]	; (8001774 <StartXbeeReceiveTask+0x2ac>)
 8001564:	6818      	ldr	r0, [r3, #0]
 8001566:	f107 0118 	add.w	r1, r7, #24
 800156a:	2300      	movs	r3, #0
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	f009 fbee 	bl	800ad50 <xQueueGenericSend>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	f000 8146 	beq.w	8001808 <StartXbeeReceiveTask+0x340>
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	4618      	mov	r0, r3
 8001580:	f00b fdb8 	bl	800d0f4 <vPortFree>
				continue;
 8001584:	e140      	b.n	8001808 <StartXbeeReceiveTask+0x340>
			}

			/* Receive the payload */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 8001586:	497c      	ldr	r1, [pc, #496]	; (8001778 <StartXbeeReceiveTask+0x2b0>)
 8001588:	4b78      	ldr	r3, [pc, #480]	; (800176c <StartXbeeReceiveTask+0x2a4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	b29b      	uxth	r3, r3
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	b29a      	uxth	r2, r3
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	4873      	ldr	r0, [pc, #460]	; (8001764 <StartXbeeReceiveTask+0x29c>)
 8001598:	f004 fd92 	bl	80060c0 <HAL_UART_Receive>
					R3TP_VER1_PAYLOAD_BEGIN(xbeeUartRxBuff), frameNum * 4,
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Receive the frame align bytes (two) and END SEQ (also two bytes) */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
					R3TP_VER1_EPILOGUE_BEGIN(xbeeUartRxBuff, frameNum), 4,
 800159c:	4b73      	ldr	r3, [pc, #460]	; (800176c <StartXbeeReceiveTask+0x2a4>)
 800159e:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 80015a0:	3302      	adds	r3, #2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	4a6e      	ldr	r2, [pc, #440]	; (8001760 <StartXbeeReceiveTask+0x298>)
 80015a6:	1899      	adds	r1, r3, r2
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
 80015ac:	2204      	movs	r2, #4
 80015ae:	486d      	ldr	r0, [pc, #436]	; (8001764 <StartXbeeReceiveTask+0x29c>)
 80015b0:	f004 fd86 	bl	80060c0 <HAL_UART_Receive>
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Validate the END SEQ field */
			if ((R3TP_END_SEQ_LOW_BYTE
					!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum) - 2U])
 80015b4:	4b6d      	ldr	r3, [pc, #436]	; (800176c <StartXbeeReceiveTask+0x2a4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	3303      	adds	r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	3b02      	subs	r3, #2
 80015be:	4a68      	ldr	r2, [pc, #416]	; (8001760 <StartXbeeReceiveTask+0x298>)
 80015c0:	5cd3      	ldrb	r3, [r2, r3]
			if ((R3TP_END_SEQ_LOW_BYTE
 80015c2:	2bde      	cmp	r3, #222	; 0xde
 80015c4:	d108      	bne.n	80015d8 <StartXbeeReceiveTask+0x110>
					|| (R3TP_END_SEQ_HIGH_BYTE
							!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum)
 80015c6:	4b69      	ldr	r3, [pc, #420]	; (800176c <StartXbeeReceiveTask+0x2a4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3303      	adds	r3, #3
 80015cc:	009b      	lsls	r3, r3, #2
									- 1U])) {
 80015ce:	3b01      	subs	r3, #1
							!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum)
 80015d0:	4a63      	ldr	r2, [pc, #396]	; (8001760 <StartXbeeReceiveTask+0x298>)
 80015d2:	5cd3      	ldrb	r3, [r2, r3]
					|| (R3TP_END_SEQ_HIGH_BYTE
 80015d4:	2bed      	cmp	r3, #237	; 0xed
 80015d6:	d030      	beq.n	800163a <StartXbeeReceiveTask+0x172>
				/* Log error */
				LOGERROR("Invalid END SEQ in xbeeReceive\r\n");
 80015d8:	2020      	movs	r0, #32
 80015da:	f00b fcc9 	bl	800cf70 <pvPortMalloc>
 80015de:	4603      	mov	r3, r0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 8111 	beq.w	800180c <StartXbeeReceiveTask+0x344>
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	4a63      	ldr	r2, [pc, #396]	; (800177c <StartXbeeReceiveTask+0x2b4>)
 80015ee:	4614      	mov	r4, r2
 80015f0:	469c      	mov	ip, r3
 80015f2:	f104 0e20 	add.w	lr, r4, #32
 80015f6:	4665      	mov	r5, ip
 80015f8:	4626      	mov	r6, r4
 80015fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015fc:	6028      	str	r0, [r5, #0]
 80015fe:	6069      	str	r1, [r5, #4]
 8001600:	60aa      	str	r2, [r5, #8]
 8001602:	60eb      	str	r3, [r5, #12]
 8001604:	3410      	adds	r4, #16
 8001606:	f10c 0c10 	add.w	ip, ip, #16
 800160a:	4574      	cmp	r4, lr
 800160c:	d1f3      	bne.n	80015f6 <StartXbeeReceiveTask+0x12e>
 800160e:	4663      	mov	r3, ip
 8001610:	4622      	mov	r2, r4
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	701a      	strb	r2, [r3, #0]
 8001616:	4b57      	ldr	r3, [pc, #348]	; (8001774 <StartXbeeReceiveTask+0x2ac>)
 8001618:	6818      	ldr	r0, [r3, #0]
 800161a:	f107 0114 	add.w	r1, r7, #20
 800161e:	2300      	movs	r3, #0
 8001620:	f04f 32ff 	mov.w	r2, #4294967295
 8001624:	f009 fb94 	bl	800ad50 <xQueueGenericSend>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	f000 80ee 	beq.w	800180c <StartXbeeReceiveTask+0x344>
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	4618      	mov	r0, r3
 8001634:	f00b fd5e 	bl	800d0f4 <vPortFree>
				continue;
 8001638:	e0e8      	b.n	800180c <StartXbeeReceiveTask+0x344>
			}

			/* Read the CHECKSUM */
			readCrc = READAS16BIT(xbeeUartRxBuff[3], xbeeUartRxBuff[2]);
 800163a:	4b49      	ldr	r3, [pc, #292]	; (8001760 <StartXbeeReceiveTask+0x298>)
 800163c:	78db      	ldrb	r3, [r3, #3]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	4b47      	ldr	r3, [pc, #284]	; (8001760 <StartXbeeReceiveTask+0x298>)
 8001644:	789b      	ldrb	r3, [r3, #2]
 8001646:	b21b      	sxth	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b21b      	sxth	r3, r3
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b4c      	ldr	r3, [pc, #304]	; (8001780 <StartXbeeReceiveTask+0x2b8>)
 8001650:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(xbeeUartRxBuff + 2U, 0x00, 2U);
 8001652:	4b4c      	ldr	r3, [pc, #304]	; (8001784 <StartXbeeReceiveTask+0x2bc>)
 8001654:	2202      	movs	r2, #2
 8001656:	2100      	movs	r1, #0
 8001658:	4618      	mov	r0, r3
 800165a:	f00b fe8e 	bl	800d37a <memset>

			if (osOK == osMutexWait(crcMutexHandle, WCU_CRCMUTEX_TIMEOUT)) {
 800165e:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <StartXbeeReceiveTask+0x2c0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f04f 31ff 	mov.w	r1, #4294967295
 8001666:	4618      	mov	r0, r3
 8001668:	f008 ff0c 	bl	800a484 <osMutexWait>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <StartXbeeReceiveTask+0x1de>
				/* Calculate the CRC */
				calculatedCrc =
						GET16LSBITS(
 8001672:	4b3e      	ldr	r3, [pc, #248]	; (800176c <StartXbeeReceiveTask+0x2a4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	3303      	adds	r3, #3
 8001678:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800167c:	461a      	mov	r2, r3
 800167e:	4938      	ldr	r1, [pc, #224]	; (8001760 <StartXbeeReceiveTask+0x298>)
 8001680:	4842      	ldr	r0, [pc, #264]	; (800178c <StartXbeeReceiveTask+0x2c4>)
 8001682:	f001 fc5d 	bl	8002f40 <HAL_CRC_Calculate>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
				calculatedCrc =
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <StartXbeeReceiveTask+0x2c8>)
 800168c:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t* )xbeeUartRxBuff, R3TP_VER1_MESSAGE_LENGTH(frameNum)/4));
				osMutexRelease(crcMutexHandle);
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <StartXbeeReceiveTask+0x2c0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f008 ff44 	bl	800a520 <osMutexRelease>
				LOGERROR("crcMutex timeout in xbeeReceive\r\n");
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <StartXbeeReceiveTask+0x2b8>)
 800169a:	881a      	ldrh	r2, [r3, #0]
 800169c:	4b3c      	ldr	r3, [pc, #240]	; (8001790 <StartXbeeReceiveTask+0x2c8>)
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d059      	beq.n	8001758 <StartXbeeReceiveTask+0x290>
 80016a4:	e030      	b.n	8001708 <StartXbeeReceiveTask+0x240>
				LOGERROR("crcMutex timeout in xbeeReceive\r\n");
 80016a6:	2021      	movs	r0, #33	; 0x21
 80016a8:	f00b fc62 	bl	800cf70 <pvPortMalloc>
 80016ac:	4603      	mov	r3, r0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 80ac 	beq.w	8001810 <StartXbeeReceiveTask+0x348>
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4a36      	ldr	r2, [pc, #216]	; (8001794 <StartXbeeReceiveTask+0x2cc>)
 80016bc:	4614      	mov	r4, r2
 80016be:	469c      	mov	ip, r3
 80016c0:	f104 0e20 	add.w	lr, r4, #32
 80016c4:	4665      	mov	r5, ip
 80016c6:	4626      	mov	r6, r4
 80016c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016ca:	6028      	str	r0, [r5, #0]
 80016cc:	6069      	str	r1, [r5, #4]
 80016ce:	60aa      	str	r2, [r5, #8]
 80016d0:	60eb      	str	r3, [r5, #12]
 80016d2:	3410      	adds	r4, #16
 80016d4:	f10c 0c10 	add.w	ip, ip, #16
 80016d8:	4574      	cmp	r4, lr
 80016da:	d1f3      	bne.n	80016c4 <StartXbeeReceiveTask+0x1fc>
 80016dc:	4662      	mov	r2, ip
 80016de:	4623      	mov	r3, r4
 80016e0:	881b      	ldrh	r3, [r3, #0]
 80016e2:	8013      	strh	r3, [r2, #0]
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <StartXbeeReceiveTask+0x2ac>)
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	f107 0110 	add.w	r1, r7, #16
 80016ec:	2300      	movs	r3, #0
 80016ee:	f04f 32ff 	mov.w	r2, #4294967295
 80016f2:	f009 fb2d 	bl	800ad50 <xQueueGenericSend>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	f000 8089 	beq.w	8001810 <StartXbeeReceiveTask+0x348>
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	4618      	mov	r0, r3
 8001702:	f00b fcf7 	bl	800d0f4 <vPortFree>
				continue;
 8001706:	e083      	b.n	8001810 <StartXbeeReceiveTask+0x348>
				/* Log error */
				LOGERROR("Invalid CRC in xbeeReceive\r\n");
 8001708:	201c      	movs	r0, #28
 800170a:	f00b fc31 	bl	800cf70 <pvPortMalloc>
 800170e:	4603      	mov	r3, r0
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d07d      	beq.n	8001814 <StartXbeeReceiveTask+0x34c>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	4a1f      	ldr	r2, [pc, #124]	; (8001798 <StartXbeeReceiveTask+0x2d0>)
 800171c:	461d      	mov	r5, r3
 800171e:	4614      	mov	r4, r2
 8001720:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001722:	6028      	str	r0, [r5, #0]
 8001724:	6069      	str	r1, [r5, #4]
 8001726:	60aa      	str	r2, [r5, #8]
 8001728:	60eb      	str	r3, [r5, #12]
 800172a:	cc07      	ldmia	r4!, {r0, r1, r2}
 800172c:	6128      	str	r0, [r5, #16]
 800172e:	6169      	str	r1, [r5, #20]
 8001730:	61aa      	str	r2, [r5, #24]
 8001732:	7823      	ldrb	r3, [r4, #0]
 8001734:	772b      	strb	r3, [r5, #28]
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <StartXbeeReceiveTask+0x2ac>)
 8001738:	6818      	ldr	r0, [r3, #0]
 800173a:	f107 010c 	add.w	r1, r7, #12
 800173e:	2300      	movs	r3, #0
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	f009 fb04 	bl	800ad50 <xQueueGenericSend>
 8001748:	4603      	mov	r3, r0
 800174a:	2b01      	cmp	r3, #1
 800174c:	d062      	beq.n	8001814 <StartXbeeReceiveTask+0x34c>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	4618      	mov	r0, r3
 8001752:	f00b fccf 	bl	800d0f4 <vPortFree>
				continue;
 8001756:	e05d      	b.n	8001814 <StartXbeeReceiveTask+0x34c>
			}

			/* Read the payload */
			for (uint32_t i = 0; i < frameNum; i += 1) {
 8001758:	2300      	movs	r3, #0
 800175a:	61fb      	str	r3, [r7, #28]
 800175c:	e044      	b.n	80017e8 <StartXbeeReceiveTask+0x320>
 800175e:	bf00      	nop
 8001760:	20000304 	.word	0x20000304
 8001764:	20006474 	.word	0x20006474
 8001768:	20000305 	.word	0x20000305
 800176c:	20000380 	.word	0x20000380
 8001770:	0800d678 	.word	0x0800d678
 8001774:	20006470 	.word	0x20006470
 8001778:	2000030c 	.word	0x2000030c
 800177c:	0800d69c 	.word	0x0800d69c
 8001780:	20000384 	.word	0x20000384
 8001784:	20000306 	.word	0x20000306
 8001788:	200063dc 	.word	0x200063dc
 800178c:	200062c8 	.word	0x200062c8
 8001790:	20000386 	.word	0x20000386
 8001794:	0800d6c0 	.word	0x0800d6c0
 8001798:	0800d6e4 	.word	0x0800d6e4
				subscription[i] =
						READAS32BIT(
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	330b      	adds	r3, #11
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <StartXbeeReceiveTask+0x350>)
 80017a4:	4413      	add	r3, r2
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	061a      	lsls	r2, r3, #24
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	330a      	adds	r3, #10
 80017b0:	4919      	ldr	r1, [pc, #100]	; (8001818 <StartXbeeReceiveTask+0x350>)
 80017b2:	440b      	add	r3, r1
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	041b      	lsls	r3, r3, #16
 80017b8:	431a      	orrs	r2, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	3309      	adds	r3, #9
 80017c0:	4915      	ldr	r1, [pc, #84]	; (8001818 <StartXbeeReceiveTask+0x350>)
 80017c2:	440b      	add	r3, r1
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	021b      	lsls	r3, r3, #8
 80017c8:	4313      	orrs	r3, r2
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	3202      	adds	r2, #2
 80017ce:	0092      	lsls	r2, r2, #2
 80017d0:	4911      	ldr	r1, [pc, #68]	; (8001818 <StartXbeeReceiveTask+0x350>)
 80017d2:	440a      	add	r2, r1
 80017d4:	7812      	ldrb	r2, [r2, #0]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	4619      	mov	r1, r3
				subscription[i] =
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <StartXbeeReceiveTask+0x354>)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint32_t i = 0; i < frameNum; i += 1) {
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <StartXbeeReceiveTask+0x358>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	69fa      	ldr	r2, [r7, #28]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3d4      	bcc.n	800179c <StartXbeeReceiveTask+0x2d4>
			 * TODO:
			 * Write subscription to SD
			 */

			/* Set the CAN filters */
			setCanFilterList(&hcan1, subscription, frameNum);
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <StartXbeeReceiveTask+0x358>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4908      	ldr	r1, [pc, #32]	; (800181c <StartXbeeReceiveTask+0x354>)
 80017fa:	480a      	ldr	r0, [pc, #40]	; (8001824 <StartXbeeReceiveTask+0x35c>)
 80017fc:	f000 f9fa 	bl	8001bf4 <setCanFilterList>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001800:	2001      	movs	r0, #1
 8001802:	f008 fe13 	bl	800a42c <osDelay>
 8001806:	e663      	b.n	80014d0 <StartXbeeReceiveTask+0x8>
				continue;
 8001808:	bf00      	nop
 800180a:	e661      	b.n	80014d0 <StartXbeeReceiveTask+0x8>
				continue;
 800180c:	bf00      	nop
 800180e:	e65f      	b.n	80014d0 <StartXbeeReceiveTask+0x8>
				continue;
 8001810:	bf00      	nop
 8001812:	e65d      	b.n	80014d0 <StartXbeeReceiveTask+0x8>
				continue;
 8001814:	bf00      	nop
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 8001816:	e65b      	b.n	80014d0 <StartXbeeReceiveTask+0x8>
 8001818:	20000304 	.word	0x20000304
 800181c:	20000388 	.word	0x20000388
 8001820:	20000380 	.word	0x20000380
 8001824:	20006558 	.word	0x20006558

08001828 <StartGnssReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGnssReceiveTask */
void StartGnssReceiveTask(void const * argument)
{
 8001828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &gnssReceiveHandle,
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <StartGnssReceiveTask+0x88>)
 8001832:	6818      	ldr	r0, [r3, #0]
 8001834:	2300      	movs	r3, #0
 8001836:	f04f 32ff 	mov.w	r2, #4294967295
 800183a:	491e      	ldr	r1, [pc, #120]	; (80018b4 <StartGnssReceiveTask+0x8c>)
 800183c:	f009 fa88 	bl	800ad50 <xQueueGenericSend>
 8001840:	4603      	mov	r3, r0
		if (pdTRUE
 8001842:	2b01      	cmp	r3, #1
 8001844:	d02f      	beq.n	80018a6 <StartGnssReceiveTask+0x7e>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("gnssReceive failed to send to reportToWatchdogQueue\r\n");
 8001846:	2035      	movs	r0, #53	; 0x35
 8001848:	f00b fb92 	bl	800cf70 <pvPortMalloc>
 800184c:	4603      	mov	r3, r0
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d027      	beq.n	80018a6 <StartGnssReceiveTask+0x7e>
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4a17      	ldr	r2, [pc, #92]	; (80018b8 <StartGnssReceiveTask+0x90>)
 800185a:	4614      	mov	r4, r2
 800185c:	469c      	mov	ip, r3
 800185e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001862:	4665      	mov	r5, ip
 8001864:	4626      	mov	r6, r4
 8001866:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001868:	6028      	str	r0, [r5, #0]
 800186a:	6069      	str	r1, [r5, #4]
 800186c:	60aa      	str	r2, [r5, #8]
 800186e:	60eb      	str	r3, [r5, #12]
 8001870:	3410      	adds	r4, #16
 8001872:	f10c 0c10 	add.w	ip, ip, #16
 8001876:	4574      	cmp	r4, lr
 8001878:	d1f3      	bne.n	8001862 <StartGnssReceiveTask+0x3a>
 800187a:	4663      	mov	r3, ip
 800187c:	4622      	mov	r2, r4
 800187e:	6810      	ldr	r0, [r2, #0]
 8001880:	6018      	str	r0, [r3, #0]
 8001882:	8892      	ldrh	r2, [r2, #4]
 8001884:	809a      	strh	r2, [r3, #4]
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <StartGnssReceiveTask+0x94>)
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	f107 010c 	add.w	r1, r7, #12
 800188e:	2300      	movs	r3, #0
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	f009 fa5c 	bl	800ad50 <xQueueGenericSend>
 8001898:	4603      	mov	r3, r0
 800189a:	2b01      	cmp	r3, #1
 800189c:	d003      	beq.n	80018a6 <StartGnssReceiveTask+0x7e>
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f00b fc27 	bl	800d0f4 <vPortFree>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 80018a6:	2001      	movs	r0, #1
 80018a8:	f008 fdc0 	bl	800a42c <osDelay>
		if (pdTRUE
 80018ac:	e7c0      	b.n	8001830 <StartGnssReceiveTask+0x8>
 80018ae:	bf00      	nop
 80018b0:	200062d4 	.word	0x200062d4
 80018b4:	200063e0 	.word	0x200063e0
 80018b8:	0800d704 	.word	0x0800d704
 80018bc:	20006470 	.word	0x20006470

080018c0 <StartRfReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfReceiveTask */
void StartRfReceiveTask(void const * argument)
{
 80018c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &rfReceiveHandle,
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <StartRfReceiveTask+0x84>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	2300      	movs	r3, #0
 80018ce:	f04f 32ff 	mov.w	r2, #4294967295
 80018d2:	491d      	ldr	r1, [pc, #116]	; (8001948 <StartRfReceiveTask+0x88>)
 80018d4:	f009 fa3c 	bl	800ad50 <xQueueGenericSend>
 80018d8:	4603      	mov	r3, r0
		if (pdTRUE
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d02d      	beq.n	800193a <StartRfReceiveTask+0x7a>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("rfReceive failed to send to reportToWatchdogQueue\r\n");
 80018de:	2033      	movs	r0, #51	; 0x33
 80018e0:	f00b fb46 	bl	800cf70 <pvPortMalloc>
 80018e4:	4603      	mov	r3, r0
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d025      	beq.n	800193a <StartRfReceiveTask+0x7a>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	4a16      	ldr	r2, [pc, #88]	; (800194c <StartRfReceiveTask+0x8c>)
 80018f2:	4614      	mov	r4, r2
 80018f4:	469c      	mov	ip, r3
 80018f6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80018fa:	4665      	mov	r5, ip
 80018fc:	4626      	mov	r6, r4
 80018fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001900:	6028      	str	r0, [r5, #0]
 8001902:	6069      	str	r1, [r5, #4]
 8001904:	60aa      	str	r2, [r5, #8]
 8001906:	60eb      	str	r3, [r5, #12]
 8001908:	3410      	adds	r4, #16
 800190a:	f10c 0c10 	add.w	ip, ip, #16
 800190e:	4574      	cmp	r4, lr
 8001910:	d1f3      	bne.n	80018fa <StartRfReceiveTask+0x3a>
 8001912:	4663      	mov	r3, ip
 8001914:	4622      	mov	r2, r4
 8001916:	6810      	ldr	r0, [r2, #0]
 8001918:	6018      	str	r0, [r3, #0]
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <StartRfReceiveTask+0x90>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	f107 010c 	add.w	r1, r7, #12
 8001922:	2300      	movs	r3, #0
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	f009 fa12 	bl	800ad50 <xQueueGenericSend>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d003      	beq.n	800193a <StartRfReceiveTask+0x7a>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4618      	mov	r0, r3
 8001936:	f00b fbdd 	bl	800d0f4 <vPortFree>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800193a:	2001      	movs	r0, #1
 800193c:	f008 fd76 	bl	800a42c <osDelay>
		if (pdTRUE
 8001940:	e7c2      	b.n	80018c8 <StartRfReceiveTask+0x8>
 8001942:	bf00      	nop
 8001944:	200062d4 	.word	0x200062d4
 8001948:	20006584 	.word	0x20006584
 800194c:	0800d73c 	.word	0x0800d73c
 8001950:	20006470 	.word	0x20006470

08001954 <StartCanGatekeeperTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanGatekeeperTask */
void StartCanGatekeeperTask(void const * argument)
{
 8001954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001956:	b087      	sub	sp, #28
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	static CanFrameTypedef frameBuff; /* CAN frame buffer */
	static uint32_t dummy; /* CAN Tx mailbox */
	/* Infinite loop */
	for (;;) {
		/* Check for outgoing messages */
		if (pdTRUE == xQueueReceive(canTransmitQueueHandle, &frameBuff,
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <StartCanGatekeeperTask+0x1a4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2200      	movs	r2, #0
 8001962:	4966      	ldr	r1, [pc, #408]	; (8001afc <StartCanGatekeeperTask+0x1a8>)
 8001964:	4618      	mov	r0, r3
 8001966:	f009 fc0b 	bl	800b180 <xQueueReceive>
 800196a:	4603      	mov	r3, r0
 800196c:	2b01      	cmp	r3, #1
 800196e:	d13b      	bne.n	80019e8 <StartCanGatekeeperTask+0x94>
		WCU_CANTRANSMITQUEUE_RECEIVE_TIMEOUT)) {
			/* Validate the DataDirection member */
			if (TX == frameBuff.DataDirection) {
 8001970:	4b62      	ldr	r3, [pc, #392]	; (8001afc <StartCanGatekeeperTask+0x1a8>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <StartCanGatekeeperTask+0x32>
				/* Send the message */
				HAL_CAN_AddTxMessage(&hcan1, &frameBuff.Header.Tx,
 8001978:	4b61      	ldr	r3, [pc, #388]	; (8001b00 <StartCanGatekeeperTask+0x1ac>)
 800197a:	4a62      	ldr	r2, [pc, #392]	; (8001b04 <StartCanGatekeeperTask+0x1b0>)
 800197c:	4962      	ldr	r1, [pc, #392]	; (8001b08 <StartCanGatekeeperTask+0x1b4>)
 800197e:	4863      	ldr	r0, [pc, #396]	; (8001b0c <StartCanGatekeeperTask+0x1b8>)
 8001980:	f000 ffca 	bl	8002918 <HAL_CAN_AddTxMessage>
 8001984:	e030      	b.n	80019e8 <StartCanGatekeeperTask+0x94>
						frameBuff.Payload, &dummy);
			} else {
				/* Log error */
				LOGERROR("Invalid DataDirection in canGatekeeper\r\n");
 8001986:	2028      	movs	r0, #40	; 0x28
 8001988:	f00b faf2 	bl	800cf70 <pvPortMalloc>
 800198c:	4603      	mov	r3, r0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d028      	beq.n	80019e8 <StartCanGatekeeperTask+0x94>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	4a5d      	ldr	r2, [pc, #372]	; (8001b10 <StartCanGatekeeperTask+0x1bc>)
 800199a:	4614      	mov	r4, r2
 800199c:	469c      	mov	ip, r3
 800199e:	f104 0e20 	add.w	lr, r4, #32
 80019a2:	4665      	mov	r5, ip
 80019a4:	4626      	mov	r6, r4
 80019a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019a8:	6028      	str	r0, [r5, #0]
 80019aa:	6069      	str	r1, [r5, #4]
 80019ac:	60aa      	str	r2, [r5, #8]
 80019ae:	60eb      	str	r3, [r5, #12]
 80019b0:	3410      	adds	r4, #16
 80019b2:	f10c 0c10 	add.w	ip, ip, #16
 80019b6:	4574      	cmp	r4, lr
 80019b8:	d1f3      	bne.n	80019a2 <StartCanGatekeeperTask+0x4e>
 80019ba:	4662      	mov	r2, ip
 80019bc:	4623      	mov	r3, r4
 80019be:	cb03      	ldmia	r3!, {r0, r1}
 80019c0:	6010      	str	r0, [r2, #0]
 80019c2:	6051      	str	r1, [r2, #4]
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	7213      	strb	r3, [r2, #8]
 80019c8:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <StartCanGatekeeperTask+0x1c0>)
 80019ca:	6818      	ldr	r0, [r3, #0]
 80019cc:	f107 0114 	add.w	r1, r7, #20
 80019d0:	2300      	movs	r3, #0
 80019d2:	f04f 32ff 	mov.w	r2, #4294967295
 80019d6:	f009 f9bb 	bl	800ad50 <xQueueGenericSend>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d003      	beq.n	80019e8 <StartCanGatekeeperTask+0x94>
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00b fb86 	bl	800d0f4 <vPortFree>
			}
		}

		/* Check for incoming messages */
		if (0U < HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0)) {
 80019e8:	2100      	movs	r1, #0
 80019ea:	4848      	ldr	r0, [pc, #288]	; (8001b0c <StartCanGatekeeperTask+0x1b8>)
 80019ec:	f001 f981 	bl	8002cf2 <HAL_CAN_GetRxFifoFillLevel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d041      	beq.n	8001a7a <StartCanGatekeeperTask+0x126>
			/* Receive the message */
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &frameBuff.Header.Rx,
 80019f6:	4b43      	ldr	r3, [pc, #268]	; (8001b04 <StartCanGatekeeperTask+0x1b0>)
 80019f8:	4a43      	ldr	r2, [pc, #268]	; (8001b08 <StartCanGatekeeperTask+0x1b4>)
 80019fa:	2100      	movs	r1, #0
 80019fc:	4843      	ldr	r0, [pc, #268]	; (8001b0c <StartCanGatekeeperTask+0x1b8>)
 80019fe:	f001 f866 	bl	8002ace <HAL_CAN_GetRxMessage>
					frameBuff.Payload);
			/* Set the DataDirection member in the CAN frame struct */
			frameBuff.DataDirection = RX;
 8001a02:	4b3e      	ldr	r3, [pc, #248]	; (8001afc <StartCanGatekeeperTask+0x1a8>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
			/* Send the frame to the telemetry queue */
			if (pdTRUE
					!= xQueueSend(canReceiveQueueHandle, &frameBuff,
 8001a08:	4b43      	ldr	r3, [pc, #268]	; (8001b18 <StartCanGatekeeperTask+0x1c4>)
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a12:	493a      	ldr	r1, [pc, #232]	; (8001afc <StartCanGatekeeperTask+0x1a8>)
 8001a14:	f009 f99c 	bl	800ad50 <xQueueGenericSend>
 8001a18:	4603      	mov	r3, r0
			if (pdTRUE
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d02d      	beq.n	8001a7a <StartCanGatekeeperTask+0x126>
							WCU_CANRECEIVEQUEUE_SEND_TIMEOUT)) {
				/* Log error */
				LOGERROR("canGatekeeper failed to send to canReceiveQueue\r\n");
 8001a1e:	2031      	movs	r0, #49	; 0x31
 8001a20:	f00b faa6 	bl	800cf70 <pvPortMalloc>
 8001a24:	4603      	mov	r3, r0
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d025      	beq.n	8001a7a <StartCanGatekeeperTask+0x126>
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	4a3a      	ldr	r2, [pc, #232]	; (8001b1c <StartCanGatekeeperTask+0x1c8>)
 8001a32:	4614      	mov	r4, r2
 8001a34:	469c      	mov	ip, r3
 8001a36:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001a3a:	4665      	mov	r5, ip
 8001a3c:	4626      	mov	r6, r4
 8001a3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a40:	6028      	str	r0, [r5, #0]
 8001a42:	6069      	str	r1, [r5, #4]
 8001a44:	60aa      	str	r2, [r5, #8]
 8001a46:	60eb      	str	r3, [r5, #12]
 8001a48:	3410      	adds	r4, #16
 8001a4a:	f10c 0c10 	add.w	ip, ip, #16
 8001a4e:	4574      	cmp	r4, lr
 8001a50:	d1f3      	bne.n	8001a3a <StartCanGatekeeperTask+0xe6>
 8001a52:	4662      	mov	r2, ip
 8001a54:	4623      	mov	r3, r4
 8001a56:	881b      	ldrh	r3, [r3, #0]
 8001a58:	8013      	strh	r3, [r2, #0]
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <StartCanGatekeeperTask+0x1c0>)
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	f107 0110 	add.w	r1, r7, #16
 8001a62:	2300      	movs	r3, #0
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	f009 f972 	bl	800ad50 <xQueueGenericSend>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d003      	beq.n	8001a7a <StartCanGatekeeperTask+0x126>
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00b fb3d 	bl	800d0f4 <vPortFree>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &canGatekeeperHandle,
 8001a7a:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <StartCanGatekeeperTask+0x1cc>)
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	4927      	ldr	r1, [pc, #156]	; (8001b24 <StartCanGatekeeperTask+0x1d0>)
 8001a86:	f009 f963 	bl	800ad50 <xQueueGenericSend>
 8001a8a:	4603      	mov	r3, r0
		if (pdTRUE
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d02e      	beq.n	8001aee <StartCanGatekeeperTask+0x19a>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR(
 8001a90:	2037      	movs	r0, #55	; 0x37
 8001a92:	f00b fa6d 	bl	800cf70 <pvPortMalloc>
 8001a96:	4603      	mov	r3, r0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d026      	beq.n	8001aee <StartCanGatekeeperTask+0x19a>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a21      	ldr	r2, [pc, #132]	; (8001b28 <StartCanGatekeeperTask+0x1d4>)
 8001aa4:	4614      	mov	r4, r2
 8001aa6:	469c      	mov	ip, r3
 8001aa8:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001aac:	4665      	mov	r5, ip
 8001aae:	4626      	mov	r6, r4
 8001ab0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ab2:	6028      	str	r0, [r5, #0]
 8001ab4:	6069      	str	r1, [r5, #4]
 8001ab6:	60aa      	str	r2, [r5, #8]
 8001ab8:	60eb      	str	r3, [r5, #12]
 8001aba:	3410      	adds	r4, #16
 8001abc:	f10c 0c10 	add.w	ip, ip, #16
 8001ac0:	4574      	cmp	r4, lr
 8001ac2:	d1f3      	bne.n	8001aac <StartCanGatekeeperTask+0x158>
 8001ac4:	4662      	mov	r2, ip
 8001ac6:	4623      	mov	r3, r4
 8001ac8:	cb03      	ldmia	r3!, {r0, r1}
 8001aca:	6010      	str	r0, [r2, #0]
 8001acc:	6051      	str	r1, [r2, #4]
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <StartCanGatekeeperTask+0x1c0>)
 8001ad0:	6818      	ldr	r0, [r3, #0]
 8001ad2:	f107 010c 	add.w	r1, r7, #12
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	f009 f938 	bl	800ad50 <xQueueGenericSend>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d003      	beq.n	8001aee <StartCanGatekeeperTask+0x19a>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00b fb03 	bl	800d0f4 <vPortFree>
					"canGatekeeper failed to send to reportToWatchdogQueue\r\n");
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f008 fc9c 	bl	800a42c <osDelay>
		if (pdTRUE == xQueueReceive(canTransmitQueueHandle, &frameBuff,
 8001af4:	e732      	b.n	800195c <StartCanGatekeeperTask+0x8>
 8001af6:	bf00      	nop
 8001af8:	20006510 	.word	0x20006510
 8001afc:	200003f8 	.word	0x200003f8
 8001b00:	20000420 	.word	0x20000420
 8001b04:	20000418 	.word	0x20000418
 8001b08:	200003fc 	.word	0x200003fc
 8001b0c:	20006558 	.word	0x20006558
 8001b10:	0800d770 	.word	0x0800d770
 8001b14:	20006470 	.word	0x20006470
 8001b18:	2000650c 	.word	0x2000650c
 8001b1c:	0800d79c 	.word	0x0800d79c
 8001b20:	200062d4 	.word	0x200062d4
 8001b24:	20006514 	.word	0x20006514
 8001b28:	0800d7d0 	.word	0x0800d7d0

08001b2c <StartSdGatekeeperTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSdGatekeeperTask */
void StartSdGatekeeperTask(void const * argument)
{
 8001b2c:	b590      	push	{r4, r7, lr}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	static FIL subscriptionFile; /* Telemetry subscription file object structure */
	static char* errorLogBuff; /* Buffer for the pointer to the error message */
	static UINT bytesWritten; /* Buffer for the number of bytes written */

	/* Mount a logical drive */
	while (FR_OK != f_mount(&fatFs, SDPath, 1)) {
 8001b34:	e000      	b.n	8001b38 <StartSdGatekeeperTask+0xc>
		__NOP();
 8001b36:	bf00      	nop
	while (FR_OK != f_mount(&fatFs, SDPath, 1)) {
 8001b38:	2201      	movs	r2, #1
 8001b3a:	491a      	ldr	r1, [pc, #104]	; (8001ba4 <StartSdGatekeeperTask+0x78>)
 8001b3c:	481a      	ldr	r0, [pc, #104]	; (8001ba8 <StartSdGatekeeperTask+0x7c>)
 8001b3e:	f007 fe83 	bl	8009848 <f_mount>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1f6      	bne.n	8001b36 <StartSdGatekeeperTask+0xa>
	 */

	/* Infinite loop */
	for (;;) {
		/* Wait for incoming error messages */
		if(pdPASS == xQueueReceive(logErrorQueueHandle, &errorLogBuff, WCU_LOGERRORQUEUE_RECEIVE_TIMEOUT)) {
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <StartSdGatekeeperTask+0x80>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	4918      	ldr	r1, [pc, #96]	; (8001bb0 <StartSdGatekeeperTask+0x84>)
 8001b50:	4618      	mov	r0, r3
 8001b52:	f009 fb15 	bl	800b180 <xQueueReceive>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d11f      	bne.n	8001b9c <StartSdGatekeeperTask+0x70>
			if(FR_OK == f_open(&errorLogFile, WCU_ERROR_LOG_PATH, FA_WRITE | FA_OPEN_APPEND)) {
 8001b5c:	2232      	movs	r2, #50	; 0x32
 8001b5e:	4915      	ldr	r1, [pc, #84]	; (8001bb4 <StartSdGatekeeperTask+0x88>)
 8001b60:	4815      	ldr	r0, [pc, #84]	; (8001bb8 <StartSdGatekeeperTask+0x8c>)
 8001b62:	f007 fed5 	bl	8009910 <f_open>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d117      	bne.n	8001b9c <StartSdGatekeeperTask+0x70>
				f_write(&errorLogFile, errorLogBuff, strlen(errorLogBuff), &bytesWritten);
 8001b6c:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <StartSdGatekeeperTask+0x84>)
 8001b6e:	681c      	ldr	r4, [r3, #0]
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <StartSdGatekeeperTask+0x84>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7fe fb2b 	bl	80001d0 <strlen>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <StartSdGatekeeperTask+0x90>)
 8001b7e:	4621      	mov	r1, r4
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <StartSdGatekeeperTask+0x8c>)
 8001b82:	f008 f898 	bl	8009cb6 <f_write>
				/* Close the file */
				f_close(&errorLogFile);
 8001b86:	480c      	ldr	r0, [pc, #48]	; (8001bb8 <StartSdGatekeeperTask+0x8c>)
 8001b88:	f008 fae1 	bl	800a14e <f_close>
				/* Free the allocated memory */
				vPortFree(errorLogBuff);
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <StartSdGatekeeperTask+0x84>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f00b faaf 	bl	800d0f4 <vPortFree>
				errorLogBuff = NULL;
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <StartSdGatekeeperTask+0x84>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

		/*
		 * TODO: Wait for new telemetry subscription
		 */

		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f008 fc45 	bl	800a42c <osDelay>
		if(pdPASS == xQueueReceive(logErrorQueueHandle, &errorLogBuff, WCU_LOGERRORQUEUE_RECEIVE_TIMEOUT)) {
 8001ba2:	e7d1      	b.n	8001b48 <StartSdGatekeeperTask+0x1c>
 8001ba4:	200065d0 	.word	0x200065d0
 8001ba8:	20000424 	.word	0x20000424
 8001bac:	20006470 	.word	0x20006470
 8001bb0:	2000145c 	.word	0x2000145c
 8001bb4:	0800d808 	.word	0x0800d808
 8001bb8:	20001460 	.word	0x20001460
 8001bbc:	20002490 	.word	0x20002490

08001bc0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d101      	bne.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bd2:	f000 fc83 	bl	80024dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3708      	adds	r7, #8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40001000 	.word	0x40001000

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <setCanFilterList>:
 * @param hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @param ids Pointer to an array of 32-bit CAN IDs to filter for
 * @param count Length of the ids array
 */
void setCanFilterList(CAN_HandleTypeDef *hcan, uint32_t* ids, uint32_t count) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b090      	sub	sp, #64	; 0x40
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60f8      	str	r0, [r7, #12]
 8001bfc:	60b9      	str	r1, [r7, #8]
 8001bfe:	607a      	str	r2, [r7, #4]
	/* Assert valid ids array length */
	if(count <= CAN_FILTERBANKS_COUNT * 4) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b70      	cmp	r3, #112	; 0x70
 8001c04:	d878      	bhi.n	8001cf8 <setCanFilterList+0x104>
		/* Prepare the filter configuration structure */
		CAN_FilterTypeDef filterConfig;
		/* Select the CAN FIFO to filter */
		filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	623b      	str	r3, [r7, #32]
		/* Select the filter mode as IDLIST - CAN IDs will be stored in the filter bank registers */
		filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	62bb      	str	r3, [r7, #40]	; 0x28
		/* Set the filter scale as 16 bit, since only the standard 11-bit CAN IDs are used - this allows four IDs per bank */
		filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Clear the previous filter config */
		filterConfig.FilterIdHigh = 0x00000000U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
		filterConfig.FilterIdLow = 0x00000000U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
		filterConfig.FilterMaskIdHigh = 0x00000000U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
		filterConfig.FilterMaskIdLow = 0x00000000U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
		filterConfig.FilterActivation = DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 8001c26:	2300      	movs	r3, #0
 8001c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c2a:	e00a      	b.n	8001c42 <setCanFilterList+0x4e>
			filterConfig.FilterBank = i;
 8001c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2e:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4619      	mov	r1, r3
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fd8e 	bl	8002758 <HAL_CAN_ConfigFilter>
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 8001c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c3e:	3301      	adds	r3, #1
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c44:	2b1b      	cmp	r3, #27
 8001c46:	d9f1      	bls.n	8001c2c <setCanFilterList+0x38>
		}

		/* Set the new filter */
		filterConfig.FilterActivation = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < count; i += 1) {
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c50:	e04e      	b.n	8001cf0 <setCanFilterList+0xfc>
			switch(i % 4) {
 8001c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c54:	f003 0303 	and.w	r3, r3, #3
 8001c58:	2b03      	cmp	r3, #3
 8001c5a:	d82b      	bhi.n	8001cb4 <setCanFilterList+0xc0>
 8001c5c:	a201      	add	r2, pc, #4	; (adr r2, 8001c64 <setCanFilterList+0x70>)
 8001c5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c62:	bf00      	nop
 8001c64:	08001c75 	.word	0x08001c75
 8001c68:	08001c85 	.word	0x08001c85
 8001c6c:	08001c95 	.word	0x08001c95
 8001c70:	08001ca5 	.word	0x08001ca5
			case 0:
				filterConfig.FilterIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	015b      	lsls	r3, r3, #5
 8001c80:	613b      	str	r3, [r7, #16]
				break;
 8001c82:	e017      	b.n	8001cb4 <setCanFilterList+0xc0>
			case 1:
				filterConfig.FilterIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	015b      	lsls	r3, r3, #5
 8001c90:	617b      	str	r3, [r7, #20]
				break;
 8001c92:	e00f      	b.n	8001cb4 <setCanFilterList+0xc0>
			case 2:
				filterConfig.FilterMaskIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	61bb      	str	r3, [r7, #24]
				break;
 8001ca2:	e007      	b.n	8001cb4 <setCanFilterList+0xc0>
			case 3:
				filterConfig.FilterMaskIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	4413      	add	r3, r2
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	015b      	lsls	r3, r3, #5
 8001cb0:	61fb      	str	r3, [r7, #28]
				break;
 8001cb2:	bf00      	nop
			}

			/* If the filter bank is fully configured or there are no more IDs, call HAL_CAN_ConfigFilter */
			if((i % 4 == 3) || (i + 1 == count)) {
 8001cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d004      	beq.n	8001cc8 <setCanFilterList+0xd4>
 8001cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d110      	bne.n	8001cea <setCanFilterList+0xf6>
				/* Configure the filter */
				HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8001cc8:	f107 0310 	add.w	r3, r7, #16
 8001ccc:	4619      	mov	r1, r3
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f000 fd42 	bl	8002758 <HAL_CAN_ConfigFilter>
				/* On fully configured filter bank, proceed to the next one */
				filterConfig.FilterBank += 1;
 8001cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
				/* Clear the config structure ID members */
				filterConfig.FilterIdHigh = 0x00000000U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
				filterConfig.FilterIdLow = 0x00000000U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
				filterConfig.FilterMaskIdHigh = 0x00000000U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
				filterConfig.FilterMaskIdLow = 0x00000000U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < count; i += 1) {
 8001cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cec:	3301      	adds	r3, #1
 8001cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3ac      	bcc.n	8001c52 <setCanFilterList+0x5e>
			}
		}
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	3740      	adds	r7, #64	; 0x40
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_MspInit+0x54>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_MspInit+0x54>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b0f      	ldr	r3, [pc, #60]	; (8001d54 <HAL_MspInit+0x54>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_MspInit+0x54>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	; (8001d54 <HAL_MspInit+0x54>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_MspInit+0x54>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	210f      	movs	r1, #15
 8001d42:	f06f 0001 	mvn.w	r0, #1
 8001d46:	f001 f8b5 	bl	8002eb4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_CAN_MspInit+0x84>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12c      	bne.n	8001dd4 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_CAN_MspInit+0x88>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <HAL_CAN_MspInit+0x88>)
 8001d84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_CAN_MspInit+0x88>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_CAN_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <HAL_CAN_MspInit+0x88>)
 8001da0:	f043 0302 	orr.w	r3, r3, #2
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_CAN_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001dc4:	2309      	movs	r3, #9
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_CAN_MspInit+0x8c>)
 8001dd0:	f001 fc86 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40006400 	.word	0x40006400
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020400 	.word	0x40020400

08001de8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_CRC_MspInit+0x3c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d10d      	bne.n	8001e16 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_CRC_MspInit+0x40>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <HAL_CRC_MspInit+0x40>)
 8001e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e08:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <HAL_CRC_MspInit+0x40>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40023000 	.word	0x40023000
 8001e28:	40023800 	.word	0x40023800

08001e2c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b08a      	sub	sp, #40	; 0x28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 0314 	add.w	r3, r7, #20
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a68      	ldr	r2, [pc, #416]	; (8001fec <HAL_SD_MspInit+0x1c0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	f040 80c9 	bne.w	8001fe2 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001e50:	2300      	movs	r3, #0
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	4b66      	ldr	r3, [pc, #408]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e58:	4a65      	ldr	r2, [pc, #404]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001e60:	4b63      	ldr	r3, [pc, #396]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	4b5f      	ldr	r3, [pc, #380]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	4a5e      	ldr	r2, [pc, #376]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e76:	f043 0304 	orr.w	r3, r3, #4
 8001e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7c:	4b5c      	ldr	r3, [pc, #368]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	4b58      	ldr	r3, [pc, #352]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	4a57      	ldr	r2, [pc, #348]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6313      	str	r3, [r2, #48]	; 0x30
 8001e98:	4b55      	ldr	r3, [pc, #340]	; (8001ff0 <HAL_SD_MspInit+0x1c4>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	f003 0308 	and.w	r3, r3, #8
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001ea4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001ea8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eba:	f107 0314 	add.w	r3, r7, #20
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	484c      	ldr	r0, [pc, #304]	; (8001ff4 <HAL_SD_MspInit+0x1c8>)
 8001ec2:	f001 fc0d 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ed6:	230c      	movs	r3, #12
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4845      	ldr	r0, [pc, #276]	; (8001ff8 <HAL_SD_MspInit+0x1cc>)
 8001ee2:	f001 fbfd 	bl	80036e0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001ee6:	4b45      	ldr	r3, [pc, #276]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001ee8:	4a45      	ldr	r2, [pc, #276]	; (8002000 <HAL_SD_MspInit+0x1d4>)
 8001eea:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001eec:	4b43      	ldr	r3, [pc, #268]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001eee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ef2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ef4:	4b41      	ldr	r3, [pc, #260]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001efa:	4b40      	ldr	r3, [pc, #256]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f00:	4b3e      	ldr	r3, [pc, #248]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f06:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f08:	4b3c      	ldr	r3, [pc, #240]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f0e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f10:	4b3a      	ldr	r3, [pc, #232]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f16:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001f18:	4b38      	ldr	r3, [pc, #224]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001f1e:	4b37      	ldr	r3, [pc, #220]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f26:	2204      	movs	r2, #4
 8001f28:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f2a:	4b34      	ldr	r3, [pc, #208]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f2c:	2203      	movs	r2, #3
 8001f2e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001f30:	4b32      	ldr	r3, [pc, #200]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f38:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001f40:	482e      	ldr	r0, [pc, #184]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f42:	f001 f831 	bl	8002fa8 <HAL_DMA_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001f4c:	f7ff fe4a 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a2a      	ldr	r2, [pc, #168]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f54:	641a      	str	r2, [r3, #64]	; 0x40
 8001f56:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <HAL_SD_MspInit+0x1d0>)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001f5c:	4b29      	ldr	r3, [pc, #164]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f5e:	4a2a      	ldr	r2, [pc, #168]	; (8002008 <HAL_SD_MspInit+0x1dc>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f68:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6a:	4b26      	ldr	r3, [pc, #152]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f6c:	2240      	movs	r2, #64	; 0x40
 8001f6e:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f76:	4b23      	ldr	r3, [pc, #140]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f84:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f88:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f8c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001f8e:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f90:	2220      	movs	r2, #32
 8001f92:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f94:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001fa8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001fac:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001fae:	4b15      	ldr	r3, [pc, #84]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001fb0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001fb4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001fb6:	4813      	ldr	r0, [pc, #76]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001fb8:	f000 fff6 	bl	8002fa8 <HAL_DMA_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001fc2:	f7ff fe0f 	bl	8001be4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a0e      	ldr	r2, [pc, #56]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001fca:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fcc:	4a0d      	ldr	r2, [pc, #52]	; (8002004 <HAL_SD_MspInit+0x1d8>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2105      	movs	r1, #5
 8001fd6:	2031      	movs	r0, #49	; 0x31
 8001fd8:	f000 ff6c 	bl	8002eb4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001fdc:	2031      	movs	r0, #49	; 0x31
 8001fde:	f000 ff85 	bl	8002eec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40012c00 	.word	0x40012c00
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40020800 	.word	0x40020800
 8001ff8:	40020c00 	.word	0x40020c00
 8001ffc:	20006218 	.word	0x20006218
 8002000:	40026458 	.word	0x40026458
 8002004:	2000637c 	.word	0x2000637c
 8002008:	400264a0 	.word	0x400264a0

0800200c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	; 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a19      	ldr	r2, [pc, #100]	; (8002090 <HAL_SPI_MspInit+0x84>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d12b      	bne.n	8002086 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <HAL_SPI_MspInit+0x88>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <HAL_SPI_MspInit+0x88>)
 8002038:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_SPI_MspInit+0x88>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_SPI_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	4a10      	ldr	r2, [pc, #64]	; (8002094 <HAL_SPI_MspInit+0x88>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	; 0x30
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <HAL_SPI_MspInit+0x88>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SP1_SCK_Pin|RF_SPI1_MISO_Pin|RF_SPI1_MOSI_Pin;
 8002066:	23e0      	movs	r3, #224	; 0xe0
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <HAL_SPI_MspInit+0x8c>)
 8002082:	f001 fb2d 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40013000 	.word	0x40013000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000

0800209c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b090      	sub	sp, #64	; 0x40
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a7c      	ldr	r2, [pc, #496]	; (80022ac <HAL_UART_MspInit+0x210>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d12c      	bne.n	8002118 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80020c2:	4b7b      	ldr	r3, [pc, #492]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80020c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	4b74      	ldr	r3, [pc, #464]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a73      	ldr	r2, [pc, #460]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b71      	ldr	r3, [pc, #452]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
 80020f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = XBEE_UART3_TX_Pin|XBEE_UART3_RX_Pin;
 80020f6:	2303      	movs	r3, #3
 80020f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020fe:	2301      	movs	r3, #1
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002106:	2308      	movs	r3, #8
 8002108:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210e:	4619      	mov	r1, r3
 8002110:	4868      	ldr	r0, [pc, #416]	; (80022b4 <HAL_UART_MspInit+0x218>)
 8002112:	f001 fae5 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002116:	e0c5      	b.n	80022a4 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a66      	ldr	r2, [pc, #408]	; (80022b8 <HAL_UART_MspInit+0x21c>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d15c      	bne.n	80021dc <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	4b62      	ldr	r3, [pc, #392]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a61      	ldr	r2, [pc, #388]	; (80022b0 <HAL_UART_MspInit+0x214>)
 800212c:	f043 0310 	orr.w	r3, r3, #16
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b5f      	ldr	r3, [pc, #380]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	623b      	str	r3, [r7, #32]
 800213c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]
 8002142:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a5a      	ldr	r2, [pc, #360]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b58      	ldr	r3, [pc, #352]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = BT_UART1_TX_Pin|BT_UART1_RX_Pin;
 800215a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800215e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002160:	2302      	movs	r3, #2
 8002162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002168:	2303      	movs	r3, #3
 800216a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800216c:	2307      	movs	r3, #7
 800216e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002170:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002174:	4619      	mov	r1, r3
 8002176:	484f      	ldr	r0, [pc, #316]	; (80022b4 <HAL_UART_MspInit+0x218>)
 8002178:	f001 fab2 	bl	80036e0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800217c:	4b4f      	ldr	r3, [pc, #316]	; (80022bc <HAL_UART_MspInit+0x220>)
 800217e:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_UART_MspInit+0x224>)
 8002180:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002182:	4b4e      	ldr	r3, [pc, #312]	; (80022bc <HAL_UART_MspInit+0x220>)
 8002184:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002188:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_UART_MspInit+0x220>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002190:	4b4a      	ldr	r3, [pc, #296]	; (80022bc <HAL_UART_MspInit+0x220>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_UART_MspInit+0x220>)
 8002198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800219c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021a4:	4b45      	ldr	r3, [pc, #276]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80021aa:	4b44      	ldr	r3, [pc, #272]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b2:	4b42      	ldr	r3, [pc, #264]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021b8:	4b40      	ldr	r3, [pc, #256]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021be:	483f      	ldr	r0, [pc, #252]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021c0:	f000 fef2 	bl	8002fa8 <HAL_DMA_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_UART_MspInit+0x132>
      Error_Handler();
 80021ca:	f7ff fd0b 	bl	8001be4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a3a      	ldr	r2, [pc, #232]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021d2:	635a      	str	r2, [r3, #52]	; 0x34
 80021d4:	4a39      	ldr	r2, [pc, #228]	; (80022bc <HAL_UART_MspInit+0x220>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021da:	e063      	b.n	80022a4 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a38      	ldr	r2, [pc, #224]	; (80022c4 <HAL_UART_MspInit+0x228>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12c      	bne.n	8002240 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	4b31      	ldr	r3, [pc, #196]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	4a30      	ldr	r2, [pc, #192]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	6413      	str	r3, [r2, #64]	; 0x40
 80021f6:	4b2e      	ldr	r3, [pc, #184]	; (80022b0 <HAL_UART_MspInit+0x214>)
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	61bb      	str	r3, [r7, #24]
 8002200:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a29      	ldr	r2, [pc, #164]	; (80022b0 <HAL_UART_MspInit+0x214>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b27      	ldr	r3, [pc, #156]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800221e:	230c      	movs	r3, #12
 8002220:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800222e:	2307      	movs	r3, #7
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002236:	4619      	mov	r1, r3
 8002238:	481e      	ldr	r0, [pc, #120]	; (80022b4 <HAL_UART_MspInit+0x218>)
 800223a:	f001 fa51 	bl	80036e0 <HAL_GPIO_Init>
}
 800223e:	e031      	b.n	80022a4 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a20      	ldr	r2, [pc, #128]	; (80022c8 <HAL_UART_MspInit+0x22c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12c      	bne.n	80022a4 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b18      	ldr	r3, [pc, #96]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a17      	ldr	r2, [pc, #92]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b15      	ldr	r3, [pc, #84]	; (80022b0 <HAL_UART_MspInit+0x214>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <HAL_UART_MspInit+0x214>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a10      	ldr	r2, [pc, #64]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <HAL_UART_MspInit+0x214>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_UART4_TX_Pin|GNSS_UART4_RX_Pin;
 8002282:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002294:	2307      	movs	r3, #7
 8002296:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800229c:	4619      	mov	r1, r3
 800229e:	480b      	ldr	r0, [pc, #44]	; (80022cc <HAL_UART_MspInit+0x230>)
 80022a0:	f001 fa1e 	bl	80036e0 <HAL_GPIO_Init>
}
 80022a4:	bf00      	nop
 80022a6:	3740      	adds	r7, #64	; 0x40
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40004c00 	.word	0x40004c00
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40020000 	.word	0x40020000
 80022b8:	40011000 	.word	0x40011000
 80022bc:	200062dc 	.word	0x200062dc
 80022c0:	40026440 	.word	0x40026440
 80022c4:	40004400 	.word	0x40004400
 80022c8:	40004800 	.word	0x40004800
 80022cc:	40020400 	.word	0x40020400

080022d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08c      	sub	sp, #48	; 0x30
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80022e0:	2200      	movs	r2, #0
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	2036      	movs	r0, #54	; 0x36
 80022e6:	f000 fde5 	bl	8002eb4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80022ea:	2036      	movs	r0, #54	; 0x36
 80022ec:	f000 fdfe 	bl	8002eec <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022f0:	2300      	movs	r3, #0
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	4b1e      	ldr	r3, [pc, #120]	; (8002370 <HAL_InitTick+0xa0>)
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	4a1d      	ldr	r2, [pc, #116]	; (8002370 <HAL_InitTick+0xa0>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6413      	str	r3, [r2, #64]	; 0x40
 8002300:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_InitTick+0xa0>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	60fb      	str	r3, [r7, #12]
 800230a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800230c:	f107 0210 	add.w	r2, r7, #16
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f002 f81a 	bl	8004350 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800231c:	f001 fff0 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8002320:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002324:	4a13      	ldr	r2, [pc, #76]	; (8002374 <HAL_InitTick+0xa4>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	0c9b      	lsrs	r3, r3, #18
 800232c:	3b01      	subs	r3, #1
 800232e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <HAL_InitTick+0xa8>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <HAL_InitTick+0xac>)
 8002334:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_InitTick+0xa8>)
 8002338:	f240 32e7 	movw	r2, #999	; 0x3e7
 800233c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800233e:	4a0e      	ldr	r2, [pc, #56]	; (8002378 <HAL_InitTick+0xa8>)
 8002340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002342:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_InitTick+0xa8>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <HAL_InitTick+0xa8>)
 800234c:	2200      	movs	r2, #0
 800234e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002350:	4809      	ldr	r0, [pc, #36]	; (8002378 <HAL_InitTick+0xa8>)
 8002352:	f003 fb91 	bl	8005a78 <HAL_TIM_Base_Init>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d104      	bne.n	8002366 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800235c:	4806      	ldr	r0, [pc, #24]	; (8002378 <HAL_InitTick+0xa8>)
 800235e:	f003 fbc0 	bl	8005ae2 <HAL_TIM_Base_Start_IT>
 8002362:	4603      	mov	r3, r0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3730      	adds	r7, #48	; 0x30
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	431bde83 	.word	0x431bde83
 8002378:	20006588 	.word	0x20006588
 800237c:	40001000 	.word	0x40001000

08002380 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002384:	bf00      	nop
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800238e:	b480      	push	{r7}
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002392:	e7fe      	b.n	8002392 <HardFault_Handler+0x4>

08002394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002398:	e7fe      	b.n	8002398 <MemManage_Handler+0x4>

0800239a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800239a:	b480      	push	{r7}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800239e:	e7fe      	b.n	800239e <BusFault_Handler+0x4>

080023a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023a4:	e7fe      	b.n	80023a4 <UsageFault_Handler+0x4>

080023a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a6:	b480      	push	{r7}
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <SDIO_IRQHandler+0x10>)
 80023ba:	f002 fa65 	bl	8004888 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200063e4 	.word	0x200063e4

080023c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <TIM6_DAC_IRQHandler+0x10>)
 80023ce:	f003 fbac 	bl	8005b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20006588 	.word	0x20006588

080023dc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA2_Stream2_IRQHandler+0x10>)
 80023e2:	f000 ff09 	bl	80031f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	200062dc 	.word	0x200062dc

080023f0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <DMA2_Stream3_IRQHandler+0x10>)
 80023f6:	f000 feff 	bl	80031f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20006218 	.word	0x20006218

08002404 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <DMA2_Stream6_IRQHandler+0x10>)
 800240a:	f000 fef5 	bl	80031f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000637c 	.word	0x2000637c

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <SystemInit+0x28>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <SystemInit+0x28>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SystemInit+0x28>)
 800242e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002432:	609a      	str	r2, [r3, #8]
#endif
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002448:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800244a:	e003      	b.n	8002454 <LoopCopyDataInit>

0800244c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800244e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002450:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002452:	3104      	adds	r1, #4

08002454 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002454:	480b      	ldr	r0, [pc, #44]	; (8002484 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002458:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800245a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800245c:	d3f6      	bcc.n	800244c <CopyDataInit>
  ldr  r2, =_sbss
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002460:	e002      	b.n	8002468 <LoopFillZerobss>

08002462 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002462:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002464:	f842 3b04 	str.w	r3, [r2], #4

08002468 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800246c:	d3f9      	bcc.n	8002462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800246e:	f7ff ffd3 	bl	8002418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002472:	f00a ff53 	bl	800d31c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002476:	f7fe f84d 	bl	8000514 <main>
  bx  lr    
 800247a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800247c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002480:	0800d938 	.word	0x0800d938
  ldr  r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002488:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 800248c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002490:	2000867c 	.word	0x2000867c

08002494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC_IRQHandler>
	...

08002498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HAL_Init+0x40>)
 80024a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_Init+0x40>)
 80024ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_Init+0x40>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f000 fcec 	bl	8002e9e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff ff02 	bl	80022d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024cc:	f7ff fc18 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023c00 	.word	0x40023c00

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	200065c8 	.word	0x200065c8

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200065c8 	.word	0x200065c8

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b09      	ldr	r3, [pc, #36]	; (800255c <HAL_Delay+0x40>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000008 	.word	0x20000008

08002560 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0ed      	b.n	800274e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff fbea 	bl	8001d58 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0202 	bic.w	r2, r2, #2
 8002592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002594:	f7ff ffb6 	bl	8002504 <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800259a:	e012      	b.n	80025c2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800259c:	f7ff ffb2 	bl	8002504 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b0a      	cmp	r3, #10
 80025a8:	d90b      	bls.n	80025c2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2205      	movs	r2, #5
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e0c5      	b.n	800274e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e0:	f7ff ff90 	bl	8002504 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025e6:	e012      	b.n	800260e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025e8:	f7ff ff8c 	bl	8002504 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b0a      	cmp	r3, #10
 80025f4:	d90b      	bls.n	800260e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2205      	movs	r2, #5
 8002606:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e09f      	b.n	800274e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0e5      	beq.n	80025e8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7e1b      	ldrb	r3, [r3, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d108      	bne.n	8002636 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	e007      	b.n	8002646 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7e5b      	ldrb	r3, [r3, #25]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d108      	bne.n	8002660 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	e007      	b.n	8002670 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	7e9b      	ldrb	r3, [r3, #26]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d108      	bne.n	800268a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0220 	orr.w	r2, r2, #32
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e007      	b.n	800269a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0220 	bic.w	r2, r2, #32
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7edb      	ldrb	r3, [r3, #27]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d108      	bne.n	80026b4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0210 	bic.w	r2, r2, #16
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	e007      	b.n	80026c4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0210 	orr.w	r2, r2, #16
 80026c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7f1b      	ldrb	r3, [r3, #28]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d108      	bne.n	80026de <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0208 	orr.w	r2, r2, #8
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	e007      	b.n	80026ee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0208 	bic.w	r2, r2, #8
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	7f5b      	ldrb	r3, [r3, #29]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d108      	bne.n	8002708 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0204 	orr.w	r2, r2, #4
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	e007      	b.n	8002718 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0204 	bic.w	r2, r2, #4
 8002716:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	431a      	orrs	r2, r3
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	431a      	orrs	r2, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	ea42 0103 	orr.w	r1, r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002758:	b480      	push	{r7}
 800275a:	b087      	sub	sp, #28
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800276e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d003      	beq.n	800277e <HAL_CAN_ConfigFilter+0x26>
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b02      	cmp	r3, #2
 800277a:	f040 80be 	bne.w	80028fa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_CAN_ConfigFilter+0x1bc>)
 8002780:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002798:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	431a      	orrs	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	2201      	movs	r2, #1
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	43db      	mvns	r3, r3
 80027d0:	401a      	ands	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d123      	bne.n	8002828 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	401a      	ands	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002802:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3248      	adds	r2, #72	; 0x48
 8002808:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800281c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800281e:	6979      	ldr	r1, [r7, #20]
 8002820:	3348      	adds	r3, #72	; 0x48
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	440b      	add	r3, r1
 8002826:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d122      	bne.n	8002876 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	431a      	orrs	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002850:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	3248      	adds	r2, #72	; 0x48
 8002856:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800286a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800286c:	6979      	ldr	r1, [r7, #20]
 800286e:	3348      	adds	r3, #72	; 0x48
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	440b      	add	r3, r1
 8002874:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	43db      	mvns	r3, r3
 8002888:	401a      	ands	r2, r3
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002890:	e007      	b.n	80028a2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	431a      	orrs	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d109      	bne.n	80028be <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	43db      	mvns	r3, r3
 80028b4:	401a      	ands	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80028bc:	e007      	b.n	80028ce <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	431a      	orrs	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028ec:	f023 0201 	bic.w	r2, r3, #1
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e006      	b.n	8002908 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
  }
}
 8002908:	4618      	mov	r0, r3
 800290a:	371c      	adds	r7, #28
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	40006400 	.word	0x40006400

08002918 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002918:	b480      	push	{r7}
 800291a:	b089      	sub	sp, #36	; 0x24
 800291c:	af00      	add	r7, sp, #0
 800291e:	60f8      	str	r0, [r7, #12]
 8002920:	60b9      	str	r1, [r7, #8]
 8002922:	607a      	str	r2, [r7, #4]
 8002924:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f893 3020 	ldrb.w	r3, [r3, #32]
 800292c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002936:	7ffb      	ldrb	r3, [r7, #31]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d003      	beq.n	8002944 <HAL_CAN_AddTxMessage+0x2c>
 800293c:	7ffb      	ldrb	r3, [r7, #31]
 800293e:	2b02      	cmp	r3, #2
 8002940:	f040 80b8 	bne.w	8002ab4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d10a      	bne.n	8002964 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80a0 	beq.w	8002aa4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	0e1b      	lsrs	r3, r3, #24
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2b02      	cmp	r3, #2
 8002972:	d907      	bls.n	8002984 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e09e      	b.n	8002ac2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002984:	2201      	movs	r2, #1
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	409a      	lsls	r2, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10d      	bne.n	80029b2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029a0:	68f9      	ldr	r1, [r7, #12]
 80029a2:	6809      	ldr	r1, [r1, #0]
 80029a4:	431a      	orrs	r2, r3
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	3318      	adds	r3, #24
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	440b      	add	r3, r1
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	e00f      	b.n	80029d2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029c2:	68f9      	ldr	r1, [r7, #12]
 80029c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3318      	adds	r3, #24
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	440b      	add	r3, r1
 80029d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6819      	ldr	r1, [r3, #0]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	691a      	ldr	r2, [r3, #16]
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	3318      	adds	r3, #24
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	440b      	add	r3, r1
 80029e2:	3304      	adds	r3, #4
 80029e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	7d1b      	ldrb	r3, [r3, #20]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d111      	bne.n	8002a12 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	3318      	adds	r3, #24
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	4413      	add	r3, r2
 80029fa:	3304      	adds	r3, #4
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	6811      	ldr	r1, [r2, #0]
 8002a02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3318      	adds	r3, #24
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3304      	adds	r3, #4
 8002a10:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	3307      	adds	r3, #7
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	061a      	lsls	r2, r3, #24
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3306      	adds	r3, #6
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3305      	adds	r3, #5
 8002a28:	781b      	ldrb	r3, [r3, #0]
 8002a2a:	021b      	lsls	r3, r3, #8
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	3204      	adds	r2, #4
 8002a32:	7812      	ldrb	r2, [r2, #0]
 8002a34:	4610      	mov	r0, r2
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	6811      	ldr	r1, [r2, #0]
 8002a3a:	ea43 0200 	orr.w	r2, r3, r0
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a48:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3303      	adds	r3, #3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	061a      	lsls	r2, r3, #24
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3302      	adds	r3, #2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	041b      	lsls	r3, r3, #16
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	4313      	orrs	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	6811      	ldr	r1, [r2, #0]
 8002a70:	ea43 0200 	orr.w	r2, r3, r0
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	440b      	add	r3, r1
 8002a7a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a7e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	3318      	adds	r3, #24
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	4413      	add	r3, r2
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	f043 0201 	orr.w	r2, r3, #1
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	3318      	adds	r3, #24
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	440b      	add	r3, r1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e00e      	b.n	8002ac2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e006      	b.n	8002ac2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	; 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d003      	beq.n	8002af2 <HAL_CAN_GetRxMessage+0x24>
 8002aea:	7dfb      	ldrb	r3, [r7, #23]
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	f040 80f3 	bne.w	8002cd8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10e      	bne.n	8002b16 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d116      	bne.n	8002b34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e0e7      	b.n	8002ce6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e0d8      	b.n	8002ce6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	331b      	adds	r3, #27
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	4413      	add	r3, r2
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0204 	and.w	r2, r3, #4
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	331b      	adds	r3, #27
 8002b5a:	011b      	lsls	r3, r3, #4
 8002b5c:	4413      	add	r3, r2
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	0d5b      	lsrs	r3, r3, #21
 8002b62:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	331b      	adds	r3, #27
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	4413      	add	r3, r2
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	08db      	lsrs	r3, r3, #3
 8002b7c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	331b      	adds	r3, #27
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	4413      	add	r3, r2
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0202 	and.w	r2, r3, #2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	331b      	adds	r3, #27
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 020f 	and.w	r2, r3, #15
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	331b      	adds	r3, #27
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	4413      	add	r3, r2
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	0a1b      	lsrs	r3, r3, #8
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	331b      	adds	r3, #27
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0c1b      	lsrs	r3, r3, #16
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	4413      	add	r3, r2
 8002bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	0a1a      	lsrs	r2, r3, #8
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	b2d2      	uxtb	r2, r2
 8002c10:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0c1a      	lsrs	r2, r3, #16
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	3302      	adds	r3, #2
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	4413      	add	r3, r2
 8002c36:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	0e1a      	lsrs	r2, r3, #24
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	3303      	adds	r3, #3
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	4413      	add	r3, r2
 8002c50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	4413      	add	r3, r2
 8002c68:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0a1a      	lsrs	r2, r3, #8
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3305      	adds	r3, #5
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	0c1a      	lsrs	r2, r3, #16
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3306      	adds	r3, #6
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	011b      	lsls	r3, r3, #4
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	0e1a      	lsrs	r2, r3, #24
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3307      	adds	r3, #7
 8002ca8:	b2d2      	uxtb	r2, r2
 8002caa:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68da      	ldr	r2, [r3, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f042 0220 	orr.w	r2, r2, #32
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	e007      	b.n	8002cd4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691a      	ldr	r2, [r3, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0220 	orr.w	r2, r2, #32
 8002cd2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e006      	b.n	8002ce6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
  }
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b085      	sub	sp, #20
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
 8002cfa:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d06:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d08:	7afb      	ldrb	r3, [r7, #11]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d002      	beq.n	8002d14 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d10f      	bne.n	8002d34 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e005      	b.n	8002d34 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d34:	68fb      	ldr	r3, [r7, #12]
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7ff ff4c 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002eac:	bf00      	nop
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec6:	f7ff ff61 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002eca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	6978      	ldr	r0, [r7, #20]
 8002ed2:	f7ff ffb1 	bl	8002e38 <NVIC_EncodePriority>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7ff ff80 	bl	8002de4 <__NVIC_SetPriority>
}
 8002ee4:	bf00      	nop
 8002ee6:	3718      	adds	r7, #24
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff54 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f00:	bf00      	nop
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b082      	sub	sp, #8
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00e      	b.n	8002f38 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	795b      	ldrb	r3, [r3, #5]
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d105      	bne.n	8002f30 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7fe ff5c 	bl	8001de8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2202      	movs	r2, #2
 8002f54:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689a      	ldr	r2, [r3, #8]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	e00a      	b.n	8002f82 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	441a      	add	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d3f0      	bcc.n	8002f6c <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002f98:	693b      	ldr	r3, [r7, #16]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002fb4:	f7ff faa6 	bl	8002504 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e099      	b.n	80030f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2202      	movs	r2, #2
 8002fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fe4:	e00f      	b.n	8003006 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fe6:	f7ff fa8d 	bl	8002504 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d908      	bls.n	8003006 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003002:	2303      	movs	r3, #3
 8003004:	e078      	b.n	80030f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0301 	and.w	r3, r3, #1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1e8      	bne.n	8002fe6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	4b38      	ldr	r3, [pc, #224]	; (8003100 <HAL_DMA_Init+0x158>)
 8003020:	4013      	ands	r3, r2
 8003022:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003032:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800303e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800304a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	4313      	orrs	r3, r2
 8003056:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	2b04      	cmp	r3, #4
 800305e:	d107      	bne.n	8003070 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	4313      	orrs	r3, r2
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f023 0307 	bic.w	r3, r3, #7
 8003086:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	4313      	orrs	r3, r2
 8003090:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	2b04      	cmp	r3, #4
 8003098:	d117      	bne.n	80030ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00e      	beq.n	80030ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 fa9d 	bl	80035ec <DMA_CheckFifoParam>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2240      	movs	r2, #64	; 0x40
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80030c6:	2301      	movs	r3, #1
 80030c8:	e016      	b.n	80030f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa54 	bl	8003580 <DMA_CalcBaseAndBitshift>
 80030d8:	4603      	mov	r3, r0
 80030da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	223f      	movs	r2, #63	; 0x3f
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	f010803f 	.word	0xf010803f

08003104 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b086      	sub	sp, #24
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003122:	2b01      	cmp	r3, #1
 8003124:	d101      	bne.n	800312a <HAL_DMA_Start_IT+0x26>
 8003126:	2302      	movs	r3, #2
 8003128:	e040      	b.n	80031ac <HAL_DMA_Start_IT+0xa8>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d12f      	bne.n	800319e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f9e6 	bl	8003524 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315c:	223f      	movs	r2, #63	; 0x3f
 800315e:	409a      	lsls	r2, r3
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0216 	orr.w	r2, r2, #22
 8003172:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	2b00      	cmp	r3, #0
 800317a:	d007      	beq.n	800318c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0208 	orr.w	r2, r2, #8
 800318a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	e005      	b.n	80031aa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
 80031a8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d004      	beq.n	80031d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2280      	movs	r2, #128	; 0x80
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e00c      	b.n	80031ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2205      	movs	r2, #5
 80031d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0201 	bic.w	r2, r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003204:	4b92      	ldr	r3, [pc, #584]	; (8003450 <HAL_DMA_IRQHandler+0x258>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a92      	ldr	r2, [pc, #584]	; (8003454 <HAL_DMA_IRQHandler+0x25c>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	0a9b      	lsrs	r3, r3, #10
 8003210:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003222:	2208      	movs	r2, #8
 8003224:	409a      	lsls	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d01a      	beq.n	8003264 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	2208      	movs	r2, #8
 8003252:	409a      	lsls	r2, r3
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	f043 0201 	orr.w	r2, r3, #1
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003268:	2201      	movs	r2, #1
 800326a:	409a      	lsls	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d012      	beq.n	800329a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00b      	beq.n	800329a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003286:	2201      	movs	r2, #1
 8003288:	409a      	lsls	r2, r3
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	f043 0202 	orr.w	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800329e:	2204      	movs	r2, #4
 80032a0:	409a      	lsls	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d012      	beq.n	80032d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00b      	beq.n	80032d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032bc:	2204      	movs	r2, #4
 80032be:	409a      	lsls	r2, r3
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c8:	f043 0204 	orr.w	r2, r3, #4
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	2210      	movs	r2, #16
 80032d6:	409a      	lsls	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d043      	beq.n	8003368 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d03c      	beq.n	8003368 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f2:	2210      	movs	r2, #16
 80032f4:	409a      	lsls	r2, r3
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d018      	beq.n	800333a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d108      	bne.n	8003328 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
 8003326:	e01f      	b.n	8003368 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332c:	2b00      	cmp	r3, #0
 800332e:	d01b      	beq.n	8003368 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
 8003338:	e016      	b.n	8003368 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0208 	bic.w	r2, r2, #8
 8003356:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d003      	beq.n	8003368 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336c:	2220      	movs	r2, #32
 800336e:	409a      	lsls	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 808e 	beq.w	8003496 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0310 	and.w	r3, r3, #16
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8086 	beq.w	8003496 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	2220      	movs	r2, #32
 8003390:	409a      	lsls	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d136      	bne.n	8003410 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 0216 	bic.w	r2, r2, #22
 80033b0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <HAL_DMA_IRQHandler+0x1da>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0208 	bic.w	r2, r2, #8
 80033e0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	223f      	movs	r2, #63	; 0x3f
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2201      	movs	r2, #1
 80033fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	d07d      	beq.n	8003502 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
        }
        return;
 800340e:	e078      	b.n	8003502 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d01c      	beq.n	8003458 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	2b00      	cmp	r3, #0
 8003432:	d030      	beq.n	8003496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	4798      	blx	r3
 800343c:	e02b      	b.n	8003496 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	2b00      	cmp	r3, #0
 8003444:	d027      	beq.n	8003496 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	4798      	blx	r3
 800344e:	e022      	b.n	8003496 <HAL_DMA_IRQHandler+0x29e>
 8003450:	20000000 	.word	0x20000000
 8003454:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0210 	bic.w	r2, r2, #16
 8003474:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349a:	2b00      	cmp	r3, #0
 800349c:	d032      	beq.n	8003504 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d022      	beq.n	80034f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2205      	movs	r2, #5
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 0201 	bic.w	r2, r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3301      	adds	r3, #1
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d307      	bcc.n	80034de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0301 	and.w	r3, r3, #1
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f2      	bne.n	80034c2 <HAL_DMA_IRQHandler+0x2ca>
 80034dc:	e000      	b.n	80034e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d005      	beq.n	8003504 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034fc:	6878      	ldr	r0, [r7, #4]
 80034fe:	4798      	blx	r3
 8003500:	e000      	b.n	8003504 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003502:	bf00      	nop
    }
  }
}
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop

0800350c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003540:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	d108      	bne.n	8003564 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003562:	e007      	b.n	8003574 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	60da      	str	r2, [r3, #12]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	b2db      	uxtb	r3, r3
 800358e:	3b10      	subs	r3, #16
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003592:	fba2 2303 	umull	r2, r3, r2, r3
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359a:	4a13      	ldr	r2, [pc, #76]	; (80035e8 <DMA_CalcBaseAndBitshift+0x68>)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4413      	add	r3, r2
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b03      	cmp	r3, #3
 80035ac:	d909      	bls.n	80035c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	1d1a      	adds	r2, r3, #4
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	; 0x58
 80035c0:	e007      	b.n	80035d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ca:	f023 0303 	bic.w	r3, r3, #3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	aaaaaaab 	.word	0xaaaaaaab
 80035e8:	0800d88c 	.word	0x0800d88c

080035ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11f      	bne.n	8003646 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b03      	cmp	r3, #3
 800360a:	d855      	bhi.n	80036b8 <DMA_CheckFifoParam+0xcc>
 800360c:	a201      	add	r2, pc, #4	; (adr r2, 8003614 <DMA_CheckFifoParam+0x28>)
 800360e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003612:	bf00      	nop
 8003614:	08003625 	.word	0x08003625
 8003618:	08003637 	.word	0x08003637
 800361c:	08003625 	.word	0x08003625
 8003620:	080036b9 	.word	0x080036b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d045      	beq.n	80036bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003634:	e042      	b.n	80036bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800363e:	d13f      	bne.n	80036c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003644:	e03c      	b.n	80036c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800364e:	d121      	bne.n	8003694 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d836      	bhi.n	80036c4 <DMA_CheckFifoParam+0xd8>
 8003656:	a201      	add	r2, pc, #4	; (adr r2, 800365c <DMA_CheckFifoParam+0x70>)
 8003658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365c:	0800366d 	.word	0x0800366d
 8003660:	08003673 	.word	0x08003673
 8003664:	0800366d 	.word	0x0800366d
 8003668:	08003685 	.word	0x08003685
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	73fb      	strb	r3, [r7, #15]
      break;
 8003670:	e02f      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003676:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d024      	beq.n	80036c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003682:	e021      	b.n	80036c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800368c:	d11e      	bne.n	80036cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003692:	e01b      	b.n	80036cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d902      	bls.n	80036a0 <DMA_CheckFifoParam+0xb4>
 800369a:	2b03      	cmp	r3, #3
 800369c:	d003      	beq.n	80036a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800369e:	e018      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	73fb      	strb	r3, [r7, #15]
      break;
 80036a4:	e015      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00e      	beq.n	80036d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	73fb      	strb	r3, [r7, #15]
      break;
 80036b6:	e00b      	b.n	80036d0 <DMA_CheckFifoParam+0xe4>
      break;
 80036b8:	bf00      	nop
 80036ba:	e00a      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036bc:	bf00      	nop
 80036be:	e008      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036c0:	bf00      	nop
 80036c2:	e006      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036c4:	bf00      	nop
 80036c6:	e004      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036c8:	bf00      	nop
 80036ca:	e002      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80036cc:	bf00      	nop
 80036ce:	e000      	b.n	80036d2 <DMA_CheckFifoParam+0xe6>
      break;
 80036d0:	bf00      	nop
    }
  } 
  
  return status; 
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e16b      	b.n	80039d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 815a 	bne.w	80039ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d00b      	beq.n	800373a <HAL_GPIO_Init+0x5a>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b02      	cmp	r3, #2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372e:	2b11      	cmp	r3, #17
 8003730:	d003      	beq.n	800373a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b12      	cmp	r3, #18
 8003738:	d130      	bne.n	800379c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	2203      	movs	r2, #3
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	4313      	orrs	r3, r2
 8003762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003770:	2201      	movs	r2, #1
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	f003 0201 	and.w	r2, r3, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	005b      	lsls	r3, r3, #1
 80037a6:	2203      	movs	r2, #3
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0xfc>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b12      	cmp	r3, #18
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80b4 	beq.w	80039ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b5f      	ldr	r3, [pc, #380]	; (80039e8 <HAL_GPIO_Init+0x308>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a5e      	ldr	r2, [pc, #376]	; (80039e8 <HAL_GPIO_Init+0x308>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b5c      	ldr	r3, [pc, #368]	; (80039e8 <HAL_GPIO_Init+0x308>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003882:	4a5a      	ldr	r2, [pc, #360]	; (80039ec <HAL_GPIO_Init+0x30c>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a51      	ldr	r2, [pc, #324]	; (80039f0 <HAL_GPIO_Init+0x310>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d02b      	beq.n	8003906 <HAL_GPIO_Init+0x226>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a50      	ldr	r2, [pc, #320]	; (80039f4 <HAL_GPIO_Init+0x314>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d025      	beq.n	8003902 <HAL_GPIO_Init+0x222>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4f      	ldr	r2, [pc, #316]	; (80039f8 <HAL_GPIO_Init+0x318>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01f      	beq.n	80038fe <HAL_GPIO_Init+0x21e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4e      	ldr	r2, [pc, #312]	; (80039fc <HAL_GPIO_Init+0x31c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d019      	beq.n	80038fa <HAL_GPIO_Init+0x21a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4d      	ldr	r2, [pc, #308]	; (8003a00 <HAL_GPIO_Init+0x320>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_GPIO_Init+0x216>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4c      	ldr	r2, [pc, #304]	; (8003a04 <HAL_GPIO_Init+0x324>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d00d      	beq.n	80038f2 <HAL_GPIO_Init+0x212>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4b      	ldr	r2, [pc, #300]	; (8003a08 <HAL_GPIO_Init+0x328>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d007      	beq.n	80038ee <HAL_GPIO_Init+0x20e>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4a      	ldr	r2, [pc, #296]	; (8003a0c <HAL_GPIO_Init+0x32c>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d101      	bne.n	80038ea <HAL_GPIO_Init+0x20a>
 80038e6:	2307      	movs	r3, #7
 80038e8:	e00e      	b.n	8003908 <HAL_GPIO_Init+0x228>
 80038ea:	2308      	movs	r3, #8
 80038ec:	e00c      	b.n	8003908 <HAL_GPIO_Init+0x228>
 80038ee:	2306      	movs	r3, #6
 80038f0:	e00a      	b.n	8003908 <HAL_GPIO_Init+0x228>
 80038f2:	2305      	movs	r3, #5
 80038f4:	e008      	b.n	8003908 <HAL_GPIO_Init+0x228>
 80038f6:	2304      	movs	r3, #4
 80038f8:	e006      	b.n	8003908 <HAL_GPIO_Init+0x228>
 80038fa:	2303      	movs	r3, #3
 80038fc:	e004      	b.n	8003908 <HAL_GPIO_Init+0x228>
 80038fe:	2302      	movs	r3, #2
 8003900:	e002      	b.n	8003908 <HAL_GPIO_Init+0x228>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <HAL_GPIO_Init+0x228>
 8003906:	2300      	movs	r3, #0
 8003908:	69fa      	ldr	r2, [r7, #28]
 800390a:	f002 0203 	and.w	r2, r2, #3
 800390e:	0092      	lsls	r2, r2, #2
 8003910:	4093      	lsls	r3, r2
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4313      	orrs	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003918:	4934      	ldr	r1, [pc, #208]	; (80039ec <HAL_GPIO_Init+0x30c>)
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	3302      	adds	r3, #2
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003926:	4b3a      	ldr	r3, [pc, #232]	; (8003a10 <HAL_GPIO_Init+0x330>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	43db      	mvns	r3, r3
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	4013      	ands	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	4313      	orrs	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800394a:	4a31      	ldr	r2, [pc, #196]	; (8003a10 <HAL_GPIO_Init+0x330>)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_GPIO_Init+0x330>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800396c:	69ba      	ldr	r2, [r7, #24]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <HAL_GPIO_Init+0x330>)
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800397a:	4b25      	ldr	r3, [pc, #148]	; (8003a10 <HAL_GPIO_Init+0x330>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	43db      	mvns	r3, r3
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	4013      	ands	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800399e:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_GPIO_Init+0x330>)
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a4:	4b1a      	ldr	r3, [pc, #104]	; (8003a10 <HAL_GPIO_Init+0x330>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	43db      	mvns	r3, r3
 80039ae:	69ba      	ldr	r2, [r7, #24]
 80039b0:	4013      	ands	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039c8:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <HAL_GPIO_Init+0x330>)
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3301      	adds	r3, #1
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b0f      	cmp	r3, #15
 80039d8:	f67f ae90 	bls.w	80036fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039dc:	bf00      	nop
 80039de:	3724      	adds	r7, #36	; 0x24
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	40023800 	.word	0x40023800
 80039ec:	40013800 	.word	0x40013800
 80039f0:	40020000 	.word	0x40020000
 80039f4:	40020400 	.word	0x40020400
 80039f8:	40020800 	.word	0x40020800
 80039fc:	40020c00 	.word	0x40020c00
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40021400 	.word	0x40021400
 8003a08:	40021800 	.word	0x40021800
 8003a0c:	40021c00 	.word	0x40021c00
 8003a10:	40013c00 	.word	0x40013c00

08003a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
 8003a20:	4613      	mov	r3, r2
 8003a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a24:	787b      	ldrb	r3, [r7, #1]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d003      	beq.n	8003a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2a:	887a      	ldrh	r2, [r7, #2]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a30:	e003      	b.n	8003a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a32:	887b      	ldrh	r3, [r7, #2]
 8003a34:	041a      	lsls	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	619a      	str	r2, [r3, #24]
}
 8003a3a:	bf00      	nop
 8003a3c:	370c      	adds	r7, #12
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b084      	sub	sp, #16
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e02b      	b.n	8003ab0 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003a60:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f245 5255 	movw	r2, #21845	; 0x5555
 8003a6a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6852      	ldr	r2, [r2, #4]
 8003a74:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6892      	ldr	r2, [r2, #8]
 8003a7e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003a80:	f7fe fd40 	bl	8002504 <HAL_GetTick>
 8003a84:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8003a86:	e008      	b.n	8003a9a <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003a88:	f7fe fd3c 	bl	8002504 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b30      	cmp	r3, #48	; 0x30
 8003a94:	d901      	bls.n	8003a9a <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e00a      	b.n	8003ab0 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1f1      	bne.n	8003a88 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003aac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e25b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d075      	beq.n	8003be2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003af6:	4ba3      	ldr	r3, [pc, #652]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d00c      	beq.n	8003b1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b02:	4ba0      	ldr	r3, [pc, #640]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d112      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b0e:	4b9d      	ldr	r3, [pc, #628]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1a:	d10b      	bne.n	8003b34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1c:	4b99      	ldr	r3, [pc, #612]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d05b      	beq.n	8003be0 <HAL_RCC_OscConfig+0x108>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d157      	bne.n	8003be0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e236      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3c:	d106      	bne.n	8003b4c <HAL_RCC_OscConfig+0x74>
 8003b3e:	4b91      	ldr	r3, [pc, #580]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a90      	ldr	r2, [pc, #576]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e01d      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x98>
 8003b56:	4b8b      	ldr	r3, [pc, #556]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a8a      	ldr	r2, [pc, #552]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b88      	ldr	r3, [pc, #544]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a87      	ldr	r2, [pc, #540]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0xb0>
 8003b70:	4b84      	ldr	r3, [pc, #528]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a83      	ldr	r2, [pc, #524]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b81      	ldr	r3, [pc, #516]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a80      	ldr	r2, [pc, #512]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe fcb8 	bl	8002504 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe fcb4 	bl	8002504 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1fb      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003baa:	4b76      	ldr	r3, [pc, #472]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0xc0>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb8:	f7fe fca4 	bl	8002504 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fe fca0 	bl	8002504 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	; 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e1e7      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bd2:	4b6c      	ldr	r3, [pc, #432]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0xe8>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d063      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bee:	4b65      	ldr	r3, [pc, #404]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 030c 	and.w	r3, r3, #12
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00b      	beq.n	8003c12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfa:	4b62      	ldr	r3, [pc, #392]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c02:	2b08      	cmp	r3, #8
 8003c04:	d11c      	bne.n	8003c40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c06:	4b5f      	ldr	r3, [pc, #380]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d116      	bne.n	8003c40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c12:	4b5c      	ldr	r3, [pc, #368]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_RCC_OscConfig+0x152>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d001      	beq.n	8003c2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e1bb      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c2a:	4b56      	ldr	r3, [pc, #344]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	00db      	lsls	r3, r3, #3
 8003c38:	4952      	ldr	r1, [pc, #328]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c3e:	e03a      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d020      	beq.n	8003c8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c48:	4b4f      	ldr	r3, [pc, #316]	; (8003d88 <HAL_RCC_OscConfig+0x2b0>)
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c4e:	f7fe fc59 	bl	8002504 <HAL_GetTick>
 8003c52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c54:	e008      	b.n	8003c68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c56:	f7fe fc55 	bl	8002504 <HAL_GetTick>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d901      	bls.n	8003c68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e19c      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c68:	4b46      	ldr	r3, [pc, #280]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f0      	beq.n	8003c56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c74:	4b43      	ldr	r3, [pc, #268]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4940      	ldr	r1, [pc, #256]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
 8003c88:	e015      	b.n	8003cb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c8a:	4b3f      	ldr	r3, [pc, #252]	; (8003d88 <HAL_RCC_OscConfig+0x2b0>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fe fc38 	bl	8002504 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c98:	f7fe fc34 	bl	8002504 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e17b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003caa:	4b36      	ldr	r3, [pc, #216]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f0      	bne.n	8003c98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d030      	beq.n	8003d24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cca:	4b30      	ldr	r3, [pc, #192]	; (8003d8c <HAL_RCC_OscConfig+0x2b4>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fe fc18 	bl	8002504 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fe fc14 	bl	8002504 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e15b      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cea:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x200>
 8003cf6:	e015      	b.n	8003d24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf8:	4b24      	ldr	r3, [pc, #144]	; (8003d8c <HAL_RCC_OscConfig+0x2b4>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfe:	f7fe fc01 	bl	8002504 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d06:	f7fe fbfd 	bl	8002504 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e144      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d18:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f0      	bne.n	8003d06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 80a0 	beq.w	8003e72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d32:	2300      	movs	r3, #0
 8003d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d36:	4b13      	ldr	r3, [pc, #76]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10f      	bne.n	8003d62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60bb      	str	r3, [r7, #8]
 8003d46:	4b0f      	ldr	r3, [pc, #60]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	6413      	str	r3, [r2, #64]	; 0x40
 8003d52:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <HAL_RCC_OscConfig+0x2ac>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <HAL_RCC_OscConfig+0x2b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d121      	bne.n	8003db2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d6e:	4b08      	ldr	r3, [pc, #32]	; (8003d90 <HAL_RCC_OscConfig+0x2b8>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a07      	ldr	r2, [pc, #28]	; (8003d90 <HAL_RCC_OscConfig+0x2b8>)
 8003d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7a:	f7fe fbc3 	bl	8002504 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d80:	e011      	b.n	8003da6 <HAL_RCC_OscConfig+0x2ce>
 8003d82:	bf00      	nop
 8003d84:	40023800 	.word	0x40023800
 8003d88:	42470000 	.word	0x42470000
 8003d8c:	42470e80 	.word	0x42470e80
 8003d90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d94:	f7fe fbb6 	bl	8002504 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e0fd      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b81      	ldr	r3, [pc, #516]	; (8003fac <HAL_RCC_OscConfig+0x4d4>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d106      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
 8003dba:	4b7d      	ldr	r3, [pc, #500]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	4a7c      	ldr	r2, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dc0:	f043 0301 	orr.w	r3, r3, #1
 8003dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc6:	e01c      	b.n	8003e02 <HAL_RCC_OscConfig+0x32a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b05      	cmp	r3, #5
 8003dce:	d10c      	bne.n	8003dea <HAL_RCC_OscConfig+0x312>
 8003dd0:	4b77      	ldr	r3, [pc, #476]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	4a76      	ldr	r2, [pc, #472]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	6713      	str	r3, [r2, #112]	; 0x70
 8003ddc:	4b74      	ldr	r3, [pc, #464]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a73      	ldr	r2, [pc, #460]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
 8003de8:	e00b      	b.n	8003e02 <HAL_RCC_OscConfig+0x32a>
 8003dea:	4b71      	ldr	r3, [pc, #452]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dee:	4a70      	ldr	r2, [pc, #448]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003df0:	f023 0301 	bic.w	r3, r3, #1
 8003df4:	6713      	str	r3, [r2, #112]	; 0x70
 8003df6:	4b6e      	ldr	r3, [pc, #440]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a6d      	ldr	r2, [pc, #436]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003dfc:	f023 0304 	bic.w	r3, r3, #4
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d015      	beq.n	8003e36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e0a:	f7fe fb7b 	bl	8002504 <HAL_GetTick>
 8003e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e10:	e00a      	b.n	8003e28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe fb77 	bl	8002504 <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d901      	bls.n	8003e28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e0bc      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e28:	4b61      	ldr	r3, [pc, #388]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0ee      	beq.n	8003e12 <HAL_RCC_OscConfig+0x33a>
 8003e34:	e014      	b.n	8003e60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e36:	f7fe fb65 	bl	8002504 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e3c:	e00a      	b.n	8003e54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3e:	f7fe fb61 	bl	8002504 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e0a6      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e54:	4b56      	ldr	r3, [pc, #344]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1ee      	bne.n	8003e3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e60:	7dfb      	ldrb	r3, [r7, #23]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e66:	4b52      	ldr	r3, [pc, #328]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a51      	ldr	r2, [pc, #324]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 8092 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e7c:	4b4c      	ldr	r3, [pc, #304]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 030c 	and.w	r3, r3, #12
 8003e84:	2b08      	cmp	r3, #8
 8003e86:	d05c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d141      	bne.n	8003f14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <HAL_RCC_OscConfig+0x4dc>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e96:	f7fe fb35 	bl	8002504 <HAL_GetTick>
 8003e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e9c:	e008      	b.n	8003eb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fe fb31 	bl	8002504 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e078      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eb0:	4b3f      	ldr	r3, [pc, #252]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	431a      	orrs	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	019b      	lsls	r3, r3, #6
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	085b      	lsrs	r3, r3, #1
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	041b      	lsls	r3, r3, #16
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	061b      	lsls	r3, r3, #24
 8003ee0:	4933      	ldr	r1, [pc, #204]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ee6:	4b33      	ldr	r3, [pc, #204]	; (8003fb4 <HAL_RCC_OscConfig+0x4dc>)
 8003ee8:	2201      	movs	r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe fb0a 	bl	8002504 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef4:	f7fe fb06 	bl	8002504 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e04d      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0f0      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
 8003f12:	e045      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f14:	4b27      	ldr	r3, [pc, #156]	; (8003fb4 <HAL_RCC_OscConfig+0x4dc>)
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f1a:	f7fe faf3 	bl	8002504 <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f22:	f7fe faef 	bl	8002504 <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e036      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1f0      	bne.n	8003f22 <HAL_RCC_OscConfig+0x44a>
 8003f40:	e02e      	b.n	8003fa0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d101      	bne.n	8003f4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e029      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f4e:	4b18      	ldr	r3, [pc, #96]	; (8003fb0 <HAL_RCC_OscConfig+0x4d8>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d11c      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d115      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f76:	4013      	ands	r3, r2
 8003f78:	687a      	ldr	r2, [r7, #4]
 8003f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d10d      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d106      	bne.n	8003f9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d001      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	42470060 	.word	0x42470060

08003fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d101      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0cc      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fcc:	4b68      	ldr	r3, [pc, #416]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 030f 	and.w	r3, r3, #15
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d90c      	bls.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fda:	4b65      	ldr	r3, [pc, #404]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fe2:	4b63      	ldr	r3, [pc, #396]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 030f 	and.w	r3, r3, #15
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d001      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0b8      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d020      	beq.n	8004042 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800400c:	4b59      	ldr	r3, [pc, #356]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a58      	ldr	r2, [pc, #352]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004016:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004024:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4a52      	ldr	r2, [pc, #328]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800402e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004030:	4b50      	ldr	r3, [pc, #320]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	494d      	ldr	r1, [pc, #308]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800403e:	4313      	orrs	r3, r2
 8004040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0301 	and.w	r3, r3, #1
 800404a:	2b00      	cmp	r3, #0
 800404c:	d044      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d107      	bne.n	8004066 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004056:	4b47      	ldr	r3, [pc, #284]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d119      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e07f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b02      	cmp	r3, #2
 800406c:	d003      	beq.n	8004076 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004072:	2b03      	cmp	r3, #3
 8004074:	d107      	bne.n	8004086 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004076:	4b3f      	ldr	r3, [pc, #252]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d109      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e06f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004086:	4b3b      	ldr	r3, [pc, #236]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0302 	and.w	r3, r3, #2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e067      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004096:	4b37      	ldr	r3, [pc, #220]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f023 0203 	bic.w	r2, r3, #3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	4934      	ldr	r1, [pc, #208]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040a8:	f7fe fa2c 	bl	8002504 <HAL_GetTick>
 80040ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	e00a      	b.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b0:	f7fe fa28 	bl	8002504 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80040be:	4293      	cmp	r3, r2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e04f      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040c6:	4b2b      	ldr	r3, [pc, #172]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 020c 	and.w	r2, r3, #12
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d1eb      	bne.n	80040b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040d8:	4b25      	ldr	r3, [pc, #148]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20c      	bcs.n	8004100 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	b2d2      	uxtb	r2, r2
 80040ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ee:	4b20      	ldr	r3, [pc, #128]	; (8004170 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 030f 	and.w	r3, r3, #15
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d001      	beq.n	8004100 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e032      	b.n	8004166 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800410c:	4b19      	ldr	r3, [pc, #100]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	4916      	ldr	r1, [pc, #88]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800411a:	4313      	orrs	r3, r2
 800411c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800412a:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	490e      	ldr	r1, [pc, #56]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	4313      	orrs	r3, r2
 800413c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800413e:	f000 f821 	bl	8004184 <HAL_RCC_GetSysClockFreq>
 8004142:	4601      	mov	r1, r0
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_ClockConfig+0x1bc>)
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	091b      	lsrs	r3, r3, #4
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <HAL_RCC_ClockConfig+0x1c0>)
 8004150:	5cd3      	ldrb	r3, [r2, r3]
 8004152:	fa21 f303 	lsr.w	r3, r1, r3
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_RCC_ClockConfig+0x1c8>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f7fe f8b6 	bl	80022d0 <HAL_InitTick>

  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023c00 	.word	0x40023c00
 8004174:	40023800 	.word	0x40023800
 8004178:	0800d874 	.word	0x0800d874
 800417c:	20000000 	.word	0x20000000
 8004180:	20000004 	.word	0x20000004

08004184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800418a:	2300      	movs	r3, #0
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	2300      	movs	r3, #0
 8004194:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800419a:	4b50      	ldr	r3, [pc, #320]	; (80042dc <HAL_RCC_GetSysClockFreq+0x158>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f003 030c 	and.w	r3, r3, #12
 80041a2:	2b04      	cmp	r3, #4
 80041a4:	d007      	beq.n	80041b6 <HAL_RCC_GetSysClockFreq+0x32>
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d008      	beq.n	80041bc <HAL_RCC_GetSysClockFreq+0x38>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 808d 	bne.w	80042ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041b0:	4b4b      	ldr	r3, [pc, #300]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80041b2:	60bb      	str	r3, [r7, #8]
       break;
 80041b4:	e08c      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041b6:	4b4b      	ldr	r3, [pc, #300]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041b8:	60bb      	str	r3, [r7, #8]
      break;
 80041ba:	e089      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041bc:	4b47      	ldr	r3, [pc, #284]	; (80042dc <HAL_RCC_GetSysClockFreq+0x158>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041c6:	4b45      	ldr	r3, [pc, #276]	; (80042dc <HAL_RCC_GetSysClockFreq+0x158>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d023      	beq.n	800421a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041d2:	4b42      	ldr	r3, [pc, #264]	; (80042dc <HAL_RCC_GetSysClockFreq+0x158>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	f04f 0400 	mov.w	r4, #0
 80041dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	ea03 0501 	and.w	r5, r3, r1
 80041e8:	ea04 0602 	and.w	r6, r4, r2
 80041ec:	4a3d      	ldr	r2, [pc, #244]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041ee:	fb02 f106 	mul.w	r1, r2, r6
 80041f2:	2200      	movs	r2, #0
 80041f4:	fb02 f205 	mul.w	r2, r2, r5
 80041f8:	440a      	add	r2, r1
 80041fa:	493a      	ldr	r1, [pc, #232]	; (80042e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80041fc:	fba5 0101 	umull	r0, r1, r5, r1
 8004200:	1853      	adds	r3, r2, r1
 8004202:	4619      	mov	r1, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f04f 0400 	mov.w	r4, #0
 800420a:	461a      	mov	r2, r3
 800420c:	4623      	mov	r3, r4
 800420e:	f7fb ffe7 	bl	80001e0 <__aeabi_uldivmod>
 8004212:	4603      	mov	r3, r0
 8004214:	460c      	mov	r4, r1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	e049      	b.n	80042ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800421a:	4b30      	ldr	r3, [pc, #192]	; (80042dc <HAL_RCC_GetSysClockFreq+0x158>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	f04f 0400 	mov.w	r4, #0
 8004224:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004228:	f04f 0200 	mov.w	r2, #0
 800422c:	ea03 0501 	and.w	r5, r3, r1
 8004230:	ea04 0602 	and.w	r6, r4, r2
 8004234:	4629      	mov	r1, r5
 8004236:	4632      	mov	r2, r6
 8004238:	f04f 0300 	mov.w	r3, #0
 800423c:	f04f 0400 	mov.w	r4, #0
 8004240:	0154      	lsls	r4, r2, #5
 8004242:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004246:	014b      	lsls	r3, r1, #5
 8004248:	4619      	mov	r1, r3
 800424a:	4622      	mov	r2, r4
 800424c:	1b49      	subs	r1, r1, r5
 800424e:	eb62 0206 	sbc.w	r2, r2, r6
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	f04f 0400 	mov.w	r4, #0
 800425a:	0194      	lsls	r4, r2, #6
 800425c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004260:	018b      	lsls	r3, r1, #6
 8004262:	1a5b      	subs	r3, r3, r1
 8004264:	eb64 0402 	sbc.w	r4, r4, r2
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	00e2      	lsls	r2, r4, #3
 8004272:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004276:	00d9      	lsls	r1, r3, #3
 8004278:	460b      	mov	r3, r1
 800427a:	4614      	mov	r4, r2
 800427c:	195b      	adds	r3, r3, r5
 800427e:	eb44 0406 	adc.w	r4, r4, r6
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	f04f 0200 	mov.w	r2, #0
 800428a:	02a2      	lsls	r2, r4, #10
 800428c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004290:	0299      	lsls	r1, r3, #10
 8004292:	460b      	mov	r3, r1
 8004294:	4614      	mov	r4, r2
 8004296:	4618      	mov	r0, r3
 8004298:	4621      	mov	r1, r4
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f04f 0400 	mov.w	r4, #0
 80042a0:	461a      	mov	r2, r3
 80042a2:	4623      	mov	r3, r4
 80042a4:	f7fb ff9c 	bl	80001e0 <__aeabi_uldivmod>
 80042a8:	4603      	mov	r3, r0
 80042aa:	460c      	mov	r4, r1
 80042ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042ae:	4b0b      	ldr	r3, [pc, #44]	; (80042dc <HAL_RCC_GetSysClockFreq+0x158>)
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	0c1b      	lsrs	r3, r3, #16
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	3301      	adds	r3, #1
 80042ba:	005b      	lsls	r3, r3, #1
 80042bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c6:	60bb      	str	r3, [r7, #8]
      break;
 80042c8:	e002      	b.n	80042d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042ca:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042cc:	60bb      	str	r3, [r7, #8]
      break;
 80042ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042d0:	68bb      	ldr	r3, [r7, #8]
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042da:	bf00      	nop
 80042dc:	40023800 	.word	0x40023800
 80042e0:	00f42400 	.word	0x00f42400
 80042e4:	017d7840 	.word	0x017d7840

080042e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <HAL_RCC_GetHCLKFreq+0x14>)
 80042ee:	681b      	ldr	r3, [r3, #0]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20000000 	.word	0x20000000

08004300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004304:	f7ff fff0 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8004308:	4601      	mov	r1, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0a9b      	lsrs	r3, r3, #10
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4a03      	ldr	r2, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004316:	5cd3      	ldrb	r3, [r2, r3]
 8004318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	0800d884 	.word	0x0800d884

08004328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800432c:	f7ff ffdc 	bl	80042e8 <HAL_RCC_GetHCLKFreq>
 8004330:	4601      	mov	r1, r0
 8004332:	4b05      	ldr	r3, [pc, #20]	; (8004348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	0b5b      	lsrs	r3, r3, #13
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4a03      	ldr	r2, [pc, #12]	; (800434c <HAL_RCC_GetPCLK2Freq+0x24>)
 800433e:	5cd3      	ldrb	r3, [r2, r3]
 8004340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004344:	4618      	mov	r0, r3
 8004346:	bd80      	pop	{r7, pc}
 8004348:	40023800 	.word	0x40023800
 800434c:	0800d884 	.word	0x0800d884

08004350 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
 8004358:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	220f      	movs	r2, #15
 800435e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004360:	4b12      	ldr	r3, [pc, #72]	; (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0203 	and.w	r2, r3, #3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800436c:	4b0f      	ldr	r3, [pc, #60]	; (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004384:	4b09      	ldr	r3, [pc, #36]	; (80043ac <HAL_RCC_GetClockConfig+0x5c>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	08db      	lsrs	r3, r3, #3
 800438a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004392:	4b07      	ldr	r3, [pc, #28]	; (80043b0 <HAL_RCC_GetClockConfig+0x60>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 020f 	and.w	r2, r3, #15
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	601a      	str	r2, [r3, #0]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40023800 	.word	0x40023800
 80043b0:	40023c00 	.word	0x40023c00

080043b4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d101      	bne.n	80043c6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e022      	b.n	800440c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7fd fd27 	bl	8001e2c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2203      	movs	r2, #3
 80043e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f814 	bl	8004414 <HAL_SD_InitCard>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00a      	b.n	800440c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004414:	b5b0      	push	{r4, r5, r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af04      	add	r7, sp, #16
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800441c:	2300      	movs	r3, #0
 800441e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004420:	2300      	movs	r3, #0
 8004422:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004428:	2300      	movs	r3, #0
 800442a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004430:	2376      	movs	r3, #118	; 0x76
 8004432:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681d      	ldr	r5, [r3, #0]
 8004438:	466c      	mov	r4, sp
 800443a:	f107 0314 	add.w	r3, r7, #20
 800443e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004442:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004446:	f107 0308 	add.w	r3, r7, #8
 800444a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800444c:	4628      	mov	r0, r5
 800444e:	f002 fbf7 	bl	8006c40 <SDIO_Init>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800445c:	2b00      	cmp	r3, #0
 800445e:	d001      	beq.n	8004464 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	e031      	b.n	80044c8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004464:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <HAL_SD_InitCard+0xbc>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4618      	mov	r0, r3
 8004470:	f002 fc2f 	bl	8006cd2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004474:	4b16      	ldr	r3, [pc, #88]	; (80044d0 <HAL_SD_InitCard+0xbc>)
 8004476:	2201      	movs	r2, #1
 8004478:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 ffdc 	bl	8005438 <SD_PowerON>
 8004480:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d00b      	beq.n	80044a0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	431a      	orrs	r2, r3
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e013      	b.n	80044c8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fefb 	bl	800529c <SD_InitCard>
 80044a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80044a8:	6a3b      	ldr	r3, [r7, #32]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00b      	beq.n	80044c6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3728      	adds	r7, #40	; 0x28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bdb0      	pop	{r4, r5, r7, pc}
 80044d0:	422580a0 	.word	0x422580a0

080044d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b08c      	sub	sp, #48	; 0x30
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d107      	bne.n	80044fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0c9      	b.n	8004690 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 80c2 	bne.w	800468e <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	441a      	add	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451a:	429a      	cmp	r2, r3
 800451c:	d907      	bls.n	800452e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004522:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e0b0      	b.n	8004690 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2203      	movs	r2, #3
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004556:	4a50      	ldr	r2, [pc, #320]	; (8004698 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455e:	4a4f      	ldr	r2, [pc, #316]	; (800469c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004560:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2200      	movs	r2, #0
 8004568:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3380      	adds	r3, #128	; 0x80
 8004574:	4619      	mov	r1, r3
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	025b      	lsls	r3, r3, #9
 800457c:	089b      	lsrs	r3, r3, #2
 800457e:	f7fe fdc1 	bl	8003104 <HAL_DMA_Start_IT>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d017      	beq.n	80045b8 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8004596:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a40      	ldr	r2, [pc, #256]	; (80046a0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e06b      	b.n	8004690 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80045b8:	4b3a      	ldr	r3, [pc, #232]	; (80046a4 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d002      	beq.n	80045cc <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	025b      	lsls	r3, r3, #9
 80045ca:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045d4:	4618      	mov	r0, r3
 80045d6:	f002 fc0f 	bl	8006df8 <SDMMC_CmdBlockLength>
 80045da:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00f      	beq.n	8004602 <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a2e      	ldr	r2, [pc, #184]	; (80046a0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2201      	movs	r2, #1
 80045fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e046      	b.n	8004690 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004602:	f04f 33ff 	mov.w	r3, #4294967295
 8004606:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	025b      	lsls	r3, r3, #9
 800460c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800460e:	2390      	movs	r3, #144	; 0x90
 8004610:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004612:	2302      	movs	r3, #2
 8004614:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004616:	2300      	movs	r3, #0
 8004618:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800461a:	2301      	movs	r3, #1
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f107 0210 	add.w	r2, r7, #16
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f002 fbb9 	bl	8006da0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d90a      	bls.n	800464a <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2282      	movs	r2, #130	; 0x82
 8004638:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004640:	4618      	mov	r0, r3
 8004642:	f002 fc1d 	bl	8006e80 <SDMMC_CmdReadMultiBlock>
 8004646:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004648:	e009      	b.n	800465e <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2281      	movs	r2, #129	; 0x81
 800464e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004656:	4618      	mov	r0, r3
 8004658:	f002 fbf0 	bl	8006e3c <SDMMC_CmdReadSingleBlock>
 800465c:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800465e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d012      	beq.n	800468a <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800466a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	431a      	orrs	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e002      	b.n	8004690 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e000      	b.n	8004690 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
  }
}
 8004690:	4618      	mov	r0, r3
 8004692:	3730      	adds	r7, #48	; 0x30
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	080050ab 	.word	0x080050ab
 800469c:	0800511d 	.word	0x0800511d
 80046a0:	004005ff 	.word	0x004005ff
 80046a4:	4225858c 	.word	0x4225858c

080046a8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	; 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d107      	bne.n	80046d0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0ce      	b.n	800486e <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b01      	cmp	r3, #1
 80046da:	f040 80c7 	bne.w	800486c <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	441a      	add	r2, r3
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d907      	bls.n	8004702 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0b5      	b.n	800486e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2203      	movs	r2, #3
 8004706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2200      	movs	r2, #0
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	6812      	ldr	r2, [r2, #0]
 800471c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004720:	f043 0302 	orr.w	r3, r3, #2
 8004724:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472a:	4a53      	ldr	r2, [pc, #332]	; (8004878 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800472c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004732:	4a52      	ldr	r2, [pc, #328]	; (800487c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8004734:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	2200      	movs	r2, #0
 800473c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	2b01      	cmp	r3, #1
 8004744:	d002      	beq.n	800474c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	025b      	lsls	r3, r3, #9
 800474a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004754:	4618      	mov	r0, r3
 8004756:	f002 fb4f 	bl	8006df8 <SDMMC_CmdBlockLength>
 800475a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00f      	beq.n	8004782 <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a46      	ldr	r2, [pc, #280]	; (8004880 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e075      	b.n	800486e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d90a      	bls.n	800479e <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	22a0      	movs	r2, #160	; 0xa0
 800478c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004794:	4618      	mov	r0, r3
 8004796:	f002 fbb7 	bl	8006f08 <SDMMC_CmdWriteMultiBlock>
 800479a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800479c:	e009      	b.n	80047b2 <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2290      	movs	r2, #144	; 0x90
 80047a2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047aa:	4618      	mov	r0, r3
 80047ac:	f002 fb8a 	bl	8006ec4 <SDMMC_CmdWriteSingleBlock>
 80047b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a30      	ldr	r2, [pc, #192]	; (8004880 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80047be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	431a      	orrs	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e047      	b.n	800486e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80047de:	4b29      	ldr	r3, [pc, #164]	; (8004884 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80047e0:	2201      	movs	r2, #1
 80047e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3380      	adds	r3, #128	; 0x80
 80047f0:	461a      	mov	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	025b      	lsls	r3, r3, #9
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	f7fe fc84 	bl	8003104 <HAL_DMA_Start_IT>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01c      	beq.n	800483c <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	6812      	ldr	r2, [r2, #0]
 800480c:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004810:	f023 0302 	bic.w	r3, r3, #2
 8004814:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a19      	ldr	r2, [pc, #100]	; (8004880 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800481c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e018      	b.n	800486e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800483c:	f04f 33ff 	mov.w	r3, #4294967295
 8004840:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	025b      	lsls	r3, r3, #9
 8004846:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004848:	2390      	movs	r3, #144	; 0x90
 800484a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800484c:	2300      	movs	r3, #0
 800484e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004850:	2300      	movs	r3, #0
 8004852:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004854:	2301      	movs	r3, #1
 8004856:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f107 0210 	add.w	r2, r7, #16
 8004860:	4611      	mov	r1, r2
 8004862:	4618      	mov	r0, r3
 8004864:	f002 fa9c 	bl	8006da0 <SDIO_ConfigData>

      return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e000      	b.n	800486e <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 800486c:	2302      	movs	r3, #2
  }
}
 800486e:	4618      	mov	r0, r3
 8004870:	3730      	adds	r7, #48	; 0x30
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	08005081 	.word	0x08005081
 800487c:	0800511d 	.word	0x0800511d
 8004880:	004005ff 	.word	0x004005ff
 8004884:	4225858c 	.word	0x4225858c

08004888 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_SD_IRQHandler+0x2e>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 ffd8 	bl	8005864 <SD_Read_IT>
 80048b4:	e165      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 808f 	beq.w	80049e4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80048de:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80048e2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d039      	beq.n	8004972 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d104      	bne.n	8004912 <HAL_SD_IRQHandler+0x8a>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d011      	beq.n	8004936 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f002 fb18 	bl	8006f4c <SDMMC_CmdStopTransfer>
 800491c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d008      	beq.n	8004936 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f92f 	bl	8004b94 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f240 523a 	movw	r2, #1338	; 0x53a
 800493e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_SD_IRQHandler+0xda>
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f002 ff76 	bl	8007854 <HAL_SD_RxCpltCallback>
 8004968:	e10b      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f002 ff68 	bl	8007840 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004970:	e107      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 8102 	beq.w	8004b82 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b00      	cmp	r3, #0
 8004986:	d011      	beq.n	80049ac <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4618      	mov	r0, r3
 800498e:	f002 fadd 	bl	8006f4c <SDMMC_CmdStopTransfer>
 8004992:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d008      	beq.n	80049ac <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f8f4 	bl	8004b94 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f040 80e5 	bne.w	8004b82 <HAL_SD_IRQHandler+0x2fa>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f040 80df 	bne.w	8004b82 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0208 	bic.w	r2, r2, #8
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f002 ff2f 	bl	8007840 <HAL_SD_TxCpltCallback>
}
 80049e2:	e0ce      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_SD_IRQHandler+0x17c>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0308 	and.w	r3, r3, #8
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 ff82 	bl	8005906 <SD_Write_IT>
 8004a02:	e0be      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a0a:	f240 233a 	movw	r3, #570	; 0x23a
 8004a0e:	4013      	ands	r3, r2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f000 80b6 	beq.w	8004b82 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	f043 0202 	orr.w	r2, r3, #2
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	f043 0208 	orr.w	r2, r3, #8
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d005      	beq.n	8004a64 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5c:	f043 0220 	orr.w	r2, r3, #32
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f043 0210 	orr.w	r2, r3, #16
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	f043 0208 	orr.w	r2, r3, #8
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f240 723a 	movw	r2, #1850	; 0x73a
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004ab0:	f023 0302 	bic.w	r3, r3, #2
 8004ab4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 fa46 	bl	8006f4c <SDMMC_CmdStopTransfer>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f855 	bl	8004b94 <HAL_SD_ErrorCallback>
}
 8004aea:	e04a      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d045      	beq.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0310 	and.w	r3, r3, #16
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <HAL_SD_IRQHandler+0x282>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d011      	beq.n	8004b2e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0e:	4a1f      	ldr	r2, [pc, #124]	; (8004b8c <HAL_SD_IRQHandler+0x304>)
 8004b10:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fb4c 	bl	80031b4 <HAL_DMA_Abort_IT>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d02f      	beq.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb4a 	bl	80051c0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004b2c:	e029      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d104      	bne.n	8004b42 <HAL_SD_IRQHandler+0x2ba>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d011      	beq.n	8004b66 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a12      	ldr	r2, [pc, #72]	; (8004b90 <HAL_SD_IRQHandler+0x308>)
 8004b48:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fb30 	bl	80031b4 <HAL_DMA_Abort_IT>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d013      	beq.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fb65 	bl	800522e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004b64:	e00d      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f002 fe56 	bl	800782c <HAL_SD_AbortCallback>
}
 8004b80:	e7ff      	b.n	8004b82 <HAL_SD_IRQHandler+0x2fa>
 8004b82:	bf00      	nop
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	080051c1 	.word	0x080051c1
 8004b90:	0800522f 	.word	0x0800522f

08004b94 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb6:	0f9b      	lsrs	r3, r3, #30
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bc2:	0e9b      	lsrs	r3, r3, #26
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f003 030f 	and.w	r3, r3, #15
 8004bca:	b2da      	uxtb	r2, r3
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd4:	0e1b      	lsrs	r3, r3, #24
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	b2da      	uxtb	r2, r3
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be6:	0c1b      	lsrs	r3, r3, #16
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c08:	0d1b      	lsrs	r3, r3, #20
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c14:	0c1b      	lsrs	r3, r3, #16
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	f003 030f 	and.w	r3, r3, #15
 8004c1c:	b2da      	uxtb	r2, r3
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c26:	0bdb      	lsrs	r3, r3, #15
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	b2da      	uxtb	r2, r3
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c38:	0b9b      	lsrs	r3, r3, #14
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c4a:	0b5b      	lsrs	r3, r3, #13
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	b2da      	uxtb	r2, r3
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c5c:	0b1b      	lsrs	r3, r3, #12
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d163      	bne.n	8004d40 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c7c:	009a      	lsls	r2, r3, #2
 8004c7e:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c82:	4013      	ands	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c88:	0f92      	lsrs	r2, r2, #30
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c94:	0edb      	lsrs	r3, r3, #27
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	b2da      	uxtb	r2, r3
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca6:	0e1b      	lsrs	r3, r3, #24
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb8:	0d5b      	lsrs	r3, r3, #21
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cca:	0c9b      	lsrs	r3, r3, #18
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cdc:	0bdb      	lsrs	r3, r3, #15
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	f003 0307 	and.w	r3, r3, #7
 8004ce4:	b2da      	uxtb	r2, r3
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	7e1b      	ldrb	r3, [r3, #24]
 8004cf8:	b2db      	uxtb	r3, r3
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	3302      	adds	r3, #2
 8004d00:	2201      	movs	r2, #1
 8004d02:	fa02 f303 	lsl.w	r3, r2, r3
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004d0a:	fb02 f203 	mul.w	r2, r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	7a1b      	ldrb	r3, [r3, #8]
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	f003 030f 	and.w	r3, r3, #15
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d2c:	0a52      	lsrs	r2, r2, #9
 8004d2e:	fb02 f203 	mul.w	r2, r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d3c:	661a      	str	r2, [r3, #96]	; 0x60
 8004d3e:	e031      	b.n	8004da4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d11d      	bne.n	8004d84 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d4c:	041b      	lsls	r3, r3, #16
 8004d4e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d56:	0c1b      	lsrs	r3, r3, #16
 8004d58:	431a      	orrs	r2, r3
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	3301      	adds	r3, #1
 8004d64:	029a      	lsls	r2, r3, #10
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d78:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	661a      	str	r2, [r3, #96]	; 0x60
 8004d82:	e00f      	b.n	8004da4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a58      	ldr	r2, [pc, #352]	; (8004eec <HAL_SD_GetCardCSD+0x344>)
 8004d8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e09d      	b.n	8004ee0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da8:	0b9b      	lsrs	r3, r3, #14
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dba:	09db      	lsrs	r3, r3, #7
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dc2:	b2da      	uxtb	r2, r3
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	0fdb      	lsrs	r3, r3, #31
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	0f5b      	lsrs	r3, r3, #29
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	b2da      	uxtb	r2, r3
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	0e9b      	lsrs	r3, r3, #26
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	b2da      	uxtb	r2, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0c:	0d9b      	lsrs	r3, r3, #22
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f003 030f 	and.w	r3, r3, #15
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1e:	0d5b      	lsrs	r3, r3, #21
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0301 	and.w	r3, r3, #1
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	0c1b      	lsrs	r3, r3, #16
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	0bdb      	lsrs	r3, r3, #15
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	0b9b      	lsrs	r3, r3, #14
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	0b5b      	lsrs	r3, r3, #13
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	0b1b      	lsrs	r3, r3, #12
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	0a9b      	lsrs	r3, r3, #10
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	b2da      	uxtb	r2, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ec6:	085b      	lsrs	r3, r3, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ece:	b2da      	uxtb	r2, r3
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	370c      	adds	r7, #12
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	004005ff 	.word	0x004005ff

08004ef0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004f48:	b5b0      	push	{r4, r5, r7, lr}
 8004f4a:	b08e      	sub	sp, #56	; 0x38
 8004f4c:	af04      	add	r7, sp, #16
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2203      	movs	r2, #3
 8004f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5e:	2b03      	cmp	r3, #3
 8004f60:	d02e      	beq.n	8004fc0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f68:	d106      	bne.n	8004f78 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	639a      	str	r2, [r3, #56]	; 0x38
 8004f76:	e029      	b.n	8004fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7e:	d10a      	bne.n	8004f96 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fb0f 	bl	80055a4 <SD_WideBus_Enable>
 8004f86:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
 8004f94:	e01a      	b.n	8004fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d10a      	bne.n	8004fb2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 fb4c 	bl	800563a <SD_WideBus_Disable>
 8004fa2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	639a      	str	r2, [r3, #56]	; 0x38
 8004fb0:	e00c      	b.n	8004fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	639a      	str	r2, [r3, #56]	; 0x38
 8004fbe:	e005      	b.n	8004fcc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a18      	ldr	r2, [pc, #96]	; (800503c <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e024      	b.n	8005032 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681d      	ldr	r5, [r3, #0]
 800500e:	466c      	mov	r4, sp
 8005010:	f107 0318 	add.w	r3, r7, #24
 8005014:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005022:	4628      	mov	r0, r5
 8005024:	f001 fe0c 	bl	8006c40 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3728      	adds	r7, #40	; 0x28
 8005036:	46bd      	mov	sp, r7
 8005038:	bdb0      	pop	{r4, r5, r7, pc}
 800503a:	bf00      	nop
 800503c:	004005ff 	.word	0x004005ff

08005040 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800504c:	f107 030c 	add.w	r3, r7, #12
 8005050:	4619      	mov	r1, r3
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa7e 	bl	8005554 <SD_SendStatus>
 8005058:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	0a5b      	lsrs	r3, r3, #9
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005076:	693b      	ldr	r3, [r7, #16]
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800509c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050bc:	2b82      	cmp	r3, #130	; 0x82
 80050be:	d111      	bne.n	80050e4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 ff41 	bl	8006f4c <SDMMC_CmdStopTransfer>
 80050ca:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d008      	beq.n	80050e4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	431a      	orrs	r2, r3
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80050de:	68f8      	ldr	r0, [r7, #12]
 80050e0:	f7ff fd58 	bl	8004b94 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0208 	bic.w	r2, r2, #8
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f240 523a 	movw	r2, #1338	; 0x53a
 80050fc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f002 fba1 	bl	8007854 <HAL_SD_RxCpltCallback>
#endif
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b086      	sub	sp, #24
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7fe f9ee 	bl	800350c <HAL_DMA_GetError>
 8005130:	4603      	mov	r3, r0
 8005132:	2b02      	cmp	r3, #2
 8005134:	d03e      	beq.n	80051b4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800513c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005144:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d002      	beq.n	8005152 <SD_DMAError+0x36>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d12d      	bne.n	80051ae <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a19      	ldr	r2, [pc, #100]	; (80051bc <SD_DMAError+0xa0>)
 8005158:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005176:	6978      	ldr	r0, [r7, #20]
 8005178:	f7ff ff62 	bl	8005040 <HAL_SD_GetCardState>
 800517c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b06      	cmp	r3, #6
 8005182:	d002      	beq.n	800518a <SD_DMAError+0x6e>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b05      	cmp	r3, #5
 8005188:	d10a      	bne.n	80051a0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4618      	mov	r0, r3
 8005190:	f001 fedc 	bl	8006f4c <SDMMC_CmdStopTransfer>
 8005194:	4602      	mov	r2, r0
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519a:	431a      	orrs	r2, r3
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80051ae:	6978      	ldr	r0, [r7, #20]
 80051b0:	f7ff fcf0 	bl	8004b94 <HAL_SD_ErrorCallback>
#endif
  }
}
 80051b4:	bf00      	nop
 80051b6:	3718      	adds	r7, #24
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	004005ff 	.word	0x004005ff

080051c0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051cc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80051d8:	68f8      	ldr	r0, [r7, #12]
 80051da:	f7ff ff31 	bl	8005040 <HAL_SD_GetCardState>
 80051de:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2b06      	cmp	r3, #6
 80051f2:	d002      	beq.n	80051fa <SD_DMATxAbort+0x3a>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b05      	cmp	r3, #5
 80051f8:	d10a      	bne.n	8005210 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f001 fea4 	bl	8006f4c <SDMMC_CmdStopTransfer>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	431a      	orrs	r2, r3
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005214:	2b00      	cmp	r3, #0
 8005216:	d103      	bne.n	8005220 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f002 fb07 	bl	800782c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800521e:	e002      	b.n	8005226 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f7ff fcb7 	bl	8004b94 <HAL_SD_ErrorCallback>
}
 8005226:	bf00      	nop
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b084      	sub	sp, #16
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800523a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f240 523a 	movw	r2, #1338	; 0x53a
 8005244:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8005246:	68f8      	ldr	r0, [r7, #12]
 8005248:	f7ff fefa 	bl	8005040 <HAL_SD_GetCardState>
 800524c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b06      	cmp	r3, #6
 8005260:	d002      	beq.n	8005268 <SD_DMARxAbort+0x3a>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b05      	cmp	r3, #5
 8005266:	d10a      	bne.n	800527e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fe6d 	bl	8006f4c <SDMMC_CmdStopTransfer>
 8005272:	4602      	mov	r2, r0
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f002 fad0 	bl	800782c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800528c:	e002      	b.n	8005294 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	f7ff fc80 	bl	8004b94 <HAL_SD_ErrorCallback>
}
 8005294:	bf00      	nop
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800529c:	b5b0      	push	{r4, r5, r7, lr}
 800529e:	b094      	sub	sp, #80	; 0x50
 80052a0:	af04      	add	r7, sp, #16
 80052a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80052a4:	2301      	movs	r3, #1
 80052a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 fd1f 	bl	8006cf0 <SDIO_GetPowerState>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80052b8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80052bc:	e0b7      	b.n	800542e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d02f      	beq.n	8005326 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f001 ff48 	bl	8007160 <SDMMC_CmdSendCID>
 80052d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <SD_InitCard+0x40>
    {
      return errorstate;
 80052d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052da:	e0a8      	b.n	800542e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2100      	movs	r1, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 fd49 	bl	8006d7a <SDIO_GetResponse>
 80052e8:	4602      	mov	r2, r0
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2104      	movs	r1, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f001 fd40 	bl	8006d7a <SDIO_GetResponse>
 80052fa:	4602      	mov	r2, r0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2108      	movs	r1, #8
 8005306:	4618      	mov	r0, r3
 8005308:	f001 fd37 	bl	8006d7a <SDIO_GetResponse>
 800530c:	4602      	mov	r2, r0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	210c      	movs	r1, #12
 8005318:	4618      	mov	r0, r3
 800531a:	f001 fd2e 	bl	8006d7a <SDIO_GetResponse>
 800531e:	4602      	mov	r2, r0
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532a:	2b03      	cmp	r3, #3
 800532c:	d00d      	beq.n	800534a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f107 020e 	add.w	r2, r7, #14
 8005336:	4611      	mov	r1, r2
 8005338:	4618      	mov	r0, r3
 800533a:	f001 ff4e 	bl	80071da <SDMMC_CmdSetRelAdd>
 800533e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <SD_InitCard+0xae>
    {
      return errorstate;
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	e071      	b.n	800542e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	2b03      	cmp	r3, #3
 8005350:	d036      	beq.n	80053c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005352:	89fb      	ldrh	r3, [r7, #14]
 8005354:	461a      	mov	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005362:	041b      	lsls	r3, r3, #16
 8005364:	4619      	mov	r1, r3
 8005366:	4610      	mov	r0, r2
 8005368:	f001 ff18 	bl	800719c <SDMMC_CmdSendCSD>
 800536c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005376:	e05a      	b.n	800542e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2100      	movs	r1, #0
 800537e:	4618      	mov	r0, r3
 8005380:	f001 fcfb 	bl	8006d7a <SDIO_GetResponse>
 8005384:	4602      	mov	r2, r0
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2104      	movs	r1, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f001 fcf2 	bl	8006d7a <SDIO_GetResponse>
 8005396:	4602      	mov	r2, r0
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2108      	movs	r1, #8
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 fce9 	bl	8006d7a <SDIO_GetResponse>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	210c      	movs	r1, #12
 80053b4:	4618      	mov	r0, r3
 80053b6:	f001 fce0 	bl	8006d7a <SDIO_GetResponse>
 80053ba:	4602      	mov	r2, r0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2104      	movs	r1, #4
 80053c6:	4618      	mov	r0, r3
 80053c8:	f001 fcd7 	bl	8006d7a <SDIO_GetResponse>
 80053cc:	4603      	mov	r3, r0
 80053ce:	0d1a      	lsrs	r2, r3, #20
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053d4:	f107 0310 	add.w	r3, r7, #16
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fbe4 	bl	8004ba8 <HAL_SD_GetCardCSD>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053ea:	e020      	b.n	800542e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f4:	041b      	lsls	r3, r3, #16
 80053f6:	f04f 0400 	mov.w	r4, #0
 80053fa:	461a      	mov	r2, r3
 80053fc:	4623      	mov	r3, r4
 80053fe:	4608      	mov	r0, r1
 8005400:	f001 fdc6 	bl	8006f90 <SDMMC_CmdSelDesel>
 8005404:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <SD_InitCard+0x174>
  {
    return errorstate;
 800540c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800540e:	e00e      	b.n	800542e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681d      	ldr	r5, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	466c      	mov	r4, sp
 8005418:	f103 0210 	add.w	r2, r3, #16
 800541c:	ca07      	ldmia	r2, {r0, r1, r2}
 800541e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005422:	3304      	adds	r3, #4
 8005424:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005426:	4628      	mov	r0, r5
 8005428:	f001 fc0a 	bl	8006c40 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3740      	adds	r7, #64	; 0x40
 8005432:	46bd      	mov	sp, r7
 8005434:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005438 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f001 fdc0 	bl	8006fd6 <SDMMC_CmdGoIdleState>
 8005456:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <SD_PowerON+0x2a>
  {
    return errorstate;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	e072      	b.n	8005548 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f001 fdd3 	bl	8007012 <SDMMC_CmdOperCond>
 800546c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00d      	beq.n	8005490 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2200      	movs	r2, #0
 8005478:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f001 fda9 	bl	8006fd6 <SDMMC_CmdGoIdleState>
 8005484:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <SD_PowerON+0x5e>
    {
      return errorstate;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	e05b      	b.n	8005548 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549a:	2b01      	cmp	r3, #1
 800549c:	d137      	bne.n	800550e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2100      	movs	r1, #0
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 fdd3 	bl	8007050 <SDMMC_CmdAppCommand>
 80054aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d02d      	beq.n	800550e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054b6:	e047      	b.n	8005548 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fdc6 	bl	8007050 <SDMMC_CmdAppCommand>
 80054c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	e03b      	b.n	8005548 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	491e      	ldr	r1, [pc, #120]	; (8005550 <SD_PowerON+0x118>)
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 fddc 	bl	8007094 <SDMMC_CmdAppOperCommand>
 80054dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054e8:	e02e      	b.n	8005548 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2100      	movs	r1, #0
 80054f0:	4618      	mov	r0, r3
 80054f2:	f001 fc42 	bl	8006d7a <SDIO_GetResponse>
 80054f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	0fdb      	lsrs	r3, r3, #31
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d101      	bne.n	8005504 <SD_PowerON+0xcc>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <SD_PowerON+0xce>
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]

    count++;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	3301      	adds	r3, #1
 800550c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005514:	4293      	cmp	r3, r2
 8005516:	d802      	bhi.n	800551e <SD_PowerON+0xe6>
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d0cc      	beq.n	80054b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005524:	4293      	cmp	r3, r2
 8005526:	d902      	bls.n	800552e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005528:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800552c:	e00c      	b.n	8005548 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005534:	2b00      	cmp	r3, #0
 8005536:	d003      	beq.n	8005540 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	645a      	str	r2, [r3, #68]	; 0x44
 800553e:	e002      	b.n	8005546 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3718      	adds	r7, #24
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	c1100000 	.word	0xc1100000

08005554 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005564:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005568:	e018      	b.n	800559c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681a      	ldr	r2, [r3, #0]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	4619      	mov	r1, r3
 8005576:	4610      	mov	r0, r2
 8005578:	f001 fe50 	bl	800721c <SDMMC_CmdSendStatus>
 800557c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	e009      	b.n	800559c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2100      	movs	r1, #0
 800558e:	4618      	mov	r0, r3
 8005590:	f001 fbf3 	bl	8006d7a <SDIO_GetResponse>
 8005594:	4602      	mov	r2, r0
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80055ac:	2300      	movs	r3, #0
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2100      	movs	r1, #0
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 fbdd 	bl	8006d7a <SDIO_GetResponse>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ca:	d102      	bne.n	80055d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055d0:	e02f      	b.n	8005632 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80055d2:	f107 030c 	add.w	r3, r7, #12
 80055d6:	4619      	mov	r1, r3
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f879 	bl	80056d0 <SD_FindSCR>
 80055de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	e023      	b.n	8005632 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d01c      	beq.n	800562e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	4619      	mov	r1, r3
 8005600:	4610      	mov	r0, r2
 8005602:	f001 fd25 	bl	8007050 <SDMMC_CmdAppCommand>
 8005606:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	e00f      	b.n	8005632 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2102      	movs	r1, #2
 8005618:	4618      	mov	r0, r3
 800561a:	f001 fd5e 	bl	80070da <SDMMC_CmdBusWidth>
 800561e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d001      	beq.n	800562a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	e003      	b.n	8005632 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800562a:	2300      	movs	r3, #0
 800562c:	e001      	b.n	8005632 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800562e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b086      	sub	sp, #24
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f001 fb92 	bl	8006d7a <SDIO_GetResponse>
 8005656:	4603      	mov	r3, r0
 8005658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005660:	d102      	bne.n	8005668 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005662:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005666:	e02f      	b.n	80056c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005668:	f107 030c 	add.w	r3, r7, #12
 800566c:	4619      	mov	r1, r3
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f82e 	bl	80056d0 <SD_FindSCR>
 8005674:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	e023      	b.n	80056c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01c      	beq.n	80056c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005692:	041b      	lsls	r3, r3, #16
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f001 fcda 	bl	8007050 <SDMMC_CmdAppCommand>
 800569c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d001      	beq.n	80056a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	e00f      	b.n	80056c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fd13 	bl	80070da <SDMMC_CmdBusWidth>
 80056b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	e003      	b.n	80056c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80056c0:	2300      	movs	r3, #0
 80056c2:	e001      	b.n	80056c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80056c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80056d0:	b590      	push	{r4, r7, lr}
 80056d2:	b08f      	sub	sp, #60	; 0x3c
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056da:	f7fc ff13 	bl	8002504 <HAL_GetTick>
 80056de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80056e4:	2300      	movs	r3, #0
 80056e6:	60bb      	str	r3, [r7, #8]
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2108      	movs	r1, #8
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 fb7e 	bl	8006df8 <SDMMC_CmdBlockLength>
 80056fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <SD_FindSCR+0x38>
  {
    return errorstate;
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	e0a9      	b.n	800585c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005710:	041b      	lsls	r3, r3, #16
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f001 fc9b 	bl	8007050 <SDMMC_CmdAppCommand>
 800571a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800571c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <SD_FindSCR+0x56>
  {
    return errorstate;
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	e09a      	b.n	800585c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005726:	f04f 33ff 	mov.w	r3, #4294967295
 800572a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800572c:	2308      	movs	r3, #8
 800572e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005730:	2330      	movs	r3, #48	; 0x30
 8005732:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005734:	2302      	movs	r3, #2
 8005736:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005738:	2300      	movs	r3, #0
 800573a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800573c:	2301      	movs	r3, #1
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f107 0210 	add.w	r2, r7, #16
 8005748:	4611      	mov	r1, r2
 800574a:	4618      	mov	r0, r3
 800574c:	f001 fb28 	bl	8006da0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4618      	mov	r0, r3
 8005756:	f001 fce2 	bl	800711e <SDMMC_CmdSendSCR>
 800575a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	2b00      	cmp	r3, #0
 8005760:	d022      	beq.n	80057a8 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	e07a      	b.n	800585c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800576c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00e      	beq.n	8005792 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6819      	ldr	r1, [r3, #0]
 8005778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	f107 0208 	add.w	r2, r7, #8
 8005780:	18d4      	adds	r4, r2, r3
 8005782:	4608      	mov	r0, r1
 8005784:	f001 fa87 	bl	8006c96 <SDIO_ReadFIFO>
 8005788:	4603      	mov	r3, r0
 800578a:	6023      	str	r3, [r4, #0]
      index++;
 800578c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578e:	3301      	adds	r3, #1
 8005790:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005792:	f7fc feb7 	bl	8002504 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a0:	d102      	bne.n	80057a8 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80057a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057a6:	e059      	b.n	800585c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057ae:	f240 432a 	movw	r3, #1066	; 0x42a
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d0d6      	beq.n	8005766 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057be:	f003 0308 	and.w	r3, r3, #8
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d005      	beq.n	80057d2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2208      	movs	r2, #8
 80057cc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80057ce:	2308      	movs	r3, #8
 80057d0:	e044      	b.n	800585c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d005      	beq.n	80057ec <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2202      	movs	r2, #2
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80057e8:	2302      	movs	r3, #2
 80057ea:	e037      	b.n	800585c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d005      	beq.n	8005806 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2220      	movs	r2, #32
 8005800:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8005802:	2320      	movs	r3, #32
 8005804:	e02a      	b.n	800585c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f240 523a 	movw	r2, #1338	; 0x53a
 800580e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	061a      	lsls	r2, r3, #24
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800581c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005826:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	0e1b      	lsrs	r3, r3, #24
 800582c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	601a      	str	r2, [r3, #0]
    scr++;
 8005832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005834:	3304      	adds	r3, #4
 8005836:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	061a      	lsls	r2, r3, #24
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005844:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	0a1b      	lsrs	r3, r3, #8
 800584a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800584e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	0e1b      	lsrs	r3, r3, #24
 8005854:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	373c      	adds	r7, #60	; 0x3c
 8005860:	46bd      	mov	sp, r7
 8005862:	bd90      	pop	{r4, r7, pc}

08005864 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005876:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d03f      	beq.n	80058fe <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]
 8005882:	e033      	b.n	80058ec <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4618      	mov	r0, r3
 800588a:	f001 fa04 	bl	8006c96 <SDIO_ReadFIFO>
 800588e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	b2da      	uxtb	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	3301      	adds	r3, #1
 800589c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	3b01      	subs	r3, #1
 80058a2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	0a1b      	lsrs	r3, r3, #8
 80058a8:	b2da      	uxtb	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	701a      	strb	r2, [r3, #0]
      tmp++;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3301      	adds	r3, #1
 80058b2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	0c1b      	lsrs	r3, r3, #16
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	3301      	adds	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	0e1b      	lsrs	r3, r3, #24
 80058d4:	b2da      	uxtb	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	3301      	adds	r3, #1
 80058de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	3b01      	subs	r3, #1
 80058e4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	3301      	adds	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b07      	cmp	r3, #7
 80058f0:	d9c8      	bls.n	8005884 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b086      	sub	sp, #24
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005918:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d043      	beq.n	80059a8 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	e037      	b.n	8005996 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3301      	adds	r3, #1
 8005930:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3b01      	subs	r3, #1
 8005936:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	021a      	lsls	r2, r3, #8
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4313      	orrs	r3, r2
 8005942:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	3301      	adds	r3, #1
 8005948:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	3b01      	subs	r3, #1
 800594e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	041a      	lsls	r2, r3, #16
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	4313      	orrs	r3, r2
 800595a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3b01      	subs	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	061a      	lsls	r2, r3, #24
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	3b01      	subs	r3, #1
 800597e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f107 0208 	add.w	r2, r7, #8
 8005988:	4611      	mov	r1, r2
 800598a:	4618      	mov	r0, r3
 800598c:	f001 f990 	bl	8006cb0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	3301      	adds	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2b07      	cmp	r3, #7
 800599a:	d9c4      	bls.n	8005926 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80059a8:	bf00      	nop
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d101      	bne.n	80059c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e056      	b.n	8005a70 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7fc fb15 	bl	800200c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2202      	movs	r2, #2
 80059e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	69db      	ldr	r3, [r3, #28]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	ea42 0103 	orr.w	r1, r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	699b      	ldr	r3, [r3, #24]
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	f003 0104 	and.w	r1, r3, #4
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69da      	ldr	r2, [r3, #28]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a5e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e01d      	b.n	8005ac6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f815 	bl	8005ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	f000 f968 	bl	8005d8c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ad6:	bf00      	nop
 8005ad8:	370c      	adds	r7, #12
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0201 	orr.w	r2, r2, #1
 8005af8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b06      	cmp	r3, #6
 8005b0a:	d007      	beq.n	8005b1c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	d122      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d11b      	bne.n	8005b86 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0202 	mvn.w	r2, #2
 8005b56:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f003 0303 	and.w	r3, r3, #3
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f8ee 	bl	8005d4e <HAL_TIM_IC_CaptureCallback>
 8005b72:	e005      	b.n	8005b80 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f8e0 	bl	8005d3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f8f1 	bl	8005d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d122      	bne.n	8005bda <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d11b      	bne.n	8005bda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f06f 0204 	mvn.w	r2, #4
 8005baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d003      	beq.n	8005bc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 f8c4 	bl	8005d4e <HAL_TIM_IC_CaptureCallback>
 8005bc6:	e005      	b.n	8005bd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f8b6 	bl	8005d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 f8c7 	bl	8005d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d122      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b08      	cmp	r3, #8
 8005bf4:	d11b      	bne.n	8005c2e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0208 	mvn.w	r2, #8
 8005bfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2204      	movs	r2, #4
 8005c04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69db      	ldr	r3, [r3, #28]
 8005c0c:	f003 0303 	and.w	r3, r3, #3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f89a 	bl	8005d4e <HAL_TIM_IC_CaptureCallback>
 8005c1a:	e005      	b.n	8005c28 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f88c 	bl	8005d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f89d 	bl	8005d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	2b10      	cmp	r3, #16
 8005c3a:	d122      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0310 	and.w	r3, r3, #16
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d11b      	bne.n	8005c82 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f06f 0210 	mvn.w	r2, #16
 8005c52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2208      	movs	r2, #8
 8005c58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f870 	bl	8005d4e <HAL_TIM_IC_CaptureCallback>
 8005c6e:	e005      	b.n	8005c7c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f862 	bl	8005d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f873 	bl	8005d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d10e      	bne.n	8005cae <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	f003 0301 	and.w	r3, r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f06f 0201 	mvn.w	r2, #1
 8005ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f7fb ff89 	bl	8001bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cb8:	2b80      	cmp	r3, #128	; 0x80
 8005cba:	d10e      	bne.n	8005cda <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f903 	bl	8005ee0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d10e      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	d107      	bne.n	8005d06 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f000 f838 	bl	8005d76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d10e      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0320 	and.w	r3, r3, #32
 8005d1e:	2b20      	cmp	r3, #32
 8005d20:	d107      	bne.n	8005d32 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f06f 0220 	mvn.w	r2, #32
 8005d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 f8cd 	bl	8005ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d32:	bf00      	nop
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr

08005d76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d7e:	bf00      	nop
 8005d80:	370c      	adds	r7, #12
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
	...

08005d8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a40      	ldr	r2, [pc, #256]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005daa:	d00f      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a3d      	ldr	r2, [pc, #244]	; (8005ea4 <TIM_Base_SetConfig+0x118>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d00b      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4a3c      	ldr	r2, [pc, #240]	; (8005ea8 <TIM_Base_SetConfig+0x11c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d007      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a3b      	ldr	r2, [pc, #236]	; (8005eac <TIM_Base_SetConfig+0x120>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a3a      	ldr	r2, [pc, #232]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d108      	bne.n	8005dde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d02b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dec:	d027      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a2c      	ldr	r2, [pc, #176]	; (8005ea4 <TIM_Base_SetConfig+0x118>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d023      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a2b      	ldr	r2, [pc, #172]	; (8005ea8 <TIM_Base_SetConfig+0x11c>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01f      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a2a      	ldr	r2, [pc, #168]	; (8005eac <TIM_Base_SetConfig+0x120>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d01b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a29      	ldr	r2, [pc, #164]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d017      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a28      	ldr	r2, [pc, #160]	; (8005eb4 <TIM_Base_SetConfig+0x128>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d013      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <TIM_Base_SetConfig+0x12c>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00f      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a26      	ldr	r2, [pc, #152]	; (8005ebc <TIM_Base_SetConfig+0x130>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d00b      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a25      	ldr	r2, [pc, #148]	; (8005ec0 <TIM_Base_SetConfig+0x134>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d007      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a24      	ldr	r2, [pc, #144]	; (8005ec4 <TIM_Base_SetConfig+0x138>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d003      	beq.n	8005e3e <TIM_Base_SetConfig+0xb2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a23      	ldr	r2, [pc, #140]	; (8005ec8 <TIM_Base_SetConfig+0x13c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d108      	bne.n	8005e50 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	689a      	ldr	r2, [r3, #8]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <TIM_Base_SetConfig+0x114>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d003      	beq.n	8005e84 <TIM_Base_SetConfig+0xf8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a0c      	ldr	r2, [pc, #48]	; (8005eb0 <TIM_Base_SetConfig+0x124>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d103      	bne.n	8005e8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	615a      	str	r2, [r3, #20]
}
 8005e92:	bf00      	nop
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	40010000 	.word	0x40010000
 8005ea4:	40000400 	.word	0x40000400
 8005ea8:	40000800 	.word	0x40000800
 8005eac:	40000c00 	.word	0x40000c00
 8005eb0:	40010400 	.word	0x40010400
 8005eb4:	40014000 	.word	0x40014000
 8005eb8:	40014400 	.word	0x40014400
 8005ebc:	40014800 	.word	0x40014800
 8005ec0:	40001800 	.word	0x40001800
 8005ec4:	40001c00 	.word	0x40001c00
 8005ec8:	40002000 	.word	0x40002000

08005ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d101      	bne.n	8005f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e03f      	b.n	8005f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7fc f8be 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2224      	movs	r2, #36	; 0x24
 8005f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68da      	ldr	r2, [r3, #12]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f000 fb05 	bl	8006548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68da      	ldr	r2, [r3, #12]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b088      	sub	sp, #32
 8005f92:	af02      	add	r7, sp, #8
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	603b      	str	r3, [r7, #0]
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	f040 8083 	bne.w	80060b6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <HAL_UART_Transmit+0x2e>
 8005fb6:	88fb      	ldrh	r3, [r7, #6]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e07b      	b.n	80060b8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_UART_Transmit+0x40>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e074      	b.n	80060b8 <HAL_UART_Transmit+0x12a>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2221      	movs	r2, #33	; 0x21
 8005fe0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005fe4:	f7fc fa8e 	bl	8002504 <HAL_GetTick>
 8005fe8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	88fa      	ldrh	r2, [r7, #6]
 8005fee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005ffe:	e042      	b.n	8006086 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006016:	d122      	bne.n	800605e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	2180      	movs	r1, #128	; 0x80
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 fa12 	bl	800644c <UART_WaitOnFlagUntilTimeout>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	e042      	b.n	80060b8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006044:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d103      	bne.n	8006056 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	3302      	adds	r3, #2
 8006052:	60bb      	str	r3, [r7, #8]
 8006054:	e017      	b.n	8006086 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	3301      	adds	r3, #1
 800605a:	60bb      	str	r3, [r7, #8]
 800605c:	e013      	b.n	8006086 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	9300      	str	r3, [sp, #0]
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2200      	movs	r2, #0
 8006066:	2180      	movs	r1, #128	; 0x80
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f000 f9ef 	bl	800644c <UART_WaitOnFlagUntilTimeout>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e01f      	b.n	80060b8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	60ba      	str	r2, [r7, #8]
 800607e:	781a      	ldrb	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800608a:	b29b      	uxth	r3, r3
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1b7      	bne.n	8006000 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	2200      	movs	r2, #0
 8006098:	2140      	movs	r1, #64	; 0x40
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 f9d6 	bl	800644c <UART_WaitOnFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d001      	beq.n	80060aa <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e006      	b.n	80060b8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2220      	movs	r2, #32
 80060ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	e000      	b.n	80060b8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80060b6:	2302      	movs	r3, #2
  }
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3718      	adds	r7, #24
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b20      	cmp	r3, #32
 80060de:	f040 8090 	bne.w	8006202 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d002      	beq.n	80060ee <HAL_UART_Receive+0x2e>
 80060e8:	88fb      	ldrh	r3, [r7, #6]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d101      	bne.n	80060f2 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80060ee:	2301      	movs	r3, #1
 80060f0:	e088      	b.n	8006204 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_UART_Receive+0x40>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e081      	b.n	8006204 <HAL_UART_Receive+0x144>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2222      	movs	r2, #34	; 0x22
 8006112:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006116:	f7fc f9f5 	bl	8002504 <HAL_GetTick>
 800611a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	88fa      	ldrh	r2, [r7, #6]
 8006120:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	88fa      	ldrh	r2, [r7, #6]
 8006126:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006130:	e05c      	b.n	80061ec <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006136:	b29b      	uxth	r3, r3
 8006138:	3b01      	subs	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006148:	d12b      	bne.n	80061a2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	9300      	str	r3, [sp, #0]
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	2200      	movs	r2, #0
 8006152:	2120      	movs	r1, #32
 8006154:	68f8      	ldr	r0, [r7, #12]
 8006156:	f000 f979 	bl	800644c <UART_WaitOnFlagUntilTimeout>
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e04f      	b.n	8006204 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10c      	bne.n	800618a <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	b29b      	uxth	r3, r3
 8006178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617c:	b29a      	uxth	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	3302      	adds	r3, #2
 8006186:	60bb      	str	r3, [r7, #8]
 8006188:	e030      	b.n	80061ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	b29b      	uxth	r3, r3
 8006192:	b2db      	uxtb	r3, r3
 8006194:	b29a      	uxth	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	3301      	adds	r3, #1
 800619e:	60bb      	str	r3, [r7, #8]
 80061a0:	e024      	b.n	80061ec <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2200      	movs	r2, #0
 80061aa:	2120      	movs	r1, #32
 80061ac:	68f8      	ldr	r0, [r7, #12]
 80061ae:	f000 f94d 	bl	800644c <UART_WaitOnFlagUntilTimeout>
 80061b2:	4603      	mov	r3, r0
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e023      	b.n	8006204 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	60ba      	str	r2, [r7, #8]
 80061d0:	b2ca      	uxtb	r2, r1
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	e00a      	b.n	80061ec <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	1c59      	adds	r1, r3, #1
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061e8:	b2d2      	uxtb	r2, r2
 80061ea:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061f0:	b29b      	uxth	r3, r3
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d19d      	bne.n	8006132 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2220      	movs	r2, #32
 80061fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80061fe:	2300      	movs	r3, #0
 8006200:	e000      	b.n	8006204 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006202:	2302      	movs	r3, #2
  }
}
 8006204:	4618      	mov	r0, r3
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b086      	sub	sp, #24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b20      	cmp	r3, #32
 8006224:	d166      	bne.n	80062f4 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_UART_Receive_DMA+0x26>
 800622c:	88fb      	ldrh	r3, [r7, #6]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e05f      	b.n	80062f6 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800623c:	2b01      	cmp	r3, #1
 800623e:	d101      	bne.n	8006244 <HAL_UART_Receive_DMA+0x38>
 8006240:	2302      	movs	r3, #2
 8006242:	e058      	b.n	80062f6 <HAL_UART_Receive_DMA+0xea>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	88fa      	ldrh	r2, [r7, #6]
 8006256:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2222      	movs	r2, #34	; 0x22
 8006262:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	4a25      	ldr	r2, [pc, #148]	; (8006300 <HAL_UART_Receive_DMA+0xf4>)
 800626c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	4a24      	ldr	r2, [pc, #144]	; (8006304 <HAL_UART_Receive_DMA+0xf8>)
 8006274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627a:	4a23      	ldr	r2, [pc, #140]	; (8006308 <HAL_UART_Receive_DMA+0xfc>)
 800627c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006282:	2200      	movs	r2, #0
 8006284:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8006286:	f107 0308 	add.w	r3, r7, #8
 800628a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	88fb      	ldrh	r3, [r7, #6]
 800629e:	f7fc ff31 	bl	8003104 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80062a2:	2300      	movs	r3, #0
 80062a4:	613b      	str	r3, [r7, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	613b      	str	r3, [r7, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68da      	ldr	r2, [r3, #12]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062ce:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	695a      	ldr	r2, [r3, #20]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695a      	ldr	r2, [r3, #20]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ee:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80062f0:	2300      	movs	r3, #0
 80062f2:	e000      	b.n	80062f6 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80062f4:	2302      	movs	r3, #2
  }
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	08006335 	.word	0x08006335
 8006304:	0800639d 	.word	0x0800639d
 8006308:	080063b9 	.word	0x080063b9

0800630c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006314:	bf00      	nop
 8006316:	370c      	adds	r7, #12
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006328:	bf00      	nop
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006340:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d11e      	bne.n	800638e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006364:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f022 0201 	bic.w	r2, r2, #1
 8006374:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695a      	ldr	r2, [r3, #20]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006384:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2220      	movs	r2, #32
 800638a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f7fa fca4 	bl	8000cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006394:	bf00      	nop
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7ff ffae 	bl	800630c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	695b      	ldr	r3, [r3, #20]
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b80      	cmp	r3, #128	; 0x80
 80063d6:	bf0c      	ite	eq
 80063d8:	2301      	moveq	r3, #1
 80063da:	2300      	movne	r3, #0
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b21      	cmp	r3, #33	; 0x21
 80063ea:	d108      	bne.n	80063fe <UART_DMAError+0x46>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d005      	beq.n	80063fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2200      	movs	r2, #0
 80063f6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063f8:	68b8      	ldr	r0, [r7, #8]
 80063fa:	f000 f871 	bl	80064e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	695b      	ldr	r3, [r3, #20]
 8006404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006408:	2b40      	cmp	r3, #64	; 0x40
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b22      	cmp	r3, #34	; 0x22
 800641e:	d108      	bne.n	8006432 <UART_DMAError+0x7a>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d005      	beq.n	8006432 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	2200      	movs	r2, #0
 800642a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800642c:	68b8      	ldr	r0, [r7, #8]
 800642e:	f000 f86d 	bl	800650c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006436:	f043 0210 	orr.w	r2, r3, #16
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800643e:	68b8      	ldr	r0, [r7, #8]
 8006440:	f7ff ff6e 	bl	8006320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645c:	e02c      	b.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006464:	d028      	beq.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <UART_WaitOnFlagUntilTimeout+0x30>
 800646c:	f7fc f84a 	bl	8002504 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	69ba      	ldr	r2, [r7, #24]
 8006478:	429a      	cmp	r2, r3
 800647a:	d21d      	bcs.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800648a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e00f      	b.n	80064d8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	4013      	ands	r3, r2
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	bf0c      	ite	eq
 80064c8:	2301      	moveq	r3, #1
 80064ca:	2300      	movne	r3, #0
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d0c3      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064f6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2220      	movs	r2, #32
 80064fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006522:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695a      	ldr	r2, [r3, #20]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f022 0201 	bic.w	r2, r2, #1
 8006532:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	689a      	ldr	r2, [r3, #8]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	69db      	ldr	r3, [r3, #28]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800658a:	f023 030c 	bic.w	r3, r3, #12
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6812      	ldr	r2, [r2, #0]
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	430b      	orrs	r3, r1
 8006596:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699a      	ldr	r2, [r3, #24]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	430a      	orrs	r2, r1
 80065ac:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	69db      	ldr	r3, [r3, #28]
 80065b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065b6:	f040 818b 	bne.w	80068d0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4ac1      	ldr	r2, [pc, #772]	; (80068c4 <UART_SetConfig+0x37c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d005      	beq.n	80065d0 <UART_SetConfig+0x88>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4abf      	ldr	r2, [pc, #764]	; (80068c8 <UART_SetConfig+0x380>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	f040 80bd 	bne.w	800674a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065d0:	f7fd feaa 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 80065d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	461d      	mov	r5, r3
 80065da:	f04f 0600 	mov.w	r6, #0
 80065de:	46a8      	mov	r8, r5
 80065e0:	46b1      	mov	r9, r6
 80065e2:	eb18 0308 	adds.w	r3, r8, r8
 80065e6:	eb49 0409 	adc.w	r4, r9, r9
 80065ea:	4698      	mov	r8, r3
 80065ec:	46a1      	mov	r9, r4
 80065ee:	eb18 0805 	adds.w	r8, r8, r5
 80065f2:	eb49 0906 	adc.w	r9, r9, r6
 80065f6:	f04f 0100 	mov.w	r1, #0
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006602:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006606:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800660a:	4688      	mov	r8, r1
 800660c:	4691      	mov	r9, r2
 800660e:	eb18 0005 	adds.w	r0, r8, r5
 8006612:	eb49 0106 	adc.w	r1, r9, r6
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	461d      	mov	r5, r3
 800661c:	f04f 0600 	mov.w	r6, #0
 8006620:	196b      	adds	r3, r5, r5
 8006622:	eb46 0406 	adc.w	r4, r6, r6
 8006626:	461a      	mov	r2, r3
 8006628:	4623      	mov	r3, r4
 800662a:	f7f9 fdd9 	bl	80001e0 <__aeabi_uldivmod>
 800662e:	4603      	mov	r3, r0
 8006630:	460c      	mov	r4, r1
 8006632:	461a      	mov	r2, r3
 8006634:	4ba5      	ldr	r3, [pc, #660]	; (80068cc <UART_SetConfig+0x384>)
 8006636:	fba3 2302 	umull	r2, r3, r3, r2
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	461d      	mov	r5, r3
 8006644:	f04f 0600 	mov.w	r6, #0
 8006648:	46a9      	mov	r9, r5
 800664a:	46b2      	mov	sl, r6
 800664c:	eb19 0309 	adds.w	r3, r9, r9
 8006650:	eb4a 040a 	adc.w	r4, sl, sl
 8006654:	4699      	mov	r9, r3
 8006656:	46a2      	mov	sl, r4
 8006658:	eb19 0905 	adds.w	r9, r9, r5
 800665c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006660:	f04f 0100 	mov.w	r1, #0
 8006664:	f04f 0200 	mov.w	r2, #0
 8006668:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800666c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006670:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006674:	4689      	mov	r9, r1
 8006676:	4692      	mov	sl, r2
 8006678:	eb19 0005 	adds.w	r0, r9, r5
 800667c:	eb4a 0106 	adc.w	r1, sl, r6
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	461d      	mov	r5, r3
 8006686:	f04f 0600 	mov.w	r6, #0
 800668a:	196b      	adds	r3, r5, r5
 800668c:	eb46 0406 	adc.w	r4, r6, r6
 8006690:	461a      	mov	r2, r3
 8006692:	4623      	mov	r3, r4
 8006694:	f7f9 fda4 	bl	80001e0 <__aeabi_uldivmod>
 8006698:	4603      	mov	r3, r0
 800669a:	460c      	mov	r4, r1
 800669c:	461a      	mov	r2, r3
 800669e:	4b8b      	ldr	r3, [pc, #556]	; (80068cc <UART_SetConfig+0x384>)
 80066a0:	fba3 1302 	umull	r1, r3, r3, r2
 80066a4:	095b      	lsrs	r3, r3, #5
 80066a6:	2164      	movs	r1, #100	; 0x64
 80066a8:	fb01 f303 	mul.w	r3, r1, r3
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	00db      	lsls	r3, r3, #3
 80066b0:	3332      	adds	r3, #50	; 0x32
 80066b2:	4a86      	ldr	r2, [pc, #536]	; (80068cc <UART_SetConfig+0x384>)
 80066b4:	fba2 2303 	umull	r2, r3, r2, r3
 80066b8:	095b      	lsrs	r3, r3, #5
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066c0:	4498      	add	r8, r3
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	461d      	mov	r5, r3
 80066c6:	f04f 0600 	mov.w	r6, #0
 80066ca:	46a9      	mov	r9, r5
 80066cc:	46b2      	mov	sl, r6
 80066ce:	eb19 0309 	adds.w	r3, r9, r9
 80066d2:	eb4a 040a 	adc.w	r4, sl, sl
 80066d6:	4699      	mov	r9, r3
 80066d8:	46a2      	mov	sl, r4
 80066da:	eb19 0905 	adds.w	r9, r9, r5
 80066de:	eb4a 0a06 	adc.w	sl, sl, r6
 80066e2:	f04f 0100 	mov.w	r1, #0
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066f6:	4689      	mov	r9, r1
 80066f8:	4692      	mov	sl, r2
 80066fa:	eb19 0005 	adds.w	r0, r9, r5
 80066fe:	eb4a 0106 	adc.w	r1, sl, r6
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	461d      	mov	r5, r3
 8006708:	f04f 0600 	mov.w	r6, #0
 800670c:	196b      	adds	r3, r5, r5
 800670e:	eb46 0406 	adc.w	r4, r6, r6
 8006712:	461a      	mov	r2, r3
 8006714:	4623      	mov	r3, r4
 8006716:	f7f9 fd63 	bl	80001e0 <__aeabi_uldivmod>
 800671a:	4603      	mov	r3, r0
 800671c:	460c      	mov	r4, r1
 800671e:	461a      	mov	r2, r3
 8006720:	4b6a      	ldr	r3, [pc, #424]	; (80068cc <UART_SetConfig+0x384>)
 8006722:	fba3 1302 	umull	r1, r3, r3, r2
 8006726:	095b      	lsrs	r3, r3, #5
 8006728:	2164      	movs	r1, #100	; 0x64
 800672a:	fb01 f303 	mul.w	r3, r1, r3
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	00db      	lsls	r3, r3, #3
 8006732:	3332      	adds	r3, #50	; 0x32
 8006734:	4a65      	ldr	r2, [pc, #404]	; (80068cc <UART_SetConfig+0x384>)
 8006736:	fba2 2303 	umull	r2, r3, r2, r3
 800673a:	095b      	lsrs	r3, r3, #5
 800673c:	f003 0207 	and.w	r2, r3, #7
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4442      	add	r2, r8
 8006746:	609a      	str	r2, [r3, #8]
 8006748:	e26f      	b.n	8006c2a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800674a:	f7fd fdd9 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 800674e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	461d      	mov	r5, r3
 8006754:	f04f 0600 	mov.w	r6, #0
 8006758:	46a8      	mov	r8, r5
 800675a:	46b1      	mov	r9, r6
 800675c:	eb18 0308 	adds.w	r3, r8, r8
 8006760:	eb49 0409 	adc.w	r4, r9, r9
 8006764:	4698      	mov	r8, r3
 8006766:	46a1      	mov	r9, r4
 8006768:	eb18 0805 	adds.w	r8, r8, r5
 800676c:	eb49 0906 	adc.w	r9, r9, r6
 8006770:	f04f 0100 	mov.w	r1, #0
 8006774:	f04f 0200 	mov.w	r2, #0
 8006778:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800677c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006780:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006784:	4688      	mov	r8, r1
 8006786:	4691      	mov	r9, r2
 8006788:	eb18 0005 	adds.w	r0, r8, r5
 800678c:	eb49 0106 	adc.w	r1, r9, r6
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	461d      	mov	r5, r3
 8006796:	f04f 0600 	mov.w	r6, #0
 800679a:	196b      	adds	r3, r5, r5
 800679c:	eb46 0406 	adc.w	r4, r6, r6
 80067a0:	461a      	mov	r2, r3
 80067a2:	4623      	mov	r3, r4
 80067a4:	f7f9 fd1c 	bl	80001e0 <__aeabi_uldivmod>
 80067a8:	4603      	mov	r3, r0
 80067aa:	460c      	mov	r4, r1
 80067ac:	461a      	mov	r2, r3
 80067ae:	4b47      	ldr	r3, [pc, #284]	; (80068cc <UART_SetConfig+0x384>)
 80067b0:	fba3 2302 	umull	r2, r3, r3, r2
 80067b4:	095b      	lsrs	r3, r3, #5
 80067b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	461d      	mov	r5, r3
 80067be:	f04f 0600 	mov.w	r6, #0
 80067c2:	46a9      	mov	r9, r5
 80067c4:	46b2      	mov	sl, r6
 80067c6:	eb19 0309 	adds.w	r3, r9, r9
 80067ca:	eb4a 040a 	adc.w	r4, sl, sl
 80067ce:	4699      	mov	r9, r3
 80067d0:	46a2      	mov	sl, r4
 80067d2:	eb19 0905 	adds.w	r9, r9, r5
 80067d6:	eb4a 0a06 	adc.w	sl, sl, r6
 80067da:	f04f 0100 	mov.w	r1, #0
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ee:	4689      	mov	r9, r1
 80067f0:	4692      	mov	sl, r2
 80067f2:	eb19 0005 	adds.w	r0, r9, r5
 80067f6:	eb4a 0106 	adc.w	r1, sl, r6
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	461d      	mov	r5, r3
 8006800:	f04f 0600 	mov.w	r6, #0
 8006804:	196b      	adds	r3, r5, r5
 8006806:	eb46 0406 	adc.w	r4, r6, r6
 800680a:	461a      	mov	r2, r3
 800680c:	4623      	mov	r3, r4
 800680e:	f7f9 fce7 	bl	80001e0 <__aeabi_uldivmod>
 8006812:	4603      	mov	r3, r0
 8006814:	460c      	mov	r4, r1
 8006816:	461a      	mov	r2, r3
 8006818:	4b2c      	ldr	r3, [pc, #176]	; (80068cc <UART_SetConfig+0x384>)
 800681a:	fba3 1302 	umull	r1, r3, r3, r2
 800681e:	095b      	lsrs	r3, r3, #5
 8006820:	2164      	movs	r1, #100	; 0x64
 8006822:	fb01 f303 	mul.w	r3, r1, r3
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	00db      	lsls	r3, r3, #3
 800682a:	3332      	adds	r3, #50	; 0x32
 800682c:	4a27      	ldr	r2, [pc, #156]	; (80068cc <UART_SetConfig+0x384>)
 800682e:	fba2 2303 	umull	r2, r3, r2, r3
 8006832:	095b      	lsrs	r3, r3, #5
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800683a:	4498      	add	r8, r3
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	461d      	mov	r5, r3
 8006840:	f04f 0600 	mov.w	r6, #0
 8006844:	46a9      	mov	r9, r5
 8006846:	46b2      	mov	sl, r6
 8006848:	eb19 0309 	adds.w	r3, r9, r9
 800684c:	eb4a 040a 	adc.w	r4, sl, sl
 8006850:	4699      	mov	r9, r3
 8006852:	46a2      	mov	sl, r4
 8006854:	eb19 0905 	adds.w	r9, r9, r5
 8006858:	eb4a 0a06 	adc.w	sl, sl, r6
 800685c:	f04f 0100 	mov.w	r1, #0
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006868:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800686c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006870:	4689      	mov	r9, r1
 8006872:	4692      	mov	sl, r2
 8006874:	eb19 0005 	adds.w	r0, r9, r5
 8006878:	eb4a 0106 	adc.w	r1, sl, r6
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	461d      	mov	r5, r3
 8006882:	f04f 0600 	mov.w	r6, #0
 8006886:	196b      	adds	r3, r5, r5
 8006888:	eb46 0406 	adc.w	r4, r6, r6
 800688c:	461a      	mov	r2, r3
 800688e:	4623      	mov	r3, r4
 8006890:	f7f9 fca6 	bl	80001e0 <__aeabi_uldivmod>
 8006894:	4603      	mov	r3, r0
 8006896:	460c      	mov	r4, r1
 8006898:	461a      	mov	r2, r3
 800689a:	4b0c      	ldr	r3, [pc, #48]	; (80068cc <UART_SetConfig+0x384>)
 800689c:	fba3 1302 	umull	r1, r3, r3, r2
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	2164      	movs	r1, #100	; 0x64
 80068a4:	fb01 f303 	mul.w	r3, r1, r3
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	3332      	adds	r3, #50	; 0x32
 80068ae:	4a07      	ldr	r2, [pc, #28]	; (80068cc <UART_SetConfig+0x384>)
 80068b0:	fba2 2303 	umull	r2, r3, r2, r3
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	f003 0207 	and.w	r2, r3, #7
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4442      	add	r2, r8
 80068c0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80068c2:	e1b2      	b.n	8006c2a <UART_SetConfig+0x6e2>
 80068c4:	40011000 	.word	0x40011000
 80068c8:	40011400 	.word	0x40011400
 80068cc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4ad7      	ldr	r2, [pc, #860]	; (8006c34 <UART_SetConfig+0x6ec>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d005      	beq.n	80068e6 <UART_SetConfig+0x39e>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4ad6      	ldr	r2, [pc, #856]	; (8006c38 <UART_SetConfig+0x6f0>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	f040 80d1 	bne.w	8006a88 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068e6:	f7fd fd1f 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 80068ea:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	469a      	mov	sl, r3
 80068f0:	f04f 0b00 	mov.w	fp, #0
 80068f4:	46d0      	mov	r8, sl
 80068f6:	46d9      	mov	r9, fp
 80068f8:	eb18 0308 	adds.w	r3, r8, r8
 80068fc:	eb49 0409 	adc.w	r4, r9, r9
 8006900:	4698      	mov	r8, r3
 8006902:	46a1      	mov	r9, r4
 8006904:	eb18 080a 	adds.w	r8, r8, sl
 8006908:	eb49 090b 	adc.w	r9, r9, fp
 800690c:	f04f 0100 	mov.w	r1, #0
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006918:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800691c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006920:	4688      	mov	r8, r1
 8006922:	4691      	mov	r9, r2
 8006924:	eb1a 0508 	adds.w	r5, sl, r8
 8006928:	eb4b 0609 	adc.w	r6, fp, r9
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	4619      	mov	r1, r3
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	f04f 0400 	mov.w	r4, #0
 800693e:	0094      	lsls	r4, r2, #2
 8006940:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006944:	008b      	lsls	r3, r1, #2
 8006946:	461a      	mov	r2, r3
 8006948:	4623      	mov	r3, r4
 800694a:	4628      	mov	r0, r5
 800694c:	4631      	mov	r1, r6
 800694e:	f7f9 fc47 	bl	80001e0 <__aeabi_uldivmod>
 8006952:	4603      	mov	r3, r0
 8006954:	460c      	mov	r4, r1
 8006956:	461a      	mov	r2, r3
 8006958:	4bb8      	ldr	r3, [pc, #736]	; (8006c3c <UART_SetConfig+0x6f4>)
 800695a:	fba3 2302 	umull	r2, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	469b      	mov	fp, r3
 8006968:	f04f 0c00 	mov.w	ip, #0
 800696c:	46d9      	mov	r9, fp
 800696e:	46e2      	mov	sl, ip
 8006970:	eb19 0309 	adds.w	r3, r9, r9
 8006974:	eb4a 040a 	adc.w	r4, sl, sl
 8006978:	4699      	mov	r9, r3
 800697a:	46a2      	mov	sl, r4
 800697c:	eb19 090b 	adds.w	r9, r9, fp
 8006980:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	f04f 0200 	mov.w	r2, #0
 800698c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006990:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006994:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006998:	4689      	mov	r9, r1
 800699a:	4692      	mov	sl, r2
 800699c:	eb1b 0509 	adds.w	r5, fp, r9
 80069a0:	eb4c 060a 	adc.w	r6, ip, sl
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4619      	mov	r1, r3
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	f04f 0400 	mov.w	r4, #0
 80069b6:	0094      	lsls	r4, r2, #2
 80069b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069bc:	008b      	lsls	r3, r1, #2
 80069be:	461a      	mov	r2, r3
 80069c0:	4623      	mov	r3, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	4631      	mov	r1, r6
 80069c6:	f7f9 fc0b 	bl	80001e0 <__aeabi_uldivmod>
 80069ca:	4603      	mov	r3, r0
 80069cc:	460c      	mov	r4, r1
 80069ce:	461a      	mov	r2, r3
 80069d0:	4b9a      	ldr	r3, [pc, #616]	; (8006c3c <UART_SetConfig+0x6f4>)
 80069d2:	fba3 1302 	umull	r1, r3, r3, r2
 80069d6:	095b      	lsrs	r3, r3, #5
 80069d8:	2164      	movs	r1, #100	; 0x64
 80069da:	fb01 f303 	mul.w	r3, r1, r3
 80069de:	1ad3      	subs	r3, r2, r3
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	3332      	adds	r3, #50	; 0x32
 80069e4:	4a95      	ldr	r2, [pc, #596]	; (8006c3c <UART_SetConfig+0x6f4>)
 80069e6:	fba2 2303 	umull	r2, r3, r2, r3
 80069ea:	095b      	lsrs	r3, r3, #5
 80069ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069f0:	4498      	add	r8, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	469b      	mov	fp, r3
 80069f6:	f04f 0c00 	mov.w	ip, #0
 80069fa:	46d9      	mov	r9, fp
 80069fc:	46e2      	mov	sl, ip
 80069fe:	eb19 0309 	adds.w	r3, r9, r9
 8006a02:	eb4a 040a 	adc.w	r4, sl, sl
 8006a06:	4699      	mov	r9, r3
 8006a08:	46a2      	mov	sl, r4
 8006a0a:	eb19 090b 	adds.w	r9, r9, fp
 8006a0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006a12:	f04f 0100 	mov.w	r1, #0
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006a22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006a26:	4689      	mov	r9, r1
 8006a28:	4692      	mov	sl, r2
 8006a2a:	eb1b 0509 	adds.w	r5, fp, r9
 8006a2e:	eb4c 060a 	adc.w	r6, ip, sl
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4619      	mov	r1, r3
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	f04f 0400 	mov.w	r4, #0
 8006a44:	0094      	lsls	r4, r2, #2
 8006a46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a4a:	008b      	lsls	r3, r1, #2
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4623      	mov	r3, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	4631      	mov	r1, r6
 8006a54:	f7f9 fbc4 	bl	80001e0 <__aeabi_uldivmod>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	4b77      	ldr	r3, [pc, #476]	; (8006c3c <UART_SetConfig+0x6f4>)
 8006a60:	fba3 1302 	umull	r1, r3, r3, r2
 8006a64:	095b      	lsrs	r3, r3, #5
 8006a66:	2164      	movs	r1, #100	; 0x64
 8006a68:	fb01 f303 	mul.w	r3, r1, r3
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	3332      	adds	r3, #50	; 0x32
 8006a72:	4a72      	ldr	r2, [pc, #456]	; (8006c3c <UART_SetConfig+0x6f4>)
 8006a74:	fba2 2303 	umull	r2, r3, r2, r3
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	f003 020f 	and.w	r2, r3, #15
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4442      	add	r2, r8
 8006a84:	609a      	str	r2, [r3, #8]
 8006a86:	e0d0      	b.n	8006c2a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a88:	f7fd fc3a 	bl	8004300 <HAL_RCC_GetPCLK1Freq>
 8006a8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	469a      	mov	sl, r3
 8006a92:	f04f 0b00 	mov.w	fp, #0
 8006a96:	46d0      	mov	r8, sl
 8006a98:	46d9      	mov	r9, fp
 8006a9a:	eb18 0308 	adds.w	r3, r8, r8
 8006a9e:	eb49 0409 	adc.w	r4, r9, r9
 8006aa2:	4698      	mov	r8, r3
 8006aa4:	46a1      	mov	r9, r4
 8006aa6:	eb18 080a 	adds.w	r8, r8, sl
 8006aaa:	eb49 090b 	adc.w	r9, r9, fp
 8006aae:	f04f 0100 	mov.w	r1, #0
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006aba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006abe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006ac2:	4688      	mov	r8, r1
 8006ac4:	4691      	mov	r9, r2
 8006ac6:	eb1a 0508 	adds.w	r5, sl, r8
 8006aca:	eb4b 0609 	adc.w	r6, fp, r9
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	f04f 0400 	mov.w	r4, #0
 8006ae0:	0094      	lsls	r4, r2, #2
 8006ae2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ae6:	008b      	lsls	r3, r1, #2
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4623      	mov	r3, r4
 8006aec:	4628      	mov	r0, r5
 8006aee:	4631      	mov	r1, r6
 8006af0:	f7f9 fb76 	bl	80001e0 <__aeabi_uldivmod>
 8006af4:	4603      	mov	r3, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	461a      	mov	r2, r3
 8006afa:	4b50      	ldr	r3, [pc, #320]	; (8006c3c <UART_SetConfig+0x6f4>)
 8006afc:	fba3 2302 	umull	r2, r3, r3, r2
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	469b      	mov	fp, r3
 8006b0a:	f04f 0c00 	mov.w	ip, #0
 8006b0e:	46d9      	mov	r9, fp
 8006b10:	46e2      	mov	sl, ip
 8006b12:	eb19 0309 	adds.w	r3, r9, r9
 8006b16:	eb4a 040a 	adc.w	r4, sl, sl
 8006b1a:	4699      	mov	r9, r3
 8006b1c:	46a2      	mov	sl, r4
 8006b1e:	eb19 090b 	adds.w	r9, r9, fp
 8006b22:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b26:	f04f 0100 	mov.w	r1, #0
 8006b2a:	f04f 0200 	mov.w	r2, #0
 8006b2e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b32:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b36:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b3a:	4689      	mov	r9, r1
 8006b3c:	4692      	mov	sl, r2
 8006b3e:	eb1b 0509 	adds.w	r5, fp, r9
 8006b42:	eb4c 060a 	adc.w	r6, ip, sl
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	f04f 0400 	mov.w	r4, #0
 8006b58:	0094      	lsls	r4, r2, #2
 8006b5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b5e:	008b      	lsls	r3, r1, #2
 8006b60:	461a      	mov	r2, r3
 8006b62:	4623      	mov	r3, r4
 8006b64:	4628      	mov	r0, r5
 8006b66:	4631      	mov	r1, r6
 8006b68:	f7f9 fb3a 	bl	80001e0 <__aeabi_uldivmod>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	460c      	mov	r4, r1
 8006b70:	461a      	mov	r2, r3
 8006b72:	4b32      	ldr	r3, [pc, #200]	; (8006c3c <UART_SetConfig+0x6f4>)
 8006b74:	fba3 1302 	umull	r1, r3, r3, r2
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	2164      	movs	r1, #100	; 0x64
 8006b7c:	fb01 f303 	mul.w	r3, r1, r3
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	011b      	lsls	r3, r3, #4
 8006b84:	3332      	adds	r3, #50	; 0x32
 8006b86:	4a2d      	ldr	r2, [pc, #180]	; (8006c3c <UART_SetConfig+0x6f4>)
 8006b88:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8c:	095b      	lsrs	r3, r3, #5
 8006b8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b92:	4498      	add	r8, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	469b      	mov	fp, r3
 8006b98:	f04f 0c00 	mov.w	ip, #0
 8006b9c:	46d9      	mov	r9, fp
 8006b9e:	46e2      	mov	sl, ip
 8006ba0:	eb19 0309 	adds.w	r3, r9, r9
 8006ba4:	eb4a 040a 	adc.w	r4, sl, sl
 8006ba8:	4699      	mov	r9, r3
 8006baa:	46a2      	mov	sl, r4
 8006bac:	eb19 090b 	adds.w	r9, r9, fp
 8006bb0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006bb4:	f04f 0100 	mov.w	r1, #0
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bc0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006bc4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006bc8:	4689      	mov	r9, r1
 8006bca:	4692      	mov	sl, r2
 8006bcc:	eb1b 0509 	adds.w	r5, fp, r9
 8006bd0:	eb4c 060a 	adc.w	r6, ip, sl
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	f04f 0400 	mov.w	r4, #0
 8006be6:	0094      	lsls	r4, r2, #2
 8006be8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bec:	008b      	lsls	r3, r1, #2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4623      	mov	r3, r4
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	4631      	mov	r1, r6
 8006bf6:	f7f9 faf3 	bl	80001e0 <__aeabi_uldivmod>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	460c      	mov	r4, r1
 8006bfe:	461a      	mov	r2, r3
 8006c00:	4b0e      	ldr	r3, [pc, #56]	; (8006c3c <UART_SetConfig+0x6f4>)
 8006c02:	fba3 1302 	umull	r1, r3, r3, r2
 8006c06:	095b      	lsrs	r3, r3, #5
 8006c08:	2164      	movs	r1, #100	; 0x64
 8006c0a:	fb01 f303 	mul.w	r3, r1, r3
 8006c0e:	1ad3      	subs	r3, r2, r3
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	3332      	adds	r3, #50	; 0x32
 8006c14:	4a09      	ldr	r2, [pc, #36]	; (8006c3c <UART_SetConfig+0x6f4>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	f003 020f 	and.w	r2, r3, #15
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4442      	add	r2, r8
 8006c26:	609a      	str	r2, [r3, #8]
}
 8006c28:	e7ff      	b.n	8006c2a <UART_SetConfig+0x6e2>
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c34:	40011000 	.word	0x40011000
 8006c38:	40011400 	.word	0x40011400
 8006c3c:	51eb851f 	.word	0x51eb851f

08006c40 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006c40:	b084      	sub	sp, #16
 8006c42:	b480      	push	{r7}
 8006c44:	b085      	sub	sp, #20
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	f107 001c 	add.w	r0, r7, #28
 8006c4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006c56:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006c58:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006c5a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006c5e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006c62:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006c66:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006c6a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006c6c:	68fa      	ldr	r2, [r7, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006c7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	431a      	orrs	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	b004      	add	sp, #16
 8006c94:	4770      	bx	lr

08006c96 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b083      	sub	sp, #12
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006cd2:	b580      	push	{r7, lr}
 8006cd4:	b082      	sub	sp, #8
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2203      	movs	r2, #3
 8006cde:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006ce0:	2002      	movs	r0, #2
 8006ce2:	f7fb fc1b 	bl	800251c <HAL_Delay>
  
  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0303 	and.w	r3, r3, #3
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	681a      	ldr	r2, [r3, #0]
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006d30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006d36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006d46:	f023 030f 	bic.w	r3, r3, #15
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	431a      	orrs	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	691b      	ldr	r3, [r3, #16]
 8006d6c:	b2db      	uxtb	r3, r3
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	3314      	adds	r3, #20
 8006d88:	461a      	mov	r2, r3
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
}  
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006daa:	2300      	movs	r3, #0
 8006dac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006dc6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006dcc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006dd2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dde:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006dea:	2300      	movs	r3, #0

}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3714      	adds	r7, #20
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006e06:	2310      	movs	r3, #16
 8006e08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e0a:	2340      	movs	r3, #64	; 0x40
 8006e0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e18:	f107 0308 	add.w	r3, r7, #8
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f7ff ff74 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e28:	2110      	movs	r1, #16
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa40 	bl	80072b0 <SDMMC_GetCmdResp1>
 8006e30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e32:	69fb      	ldr	r3, [r7, #28]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3720      	adds	r7, #32
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b088      	sub	sp, #32
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006e4a:	2311      	movs	r3, #17
 8006e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e4e:	2340      	movs	r3, #64	; 0x40
 8006e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e5c:	f107 0308 	add.w	r3, r7, #8
 8006e60:	4619      	mov	r1, r3
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7ff ff52 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e6c:	2111      	movs	r1, #17
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fa1e 	bl	80072b0 <SDMMC_GetCmdResp1>
 8006e74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e76:	69fb      	ldr	r3, [r7, #28]
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006e8e:	2312      	movs	r3, #18
 8006e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e92:	2340      	movs	r3, #64	; 0x40
 8006e94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e96:	2300      	movs	r3, #0
 8006e98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e9e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ea0:	f107 0308 	add.w	r3, r7, #8
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7ff ff30 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb0:	2112      	movs	r1, #18
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 f9fc 	bl	80072b0 <SDMMC_GetCmdResp1>
 8006eb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006eba:	69fb      	ldr	r3, [r7, #28]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b088      	sub	sp, #32
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006ed2:	2318      	movs	r3, #24
 8006ed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ed6:	2340      	movs	r3, #64	; 0x40
 8006ed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006eda:	2300      	movs	r3, #0
 8006edc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ee4:	f107 0308 	add.w	r3, r7, #8
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f7ff ff0e 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef4:	2118      	movs	r1, #24
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9da 	bl	80072b0 <SDMMC_GetCmdResp1>
 8006efc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006efe:	69fb      	ldr	r3, [r7, #28]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3720      	adds	r7, #32
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b088      	sub	sp, #32
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006f16:	2319      	movs	r3, #25
 8006f18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f1a:	2340      	movs	r3, #64	; 0x40
 8006f1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f26:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f28:	f107 0308 	add.w	r3, r7, #8
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff feec 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f38:	2119      	movs	r1, #25
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 f9b8 	bl	80072b0 <SDMMC_GetCmdResp1>
 8006f40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f42:	69fb      	ldr	r3, [r7, #28]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3720      	adds	r7, #32
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b088      	sub	sp, #32
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006f58:	230c      	movs	r3, #12
 8006f5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f5c:	2340      	movs	r3, #64	; 0x40
 8006f5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f68:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f6a:	f107 0308 	add.w	r3, r7, #8
 8006f6e:	4619      	mov	r1, r3
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f7ff fecb 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006f76:	4a05      	ldr	r2, [pc, #20]	; (8006f8c <SDMMC_CmdStopTransfer+0x40>)
 8006f78:	210c      	movs	r1, #12
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f998 	bl	80072b0 <SDMMC_GetCmdResp1>
 8006f80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f82:	69fb      	ldr	r3, [r7, #28]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3720      	adds	r7, #32
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	05f5e100 	.word	0x05f5e100

08006f90 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b08a      	sub	sp, #40	; 0x28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006fa0:	2307      	movs	r3, #7
 8006fa2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fa4:	2340      	movs	r3, #64	; 0x40
 8006fa6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fb2:	f107 0310 	add.w	r3, r7, #16
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff fea7 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fc2:	2107      	movs	r1, #7
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f973 	bl	80072b0 <SDMMC_GetCmdResp1>
 8006fca:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3728      	adds	r7, #40	; 0x28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fea:	2300      	movs	r3, #0
 8006fec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ff4:	f107 0308 	add.w	r3, r7, #8
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f7ff fe86 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 f92d 	bl	8007260 <SDMMC_GetCmdError>
 8007006:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007008:	69fb      	ldr	r3, [r7, #28]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8007012:	b580      	push	{r7, lr}
 8007014:	b088      	sub	sp, #32
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800701a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800701e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007020:	2308      	movs	r3, #8
 8007022:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007024:	2340      	movs	r3, #64	; 0x40
 8007026:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800702c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007030:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007032:	f107 0308 	add.w	r3, r7, #8
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f7ff fe67 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb16 	bl	8007670 <SDMMC_GetCmdResp7>
 8007044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007046:	69fb      	ldr	r3, [r7, #28]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3720      	adds	r7, #32
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800705e:	2337      	movs	r3, #55	; 0x37
 8007060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007062:	2340      	movs	r3, #64	; 0x40
 8007064:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007066:	2300      	movs	r3, #0
 8007068:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800706a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800706e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007070:	f107 0308 	add.w	r3, r7, #8
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fe48 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800707c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007080:	2137      	movs	r1, #55	; 0x37
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f914 	bl	80072b0 <SDMMC_GetCmdResp1>
 8007088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800708a:	69fb      	ldr	r3, [r7, #28]
}
 800708c:	4618      	mov	r0, r3
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b088      	sub	sp, #32
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80070aa:	2329      	movs	r3, #41	; 0x29
 80070ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070ae:	2340      	movs	r3, #64	; 0x40
 80070b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070b2:	2300      	movs	r3, #0
 80070b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070bc:	f107 0308 	add.w	r3, r7, #8
 80070c0:	4619      	mov	r1, r3
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7ff fe22 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fa23 	bl	8007514 <SDMMC_GetCmdResp3>
 80070ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070d0:	69fb      	ldr	r3, [r7, #28]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b088      	sub	sp, #32
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80070e8:	2306      	movs	r3, #6
 80070ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070ec:	2340      	movs	r3, #64	; 0x40
 80070ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070f0:	2300      	movs	r3, #0
 80070f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070fa:	f107 0308 	add.w	r3, r7, #8
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff fe03 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8007106:	f241 3288 	movw	r2, #5000	; 0x1388
 800710a:	2106      	movs	r1, #6
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f000 f8cf 	bl	80072b0 <SDMMC_GetCmdResp1>
 8007112:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007114:	69fb      	ldr	r3, [r7, #28]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3720      	adds	r7, #32
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b088      	sub	sp, #32
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007126:	2300      	movs	r3, #0
 8007128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800712a:	2333      	movs	r3, #51	; 0x33
 800712c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800712e:	2340      	movs	r3, #64	; 0x40
 8007130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800713a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800713c:	f107 0308 	add.w	r3, r7, #8
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f7ff fde2 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007148:	f241 3288 	movw	r2, #5000	; 0x1388
 800714c:	2133      	movs	r1, #51	; 0x33
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f8ae 	bl	80072b0 <SDMMC_GetCmdResp1>
 8007154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007156:	69fb      	ldr	r3, [r7, #28]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800716c:	2302      	movs	r3, #2
 800716e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007170:	23c0      	movs	r3, #192	; 0xc0
 8007172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007174:	2300      	movs	r3, #0
 8007176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007178:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800717e:	f107 0308 	add.w	r3, r7, #8
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7ff fdc1 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f97c 	bl	8007488 <SDMMC_GetCmdResp2>
 8007190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007192:	69fb      	ldr	r3, [r7, #28]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3720      	adds	r7, #32
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b088      	sub	sp, #32
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80071aa:	2309      	movs	r3, #9
 80071ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80071ae:	23c0      	movs	r3, #192	; 0xc0
 80071b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071b2:	2300      	movs	r3, #0
 80071b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071bc:	f107 0308 	add.w	r3, r7, #8
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f7ff fda2 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 f95d 	bl	8007488 <SDMMC_GetCmdResp2>
 80071ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071d0:	69fb      	ldr	r3, [r7, #28]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3720      	adds	r7, #32
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b088      	sub	sp, #32
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80071e8:	2303      	movs	r3, #3
 80071ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071ec:	2340      	movs	r3, #64	; 0x40
 80071ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071f0:	2300      	movs	r3, #0
 80071f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071fa:	f107 0308 	add.w	r3, r7, #8
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7ff fd83 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	2103      	movs	r1, #3
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f9bc 	bl	8007588 <SDMMC_GetCmdResp6>
 8007210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007212:	69fb      	ldr	r3, [r7, #28]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3720      	adds	r7, #32
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b088      	sub	sp, #32
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800722a:	230d      	movs	r3, #13
 800722c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800722e:	2340      	movs	r3, #64	; 0x40
 8007230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800723a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800723c:	f107 0308 	add.w	r3, r7, #8
 8007240:	4619      	mov	r1, r3
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7ff fd62 	bl	8006d0c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007248:	f241 3288 	movw	r2, #5000	; 0x1388
 800724c:	210d      	movs	r1, #13
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 f82e 	bl	80072b0 <SDMMC_GetCmdResp1>
 8007254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007256:	69fb      	ldr	r3, [r7, #28]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3720      	adds	r7, #32
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007260:	b490      	push	{r4, r7}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007268:	4b0f      	ldr	r3, [pc, #60]	; (80072a8 <SDMMC_GetCmdError+0x48>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a0f      	ldr	r2, [pc, #60]	; (80072ac <SDMMC_GetCmdError+0x4c>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	0a5b      	lsrs	r3, r3, #9
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800727c:	4623      	mov	r3, r4
 800727e:	1e5c      	subs	r4, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d102      	bne.n	800728a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007284:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007288:	e009      	b.n	800729e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f2      	beq.n	800727c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	22c5      	movs	r2, #197	; 0xc5
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bc90      	pop	{r4, r7}
 80072a6:	4770      	bx	lr
 80072a8:	20000000 	.word	0x20000000
 80072ac:	10624dd3 	.word	0x10624dd3

080072b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80072b0:	b590      	push	{r4, r7, lr}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	460b      	mov	r3, r1
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80072be:	4b6f      	ldr	r3, [pc, #444]	; (800747c <SDMMC_GetCmdResp1+0x1cc>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a6f      	ldr	r2, [pc, #444]	; (8007480 <SDMMC_GetCmdResp1+0x1d0>)
 80072c4:	fba2 2303 	umull	r2, r3, r2, r3
 80072c8:	0a5b      	lsrs	r3, r3, #9
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80072d0:	4623      	mov	r3, r4
 80072d2:	1e5c      	subs	r4, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d102      	bne.n	80072de <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072dc:	e0c9      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072e2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d0f0      	beq.n	80072d0 <SDMMC_GetCmdResp1+0x20>
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d1eb      	bne.n	80072d0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072fc:	f003 0304 	and.w	r3, r3, #4
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2204      	movs	r2, #4
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800730a:	2304      	movs	r3, #4
 800730c:	e0b1      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d004      	beq.n	8007324 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007320:	2301      	movs	r3, #1
 8007322:	e0a6      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	22c5      	movs	r2, #197	; 0xc5
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f7ff fd18 	bl	8006d60 <SDIO_GetCommandResponse>
 8007330:	4603      	mov	r3, r0
 8007332:	461a      	mov	r2, r3
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	4293      	cmp	r3, r2
 8007338:	d001      	beq.n	800733e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800733a:	2301      	movs	r3, #1
 800733c:	e099      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800733e:	2100      	movs	r1, #0
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f7ff fd1a 	bl	8006d7a <SDIO_GetResponse>
 8007346:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4b4e      	ldr	r3, [pc, #312]	; (8007484 <SDMMC_GetCmdResp1+0x1d4>)
 800734c:	4013      	ands	r3, r2
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007352:	2300      	movs	r3, #0
 8007354:	e08d      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	da02      	bge.n	8007362 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800735c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007360:	e087      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800736c:	2340      	movs	r3, #64	; 0x40
 800736e:	e080      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800737a:	2380      	movs	r3, #128	; 0x80
 800737c:	e079      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800738c:	e071      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007398:	f44f 7300 	mov.w	r3, #512	; 0x200
 800739c:	e069      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80073a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073ac:	e061      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80073b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073bc:	e059      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d002      	beq.n	80073ce <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80073c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073cc:	e051      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d002      	beq.n	80073de <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80073d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073dc:	e049      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d002      	beq.n	80073ee <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80073e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073ec:	e041      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80073f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fc:	e039      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007408:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800740c:	e031      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007418:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800741c:	e029      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d002      	beq.n	800742e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007428:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800742c:	e021      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007438:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800743c:	e019      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007444:	2b00      	cmp	r3, #0
 8007446:	d002      	beq.n	800744e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007448:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800744c:	e011      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d002      	beq.n	800745e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007458:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800745c:	e009      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f003 0308 	and.w	r3, r3, #8
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007468:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800746c:	e001      	b.n	8007472 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800746e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007472:	4618      	mov	r0, r3
 8007474:	371c      	adds	r7, #28
 8007476:	46bd      	mov	sp, r7
 8007478:	bd90      	pop	{r4, r7, pc}
 800747a:	bf00      	nop
 800747c:	20000000 	.word	0x20000000
 8007480:	10624dd3 	.word	0x10624dd3
 8007484:	fdffe008 	.word	0xfdffe008

08007488 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007488:	b490      	push	{r4, r7}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007490:	4b1e      	ldr	r3, [pc, #120]	; (800750c <SDMMC_GetCmdResp2+0x84>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1e      	ldr	r2, [pc, #120]	; (8007510 <SDMMC_GetCmdResp2+0x88>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	0a5b      	lsrs	r3, r3, #9
 800749c:	f241 3288 	movw	r2, #5000	; 0x1388
 80074a0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80074a4:	4623      	mov	r3, r4
 80074a6:	1e5c      	subs	r4, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d102      	bne.n	80074b2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074b0:	e026      	b.n	8007500 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d0f0      	beq.n	80074a4 <SDMMC_GetCmdResp2+0x1c>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1eb      	bne.n	80074a4 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d004      	beq.n	80074e2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2204      	movs	r2, #4
 80074dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074de:	2304      	movs	r3, #4
 80074e0:	e00e      	b.n	8007500 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e6:	f003 0301 	and.w	r3, r3, #1
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d004      	beq.n	80074f8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e003      	b.n	8007500 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	22c5      	movs	r2, #197	; 0xc5
 80074fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bc90      	pop	{r4, r7}
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000000 	.word	0x20000000
 8007510:	10624dd3 	.word	0x10624dd3

08007514 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007514:	b490      	push	{r4, r7}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800751c:	4b18      	ldr	r3, [pc, #96]	; (8007580 <SDMMC_GetCmdResp3+0x6c>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a18      	ldr	r2, [pc, #96]	; (8007584 <SDMMC_GetCmdResp3+0x70>)
 8007522:	fba2 2303 	umull	r2, r3, r2, r3
 8007526:	0a5b      	lsrs	r3, r3, #9
 8007528:	f241 3288 	movw	r2, #5000	; 0x1388
 800752c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007530:	4623      	mov	r3, r4
 8007532:	1e5c      	subs	r4, r3, #1
 8007534:	2b00      	cmp	r3, #0
 8007536:	d102      	bne.n	800753e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007538:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800753c:	e01b      	b.n	8007576 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007542:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800754a:	2b00      	cmp	r3, #0
 800754c:	d0f0      	beq.n	8007530 <SDMMC_GetCmdResp3+0x1c>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1eb      	bne.n	8007530 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d004      	beq.n	800756e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2204      	movs	r2, #4
 8007568:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800756a:	2304      	movs	r3, #4
 800756c:	e003      	b.n	8007576 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	22c5      	movs	r2, #197	; 0xc5
 8007572:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3710      	adds	r7, #16
 800757a:	46bd      	mov	sp, r7
 800757c:	bc90      	pop	{r4, r7}
 800757e:	4770      	bx	lr
 8007580:	20000000 	.word	0x20000000
 8007584:	10624dd3 	.word	0x10624dd3

08007588 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007588:	b590      	push	{r4, r7, lr}
 800758a:	b087      	sub	sp, #28
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	460b      	mov	r3, r1
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007596:	4b34      	ldr	r3, [pc, #208]	; (8007668 <SDMMC_GetCmdResp6+0xe0>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a34      	ldr	r2, [pc, #208]	; (800766c <SDMMC_GetCmdResp6+0xe4>)
 800759c:	fba2 2303 	umull	r2, r3, r2, r3
 80075a0:	0a5b      	lsrs	r3, r3, #9
 80075a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a6:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80075aa:	4623      	mov	r3, r4
 80075ac:	1e5c      	subs	r4, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d102      	bne.n	80075b8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80075b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80075b6:	e052      	b.n	800765e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075bc:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075be:	697b      	ldr	r3, [r7, #20]
 80075c0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0f0      	beq.n	80075aa <SDMMC_GetCmdResp6+0x22>
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1eb      	bne.n	80075aa <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d004      	beq.n	80075e8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2204      	movs	r2, #4
 80075e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075e4:	2304      	movs	r3, #4
 80075e6:	e03a      	b.n	800765e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ec:	f003 0301 	and.w	r3, r3, #1
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2201      	movs	r2, #1
 80075f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075fa:	2301      	movs	r3, #1
 80075fc:	e02f      	b.n	800765e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f7ff fbae 	bl	8006d60 <SDIO_GetCommandResponse>
 8007604:	4603      	mov	r3, r0
 8007606:	461a      	mov	r2, r3
 8007608:	7afb      	ldrb	r3, [r7, #11]
 800760a:	4293      	cmp	r3, r2
 800760c:	d001      	beq.n	8007612 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800760e:	2301      	movs	r3, #1
 8007610:	e025      	b.n	800765e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	22c5      	movs	r2, #197	; 0xc5
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007618:	2100      	movs	r1, #0
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f7ff fbad 	bl	8006d7a <SDIO_GetResponse>
 8007620:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d106      	bne.n	800763a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	0c1b      	lsrs	r3, r3, #16
 8007630:	b29a      	uxth	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007636:	2300      	movs	r3, #0
 8007638:	e011      	b.n	800765e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007640:	2b00      	cmp	r3, #0
 8007642:	d002      	beq.n	800764a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007648:	e009      	b.n	800765e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007658:	e001      	b.n	800765e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800765a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800765e:	4618      	mov	r0, r3
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	bd90      	pop	{r4, r7, pc}
 8007666:	bf00      	nop
 8007668:	20000000 	.word	0x20000000
 800766c:	10624dd3 	.word	0x10624dd3

08007670 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007670:	b490      	push	{r4, r7}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007678:	4b21      	ldr	r3, [pc, #132]	; (8007700 <SDMMC_GetCmdResp7+0x90>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a21      	ldr	r2, [pc, #132]	; (8007704 <SDMMC_GetCmdResp7+0x94>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	0a5b      	lsrs	r3, r3, #9
 8007684:	f241 3288 	movw	r2, #5000	; 0x1388
 8007688:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800768c:	4623      	mov	r3, r4
 800768e:	1e5c      	subs	r4, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007694:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007698:	e02c      	b.n	80076f4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800769e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0f0      	beq.n	800768c <SDMMC_GetCmdResp7+0x1c>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1eb      	bne.n	800768c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b8:	f003 0304 	and.w	r3, r3, #4
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d004      	beq.n	80076ca <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2204      	movs	r2, #4
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076c6:	2304      	movs	r3, #4
 80076c8:	e014      	b.n	80076f4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d004      	beq.n	80076e0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076dc:	2301      	movs	r3, #1
 80076de:	e009      	b.n	80076f4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d002      	beq.n	80076f2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2240      	movs	r2, #64	; 0x40
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80076f2:	2300      	movs	r3, #0
  
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	3710      	adds	r7, #16
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bc90      	pop	{r4, r7}
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	20000000 	.word	0x20000000
 8007704:	10624dd3 	.word	0x10624dd3

08007708 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800770c:	4904      	ldr	r1, [pc, #16]	; (8007720 <MX_FATFS_Init+0x18>)
 800770e:	4805      	ldr	r0, [pc, #20]	; (8007724 <MX_FATFS_Init+0x1c>)
 8007710:	f002 fd98 	bl	800a244 <FATFS_LinkDriver>
 8007714:	4603      	mov	r3, r0
 8007716:	461a      	mov	r2, r3
 8007718:	4b03      	ldr	r3, [pc, #12]	; (8007728 <MX_FATFS_Init+0x20>)
 800771a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 800771c:	bf00      	nop
 800771e:	bd80      	pop	{r7, pc}
 8007720:	200065d0 	.word	0x200065d0
 8007724:	0800d894 	.word	0x0800d894
 8007728:	200065cc 	.word	0x200065cc

0800772c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007730:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8007732:	4618      	mov	r0, r3
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007746:	f000 f896 	bl	8007876 <BSP_SD_IsDetected>
 800774a:	4603      	mov	r3, r0
 800774c:	2b01      	cmp	r3, #1
 800774e:	d001      	beq.n	8007754 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e012      	b.n	800777a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007754:	480b      	ldr	r0, [pc, #44]	; (8007784 <BSP_SD_Init+0x48>)
 8007756:	f7fc fe2d 	bl	80043b4 <HAL_SD_Init>
 800775a:	4603      	mov	r3, r0
 800775c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800775e:	79fb      	ldrb	r3, [r7, #7]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d109      	bne.n	8007778 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007764:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007768:	4806      	ldr	r0, [pc, #24]	; (8007784 <BSP_SD_Init+0x48>)
 800776a:	f7fd fbed 	bl	8004f48 <HAL_SD_ConfigWideBusOperation>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007778:	79fb      	ldrb	r3, [r7, #7]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	200063e4 	.word	0x200063e4

08007788 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007794:	2300      	movs	r3, #0
 8007796:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	68f9      	ldr	r1, [r7, #12]
 800779e:	4806      	ldr	r0, [pc, #24]	; (80077b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80077a0:	f7fc fe98 	bl	80044d4 <HAL_SD_ReadBlocks_DMA>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3718      	adds	r7, #24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	200063e4 	.word	0x200063e4

080077bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80077c8:	2300      	movs	r3, #0
 80077ca:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	68f9      	ldr	r1, [r7, #12]
 80077d2:	4806      	ldr	r0, [pc, #24]	; (80077ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80077d4:	f7fc ff68 	bl	80046a8 <HAL_SD_WriteBlocks_DMA>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200063e4 	.word	0x200063e4

080077f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80077f4:	4805      	ldr	r0, [pc, #20]	; (800780c <BSP_SD_GetCardState+0x1c>)
 80077f6:	f7fd fc23 	bl	8005040 <HAL_SD_GetCardState>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b04      	cmp	r3, #4
 80077fe:	bf14      	ite	ne
 8007800:	2301      	movne	r3, #1
 8007802:	2300      	moveq	r3, #0
 8007804:	b2db      	uxtb	r3, r3
}
 8007806:	4618      	mov	r0, r3
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	200063e4 	.word	0x200063e4

08007810 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b082      	sub	sp, #8
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	4803      	ldr	r0, [pc, #12]	; (8007828 <BSP_SD_GetCardInfo+0x18>)
 800781c:	f7fd fb68 	bl	8004ef0 <HAL_SD_GetCardInfo>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	200063e4 	.word	0x200063e4

0800782c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007834:	f000 f818 	bl	8007868 <BSP_SD_AbortCallback>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007848:	f000 f9a8 	bl	8007b9c <BSP_SD_WriteCpltCallback>
}
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800785c:	f000 f9ac 	bl	8007bb8 <BSP_SD_ReadCpltCallback>
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0

}
 800786c:	bf00      	nop
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800787c:	2301      	movs	r3, #1
 800787e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	b2db      	uxtb	r3, r3
}
 8007884:	4618      	mov	r0, r3
 8007886:	370c      	adds	r7, #12
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007898:	f002 fd6c 	bl	800a374 <osKernelSysTick>
 800789c:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800789e:	e006      	b.n	80078ae <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80078a0:	f7ff ffa6 	bl	80077f0 <BSP_SD_GetCardState>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80078aa:	2300      	movs	r3, #0
 80078ac:	e009      	b.n	80078c2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 80078ae:	f002 fd61 	bl	800a374 <osKernelSysTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	687a      	ldr	r2, [r7, #4]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d8f0      	bhi.n	80078a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80078be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80078d6:	4b0b      	ldr	r3, [pc, #44]	; (8007904 <SD_CheckStatus+0x38>)
 80078d8:	2201      	movs	r2, #1
 80078da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80078dc:	f7ff ff88 	bl	80077f0 <BSP_SD_GetCardState>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d107      	bne.n	80078f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80078e6:	4b07      	ldr	r3, [pc, #28]	; (8007904 <SD_CheckStatus+0x38>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	f023 0301 	bic.w	r3, r3, #1
 80078f0:	b2da      	uxtb	r2, r3
 80078f2:	4b04      	ldr	r3, [pc, #16]	; (8007904 <SD_CheckStatus+0x38>)
 80078f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80078f6:	4b03      	ldr	r3, [pc, #12]	; (8007904 <SD_CheckStatus+0x38>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	b2db      	uxtb	r3, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3708      	adds	r7, #8
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	20000009 	.word	0x20000009

08007908 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007908:	b590      	push	{r4, r7, lr}
 800790a:	b087      	sub	sp, #28
 800790c:	af00      	add	r7, sp, #0
 800790e:	4603      	mov	r3, r0
 8007910:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8007912:	4b20      	ldr	r3, [pc, #128]	; (8007994 <SD_initialize+0x8c>)
 8007914:	2201      	movs	r2, #1
 8007916:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007918:	f002 fd20 	bl	800a35c <osKernelRunning>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d030      	beq.n	8007984 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007922:	f7ff ff0b 	bl	800773c <BSP_SD_Init>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d107      	bne.n	800793c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800792c:	79fb      	ldrb	r3, [r7, #7]
 800792e:	4618      	mov	r0, r3
 8007930:	f7ff ffcc 	bl	80078cc <SD_CheckStatus>
 8007934:	4603      	mov	r3, r0
 8007936:	461a      	mov	r2, r3
 8007938:	4b16      	ldr	r3, [pc, #88]	; (8007994 <SD_initialize+0x8c>)
 800793a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800793c:	4b15      	ldr	r3, [pc, #84]	; (8007994 <SD_initialize+0x8c>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	2b01      	cmp	r3, #1
 8007944:	d01e      	beq.n	8007984 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <SD_initialize+0x90>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d10e      	bne.n	800796c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <SD_initialize+0x94>)
 8007950:	f107 0408 	add.w	r4, r7, #8
 8007954:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007956:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	2100      	movs	r1, #0
 8007960:	4618      	mov	r0, r3
 8007962:	f002 fede 	bl	800a722 <osMessageCreate>
 8007966:	4602      	mov	r2, r0
 8007968:	4b0b      	ldr	r3, [pc, #44]	; (8007998 <SD_initialize+0x90>)
 800796a:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <SD_initialize+0x90>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d107      	bne.n	8007984 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 8007974:	4b07      	ldr	r3, [pc, #28]	; (8007994 <SD_initialize+0x8c>)
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	b2da      	uxtb	r2, r3
 8007980:	4b04      	ldr	r3, [pc, #16]	; (8007994 <SD_initialize+0x8c>)
 8007982:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007984:	4b03      	ldr	r3, [pc, #12]	; (8007994 <SD_initialize+0x8c>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	b2db      	uxtb	r3, r3
}
 800798a:	4618      	mov	r0, r3
 800798c:	371c      	adds	r7, #28
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}
 8007992:	bf00      	nop
 8007994:	20000009 	.word	0x20000009
 8007998:	20002494 	.word	0x20002494
 800799c:	0800d818 	.word	0x0800d818

080079a0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b082      	sub	sp, #8
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	4603      	mov	r3, r0
 80079a8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff ff8d 	bl	80078cc <SD_CheckStatus>
 80079b2:	4603      	mov	r3, r0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60b9      	str	r1, [r7, #8]
 80079c4:	607a      	str	r2, [r7, #4]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80079d2:	f247 5030 	movw	r0, #30000	; 0x7530
 80079d6:	f7ff ff5b 	bl	8007890 <SD_CheckStatusWithTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da02      	bge.n	80079e6 <SD_read+0x2a>
  {
    return res;
 80079e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e4:	e032      	b.n	8007a4c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	6879      	ldr	r1, [r7, #4]
 80079ea:	68b8      	ldr	r0, [r7, #8]
 80079ec:	f7ff fecc 	bl	8007788 <BSP_SD_ReadBlocks_DMA>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80079f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d124      	bne.n	8007a48 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80079fe:	4b15      	ldr	r3, [pc, #84]	; (8007a54 <SD_read+0x98>)
 8007a00:	6819      	ldr	r1, [r3, #0]
 8007a02:	f107 0314 	add.w	r3, r7, #20
 8007a06:	f247 5230 	movw	r2, #30000	; 0x7530
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f002 fef2 	bl	800a7f4 <osMessageGet>

    if (event.status == osEventMessage)
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	2b10      	cmp	r3, #16
 8007a14:	d118      	bne.n	8007a48 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d115      	bne.n	8007a48 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007a1c:	f002 fcaa 	bl	800a374 <osKernelSysTick>
 8007a20:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007a22:	e008      	b.n	8007a36 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007a24:	f7ff fee4 	bl	80077f0 <BSP_SD_GetCardState>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <SD_read+0x7a>
              {
                res = RES_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007a34:	e008      	b.n	8007a48 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007a36:	f002 fc9d 	bl	800a374 <osKernelSysTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	6a3b      	ldr	r3, [r7, #32]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	f247 522f 	movw	r2, #29999	; 0x752f
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d9ed      	bls.n	8007a24 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007a48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3728      	adds	r7, #40	; 0x28
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20002494 	.word	0x20002494

08007a58 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08a      	sub	sp, #40	; 0x28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60b9      	str	r1, [r7, #8]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	4603      	mov	r3, r0
 8007a66:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007a6e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007a72:	f7ff ff0d 	bl	8007890 <SD_CheckStatusWithTimeout>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	da02      	bge.n	8007a82 <SD_write+0x2a>
  {
    return res;
 8007a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a80:	e02e      	b.n	8007ae0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	68b8      	ldr	r0, [r7, #8]
 8007a88:	f7ff fe98 	bl	80077bc <BSP_SD_WriteBlocks_DMA>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d124      	bne.n	8007adc <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007a92:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <SD_write+0x90>)
 8007a94:	6819      	ldr	r1, [r3, #0]
 8007a96:	f107 0314 	add.w	r3, r7, #20
 8007a9a:	f247 5230 	movw	r2, #30000	; 0x7530
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f002 fea8 	bl	800a7f4 <osMessageGet>

    if (event.status == osEventMessage)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b10      	cmp	r3, #16
 8007aa8:	d118      	bne.n	8007adc <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d115      	bne.n	8007adc <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007ab0:	f002 fc60 	bl	800a374 <osKernelSysTick>
 8007ab4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007ab6:	e008      	b.n	8007aca <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007ab8:	f7ff fe9a 	bl	80077f0 <BSP_SD_GetCardState>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d103      	bne.n	8007aca <SD_write+0x72>
          {
            res = RES_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007ac8:	e008      	b.n	8007adc <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007aca:	f002 fc53 	bl	800a374 <osKernelSysTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d9ed      	bls.n	8007ab8 <SD_write+0x60>
    }

  }
#endif

  return res;
 8007adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3728      	adds	r7, #40	; 0x28
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	20002494 	.word	0x20002494

08007aec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b08c      	sub	sp, #48	; 0x30
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	4603      	mov	r3, r0
 8007af4:	603a      	str	r2, [r7, #0]
 8007af6:	71fb      	strb	r3, [r7, #7]
 8007af8:	460b      	mov	r3, r1
 8007afa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007b02:	4b25      	ldr	r3, [pc, #148]	; (8007b98 <SD_ioctl+0xac>)
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <SD_ioctl+0x28>
 8007b10:	2303      	movs	r3, #3
 8007b12:	e03c      	b.n	8007b8e <SD_ioctl+0xa2>

  switch (cmd)
 8007b14:	79bb      	ldrb	r3, [r7, #6]
 8007b16:	2b03      	cmp	r3, #3
 8007b18:	d834      	bhi.n	8007b84 <SD_ioctl+0x98>
 8007b1a:	a201      	add	r2, pc, #4	; (adr r2, 8007b20 <SD_ioctl+0x34>)
 8007b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b20:	08007b31 	.word	0x08007b31
 8007b24:	08007b39 	.word	0x08007b39
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b6b 	.word	0x08007b6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b36:	e028      	b.n	8007b8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b38:	f107 030c 	add.w	r3, r7, #12
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7ff fe67 	bl	8007810 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007b42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b4e:	e01c      	b.n	8007b8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b50:	f107 030c 	add.w	r3, r7, #12
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7ff fe5b 	bl	8007810 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b68:	e00f      	b.n	8007b8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b6a:	f107 030c 	add.w	r3, r7, #12
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff fe4e 	bl	8007810 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	0a5a      	lsrs	r2, r3, #9
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b82:	e002      	b.n	8007b8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3730      	adds	r7, #48	; 0x30
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000009 	.word	0x20000009

08007b9c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8007ba0:	4b04      	ldr	r3, [pc, #16]	; (8007bb4 <BSP_SD_WriteCpltCallback+0x18>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	2102      	movs	r1, #2
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f002 fde3 	bl	800a774 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007bae:	bf00      	nop
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	20002494 	.word	0x20002494

08007bb8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007bbc:	4b04      	ldr	r3, [pc, #16]	; (8007bd0 <BSP_SD_ReadCpltCallback+0x18>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f002 fdd5 	bl	800a774 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007bca:	bf00      	nop
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20002494 	.word	0x20002494

08007bd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	4a08      	ldr	r2, [pc, #32]	; (8007c04 <disk_status+0x30>)
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	4413      	add	r3, r2
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	79fa      	ldrb	r2, [r7, #7]
 8007bec:	4905      	ldr	r1, [pc, #20]	; (8007c04 <disk_status+0x30>)
 8007bee:	440a      	add	r2, r1
 8007bf0:	7a12      	ldrb	r2, [r2, #8]
 8007bf2:	4610      	mov	r0, r2
 8007bf4:	4798      	blx	r3
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007bfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	3710      	adds	r7, #16
 8007c00:	46bd      	mov	sp, r7
 8007c02:	bd80      	pop	{r7, pc}
 8007c04:	200024c0 	.word	0x200024c0

08007c08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007c16:	79fb      	ldrb	r3, [r7, #7]
 8007c18:	4a0d      	ldr	r2, [pc, #52]	; (8007c50 <disk_initialize+0x48>)
 8007c1a:	5cd3      	ldrb	r3, [r2, r3]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d111      	bne.n	8007c44 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	4a0b      	ldr	r2, [pc, #44]	; (8007c50 <disk_initialize+0x48>)
 8007c24:	2101      	movs	r1, #1
 8007c26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c28:	79fb      	ldrb	r3, [r7, #7]
 8007c2a:	4a09      	ldr	r2, [pc, #36]	; (8007c50 <disk_initialize+0x48>)
 8007c2c:	009b      	lsls	r3, r3, #2
 8007c2e:	4413      	add	r3, r2
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	79fa      	ldrb	r2, [r7, #7]
 8007c36:	4906      	ldr	r1, [pc, #24]	; (8007c50 <disk_initialize+0x48>)
 8007c38:	440a      	add	r2, r1
 8007c3a:	7a12      	ldrb	r2, [r2, #8]
 8007c3c:	4610      	mov	r0, r2
 8007c3e:	4798      	blx	r3
 8007c40:	4603      	mov	r3, r0
 8007c42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	200024c0 	.word	0x200024c0

08007c54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c54:	b590      	push	{r4, r7, lr}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60b9      	str	r1, [r7, #8]
 8007c5c:	607a      	str	r2, [r7, #4]
 8007c5e:	603b      	str	r3, [r7, #0]
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	4a0a      	ldr	r2, [pc, #40]	; (8007c90 <disk_read+0x3c>)
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	689c      	ldr	r4, [r3, #8]
 8007c70:	7bfb      	ldrb	r3, [r7, #15]
 8007c72:	4a07      	ldr	r2, [pc, #28]	; (8007c90 <disk_read+0x3c>)
 8007c74:	4413      	add	r3, r2
 8007c76:	7a18      	ldrb	r0, [r3, #8]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	47a0      	blx	r4
 8007c80:	4603      	mov	r3, r0
 8007c82:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd90      	pop	{r4, r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	200024c0 	.word	0x200024c0

08007c94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60b9      	str	r1, [r7, #8]
 8007c9c:	607a      	str	r2, [r7, #4]
 8007c9e:	603b      	str	r3, [r7, #0]
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	4a0a      	ldr	r2, [pc, #40]	; (8007cd0 <disk_write+0x3c>)
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	68dc      	ldr	r4, [r3, #12]
 8007cb0:	7bfb      	ldrb	r3, [r7, #15]
 8007cb2:	4a07      	ldr	r2, [pc, #28]	; (8007cd0 <disk_write+0x3c>)
 8007cb4:	4413      	add	r3, r2
 8007cb6:	7a18      	ldrb	r0, [r3, #8]
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	68b9      	ldr	r1, [r7, #8]
 8007cbe:	47a0      	blx	r4
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]
  return res;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	371c      	adds	r7, #28
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd90      	pop	{r4, r7, pc}
 8007cce:	bf00      	nop
 8007cd0:	200024c0 	.word	0x200024c0

08007cd4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	603a      	str	r2, [r7, #0]
 8007cde:	71fb      	strb	r3, [r7, #7]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007ce4:	79fb      	ldrb	r3, [r7, #7]
 8007ce6:	4a09      	ldr	r2, [pc, #36]	; (8007d0c <disk_ioctl+0x38>)
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	79fa      	ldrb	r2, [r7, #7]
 8007cf2:	4906      	ldr	r1, [pc, #24]	; (8007d0c <disk_ioctl+0x38>)
 8007cf4:	440a      	add	r2, r1
 8007cf6:	7a10      	ldrb	r0, [r2, #8]
 8007cf8:	79b9      	ldrb	r1, [r7, #6]
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	4798      	blx	r3
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]
  return res;
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200024c0 	.word	0x200024c0

08007d10 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007d10:	b480      	push	{r7}
 8007d12:	b085      	sub	sp, #20
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007d20:	89fb      	ldrh	r3, [r7, #14]
 8007d22:	021b      	lsls	r3, r3, #8
 8007d24:	b21a      	sxth	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	b21b      	sxth	r3, r3
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d32:	89fb      	ldrh	r3, [r7, #14]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr

08007d40 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d40:	b480      	push	{r7}
 8007d42:	b085      	sub	sp, #20
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	3303      	adds	r3, #3
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	021b      	lsls	r3, r3, #8
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	3202      	adds	r2, #2
 8007d58:	7812      	ldrb	r2, [r2, #0]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	021b      	lsls	r3, r3, #8
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	3201      	adds	r2, #1
 8007d66:	7812      	ldrb	r2, [r2, #0]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	021b      	lsls	r3, r3, #8
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	7812      	ldrb	r2, [r2, #0]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d78:	68fb      	ldr	r3, [r7, #12]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
 8007d8e:	460b      	mov	r3, r1
 8007d90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	887a      	ldrh	r2, [r7, #2]
 8007d9a:	b2d2      	uxtb	r2, r2
 8007d9c:	701a      	strb	r2, [r3, #0]
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	0a1b      	lsrs	r3, r3, #8
 8007da2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	607a      	str	r2, [r7, #4]
 8007daa:	887a      	ldrh	r2, [r7, #2]
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	701a      	strb	r2, [r3, #0]
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	607a      	str	r2, [r7, #4]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	0a1b      	lsrs	r3, r3, #8
 8007dd6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	607a      	str	r2, [r7, #4]
 8007dde:	683a      	ldr	r2, [r7, #0]
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	1c5a      	adds	r2, r3, #1
 8007dee:	607a      	str	r2, [r7, #4]
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	0a1b      	lsrs	r3, r3, #8
 8007dfa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	607a      	str	r2, [r7, #4]
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	b2d2      	uxtb	r2, r2
 8007e06:	701a      	strb	r2, [r3, #0]
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007e14:	b480      	push	{r7}
 8007e16:	b087      	sub	sp, #28
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00d      	beq.n	8007e4a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	1c53      	adds	r3, r2, #1
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	1c59      	adds	r1, r3, #1
 8007e38:	6179      	str	r1, [r7, #20]
 8007e3a:	7812      	ldrb	r2, [r2, #0]
 8007e3c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3b01      	subs	r3, #1
 8007e42:	607b      	str	r3, [r7, #4]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1f1      	bne.n	8007e2e <mem_cpy+0x1a>
	}
}
 8007e4a:	bf00      	nop
 8007e4c:	371c      	adds	r7, #28
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e54:	4770      	bx	lr

08007e56 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e56:	b480      	push	{r7}
 8007e58:	b087      	sub	sp, #28
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	1c5a      	adds	r2, r3, #1
 8007e6a:	617a      	str	r2, [r7, #20]
 8007e6c:	68ba      	ldr	r2, [r7, #8]
 8007e6e:	b2d2      	uxtb	r2, r2
 8007e70:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	3b01      	subs	r3, #1
 8007e76:	607b      	str	r3, [r7, #4]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f3      	bne.n	8007e66 <mem_set+0x10>
}
 8007e7e:	bf00      	nop
 8007e80:	371c      	adds	r7, #28
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e8a:	b480      	push	{r7}
 8007e8c:	b089      	sub	sp, #36	; 0x24
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	60f8      	str	r0, [r7, #12]
 8007e92:	60b9      	str	r1, [r7, #8]
 8007e94:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	1c5a      	adds	r2, r3, #1
 8007ea6:	61fa      	str	r2, [r7, #28]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	1c5a      	adds	r2, r3, #1
 8007eb0:	61ba      	str	r2, [r7, #24]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	1acb      	subs	r3, r1, r3
 8007eb6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	607b      	str	r3, [r7, #4]
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d002      	beq.n	8007eca <mem_cmp+0x40>
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d0eb      	beq.n	8007ea2 <mem_cmp+0x18>

	return r;
 8007eca:	697b      	ldr	r3, [r7, #20]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3724      	adds	r7, #36	; 0x24
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007ee2:	e002      	b.n	8007eea <chk_chr+0x12>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d005      	beq.n	8007efe <chk_chr+0x26>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d1f2      	bne.n	8007ee4 <chk_chr+0xc>
	return *str;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	781b      	ldrb	r3, [r3, #0]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr

08007f0e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d009      	beq.n	8007f30 <lock_fs+0x22>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	691b      	ldr	r3, [r3, #16]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 f9ca 	bl	800a2ba <ff_req_grant>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <lock_fs+0x22>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e000      	b.n	8007f32 <lock_fs+0x24>
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}

08007f3a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
 8007f42:	460b      	mov	r3, r1
 8007f44:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00d      	beq.n	8007f68 <unlock_fs+0x2e>
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	2b0c      	cmp	r3, #12
 8007f50:	d00a      	beq.n	8007f68 <unlock_fs+0x2e>
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	2b0b      	cmp	r3, #11
 8007f56:	d007      	beq.n	8007f68 <unlock_fs+0x2e>
 8007f58:	78fb      	ldrb	r3, [r7, #3]
 8007f5a:	2b0f      	cmp	r3, #15
 8007f5c:	d004      	beq.n	8007f68 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f002 f9be 	bl	800a2e4 <ff_rel_grant>
	}
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60bb      	str	r3, [r7, #8]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	e029      	b.n	8007fd8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f84:	4a27      	ldr	r2, [pc, #156]	; (8008024 <chk_lock+0xb4>)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	011b      	lsls	r3, r3, #4
 8007f8a:	4413      	add	r3, r2
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d01d      	beq.n	8007fce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f92:	4a24      	ldr	r2, [pc, #144]	; (8008024 <chk_lock+0xb4>)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	4413      	add	r3, r2
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d116      	bne.n	8007fd2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007fa4:	4a1f      	ldr	r2, [pc, #124]	; (8008024 <chk_lock+0xb4>)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	4413      	add	r3, r2
 8007fac:	3304      	adds	r3, #4
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d10c      	bne.n	8007fd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fb8:	4a1a      	ldr	r2, [pc, #104]	; (8008024 <chk_lock+0xb4>)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	4413      	add	r3, r2
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d102      	bne.n	8007fd2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fcc:	e007      	b.n	8007fde <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007fce:	2301      	movs	r3, #1
 8007fd0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	60fb      	str	r3, [r7, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2b01      	cmp	r3, #1
 8007fdc:	d9d2      	bls.n	8007f84 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d109      	bne.n	8007ff8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <chk_lock+0x80>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b02      	cmp	r3, #2
 8007fee:	d101      	bne.n	8007ff4 <chk_lock+0x84>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e010      	b.n	8008016 <chk_lock+0xa6>
 8007ff4:	2312      	movs	r3, #18
 8007ff6:	e00e      	b.n	8008016 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d108      	bne.n	8008010 <chk_lock+0xa0>
 8007ffe:	4a09      	ldr	r2, [pc, #36]	; (8008024 <chk_lock+0xb4>)
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	4413      	add	r3, r2
 8008006:	330c      	adds	r3, #12
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800800e:	d101      	bne.n	8008014 <chk_lock+0xa4>
 8008010:	2310      	movs	r3, #16
 8008012:	e000      	b.n	8008016 <chk_lock+0xa6>
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3714      	adds	r7, #20
 800801a:	46bd      	mov	sp, r7
 800801c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	200024a0 	.word	0x200024a0

08008028 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800802e:	2300      	movs	r3, #0
 8008030:	607b      	str	r3, [r7, #4]
 8008032:	e002      	b.n	800803a <enq_lock+0x12>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	3301      	adds	r3, #1
 8008038:	607b      	str	r3, [r7, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d806      	bhi.n	800804e <enq_lock+0x26>
 8008040:	4a09      	ldr	r2, [pc, #36]	; (8008068 <enq_lock+0x40>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	4413      	add	r3, r2
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1f2      	bne.n	8008034 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2b02      	cmp	r3, #2
 8008052:	bf14      	ite	ne
 8008054:	2301      	movne	r3, #1
 8008056:	2300      	moveq	r3, #0
 8008058:	b2db      	uxtb	r3, r3
}
 800805a:	4618      	mov	r0, r3
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	200024a0 	.word	0x200024a0

0800806c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008076:	2300      	movs	r3, #0
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	e01f      	b.n	80080bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800807c:	4a41      	ldr	r2, [pc, #260]	; (8008184 <inc_lock+0x118>)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	011b      	lsls	r3, r3, #4
 8008082:	4413      	add	r3, r2
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d113      	bne.n	80080b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800808e:	4a3d      	ldr	r2, [pc, #244]	; (8008184 <inc_lock+0x118>)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	011b      	lsls	r3, r3, #4
 8008094:	4413      	add	r3, r2
 8008096:	3304      	adds	r3, #4
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800809e:	429a      	cmp	r2, r3
 80080a0:	d109      	bne.n	80080b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80080a2:	4a38      	ldr	r2, [pc, #224]	; (8008184 <inc_lock+0x118>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	4413      	add	r3, r2
 80080aa:	3308      	adds	r3, #8
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80080b2:	429a      	cmp	r2, r3
 80080b4:	d006      	beq.n	80080c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d9dc      	bls.n	800807c <inc_lock+0x10>
 80080c2:	e000      	b.n	80080c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80080c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2b02      	cmp	r3, #2
 80080ca:	d132      	bne.n	8008132 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]
 80080d0:	e002      	b.n	80080d8 <inc_lock+0x6c>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	3301      	adds	r3, #1
 80080d6:	60fb      	str	r3, [r7, #12]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d806      	bhi.n	80080ec <inc_lock+0x80>
 80080de:	4a29      	ldr	r2, [pc, #164]	; (8008184 <inc_lock+0x118>)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	011b      	lsls	r3, r3, #4
 80080e4:	4413      	add	r3, r2
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d1f2      	bne.n	80080d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d101      	bne.n	80080f6 <inc_lock+0x8a>
 80080f2:	2300      	movs	r3, #0
 80080f4:	e040      	b.n	8008178 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4922      	ldr	r1, [pc, #136]	; (8008184 <inc_lock+0x118>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	011b      	lsls	r3, r3, #4
 8008100:	440b      	add	r3, r1
 8008102:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	491e      	ldr	r1, [pc, #120]	; (8008184 <inc_lock+0x118>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	011b      	lsls	r3, r3, #4
 800810e:	440b      	add	r3, r1
 8008110:	3304      	adds	r3, #4
 8008112:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	695a      	ldr	r2, [r3, #20]
 8008118:	491a      	ldr	r1, [pc, #104]	; (8008184 <inc_lock+0x118>)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	440b      	add	r3, r1
 8008120:	3308      	adds	r3, #8
 8008122:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008124:	4a17      	ldr	r2, [pc, #92]	; (8008184 <inc_lock+0x118>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	011b      	lsls	r3, r3, #4
 800812a:	4413      	add	r3, r2
 800812c:	330c      	adds	r3, #12
 800812e:	2200      	movs	r2, #0
 8008130:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d009      	beq.n	800814c <inc_lock+0xe0>
 8008138:	4a12      	ldr	r2, [pc, #72]	; (8008184 <inc_lock+0x118>)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	011b      	lsls	r3, r3, #4
 800813e:	4413      	add	r3, r2
 8008140:	330c      	adds	r3, #12
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d001      	beq.n	800814c <inc_lock+0xe0>
 8008148:	2300      	movs	r3, #0
 800814a:	e015      	b.n	8008178 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d108      	bne.n	8008164 <inc_lock+0xf8>
 8008152:	4a0c      	ldr	r2, [pc, #48]	; (8008184 <inc_lock+0x118>)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	011b      	lsls	r3, r3, #4
 8008158:	4413      	add	r3, r2
 800815a:	330c      	adds	r3, #12
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	3301      	adds	r3, #1
 8008160:	b29a      	uxth	r2, r3
 8008162:	e001      	b.n	8008168 <inc_lock+0xfc>
 8008164:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008168:	4906      	ldr	r1, [pc, #24]	; (8008184 <inc_lock+0x118>)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	011b      	lsls	r3, r3, #4
 800816e:	440b      	add	r3, r1
 8008170:	330c      	adds	r3, #12
 8008172:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3301      	adds	r3, #1
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	200024a0 	.word	0x200024a0

08008188 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3b01      	subs	r3, #1
 8008194:	607b      	str	r3, [r7, #4]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d825      	bhi.n	80081e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800819c:	4a17      	ldr	r2, [pc, #92]	; (80081fc <dec_lock+0x74>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	4413      	add	r3, r2
 80081a4:	330c      	adds	r3, #12
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80081aa:	89fb      	ldrh	r3, [r7, #14]
 80081ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081b0:	d101      	bne.n	80081b6 <dec_lock+0x2e>
 80081b2:	2300      	movs	r3, #0
 80081b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80081b6:	89fb      	ldrh	r3, [r7, #14]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d002      	beq.n	80081c2 <dec_lock+0x3a>
 80081bc:	89fb      	ldrh	r3, [r7, #14]
 80081be:	3b01      	subs	r3, #1
 80081c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80081c2:	4a0e      	ldr	r2, [pc, #56]	; (80081fc <dec_lock+0x74>)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	011b      	lsls	r3, r3, #4
 80081c8:	4413      	add	r3, r2
 80081ca:	330c      	adds	r3, #12
 80081cc:	89fa      	ldrh	r2, [r7, #14]
 80081ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d105      	bne.n	80081e2 <dec_lock+0x5a>
 80081d6:	4a09      	ldr	r2, [pc, #36]	; (80081fc <dec_lock+0x74>)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	011b      	lsls	r3, r3, #4
 80081dc:	4413      	add	r3, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	737b      	strb	r3, [r7, #13]
 80081e6:	e001      	b.n	80081ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80081e8:	2302      	movs	r3, #2
 80081ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80081ec:	7b7b      	ldrb	r3, [r7, #13]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	200024a0 	.word	0x200024a0

08008200 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	e010      	b.n	8008230 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800820e:	4a0d      	ldr	r2, [pc, #52]	; (8008244 <clear_lock+0x44>)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	011b      	lsls	r3, r3, #4
 8008214:	4413      	add	r3, r2
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	429a      	cmp	r2, r3
 800821c:	d105      	bne.n	800822a <clear_lock+0x2a>
 800821e:	4a09      	ldr	r2, [pc, #36]	; (8008244 <clear_lock+0x44>)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	4413      	add	r3, r2
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	3301      	adds	r3, #1
 800822e:	60fb      	str	r3, [r7, #12]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d9eb      	bls.n	800820e <clear_lock+0xe>
	}
}
 8008236:	bf00      	nop
 8008238:	3714      	adds	r7, #20
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	200024a0 	.word	0x200024a0

08008248 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	78db      	ldrb	r3, [r3, #3]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d034      	beq.n	80082c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008260:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7858      	ldrb	r0, [r3, #1]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800826c:	2301      	movs	r3, #1
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	f7ff fd10 	bl	8007c94 <disk_write>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d002      	beq.n	8008280 <sync_window+0x38>
			res = FR_DISK_ERR;
 800827a:	2301      	movs	r3, #1
 800827c:	73fb      	strb	r3, [r7, #15]
 800827e:	e022      	b.n	80082c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	1ad2      	subs	r2, r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	429a      	cmp	r2, r3
 8008294:	d217      	bcs.n	80082c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	789b      	ldrb	r3, [r3, #2]
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	e010      	b.n	80082c0 <sync_window+0x78>
					wsect += fs->fsize;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4413      	add	r3, r2
 80082a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	7858      	ldrb	r0, [r3, #1]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80082b2:	2301      	movs	r3, #1
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	f7ff fced 	bl	8007c94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	3b01      	subs	r3, #1
 80082be:	613b      	str	r3, [r7, #16]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d8eb      	bhi.n	800829e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3718      	adds	r7, #24
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80082da:	2300      	movs	r3, #0
 80082dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d01b      	beq.n	8008320 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff ffad 	bl	8008248 <sync_window>
 80082ee:	4603      	mov	r3, r0
 80082f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d113      	bne.n	8008320 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	7858      	ldrb	r0, [r3, #1]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008302:	2301      	movs	r3, #1
 8008304:	683a      	ldr	r2, [r7, #0]
 8008306:	f7ff fca5 	bl	8007c54 <disk_read>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d004      	beq.n	800831a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8008310:	f04f 33ff 	mov.w	r3, #4294967295
 8008314:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8008316:	2301      	movs	r3, #1
 8008318:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8008320:	7bfb      	ldrb	r3, [r7, #15]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
	...

0800832c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f7ff ff87 	bl	8008248 <sync_window>
 800833a:	4603      	mov	r3, r0
 800833c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d159      	bne.n	80083f8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b03      	cmp	r3, #3
 800834a:	d149      	bne.n	80083e0 <sync_fs+0xb4>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	791b      	ldrb	r3, [r3, #4]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d145      	bne.n	80083e0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	899b      	ldrh	r3, [r3, #12]
 800835e:	461a      	mov	r2, r3
 8008360:	2100      	movs	r1, #0
 8008362:	f7ff fd78 	bl	8007e56 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	3338      	adds	r3, #56	; 0x38
 800836a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800836e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fd07 	bl	8007d86 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	3338      	adds	r3, #56	; 0x38
 800837c:	4921      	ldr	r1, [pc, #132]	; (8008404 <sync_fs+0xd8>)
 800837e:	4618      	mov	r0, r3
 8008380:	f7ff fd1c 	bl	8007dbc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3338      	adds	r3, #56	; 0x38
 8008388:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800838c:	491e      	ldr	r1, [pc, #120]	; (8008408 <sync_fs+0xdc>)
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff fd14 	bl	8007dbc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	3338      	adds	r3, #56	; 0x38
 8008398:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699b      	ldr	r3, [r3, #24]
 80083a0:	4619      	mov	r1, r3
 80083a2:	4610      	mov	r0, r2
 80083a4:	f7ff fd0a 	bl	8007dbc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3338      	adds	r3, #56	; 0x38
 80083ac:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	695b      	ldr	r3, [r3, #20]
 80083b4:	4619      	mov	r1, r3
 80083b6:	4610      	mov	r0, r2
 80083b8:	f7ff fd00 	bl	8007dbc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	1c5a      	adds	r2, r3, #1
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	7858      	ldrb	r0, [r3, #1]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083d4:	2301      	movs	r3, #1
 80083d6:	f7ff fc5d 	bl	8007c94 <disk_write>
			fs->fsi_flag = 0;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	785b      	ldrb	r3, [r3, #1]
 80083e4:	2200      	movs	r2, #0
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7ff fc73 	bl	8007cd4 <disk_ioctl>
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <sync_fs+0xcc>
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	41615252 	.word	0x41615252
 8008408:	61417272 	.word	0x61417272

0800840c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
 8008414:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	3b02      	subs	r3, #2
 800841a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	3b02      	subs	r3, #2
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	429a      	cmp	r2, r3
 8008426:	d301      	bcc.n	800842c <clust2sect+0x20>
 8008428:	2300      	movs	r3, #0
 800842a:	e008      	b.n	800843e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	895b      	ldrh	r3, [r3, #10]
 8008430:	461a      	mov	r2, r3
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	fb03 f202 	mul.w	r2, r3, r2
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	4413      	add	r3, r2
}
 800843e:	4618      	mov	r0, r3
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b086      	sub	sp, #24
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d904      	bls.n	800846a <get_fat+0x20>
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d302      	bcc.n	8008470 <get_fat+0x26>
		val = 1;	/* Internal error */
 800846a:	2301      	movs	r3, #1
 800846c:	617b      	str	r3, [r7, #20]
 800846e:	e0b7      	b.n	80085e0 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008470:	f04f 33ff 	mov.w	r3, #4294967295
 8008474:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d05a      	beq.n	8008534 <get_fat+0xea>
 800847e:	2b03      	cmp	r3, #3
 8008480:	d07d      	beq.n	800857e <get_fat+0x134>
 8008482:	2b01      	cmp	r3, #1
 8008484:	f040 80a2 	bne.w	80085cc <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	085b      	lsrs	r3, r3, #1
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4413      	add	r3, r2
 8008494:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	899b      	ldrh	r3, [r3, #12]
 800849e:	4619      	mov	r1, r3
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084a6:	4413      	add	r3, r2
 80084a8:	4619      	mov	r1, r3
 80084aa:	6938      	ldr	r0, [r7, #16]
 80084ac:	f7ff ff10 	bl	80082d0 <move_window>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	f040 808d 	bne.w	80085d2 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	1c5a      	adds	r2, r3, #1
 80084bc:	60fa      	str	r2, [r7, #12]
 80084be:	693a      	ldr	r2, [r7, #16]
 80084c0:	8992      	ldrh	r2, [r2, #12]
 80084c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80084c6:	fb02 f201 	mul.w	r2, r2, r1
 80084ca:	1a9b      	subs	r3, r3, r2
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	4413      	add	r3, r2
 80084d0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	899b      	ldrh	r3, [r3, #12]
 80084de:	4619      	mov	r1, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80084e6:	4413      	add	r3, r2
 80084e8:	4619      	mov	r1, r3
 80084ea:	6938      	ldr	r0, [r7, #16]
 80084ec:	f7ff fef0 	bl	80082d0 <move_window>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d16f      	bne.n	80085d6 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	899b      	ldrh	r3, [r3, #12]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8008502:	fb02 f201 	mul.w	r2, r2, r1
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	693a      	ldr	r2, [r7, #16]
 800850a:	4413      	add	r3, r2
 800850c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	461a      	mov	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4313      	orrs	r3, r2
 8008518:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	f003 0301 	and.w	r3, r3, #1
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <get_fat+0xe0>
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	091b      	lsrs	r3, r3, #4
 8008528:	e002      	b.n	8008530 <get_fat+0xe6>
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008530:	617b      	str	r3, [r7, #20]
			break;
 8008532:	e055      	b.n	80085e0 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	899b      	ldrh	r3, [r3, #12]
 800853c:	085b      	lsrs	r3, r3, #1
 800853e:	b29b      	uxth	r3, r3
 8008540:	4619      	mov	r1, r3
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	fbb3 f3f1 	udiv	r3, r3, r1
 8008548:	4413      	add	r3, r2
 800854a:	4619      	mov	r1, r3
 800854c:	6938      	ldr	r0, [r7, #16]
 800854e:	f7ff febf 	bl	80082d0 <move_window>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d140      	bne.n	80085da <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	005b      	lsls	r3, r3, #1
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	8992      	ldrh	r2, [r2, #12]
 8008566:	fbb3 f0f2 	udiv	r0, r3, r2
 800856a:	fb02 f200 	mul.w	r2, r2, r0
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	440b      	add	r3, r1
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff fbcc 	bl	8007d10 <ld_word>
 8008578:	4603      	mov	r3, r0
 800857a:	617b      	str	r3, [r7, #20]
			break;
 800857c:	e030      	b.n	80085e0 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	899b      	ldrh	r3, [r3, #12]
 8008586:	089b      	lsrs	r3, r3, #2
 8008588:	b29b      	uxth	r3, r3
 800858a:	4619      	mov	r1, r3
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008592:	4413      	add	r3, r2
 8008594:	4619      	mov	r1, r3
 8008596:	6938      	ldr	r0, [r7, #16]
 8008598:	f7ff fe9a 	bl	80082d0 <move_window>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d11d      	bne.n	80085de <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	8992      	ldrh	r2, [r2, #12]
 80085b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80085b4:	fb02 f200 	mul.w	r2, r2, r0
 80085b8:	1a9b      	subs	r3, r3, r2
 80085ba:	440b      	add	r3, r1
 80085bc:	4618      	mov	r0, r3
 80085be:	f7ff fbbf 	bl	8007d40 <ld_dword>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80085c8:	617b      	str	r3, [r7, #20]
			break;
 80085ca:	e009      	b.n	80085e0 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80085cc:	2301      	movs	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e006      	b.n	80085e0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085d2:	bf00      	nop
 80085d4:	e004      	b.n	80085e0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085d6:	bf00      	nop
 80085d8:	e002      	b.n	80085e0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085da:	bf00      	nop
 80085dc:	e000      	b.n	80085e0 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085de:	bf00      	nop
		}
	}

	return val;
 80085e0:	697b      	ldr	r3, [r7, #20]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80085ea:	b590      	push	{r4, r7, lr}
 80085ec:	b089      	sub	sp, #36	; 0x24
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80085f6:	2302      	movs	r3, #2
 80085f8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	f240 8106 	bls.w	800880e <put_fat+0x224>
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	69db      	ldr	r3, [r3, #28]
 8008606:	68ba      	ldr	r2, [r7, #8]
 8008608:	429a      	cmp	r2, r3
 800860a:	f080 8100 	bcs.w	800880e <put_fat+0x224>
		switch (fs->fs_type) {
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	2b02      	cmp	r3, #2
 8008614:	f000 8088 	beq.w	8008728 <put_fat+0x13e>
 8008618:	2b03      	cmp	r3, #3
 800861a:	f000 80b0 	beq.w	800877e <put_fat+0x194>
 800861e:	2b01      	cmp	r3, #1
 8008620:	f040 80f5 	bne.w	800880e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	61bb      	str	r3, [r7, #24]
 8008628:	69bb      	ldr	r3, [r7, #24]
 800862a:	085b      	lsrs	r3, r3, #1
 800862c:	69ba      	ldr	r2, [r7, #24]
 800862e:	4413      	add	r3, r2
 8008630:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	899b      	ldrh	r3, [r3, #12]
 800863a:	4619      	mov	r1, r3
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008642:	4413      	add	r3, r2
 8008644:	4619      	mov	r1, r3
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f7ff fe42 	bl	80082d0 <move_window>
 800864c:	4603      	mov	r3, r0
 800864e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008650:	7ffb      	ldrb	r3, [r7, #31]
 8008652:	2b00      	cmp	r3, #0
 8008654:	f040 80d4 	bne.w	8008800 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	61ba      	str	r2, [r7, #24]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	8992      	ldrh	r2, [r2, #12]
 8008668:	fbb3 f0f2 	udiv	r0, r3, r2
 800866c:	fb02 f200 	mul.w	r2, r2, r0
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	440b      	add	r3, r1
 8008674:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00d      	beq.n	800869c <put_fat+0xb2>
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	b25b      	sxtb	r3, r3
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	b25a      	sxtb	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	b2db      	uxtb	r3, r3
 8008690:	011b      	lsls	r3, r3, #4
 8008692:	b25b      	sxtb	r3, r3
 8008694:	4313      	orrs	r3, r2
 8008696:	b25b      	sxtb	r3, r3
 8008698:	b2db      	uxtb	r3, r3
 800869a:	e001      	b.n	80086a0 <put_fat+0xb6>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	697a      	ldr	r2, [r7, #20]
 80086a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2201      	movs	r2, #1
 80086a8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	899b      	ldrh	r3, [r3, #12]
 80086b2:	4619      	mov	r1, r3
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80086ba:	4413      	add	r3, r2
 80086bc:	4619      	mov	r1, r3
 80086be:	68f8      	ldr	r0, [r7, #12]
 80086c0:	f7ff fe06 	bl	80082d0 <move_window>
 80086c4:	4603      	mov	r3, r0
 80086c6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086c8:	7ffb      	ldrb	r3, [r7, #31]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 809a 	bne.w	8008804 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	899b      	ldrh	r3, [r3, #12]
 80086da:	461a      	mov	r2, r3
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	fbb3 f0f2 	udiv	r0, r3, r2
 80086e2:	fb02 f200 	mul.w	r2, r2, r0
 80086e6:	1a9b      	subs	r3, r3, r2
 80086e8:	440b      	add	r3, r1
 80086ea:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <put_fat+0x114>
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	091b      	lsrs	r3, r3, #4
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	e00e      	b.n	800871c <put_fat+0x132>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	781b      	ldrb	r3, [r3, #0]
 8008702:	b25b      	sxtb	r3, r3
 8008704:	f023 030f 	bic.w	r3, r3, #15
 8008708:	b25a      	sxtb	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	0a1b      	lsrs	r3, r3, #8
 800870e:	b25b      	sxtb	r3, r3
 8008710:	f003 030f 	and.w	r3, r3, #15
 8008714:	b25b      	sxtb	r3, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	b25b      	sxtb	r3, r3
 800871a:	b2db      	uxtb	r3, r3
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	70da      	strb	r2, [r3, #3]
			break;
 8008726:	e072      	b.n	800880e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	899b      	ldrh	r3, [r3, #12]
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	b29b      	uxth	r3, r3
 8008734:	4619      	mov	r1, r3
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	fbb3 f3f1 	udiv	r3, r3, r1
 800873c:	4413      	add	r3, r2
 800873e:	4619      	mov	r1, r3
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f7ff fdc5 	bl	80082d0 <move_window>
 8008746:	4603      	mov	r3, r0
 8008748:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800874a:	7ffb      	ldrb	r3, [r7, #31]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d15b      	bne.n	8008808 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	68fa      	ldr	r2, [r7, #12]
 800875c:	8992      	ldrh	r2, [r2, #12]
 800875e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008762:	fb02 f200 	mul.w	r2, r2, r0
 8008766:	1a9b      	subs	r3, r3, r2
 8008768:	440b      	add	r3, r1
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	b292      	uxth	r2, r2
 800876e:	4611      	mov	r1, r2
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff fb08 	bl	8007d86 <st_word>
			fs->wflag = 1;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	70da      	strb	r2, [r3, #3]
			break;
 800877c:	e047      	b.n	800880e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	899b      	ldrh	r3, [r3, #12]
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	b29b      	uxth	r3, r3
 800878a:	4619      	mov	r1, r3
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008792:	4413      	add	r3, r2
 8008794:	4619      	mov	r1, r3
 8008796:	68f8      	ldr	r0, [r7, #12]
 8008798:	f7ff fd9a 	bl	80082d0 <move_window>
 800879c:	4603      	mov	r3, r0
 800879e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80087a0:	7ffb      	ldrb	r3, [r7, #31]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d132      	bne.n	800880c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	8992      	ldrh	r2, [r2, #12]
 80087ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80087be:	fb02 f200 	mul.w	r2, r2, r0
 80087c2:	1a9b      	subs	r3, r3, r2
 80087c4:	440b      	add	r3, r1
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7ff faba 	bl	8007d40 <ld_dword>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087d2:	4323      	orrs	r3, r4
 80087d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	8992      	ldrh	r2, [r2, #12]
 80087e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80087e8:	fb02 f200 	mul.w	r2, r2, r0
 80087ec:	1a9b      	subs	r3, r3, r2
 80087ee:	440b      	add	r3, r1
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7ff fae2 	bl	8007dbc <st_dword>
			fs->wflag = 1;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	2201      	movs	r2, #1
 80087fc:	70da      	strb	r2, [r3, #3]
			break;
 80087fe:	e006      	b.n	800880e <put_fat+0x224>
			if (res != FR_OK) break;
 8008800:	bf00      	nop
 8008802:	e004      	b.n	800880e <put_fat+0x224>
			if (res != FR_OK) break;
 8008804:	bf00      	nop
 8008806:	e002      	b.n	800880e <put_fat+0x224>
			if (res != FR_OK) break;
 8008808:	bf00      	nop
 800880a:	e000      	b.n	800880e <put_fat+0x224>
			if (res != FR_OK) break;
 800880c:	bf00      	nop
		}
	}
	return res;
 800880e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3724      	adds	r7, #36	; 0x24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd90      	pop	{r4, r7, pc}

08008818 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b088      	sub	sp, #32
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d904      	bls.n	800883e <remove_chain+0x26>
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	68ba      	ldr	r2, [r7, #8]
 800883a:	429a      	cmp	r2, r3
 800883c:	d301      	bcc.n	8008842 <remove_chain+0x2a>
 800883e:	2302      	movs	r3, #2
 8008840:	e04b      	b.n	80088da <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00c      	beq.n	8008862 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008848:	f04f 32ff 	mov.w	r2, #4294967295
 800884c:	6879      	ldr	r1, [r7, #4]
 800884e:	69b8      	ldr	r0, [r7, #24]
 8008850:	f7ff fecb 	bl	80085ea <put_fat>
 8008854:	4603      	mov	r3, r0
 8008856:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008858:	7ffb      	ldrb	r3, [r7, #31]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <remove_chain+0x4a>
 800885e:	7ffb      	ldrb	r3, [r7, #31]
 8008860:	e03b      	b.n	80088da <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7ff fdf0 	bl	800844a <get_fat>
 800886a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d031      	beq.n	80088d6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <remove_chain+0x64>
 8008878:	2302      	movs	r3, #2
 800887a:	e02e      	b.n	80088da <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008882:	d101      	bne.n	8008888 <remove_chain+0x70>
 8008884:	2301      	movs	r3, #1
 8008886:	e028      	b.n	80088da <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008888:	2200      	movs	r2, #0
 800888a:	68b9      	ldr	r1, [r7, #8]
 800888c:	69b8      	ldr	r0, [r7, #24]
 800888e:	f7ff feac 	bl	80085ea <put_fat>
 8008892:	4603      	mov	r3, r0
 8008894:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8008896:	7ffb      	ldrb	r3, [r7, #31]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <remove_chain+0x88>
 800889c:	7ffb      	ldrb	r3, [r7, #31]
 800889e:	e01c      	b.n	80088da <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	699a      	ldr	r2, [r3, #24]
 80088a4:	69bb      	ldr	r3, [r7, #24]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	3b02      	subs	r3, #2
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d20b      	bcs.n	80088c6 <remove_chain+0xae>
			fs->free_clst++;
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	69bb      	ldr	r3, [r7, #24]
 80088b6:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	791b      	ldrb	r3, [r3, #4]
 80088bc:	f043 0301 	orr.w	r3, r3, #1
 80088c0:	b2da      	uxtb	r2, r3
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d3c6      	bcc.n	8008862 <remove_chain+0x4a>
 80088d4:	e000      	b.n	80088d8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80088d6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3720      	adds	r7, #32
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b088      	sub	sp, #32
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10d      	bne.n	8008914 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <create_chain+0x2c>
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	69db      	ldr	r3, [r3, #28]
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	429a      	cmp	r2, r3
 800890c:	d31b      	bcc.n	8008946 <create_chain+0x64>
 800890e:	2301      	movs	r3, #1
 8008910:	61bb      	str	r3, [r7, #24]
 8008912:	e018      	b.n	8008946 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008914:	6839      	ldr	r1, [r7, #0]
 8008916:	6878      	ldr	r0, [r7, #4]
 8008918:	f7ff fd97 	bl	800844a <get_fat>
 800891c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d801      	bhi.n	8008928 <create_chain+0x46>
 8008924:	2301      	movs	r3, #1
 8008926:	e070      	b.n	8008a0a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	d101      	bne.n	8008934 <create_chain+0x52>
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	e06a      	b.n	8008a0a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	69db      	ldr	r3, [r3, #28]
 8008938:	68fa      	ldr	r2, [r7, #12]
 800893a:	429a      	cmp	r2, r3
 800893c:	d201      	bcs.n	8008942 <create_chain+0x60>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	e063      	b.n	8008a0a <create_chain+0x128>
		scl = clst;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	3301      	adds	r3, #1
 800894e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	69fa      	ldr	r2, [r7, #28]
 8008956:	429a      	cmp	r2, r3
 8008958:	d307      	bcc.n	800896a <create_chain+0x88>
				ncl = 2;
 800895a:	2302      	movs	r3, #2
 800895c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800895e:	69fa      	ldr	r2, [r7, #28]
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	429a      	cmp	r2, r3
 8008964:	d901      	bls.n	800896a <create_chain+0x88>
 8008966:	2300      	movs	r3, #0
 8008968:	e04f      	b.n	8008a0a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800896a:	69f9      	ldr	r1, [r7, #28]
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7ff fd6c 	bl	800844a <get_fat>
 8008972:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00e      	beq.n	8008998 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d003      	beq.n	8008988 <create_chain+0xa6>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008986:	d101      	bne.n	800898c <create_chain+0xaa>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	e03e      	b.n	8008a0a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800898c:	69fa      	ldr	r2, [r7, #28]
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	d1da      	bne.n	800894a <create_chain+0x68>
 8008994:	2300      	movs	r3, #0
 8008996:	e038      	b.n	8008a0a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008998:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800899a:	f04f 32ff 	mov.w	r2, #4294967295
 800899e:	69f9      	ldr	r1, [r7, #28]
 80089a0:	6938      	ldr	r0, [r7, #16]
 80089a2:	f7ff fe22 	bl	80085ea <put_fat>
 80089a6:	4603      	mov	r3, r0
 80089a8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d109      	bne.n	80089c4 <create_chain+0xe2>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80089b6:	69fa      	ldr	r2, [r7, #28]
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6938      	ldr	r0, [r7, #16]
 80089bc:	f7ff fe15 	bl	80085ea <put_fat>
 80089c0:	4603      	mov	r3, r0
 80089c2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d116      	bne.n	80089f8 <create_chain+0x116>
		fs->last_clst = ncl;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	69fa      	ldr	r2, [r7, #28]
 80089ce:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	699a      	ldr	r2, [r3, #24]
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	69db      	ldr	r3, [r3, #28]
 80089d8:	3b02      	subs	r3, #2
 80089da:	429a      	cmp	r2, r3
 80089dc:	d804      	bhi.n	80089e8 <create_chain+0x106>
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	1e5a      	subs	r2, r3, #1
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	791b      	ldrb	r3, [r3, #4]
 80089ec:	f043 0301 	orr.w	r3, r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	711a      	strb	r2, [r3, #4]
 80089f6:	e007      	b.n	8008a08 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089f8:	7dfb      	ldrb	r3, [r7, #23]
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d102      	bne.n	8008a04 <create_chain+0x122>
 80089fe:	f04f 33ff 	mov.w	r3, #4294967295
 8008a02:	e000      	b.n	8008a06 <create_chain+0x124>
 8008a04:	2301      	movs	r3, #1
 8008a06:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008a08:	69fb      	ldr	r3, [r7, #28]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3720      	adds	r7, #32
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b087      	sub	sp, #28
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a26:	3304      	adds	r3, #4
 8008a28:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	899b      	ldrh	r3, [r3, #12]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	8952      	ldrh	r2, [r2, #10]
 8008a3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1d1a      	adds	r2, r3, #4
 8008a44:	613a      	str	r2, [r7, #16]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <clmt_clust+0x42>
 8008a50:	2300      	movs	r3, #0
 8008a52:	e010      	b.n	8008a76 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008a54:	697a      	ldr	r2, [r7, #20]
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	429a      	cmp	r2, r3
 8008a5a:	d307      	bcc.n	8008a6c <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	1ad3      	subs	r3, r2, r3
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	3304      	adds	r3, #4
 8008a68:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a6a:	e7e9      	b.n	8008a40 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008a6c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	4413      	add	r3, r2
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a98:	d204      	bcs.n	8008aa4 <dir_sdi+0x22>
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	f003 031f 	and.w	r3, r3, #31
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	e071      	b.n	8008b8c <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	683a      	ldr	r2, [r7, #0]
 8008aac:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d106      	bne.n	8008ac8 <dir_sdi+0x46>
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	d902      	bls.n	8008ac8 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d10c      	bne.n	8008ae8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	095b      	lsrs	r3, r3, #5
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	8912      	ldrh	r2, [r2, #8]
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d301      	bcc.n	8008ade <dir_sdi+0x5c>
 8008ada:	2302      	movs	r3, #2
 8008adc:	e056      	b.n	8008b8c <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	61da      	str	r2, [r3, #28]
 8008ae6:	e02d      	b.n	8008b44 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	895b      	ldrh	r3, [r3, #10]
 8008aec:	461a      	mov	r2, r3
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	899b      	ldrh	r3, [r3, #12]
 8008af2:	fb03 f302 	mul.w	r3, r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008af8:	e019      	b.n	8008b2e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6979      	ldr	r1, [r7, #20]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fca3 	bl	800844a <get_fat>
 8008b04:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0c:	d101      	bne.n	8008b12 <dir_sdi+0x90>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e03c      	b.n	8008b8c <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d904      	bls.n	8008b22 <dir_sdi+0xa0>
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	69db      	ldr	r3, [r3, #28]
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d301      	bcc.n	8008b26 <dir_sdi+0xa4>
 8008b22:	2302      	movs	r3, #2
 8008b24:	e032      	b.n	8008b8c <dir_sdi+0x10a>
			ofs -= csz;
 8008b26:	683a      	ldr	r2, [r7, #0]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	1ad3      	subs	r3, r2, r3
 8008b2c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d2e1      	bcs.n	8008afa <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008b36:	6979      	ldr	r1, [r7, #20]
 8008b38:	6938      	ldr	r0, [r7, #16]
 8008b3a:	f7ff fc67 	bl	800840c <clust2sect>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d101      	bne.n	8008b56 <dir_sdi+0xd4>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e01a      	b.n	8008b8c <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	69da      	ldr	r2, [r3, #28]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	899b      	ldrh	r3, [r3, #12]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b66:	441a      	add	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	899b      	ldrh	r3, [r3, #12]
 8008b76:	461a      	mov	r2, r3
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b7e:	fb02 f200 	mul.w	r2, r2, r0
 8008b82:	1a9b      	subs	r3, r3, r2
 8008b84:	18ca      	adds	r2, r1, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3718      	adds	r7, #24
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b086      	sub	sp, #24
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	695b      	ldr	r3, [r3, #20]
 8008ba8:	3320      	adds	r3, #32
 8008baa:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d003      	beq.n	8008bbc <dir_next+0x28>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bba:	d301      	bcc.n	8008bc0 <dir_next+0x2c>
 8008bbc:	2304      	movs	r3, #4
 8008bbe:	e0bb      	b.n	8008d38 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	899b      	ldrh	r3, [r3, #12]
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8008bcc:	fb02 f201 	mul.w	r2, r2, r1
 8008bd0:	1a9b      	subs	r3, r3, r2
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f040 809d 	bne.w	8008d12 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	69db      	ldr	r3, [r3, #28]
 8008bdc:	1c5a      	adds	r2, r3, #1
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10b      	bne.n	8008c02 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	095b      	lsrs	r3, r3, #5
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	8912      	ldrh	r2, [r2, #8]
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f0c0 808d 	bcc.w	8008d12 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	61da      	str	r2, [r3, #28]
 8008bfe:	2304      	movs	r3, #4
 8008c00:	e09a      	b.n	8008d38 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	899b      	ldrh	r3, [r3, #12]
 8008c06:	461a      	mov	r2, r3
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	8952      	ldrh	r2, [r2, #10]
 8008c12:	3a01      	subs	r2, #1
 8008c14:	4013      	ands	r3, r2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d17b      	bne.n	8008d12 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	699b      	ldr	r3, [r3, #24]
 8008c20:	4619      	mov	r1, r3
 8008c22:	4610      	mov	r0, r2
 8008c24:	f7ff fc11 	bl	800844a <get_fat>
 8008c28:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d801      	bhi.n	8008c34 <dir_next+0xa0>
 8008c30:	2302      	movs	r3, #2
 8008c32:	e081      	b.n	8008d38 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c3a:	d101      	bne.n	8008c40 <dir_next+0xac>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e07b      	b.n	8008d38 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	69db      	ldr	r3, [r3, #28]
 8008c44:	697a      	ldr	r2, [r7, #20]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d359      	bcc.n	8008cfe <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d104      	bne.n	8008c5a <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	61da      	str	r2, [r3, #28]
 8008c56:	2304      	movs	r3, #4
 8008c58:	e06e      	b.n	8008d38 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f7ff fe3d 	bl	80088e2 <create_chain>
 8008c68:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d101      	bne.n	8008c74 <dir_next+0xe0>
 8008c70:	2307      	movs	r3, #7
 8008c72:	e061      	b.n	8008d38 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d101      	bne.n	8008c7e <dir_next+0xea>
 8008c7a:	2302      	movs	r3, #2
 8008c7c:	e05c      	b.n	8008d38 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c84:	d101      	bne.n	8008c8a <dir_next+0xf6>
 8008c86:	2301      	movs	r3, #1
 8008c88:	e056      	b.n	8008d38 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff fadc 	bl	8008248 <sync_window>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <dir_next+0x106>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e04e      	b.n	8008d38 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	899b      	ldrh	r3, [r3, #12]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	2100      	movs	r1, #0
 8008ca8:	f7ff f8d5 	bl	8007e56 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008cac:	2300      	movs	r3, #0
 8008cae:	613b      	str	r3, [r7, #16]
 8008cb0:	6979      	ldr	r1, [r7, #20]
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff fbaa 	bl	800840c <clust2sect>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8008cbe:	e012      	b.n	8008ce6 <dir_next+0x152>
						fs->wflag = 1;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f7ff fabe 	bl	8008248 <sync_window>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d001      	beq.n	8008cd6 <dir_next+0x142>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e030      	b.n	8008d38 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	613b      	str	r3, [r7, #16]
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ce0:	1c5a      	adds	r2, r3, #1
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	635a      	str	r2, [r3, #52]	; 0x34
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	895b      	ldrh	r3, [r3, #10]
 8008cea:	461a      	mov	r2, r3
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d3e6      	bcc.n	8008cc0 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	1ad2      	subs	r2, r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008d04:	6979      	ldr	r1, [r7, #20]
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7ff fb80 	bl	800840c <clust2sect>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	899b      	ldrh	r3, [r3, #12]
 8008d22:	461a      	mov	r2, r3
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d2a:	fb02 f200 	mul.w	r2, r2, r0
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	18ca      	adds	r2, r1, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d36:	2300      	movs	r3, #0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3718      	adds	r7, #24
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d50:	2100      	movs	r1, #0
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7ff fe95 	bl	8008a82 <dir_sdi>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d5c:	7dfb      	ldrb	r3, [r7, #23]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d12b      	bne.n	8008dba <dir_alloc+0x7a>
		n = 0;
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	69db      	ldr	r3, [r3, #28]
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	68f8      	ldr	r0, [r7, #12]
 8008d6e:	f7ff faaf 	bl	80082d0 <move_window>
 8008d72:	4603      	mov	r3, r0
 8008d74:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d76:	7dfb      	ldrb	r3, [r7, #23]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d11d      	bne.n	8008db8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a1b      	ldr	r3, [r3, #32]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	2be5      	cmp	r3, #229	; 0xe5
 8008d84:	d004      	beq.n	8008d90 <dir_alloc+0x50>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d107      	bne.n	8008da0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	3301      	adds	r3, #1
 8008d94:	613b      	str	r3, [r7, #16]
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d102      	bne.n	8008da4 <dir_alloc+0x64>
 8008d9e:	e00c      	b.n	8008dba <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008da0:	2300      	movs	r3, #0
 8008da2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008da4:	2101      	movs	r1, #1
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7ff fef4 	bl	8008b94 <dir_next>
 8008dac:	4603      	mov	r3, r0
 8008dae:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008db0:	7dfb      	ldrb	r3, [r7, #23]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0d7      	beq.n	8008d66 <dir_alloc+0x26>
 8008db6:	e000      	b.n	8008dba <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008db8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008dba:	7dfb      	ldrb	r3, [r7, #23]
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d101      	bne.n	8008dc4 <dir_alloc+0x84>
 8008dc0:	2307      	movs	r3, #7
 8008dc2:	75fb      	strb	r3, [r7, #23]
	return res;
 8008dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3718      	adds	r7, #24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	331a      	adds	r3, #26
 8008ddc:	4618      	mov	r0, r3
 8008dde:	f7fe ff97 	bl	8007d10 <ld_word>
 8008de2:	4603      	mov	r3, r0
 8008de4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d109      	bne.n	8008e02 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	3314      	adds	r3, #20
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe ff8c 	bl	8007d10 <ld_word>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	041b      	lsls	r3, r3, #16
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008e02:	68fb      	ldr	r3, [r7, #12]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	60f8      	str	r0, [r7, #12]
 8008e14:	60b9      	str	r1, [r7, #8]
 8008e16:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	331a      	adds	r3, #26
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	b292      	uxth	r2, r2
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe ffaf 	bl	8007d86 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d109      	bne.n	8008e44 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f103 0214 	add.w	r2, r3, #20
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	0c1b      	lsrs	r3, r3, #16
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4610      	mov	r0, r2
 8008e40:	f7fe ffa1 	bl	8007d86 <st_word>
	}
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fe10 	bl	8008a82 <dir_sdi>
 8008e62:	4603      	mov	r3, r0
 8008e64:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d001      	beq.n	8008e70 <dir_find+0x24>
 8008e6c:	7dfb      	ldrb	r3, [r7, #23]
 8008e6e:	e03e      	b.n	8008eee <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	69db      	ldr	r3, [r3, #28]
 8008e74:	4619      	mov	r1, r3
 8008e76:	6938      	ldr	r0, [r7, #16]
 8008e78:	f7ff fa2a 	bl	80082d0 <move_window>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008e80:	7dfb      	ldrb	r3, [r7, #23]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d12f      	bne.n	8008ee6 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008e8e:	7bfb      	ldrb	r3, [r7, #15]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d102      	bne.n	8008e9a <dir_find+0x4e>
 8008e94:	2304      	movs	r3, #4
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	e028      	b.n	8008eec <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6a1b      	ldr	r3, [r3, #32]
 8008e9e:	330b      	adds	r3, #11
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ea6:	b2da      	uxtb	r2, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a1b      	ldr	r3, [r3, #32]
 8008eb0:	330b      	adds	r3, #11
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	f003 0308 	and.w	r3, r3, #8
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <dir_find+0x86>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6a18      	ldr	r0, [r3, #32]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	3324      	adds	r3, #36	; 0x24
 8008ec4:	220b      	movs	r2, #11
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	f7fe ffdf 	bl	8007e8a <mem_cmp>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00b      	beq.n	8008eea <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff fe5d 	bl	8008b94 <dir_next>
 8008eda:	4603      	mov	r3, r0
 8008edc:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008ede:	7dfb      	ldrb	r3, [r7, #23]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0c5      	beq.n	8008e70 <dir_find+0x24>
 8008ee4:	e002      	b.n	8008eec <dir_find+0xa0>
		if (res != FR_OK) break;
 8008ee6:	bf00      	nop
 8008ee8:	e000      	b.n	8008eec <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008eea:	bf00      	nop

	return res;
 8008eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}

08008ef6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008f04:	2101      	movs	r1, #1
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ff1a 	bl	8008d40 <dir_alloc>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d11c      	bne.n	8008f50 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	69db      	ldr	r3, [r3, #28]
 8008f1a:	4619      	mov	r1, r3
 8008f1c:	68b8      	ldr	r0, [r7, #8]
 8008f1e:	f7ff f9d7 	bl	80082d0 <move_window>
 8008f22:	4603      	mov	r3, r0
 8008f24:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008f26:	7bfb      	ldrb	r3, [r7, #15]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d111      	bne.n	8008f50 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	2220      	movs	r2, #32
 8008f32:	2100      	movs	r1, #0
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe ff8e 	bl	8007e56 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a18      	ldr	r0, [r3, #32]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	3324      	adds	r3, #36	; 0x24
 8008f42:	220b      	movs	r2, #11
 8008f44:	4619      	mov	r1, r3
 8008f46:	f7fe ff65 	bl	8007e14 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
	...

08008f5c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b088      	sub	sp, #32
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
 8008f64:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	3324      	adds	r3, #36	; 0x24
 8008f70:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008f72:	220b      	movs	r2, #11
 8008f74:	2120      	movs	r1, #32
 8008f76:	68b8      	ldr	r0, [r7, #8]
 8008f78:	f7fe ff6d 	bl	8007e56 <mem_set>
	si = i = 0; ni = 8;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	613b      	str	r3, [r7, #16]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	2308      	movs	r3, #8
 8008f86:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	1c5a      	adds	r2, r3, #1
 8008f8c:	617a      	str	r2, [r7, #20]
 8008f8e:	68fa      	ldr	r2, [r7, #12]
 8008f90:	4413      	add	r3, r2
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f96:	7ffb      	ldrb	r3, [r7, #31]
 8008f98:	2b20      	cmp	r3, #32
 8008f9a:	d94e      	bls.n	800903a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008f9c:	7ffb      	ldrb	r3, [r7, #31]
 8008f9e:	2b2f      	cmp	r3, #47	; 0x2f
 8008fa0:	d006      	beq.n	8008fb0 <create_name+0x54>
 8008fa2:	7ffb      	ldrb	r3, [r7, #31]
 8008fa4:	2b5c      	cmp	r3, #92	; 0x5c
 8008fa6:	d110      	bne.n	8008fca <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008fa8:	e002      	b.n	8008fb0 <create_name+0x54>
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	3301      	adds	r3, #1
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	68fa      	ldr	r2, [r7, #12]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	2b2f      	cmp	r3, #47	; 0x2f
 8008fba:	d0f6      	beq.n	8008faa <create_name+0x4e>
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	781b      	ldrb	r3, [r3, #0]
 8008fc4:	2b5c      	cmp	r3, #92	; 0x5c
 8008fc6:	d0f0      	beq.n	8008faa <create_name+0x4e>
			break;
 8008fc8:	e038      	b.n	800903c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008fca:	7ffb      	ldrb	r3, [r7, #31]
 8008fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8008fce:	d003      	beq.n	8008fd8 <create_name+0x7c>
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d30c      	bcc.n	8008ff2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b0b      	cmp	r3, #11
 8008fdc:	d002      	beq.n	8008fe4 <create_name+0x88>
 8008fde:	7ffb      	ldrb	r3, [r7, #31]
 8008fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8008fe2:	d001      	beq.n	8008fe8 <create_name+0x8c>
 8008fe4:	2306      	movs	r3, #6
 8008fe6:	e044      	b.n	8009072 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008fe8:	2308      	movs	r3, #8
 8008fea:	613b      	str	r3, [r7, #16]
 8008fec:	230b      	movs	r3, #11
 8008fee:	61bb      	str	r3, [r7, #24]
			continue;
 8008ff0:	e022      	b.n	8009038 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008ff2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da04      	bge.n	8009004 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008ffa:	7ffb      	ldrb	r3, [r7, #31]
 8008ffc:	3b80      	subs	r3, #128	; 0x80
 8008ffe:	4a1f      	ldr	r2, [pc, #124]	; (800907c <create_name+0x120>)
 8009000:	5cd3      	ldrb	r3, [r2, r3]
 8009002:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009004:	7ffb      	ldrb	r3, [r7, #31]
 8009006:	4619      	mov	r1, r3
 8009008:	481d      	ldr	r0, [pc, #116]	; (8009080 <create_name+0x124>)
 800900a:	f7fe ff65 	bl	8007ed8 <chk_chr>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <create_name+0xbc>
 8009014:	2306      	movs	r3, #6
 8009016:	e02c      	b.n	8009072 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009018:	7ffb      	ldrb	r3, [r7, #31]
 800901a:	2b60      	cmp	r3, #96	; 0x60
 800901c:	d905      	bls.n	800902a <create_name+0xce>
 800901e:	7ffb      	ldrb	r3, [r7, #31]
 8009020:	2b7a      	cmp	r3, #122	; 0x7a
 8009022:	d802      	bhi.n	800902a <create_name+0xce>
 8009024:	7ffb      	ldrb	r3, [r7, #31]
 8009026:	3b20      	subs	r3, #32
 8009028:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	1c5a      	adds	r2, r3, #1
 800902e:	613a      	str	r2, [r7, #16]
 8009030:	68ba      	ldr	r2, [r7, #8]
 8009032:	4413      	add	r3, r2
 8009034:	7ffa      	ldrb	r2, [r7, #31]
 8009036:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009038:	e7a6      	b.n	8008f88 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800903a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	441a      	add	r2, r3
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009046:	693b      	ldr	r3, [r7, #16]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d101      	bne.n	8009050 <create_name+0xf4>
 800904c:	2306      	movs	r3, #6
 800904e:	e010      	b.n	8009072 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	2be5      	cmp	r3, #229	; 0xe5
 8009056:	d102      	bne.n	800905e <create_name+0x102>
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	2205      	movs	r2, #5
 800905c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800905e:	7ffb      	ldrb	r3, [r7, #31]
 8009060:	2b20      	cmp	r3, #32
 8009062:	d801      	bhi.n	8009068 <create_name+0x10c>
 8009064:	2204      	movs	r2, #4
 8009066:	e000      	b.n	800906a <create_name+0x10e>
 8009068:	2200      	movs	r2, #0
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	330b      	adds	r3, #11
 800906e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009070:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009072:	4618      	mov	r0, r3
 8009074:	3720      	adds	r7, #32
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	0800d8a8 	.word	0x0800d8a8
 8009080:	0800d828 	.word	0x0800d828

08009084 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
 800908c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009098:	e002      	b.n	80090a0 <follow_path+0x1c>
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	3301      	adds	r3, #1
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b2f      	cmp	r3, #47	; 0x2f
 80090a6:	d0f8      	beq.n	800909a <follow_path+0x16>
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b5c      	cmp	r3, #92	; 0x5c
 80090ae:	d0f4      	beq.n	800909a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	2200      	movs	r2, #0
 80090b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	2b1f      	cmp	r3, #31
 80090bc:	d80a      	bhi.n	80090d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2280      	movs	r2, #128	; 0x80
 80090c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80090c6:	2100      	movs	r1, #0
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff fcda 	bl	8008a82 <dir_sdi>
 80090ce:	4603      	mov	r3, r0
 80090d0:	75fb      	strb	r3, [r7, #23]
 80090d2:	e048      	b.n	8009166 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80090d4:	463b      	mov	r3, r7
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff ff3f 	bl	8008f5c <create_name>
 80090de:	4603      	mov	r3, r0
 80090e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090e2:	7dfb      	ldrb	r3, [r7, #23]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d139      	bne.n	800915c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7ff feaf 	bl	8008e4c <dir_find>
 80090ee:	4603      	mov	r3, r0
 80090f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80090fa:	7dfb      	ldrb	r3, [r7, #23]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00a      	beq.n	8009116 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b04      	cmp	r3, #4
 8009104:	d12c      	bne.n	8009160 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009106:	7afb      	ldrb	r3, [r7, #11]
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d127      	bne.n	8009160 <follow_path+0xdc>
 8009110:	2305      	movs	r3, #5
 8009112:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009114:	e024      	b.n	8009160 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009116:	7afb      	ldrb	r3, [r7, #11]
 8009118:	f003 0304 	and.w	r3, r3, #4
 800911c:	2b00      	cmp	r3, #0
 800911e:	d121      	bne.n	8009164 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	799b      	ldrb	r3, [r3, #6]
 8009124:	f003 0310 	and.w	r3, r3, #16
 8009128:	2b00      	cmp	r3, #0
 800912a:	d102      	bne.n	8009132 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800912c:	2305      	movs	r3, #5
 800912e:	75fb      	strb	r3, [r7, #23]
 8009130:	e019      	b.n	8009166 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	695b      	ldr	r3, [r3, #20]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	8992      	ldrh	r2, [r2, #12]
 8009140:	fbb3 f0f2 	udiv	r0, r3, r2
 8009144:	fb02 f200 	mul.w	r2, r2, r0
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	440b      	add	r3, r1
 800914c:	4619      	mov	r1, r3
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f7ff fe3d 	bl	8008dce <ld_clust>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800915a:	e7bb      	b.n	80090d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800915c:	bf00      	nop
 800915e:	e002      	b.n	8009166 <follow_path+0xe2>
				break;
 8009160:	bf00      	nop
 8009162:	e000      	b.n	8009166 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009164:	bf00      	nop
			}
		}
	}

	return res;
 8009166:	7dfb      	ldrb	r3, [r7, #23]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009178:	f04f 33ff 	mov.w	r3, #4294967295
 800917c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d031      	beq.n	80091ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	617b      	str	r3, [r7, #20]
 800918c:	e002      	b.n	8009194 <get_ldnumber+0x24>
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	3301      	adds	r3, #1
 8009192:	617b      	str	r3, [r7, #20]
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	2b20      	cmp	r3, #32
 800919a:	d903      	bls.n	80091a4 <get_ldnumber+0x34>
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b3a      	cmp	r3, #58	; 0x3a
 80091a2:	d1f4      	bne.n	800918e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	2b3a      	cmp	r3, #58	; 0x3a
 80091aa:	d11c      	bne.n	80091e6 <get_ldnumber+0x76>
			tp = *path;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	1c5a      	adds	r2, r3, #1
 80091b6:	60fa      	str	r2, [r7, #12]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	3b30      	subs	r3, #48	; 0x30
 80091bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	2b09      	cmp	r3, #9
 80091c2:	d80e      	bhi.n	80091e2 <get_ldnumber+0x72>
 80091c4:	68fa      	ldr	r2, [r7, #12]
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d10a      	bne.n	80091e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d107      	bne.n	80091e2 <get_ldnumber+0x72>
					vol = (int)i;
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	3301      	adds	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80091e2:	693b      	ldr	r3, [r7, #16]
 80091e4:	e002      	b.n	80091ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80091e6:	2300      	movs	r3, #0
 80091e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80091ea:	693b      	ldr	r3, [r7, #16]
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	371c      	adds	r7, #28
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	70da      	strb	r2, [r3, #3]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f04f 32ff 	mov.w	r2, #4294967295
 800920e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8009210:	6839      	ldr	r1, [r7, #0]
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff f85c 	bl	80082d0 <move_window>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <check_fs+0x2a>
 800921e:	2304      	movs	r3, #4
 8009220:	e038      	b.n	8009294 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	3338      	adds	r3, #56	; 0x38
 8009226:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe fd70 	bl	8007d10 <ld_word>
 8009230:	4603      	mov	r3, r0
 8009232:	461a      	mov	r2, r3
 8009234:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009238:	429a      	cmp	r2, r3
 800923a:	d001      	beq.n	8009240 <check_fs+0x48>
 800923c:	2303      	movs	r3, #3
 800923e:	e029      	b.n	8009294 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009246:	2be9      	cmp	r3, #233	; 0xe9
 8009248:	d009      	beq.n	800925e <check_fs+0x66>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009250:	2beb      	cmp	r3, #235	; 0xeb
 8009252:	d11e      	bne.n	8009292 <check_fs+0x9a>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800925a:	2b90      	cmp	r3, #144	; 0x90
 800925c:	d119      	bne.n	8009292 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	3338      	adds	r3, #56	; 0x38
 8009262:	3336      	adds	r3, #54	; 0x36
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe fd6b 	bl	8007d40 <ld_dword>
 800926a:	4603      	mov	r3, r0
 800926c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009270:	4a0a      	ldr	r2, [pc, #40]	; (800929c <check_fs+0xa4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d101      	bne.n	800927a <check_fs+0x82>
 8009276:	2300      	movs	r3, #0
 8009278:	e00c      	b.n	8009294 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	3338      	adds	r3, #56	; 0x38
 800927e:	3352      	adds	r3, #82	; 0x52
 8009280:	4618      	mov	r0, r3
 8009282:	f7fe fd5d 	bl	8007d40 <ld_dword>
 8009286:	4602      	mov	r2, r0
 8009288:	4b05      	ldr	r3, [pc, #20]	; (80092a0 <check_fs+0xa8>)
 800928a:	429a      	cmp	r2, r3
 800928c:	d101      	bne.n	8009292 <check_fs+0x9a>
 800928e:	2300      	movs	r3, #0
 8009290:	e000      	b.n	8009294 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8009292:	2302      	movs	r3, #2
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}
 800929c:	00544146 	.word	0x00544146
 80092a0:	33544146 	.word	0x33544146

080092a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b096      	sub	sp, #88	; 0x58
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	60b9      	str	r1, [r7, #8]
 80092ae:	4613      	mov	r3, r2
 80092b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f7ff ff59 	bl	8009170 <get_ldnumber>
 80092be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80092c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da01      	bge.n	80092ca <find_volume+0x26>
 80092c6:	230b      	movs	r3, #11
 80092c8:	e26c      	b.n	80097a4 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80092ca:	4aa4      	ldr	r2, [pc, #656]	; (800955c <find_volume+0x2b8>)
 80092cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <find_volume+0x3a>
 80092da:	230c      	movs	r3, #12
 80092dc:	e262      	b.n	80097a4 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80092de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092e0:	f7fe fe15 	bl	8007f0e <lock_fs>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <find_volume+0x4a>
 80092ea:	230f      	movs	r3, #15
 80092ec:	e25a      	b.n	80097a4 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	f023 0301 	bic.w	r3, r3, #1
 80092fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01a      	beq.n	800933a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009306:	785b      	ldrb	r3, [r3, #1]
 8009308:	4618      	mov	r0, r3
 800930a:	f7fe fc63 	bl	8007bd4 <disk_status>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009318:	f003 0301 	and.w	r3, r3, #1
 800931c:	2b00      	cmp	r3, #0
 800931e:	d10c      	bne.n	800933a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d007      	beq.n	8009336 <find_volume+0x92>
 8009326:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800932a:	f003 0304 	and.w	r3, r3, #4
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009332:	230a      	movs	r3, #10
 8009334:	e236      	b.n	80097a4 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8009336:	2300      	movs	r3, #0
 8009338:	e234      	b.n	80097a4 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800933a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800933c:	2200      	movs	r2, #0
 800933e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009342:	b2da      	uxtb	r2, r3
 8009344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009346:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	785b      	ldrb	r3, [r3, #1]
 800934c:	4618      	mov	r0, r3
 800934e:	f7fe fc5b 	bl	8007c08 <disk_initialize>
 8009352:	4603      	mov	r3, r0
 8009354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009358:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009364:	2303      	movs	r3, #3
 8009366:	e21d      	b.n	80097a4 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d007      	beq.n	800937e <find_volume+0xda>
 800936e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009372:	f003 0304 	and.w	r3, r3, #4
 8009376:	2b00      	cmp	r3, #0
 8009378:	d001      	beq.n	800937e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800937a:	230a      	movs	r3, #10
 800937c:	e212      	b.n	80097a4 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800937e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009380:	7858      	ldrb	r0, [r3, #1]
 8009382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009384:	330c      	adds	r3, #12
 8009386:	461a      	mov	r2, r3
 8009388:	2102      	movs	r1, #2
 800938a:	f7fe fca3 	bl	8007cd4 <disk_ioctl>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d001      	beq.n	8009398 <find_volume+0xf4>
 8009394:	2301      	movs	r3, #1
 8009396:	e205      	b.n	80097a4 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800939a:	899b      	ldrh	r3, [r3, #12]
 800939c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093a0:	d80d      	bhi.n	80093be <find_volume+0x11a>
 80093a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093a4:	899b      	ldrh	r3, [r3, #12]
 80093a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093aa:	d308      	bcc.n	80093be <find_volume+0x11a>
 80093ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ae:	899b      	ldrh	r3, [r3, #12]
 80093b0:	461a      	mov	r2, r3
 80093b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b4:	899b      	ldrh	r3, [r3, #12]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	4013      	ands	r3, r2
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d001      	beq.n	80093c2 <find_volume+0x11e>
 80093be:	2301      	movs	r3, #1
 80093c0:	e1f0      	b.n	80097a4 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80093c2:	2300      	movs	r3, #0
 80093c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80093c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093ca:	f7ff ff15 	bl	80091f8 <check_fs>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80093d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d14b      	bne.n	8009474 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80093dc:	2300      	movs	r3, #0
 80093de:	643b      	str	r3, [r7, #64]	; 0x40
 80093e0:	e01f      	b.n	8009422 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80093e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80093e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093ea:	011b      	lsls	r3, r3, #4
 80093ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80093f0:	4413      	add	r3, r2
 80093f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80093f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f6:	3304      	adds	r3, #4
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d006      	beq.n	800940c <find_volume+0x168>
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	3308      	adds	r3, #8
 8009402:	4618      	mov	r0, r3
 8009404:	f7fe fc9c 	bl	8007d40 <ld_dword>
 8009408:	4602      	mov	r2, r0
 800940a:	e000      	b.n	800940e <find_volume+0x16a>
 800940c:	2200      	movs	r2, #0
 800940e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8009416:	440b      	add	r3, r1
 8009418:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800941c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941e:	3301      	adds	r3, #1
 8009420:	643b      	str	r3, [r7, #64]	; 0x40
 8009422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009424:	2b03      	cmp	r3, #3
 8009426:	d9dc      	bls.n	80093e2 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009428:	2300      	movs	r3, #0
 800942a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800942c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <find_volume+0x194>
 8009432:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009434:	3b01      	subs	r3, #1
 8009436:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009440:	4413      	add	r3, r2
 8009442:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009446:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800944a:	2b00      	cmp	r3, #0
 800944c:	d005      	beq.n	800945a <find_volume+0x1b6>
 800944e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009450:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009452:	f7ff fed1 	bl	80091f8 <check_fs>
 8009456:	4603      	mov	r3, r0
 8009458:	e000      	b.n	800945c <find_volume+0x1b8>
 800945a:	2303      	movs	r3, #3
 800945c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009464:	2b01      	cmp	r3, #1
 8009466:	d905      	bls.n	8009474 <find_volume+0x1d0>
 8009468:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946a:	3301      	adds	r3, #1
 800946c:	643b      	str	r3, [r7, #64]	; 0x40
 800946e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009470:	2b03      	cmp	r3, #3
 8009472:	d9e1      	bls.n	8009438 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009474:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009478:	2b04      	cmp	r3, #4
 800947a:	d101      	bne.n	8009480 <find_volume+0x1dc>
 800947c:	2301      	movs	r3, #1
 800947e:	e191      	b.n	80097a4 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009480:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009484:	2b01      	cmp	r3, #1
 8009486:	d901      	bls.n	800948c <find_volume+0x1e8>
 8009488:	230d      	movs	r3, #13
 800948a:	e18b      	b.n	80097a4 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	3338      	adds	r3, #56	; 0x38
 8009490:	330b      	adds	r3, #11
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fc3c 	bl	8007d10 <ld_word>
 8009498:	4603      	mov	r3, r0
 800949a:	461a      	mov	r2, r3
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	899b      	ldrh	r3, [r3, #12]
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d001      	beq.n	80094a8 <find_volume+0x204>
 80094a4:	230d      	movs	r3, #13
 80094a6:	e17d      	b.n	80097a4 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80094a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094aa:	3338      	adds	r3, #56	; 0x38
 80094ac:	3316      	adds	r3, #22
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fc2e 	bl	8007d10 <ld_word>
 80094b4:	4603      	mov	r3, r0
 80094b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80094b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <find_volume+0x228>
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	3338      	adds	r3, #56	; 0x38
 80094c2:	3324      	adds	r3, #36	; 0x24
 80094c4:	4618      	mov	r0, r3
 80094c6:	f7fe fc3b 	bl	8007d40 <ld_dword>
 80094ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094d0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80094dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094de:	789b      	ldrb	r3, [r3, #2]
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d005      	beq.n	80094f0 <find_volume+0x24c>
 80094e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e6:	789b      	ldrb	r3, [r3, #2]
 80094e8:	2b02      	cmp	r3, #2
 80094ea:	d001      	beq.n	80094f0 <find_volume+0x24c>
 80094ec:	230d      	movs	r3, #13
 80094ee:	e159      	b.n	80097a4 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	789b      	ldrb	r3, [r3, #2]
 80094f4:	461a      	mov	r2, r3
 80094f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f8:	fb02 f303 	mul.w	r3, r2, r3
 80094fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80094fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009504:	b29a      	uxth	r2, r3
 8009506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009508:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800950a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950c:	895b      	ldrh	r3, [r3, #10]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d008      	beq.n	8009524 <find_volume+0x280>
 8009512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009514:	895b      	ldrh	r3, [r3, #10]
 8009516:	461a      	mov	r2, r3
 8009518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951a:	895b      	ldrh	r3, [r3, #10]
 800951c:	3b01      	subs	r3, #1
 800951e:	4013      	ands	r3, r2
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <find_volume+0x284>
 8009524:	230d      	movs	r3, #13
 8009526:	e13d      	b.n	80097a4 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800952a:	3338      	adds	r3, #56	; 0x38
 800952c:	3311      	adds	r3, #17
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe fbee 	bl	8007d10 <ld_word>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800953c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953e:	891b      	ldrh	r3, [r3, #8]
 8009540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009542:	8992      	ldrh	r2, [r2, #12]
 8009544:	0952      	lsrs	r2, r2, #5
 8009546:	b292      	uxth	r2, r2
 8009548:	fbb3 f1f2 	udiv	r1, r3, r2
 800954c:	fb02 f201 	mul.w	r2, r2, r1
 8009550:	1a9b      	subs	r3, r3, r2
 8009552:	b29b      	uxth	r3, r3
 8009554:	2b00      	cmp	r3, #0
 8009556:	d003      	beq.n	8009560 <find_volume+0x2bc>
 8009558:	230d      	movs	r3, #13
 800955a:	e123      	b.n	80097a4 <find_volume+0x500>
 800955c:	20002498 	.word	0x20002498

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009562:	3338      	adds	r3, #56	; 0x38
 8009564:	3313      	adds	r3, #19
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fbd2 	bl	8007d10 <ld_word>
 800956c:	4603      	mov	r3, r0
 800956e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009572:	2b00      	cmp	r3, #0
 8009574:	d106      	bne.n	8009584 <find_volume+0x2e0>
 8009576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009578:	3338      	adds	r3, #56	; 0x38
 800957a:	3320      	adds	r3, #32
 800957c:	4618      	mov	r0, r3
 800957e:	f7fe fbdf 	bl	8007d40 <ld_dword>
 8009582:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009586:	3338      	adds	r3, #56	; 0x38
 8009588:	330e      	adds	r3, #14
 800958a:	4618      	mov	r0, r3
 800958c:	f7fe fbc0 	bl	8007d10 <ld_word>
 8009590:	4603      	mov	r3, r0
 8009592:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009594:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <find_volume+0x2fa>
 800959a:	230d      	movs	r3, #13
 800959c:	e102      	b.n	80097a4 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800959e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80095a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a2:	4413      	add	r3, r2
 80095a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095a6:	8911      	ldrh	r1, [r2, #8]
 80095a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095aa:	8992      	ldrh	r2, [r2, #12]
 80095ac:	0952      	lsrs	r2, r2, #5
 80095ae:	b292      	uxth	r2, r2
 80095b0:	fbb1 f2f2 	udiv	r2, r1, r2
 80095b4:	b292      	uxth	r2, r2
 80095b6:	4413      	add	r3, r2
 80095b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80095ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	429a      	cmp	r2, r3
 80095c0:	d201      	bcs.n	80095c6 <find_volume+0x322>
 80095c2:	230d      	movs	r3, #13
 80095c4:	e0ee      	b.n	80097a4 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80095c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095ce:	8952      	ldrh	r2, [r2, #10]
 80095d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80095d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d101      	bne.n	80095e0 <find_volume+0x33c>
 80095dc:	230d      	movs	r3, #13
 80095de:	e0e1      	b.n	80097a4 <find_volume+0x500>
		fmt = FS_FAT32;
 80095e0:	2303      	movs	r3, #3
 80095e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80095e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d802      	bhi.n	80095f6 <find_volume+0x352>
 80095f0:	2302      	movs	r3, #2
 80095f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80095f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d802      	bhi.n	8009606 <find_volume+0x362>
 8009600:	2301      	movs	r3, #1
 8009602:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	1c9a      	adds	r2, r3, #2
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009612:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009614:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009618:	441a      	add	r2, r3
 800961a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800961e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	441a      	add	r2, r3
 8009624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009626:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800962c:	2b03      	cmp	r3, #3
 800962e:	d11e      	bne.n	800966e <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009632:	3338      	adds	r3, #56	; 0x38
 8009634:	332a      	adds	r3, #42	; 0x2a
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe fb6a 	bl	8007d10 <ld_word>
 800963c:	4603      	mov	r3, r0
 800963e:	2b00      	cmp	r3, #0
 8009640:	d001      	beq.n	8009646 <find_volume+0x3a2>
 8009642:	230d      	movs	r3, #13
 8009644:	e0ae      	b.n	80097a4 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	891b      	ldrh	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <find_volume+0x3ae>
 800964e:	230d      	movs	r3, #13
 8009650:	e0a8      	b.n	80097a4 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	3338      	adds	r3, #56	; 0x38
 8009656:	332c      	adds	r3, #44	; 0x2c
 8009658:	4618      	mov	r0, r3
 800965a:	f7fe fb71 	bl	8007d40 <ld_dword>
 800965e:	4602      	mov	r2, r0
 8009660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009662:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	647b      	str	r3, [r7, #68]	; 0x44
 800966c:	e01f      	b.n	80096ae <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	891b      	ldrh	r3, [r3, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d101      	bne.n	800967a <find_volume+0x3d6>
 8009676:	230d      	movs	r3, #13
 8009678:	e094      	b.n	80097a4 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800967e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009680:	441a      	add	r2, r3
 8009682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009684:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009686:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800968a:	2b02      	cmp	r3, #2
 800968c:	d103      	bne.n	8009696 <find_volume+0x3f2>
 800968e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	e00a      	b.n	80096ac <find_volume+0x408>
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	69da      	ldr	r2, [r3, #28]
 800969a:	4613      	mov	r3, r2
 800969c:	005b      	lsls	r3, r3, #1
 800969e:	4413      	add	r3, r2
 80096a0:	085a      	lsrs	r2, r3, #1
 80096a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	f003 0301 	and.w	r3, r3, #1
 80096aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80096ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	6a1a      	ldr	r2, [r3, #32]
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	899b      	ldrh	r3, [r3, #12]
 80096b6:	4619      	mov	r1, r3
 80096b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ba:	440b      	add	r3, r1
 80096bc:	3b01      	subs	r3, #1
 80096be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096c0:	8989      	ldrh	r1, [r1, #12]
 80096c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d201      	bcs.n	80096ce <find_volume+0x42a>
 80096ca:	230d      	movs	r3, #13
 80096cc:	e06a      	b.n	80097a4 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80096ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d0:	f04f 32ff 	mov.w	r2, #4294967295
 80096d4:	619a      	str	r2, [r3, #24]
 80096d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096d8:	699a      	ldr	r2, [r3, #24]
 80096da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80096de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e0:	2280      	movs	r2, #128	; 0x80
 80096e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80096e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096e8:	2b03      	cmp	r3, #3
 80096ea:	d149      	bne.n	8009780 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80096ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ee:	3338      	adds	r3, #56	; 0x38
 80096f0:	3330      	adds	r3, #48	; 0x30
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7fe fb0c 	bl	8007d10 <ld_word>
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d140      	bne.n	8009780 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80096fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009700:	3301      	adds	r3, #1
 8009702:	4619      	mov	r1, r3
 8009704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009706:	f7fe fde3 	bl	80082d0 <move_window>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d137      	bne.n	8009780 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8009710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009712:	2200      	movs	r2, #0
 8009714:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009718:	3338      	adds	r3, #56	; 0x38
 800971a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800971e:	4618      	mov	r0, r3
 8009720:	f7fe faf6 	bl	8007d10 <ld_word>
 8009724:	4603      	mov	r3, r0
 8009726:	461a      	mov	r2, r3
 8009728:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800972c:	429a      	cmp	r2, r3
 800972e:	d127      	bne.n	8009780 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	3338      	adds	r3, #56	; 0x38
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe fb03 	bl	8007d40 <ld_dword>
 800973a:	4602      	mov	r2, r0
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <find_volume+0x508>)
 800973e:	429a      	cmp	r2, r3
 8009740:	d11e      	bne.n	8009780 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009744:	3338      	adds	r3, #56	; 0x38
 8009746:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800974a:	4618      	mov	r0, r3
 800974c:	f7fe faf8 	bl	8007d40 <ld_dword>
 8009750:	4602      	mov	r2, r0
 8009752:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <find_volume+0x50c>)
 8009754:	429a      	cmp	r2, r3
 8009756:	d113      	bne.n	8009780 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	3338      	adds	r3, #56	; 0x38
 800975c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009760:	4618      	mov	r0, r3
 8009762:	f7fe faed 	bl	8007d40 <ld_dword>
 8009766:	4602      	mov	r2, r0
 8009768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800976e:	3338      	adds	r3, #56	; 0x38
 8009770:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8009774:	4618      	mov	r0, r3
 8009776:	f7fe fae3 	bl	8007d40 <ld_dword>
 800977a:	4602      	mov	r2, r0
 800977c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800977e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009782:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009786:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009788:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <find_volume+0x510>)
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	3301      	adds	r3, #1
 800978e:	b29a      	uxth	r2, r3
 8009790:	4b08      	ldr	r3, [pc, #32]	; (80097b4 <find_volume+0x510>)
 8009792:	801a      	strh	r2, [r3, #0]
 8009794:	4b07      	ldr	r3, [pc, #28]	; (80097b4 <find_volume+0x510>)
 8009796:	881a      	ldrh	r2, [r3, #0]
 8009798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800979a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800979c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800979e:	f7fe fd2f 	bl	8008200 <clear_lock>
#endif
	return FR_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3758      	adds	r7, #88	; 0x58
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	41615252 	.word	0x41615252
 80097b0:	61417272 	.word	0x61417272
 80097b4:	2000249c 	.word	0x2000249c

080097b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80097c2:	2309      	movs	r3, #9
 80097c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d02e      	beq.n	800982a <validate+0x72>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d02a      	beq.n	800982a <validate+0x72>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	781b      	ldrb	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d025      	beq.n	800982a <validate+0x72>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	889a      	ldrh	r2, [r3, #4]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	88db      	ldrh	r3, [r3, #6]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d11e      	bne.n	800982a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7fe fb8c 	bl	8007f0e <lock_fs>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d014      	beq.n	8009826 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	785b      	ldrb	r3, [r3, #1]
 8009802:	4618      	mov	r0, r3
 8009804:	f7fe f9e6 	bl	8007bd4 <disk_status>
 8009808:	4603      	mov	r3, r0
 800980a:	f003 0301 	and.w	r3, r3, #1
 800980e:	2b00      	cmp	r3, #0
 8009810:	d102      	bne.n	8009818 <validate+0x60>
				res = FR_OK;
 8009812:	2300      	movs	r3, #0
 8009814:	73fb      	strb	r3, [r7, #15]
 8009816:	e008      	b.n	800982a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2100      	movs	r1, #0
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe fb8b 	bl	8007f3a <unlock_fs>
 8009824:	e001      	b.n	800982a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009826:	230f      	movs	r3, #15
 8009828:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <validate+0x7e>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	e000      	b.n	8009838 <validate+0x80>
 8009836:	2300      	movs	r3, #0
 8009838:	683a      	ldr	r2, [r7, #0]
 800983a:	6013      	str	r3, [r2, #0]
	return res;
 800983c:	7bfb      	ldrb	r3, [r7, #15]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
	...

08009848 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fc86 	bl	8009170 <get_ldnumber>
 8009864:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	2b00      	cmp	r3, #0
 800986a:	da01      	bge.n	8009870 <f_mount+0x28>
 800986c:	230b      	movs	r3, #11
 800986e:	e048      	b.n	8009902 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009870:	4a26      	ldr	r2, [pc, #152]	; (800990c <f_mount+0xc4>)
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009878:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800987a:	69bb      	ldr	r3, [r7, #24]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00f      	beq.n	80098a0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009880:	69b8      	ldr	r0, [r7, #24]
 8009882:	f7fe fcbd 	bl	8008200 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8009886:	69bb      	ldr	r3, [r7, #24]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fd09 	bl	800a2a2 <ff_del_syncobj>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <f_mount+0x52>
 8009896:	2302      	movs	r3, #2
 8009898:	e033      	b.n	8009902 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2200      	movs	r2, #0
 800989e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00f      	beq.n	80098c6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	b2da      	uxtb	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3310      	adds	r3, #16
 80098b4:	4619      	mov	r1, r3
 80098b6:	4610      	mov	r0, r2
 80098b8:	f000 fcd3 	bl	800a262 <ff_cre_syncobj>
 80098bc:	4603      	mov	r3, r0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d101      	bne.n	80098c6 <f_mount+0x7e>
 80098c2:	2302      	movs	r3, #2
 80098c4:	e01d      	b.n	8009902 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4910      	ldr	r1, [pc, #64]	; (800990c <f_mount+0xc4>)
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <f_mount+0x94>
 80098d6:	79fb      	ldrb	r3, [r7, #7]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d001      	beq.n	80098e0 <f_mount+0x98>
 80098dc:	2300      	movs	r3, #0
 80098de:	e010      	b.n	8009902 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80098e0:	f107 010c 	add.w	r1, r7, #12
 80098e4:	f107 0308 	add.w	r3, r7, #8
 80098e8:	2200      	movs	r2, #0
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fcda 	bl	80092a4 <find_volume>
 80098f0:	4603      	mov	r3, r0
 80098f2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	7dfa      	ldrb	r2, [r7, #23]
 80098f8:	4611      	mov	r1, r2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fe fb1d 	bl	8007f3a <unlock_fs>
 8009900:	7dfb      	ldrb	r3, [r7, #23]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3720      	adds	r7, #32
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20002498 	.word	0x20002498

08009910 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b098      	sub	sp, #96	; 0x60
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	4613      	mov	r3, r2
 800991c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <f_open+0x18>
 8009924:	2309      	movs	r3, #9
 8009926:	e1c2      	b.n	8009cae <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009928:	79fb      	ldrb	r3, [r7, #7]
 800992a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800992e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009930:	79fa      	ldrb	r2, [r7, #7]
 8009932:	f107 0110 	add.w	r1, r7, #16
 8009936:	f107 0308 	add.w	r3, r7, #8
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff fcb2 	bl	80092a4 <find_volume>
 8009940:	4603      	mov	r3, r0
 8009942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8009946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800994a:	2b00      	cmp	r3, #0
 800994c:	f040 819f 	bne.w	8009c8e <f_open+0x37e>
		dj.obj.fs = fs;
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	f107 0314 	add.w	r3, r7, #20
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f7ff fb91 	bl	8009084 <follow_path>
 8009962:	4603      	mov	r3, r0
 8009964:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009968:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800996c:	2b00      	cmp	r3, #0
 800996e:	d11a      	bne.n	80099a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009970:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009974:	b25b      	sxtb	r3, r3
 8009976:	2b00      	cmp	r3, #0
 8009978:	da03      	bge.n	8009982 <f_open+0x72>
				res = FR_INVALID_NAME;
 800997a:	2306      	movs	r3, #6
 800997c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009980:	e011      	b.n	80099a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009982:	79fb      	ldrb	r3, [r7, #7]
 8009984:	f023 0301 	bic.w	r3, r3, #1
 8009988:	2b00      	cmp	r3, #0
 800998a:	bf14      	ite	ne
 800998c:	2301      	movne	r3, #1
 800998e:	2300      	moveq	r3, #0
 8009990:	b2db      	uxtb	r3, r3
 8009992:	461a      	mov	r2, r3
 8009994:	f107 0314 	add.w	r3, r7, #20
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7fe fae8 	bl	8007f70 <chk_lock>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	f003 031c 	and.w	r3, r3, #28
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d07f      	beq.n	8009ab0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80099b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d017      	beq.n	80099e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80099b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099bc:	2b04      	cmp	r3, #4
 80099be:	d10e      	bne.n	80099de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80099c0:	f7fe fb32 	bl	8008028 <enq_lock>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d006      	beq.n	80099d8 <f_open+0xc8>
 80099ca:	f107 0314 	add.w	r3, r7, #20
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7ff fa91 	bl	8008ef6 <dir_register>
 80099d4:	4603      	mov	r3, r0
 80099d6:	e000      	b.n	80099da <f_open+0xca>
 80099d8:	2312      	movs	r3, #18
 80099da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80099de:	79fb      	ldrb	r3, [r7, #7]
 80099e0:	f043 0308 	orr.w	r3, r3, #8
 80099e4:	71fb      	strb	r3, [r7, #7]
 80099e6:	e010      	b.n	8009a0a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80099e8:	7ebb      	ldrb	r3, [r7, #26]
 80099ea:	f003 0311 	and.w	r3, r3, #17
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <f_open+0xea>
					res = FR_DENIED;
 80099f2:	2307      	movs	r3, #7
 80099f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099f8:	e007      	b.n	8009a0a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80099fa:	79fb      	ldrb	r3, [r7, #7]
 80099fc:	f003 0304 	and.w	r3, r3, #4
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d002      	beq.n	8009a0a <f_open+0xfa>
 8009a04:	2308      	movs	r3, #8
 8009a06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009a0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d168      	bne.n	8009ae4 <f_open+0x1d4>
 8009a12:	79fb      	ldrb	r3, [r7, #7]
 8009a14:	f003 0308 	and.w	r3, r3, #8
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d063      	beq.n	8009ae4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009a1c:	f7fd fe86 	bl	800772c <get_fattime>
 8009a20:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a24:	330e      	adds	r3, #14
 8009a26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f7fe f9c7 	bl	8007dbc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a30:	3316      	adds	r3, #22
 8009a32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a34:	4618      	mov	r0, r3
 8009a36:	f7fe f9c1 	bl	8007dbc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3c:	330b      	adds	r3, #11
 8009a3e:	2220      	movs	r2, #32
 8009a40:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a46:	4611      	mov	r1, r2
 8009a48:	4618      	mov	r0, r3
 8009a4a:	f7ff f9c0 	bl	8008dce <ld_clust>
 8009a4e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a54:	2200      	movs	r2, #0
 8009a56:	4618      	mov	r0, r3
 8009a58:	f7ff f9d8 	bl	8008e0c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5e:	331c      	adds	r3, #28
 8009a60:	2100      	movs	r1, #0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f7fe f9aa 	bl	8007dbc <st_dword>
					fs->wflag = 1;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d037      	beq.n	8009ae4 <f_open+0x1d4>
						dw = fs->winsect;
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a78:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009a7a:	f107 0314 	add.w	r3, r7, #20
 8009a7e:	2200      	movs	r2, #0
 8009a80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fec8 	bl	8008818 <remove_chain>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d126      	bne.n	8009ae4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7fe fc18 	bl	80082d0 <move_window>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009aaa:	3a01      	subs	r2, #1
 8009aac:	615a      	str	r2, [r3, #20]
 8009aae:	e019      	b.n	8009ae4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d115      	bne.n	8009ae4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009ab8:	7ebb      	ldrb	r3, [r7, #26]
 8009aba:	f003 0310 	and.w	r3, r3, #16
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d003      	beq.n	8009aca <f_open+0x1ba>
					res = FR_NO_FILE;
 8009ac2:	2304      	movs	r3, #4
 8009ac4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009ac8:	e00c      	b.n	8009ae4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	f003 0302 	and.w	r3, r3, #2
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <f_open+0x1d4>
 8009ad4:	7ebb      	ldrb	r3, [r7, #26]
 8009ad6:	f003 0301 	and.w	r3, r3, #1
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d002      	beq.n	8009ae4 <f_open+0x1d4>
						res = FR_DENIED;
 8009ade:	2307      	movs	r3, #7
 8009ae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009ae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d128      	bne.n	8009b3e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	f003 0308 	and.w	r3, r3, #8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009afc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	f023 0301 	bic.w	r3, r3, #1
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	bf14      	ite	ne
 8009b16:	2301      	movne	r3, #1
 8009b18:	2300      	moveq	r3, #0
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f107 0314 	add.w	r3, r7, #20
 8009b22:	4611      	mov	r1, r2
 8009b24:	4618      	mov	r0, r3
 8009b26:	f7fe faa1 	bl	800806c <inc_lock>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d102      	bne.n	8009b3e <f_open+0x22e>
 8009b38:	2302      	movs	r3, #2
 8009b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009b3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f040 80a3 	bne.w	8009c8e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f7ff f93d 	bl	8008dce <ld_clust>
 8009b54:	4602      	mov	r2, r0
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b5c:	331c      	adds	r3, #28
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7fe f8ee 	bl	8007d40 <ld_dword>
 8009b64:	4602      	mov	r2, r0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b70:	693a      	ldr	r2, [r7, #16]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	88da      	ldrh	r2, [r3, #6]
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	79fa      	ldrb	r2, [r7, #7]
 8009b82:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	2200      	movs	r2, #0
 8009b94:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	3330      	adds	r3, #48	; 0x30
 8009b9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	f7fe f958 	bl	8007e56 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009ba6:	79fb      	ldrb	r3, [r7, #7]
 8009ba8:	f003 0320 	and.w	r3, r3, #32
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d06e      	beq.n	8009c8e <f_open+0x37e>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d06a      	beq.n	8009c8e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	68da      	ldr	r2, [r3, #12]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	895b      	ldrh	r3, [r3, #10]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	899b      	ldrh	r3, [r3, #12]
 8009bca:	fb03 f302 	mul.w	r3, r3, r2
 8009bce:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	657b      	str	r3, [r7, #84]	; 0x54
 8009bdc:	e016      	b.n	8009c0c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7fe fc31 	bl	800844a <get_fat>
 8009be8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d802      	bhi.n	8009bf6 <f_open+0x2e6>
 8009bf0:	2302      	movs	r3, #2
 8009bf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfc:	d102      	bne.n	8009c04 <f_open+0x2f4>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009c04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d103      	bne.n	8009c1c <f_open+0x30c>
 8009c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c18:	429a      	cmp	r2, r3
 8009c1a:	d8e0      	bhi.n	8009bde <f_open+0x2ce>
				}
				fp->clust = clst;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c20:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009c22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d131      	bne.n	8009c8e <f_open+0x37e>
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	899b      	ldrh	r3, [r3, #12]
 8009c2e:	461a      	mov	r2, r3
 8009c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c32:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c36:	fb02 f201 	mul.w	r2, r2, r1
 8009c3a:	1a9b      	subs	r3, r3, r2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d026      	beq.n	8009c8e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c44:	4618      	mov	r0, r3
 8009c46:	f7fe fbe1 	bl	800840c <clust2sect>
 8009c4a:	6478      	str	r0, [r7, #68]	; 0x44
 8009c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d103      	bne.n	8009c5a <f_open+0x34a>
						res = FR_INT_ERR;
 8009c52:	2302      	movs	r3, #2
 8009c54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c58:	e019      	b.n	8009c8e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	899b      	ldrh	r3, [r3, #12]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c62:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c68:	441a      	add	r2, r3
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	7858      	ldrb	r0, [r3, #1]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6a1a      	ldr	r2, [r3, #32]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	f7fd ffe9 	bl	8007c54 <disk_read>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <f_open+0x37e>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <f_open+0x38c>
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f7fe f948 	bl	8007f3a <unlock_fs>
 8009caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3760      	adds	r7, #96	; 0x60
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b08c      	sub	sp, #48	; 0x30
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
 8009cc2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f107 0210 	add.w	r2, r7, #16
 8009cd4:	4611      	mov	r1, r2
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7ff fd6e 	bl	80097b8 <validate>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009ce2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d107      	bne.n	8009cfa <f_write+0x44>
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	7d5b      	ldrb	r3, [r3, #21]
 8009cee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d009      	beq.n	8009d0e <f_write+0x58>
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009d00:	4611      	mov	r1, r2
 8009d02:	4618      	mov	r0, r3
 8009d04:	f7fe f919 	bl	8007f3a <unlock_fs>
 8009d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009d0c:	e192      	b.n	800a034 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	7d1b      	ldrb	r3, [r3, #20]
 8009d12:	f003 0302 	and.w	r3, r3, #2
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d106      	bne.n	8009d28 <f_write+0x72>
 8009d1a:	693b      	ldr	r3, [r7, #16]
 8009d1c:	2107      	movs	r1, #7
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f7fe f90b 	bl	8007f3a <unlock_fs>
 8009d24:	2307      	movs	r3, #7
 8009d26:	e185      	b.n	800a034 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	699a      	ldr	r2, [r3, #24]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	441a      	add	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	699b      	ldr	r3, [r3, #24]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	f080 816a 	bcs.w	800a00e <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	43db      	mvns	r3, r3
 8009d40:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d42:	e164      	b.n	800a00e <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	8992      	ldrh	r2, [r2, #12]
 8009d4c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d50:	fb02 f201 	mul.w	r2, r2, r1
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f040 810f 	bne.w	8009f7a <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	8992      	ldrh	r2, [r2, #12]
 8009d64:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	8952      	ldrh	r2, [r2, #10]
 8009d6c:	3a01      	subs	r2, #1
 8009d6e:	4013      	ands	r3, r2
 8009d70:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d72:	69bb      	ldr	r3, [r7, #24]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d14d      	bne.n	8009e14 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10c      	bne.n	8009d9a <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d11a      	bne.n	8009dc2 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2100      	movs	r1, #0
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fda6 	bl	80088e2 <create_chain>
 8009d96:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d98:	e013      	b.n	8009dc2 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d007      	beq.n	8009db2 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	699b      	ldr	r3, [r3, #24]
 8009da6:	4619      	mov	r1, r3
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f7fe fe32 	bl	8008a12 <clmt_clust>
 8009dae:	62b8      	str	r0, [r7, #40]	; 0x28
 8009db0:	e007      	b.n	8009dc2 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009db2:	68fa      	ldr	r2, [r7, #12]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	69db      	ldr	r3, [r3, #28]
 8009db8:	4619      	mov	r1, r3
 8009dba:	4610      	mov	r0, r2
 8009dbc:	f7fe fd91 	bl	80088e2 <create_chain>
 8009dc0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	f000 8127 	beq.w	800a018 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d109      	bne.n	8009de4 <f_write+0x12e>
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	755a      	strb	r2, [r3, #21]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	2102      	movs	r1, #2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe f8ad 	bl	8007f3a <unlock_fs>
 8009de0:	2302      	movs	r3, #2
 8009de2:	e127      	b.n	800a034 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dea:	d109      	bne.n	8009e00 <f_write+0x14a>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	2201      	movs	r2, #1
 8009df0:	755a      	strb	r2, [r3, #21]
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	2101      	movs	r1, #1
 8009df6:	4618      	mov	r0, r3
 8009df8:	f7fe f89f 	bl	8007f3a <unlock_fs>
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e119      	b.n	800a034 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e04:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <f_write+0x15e>
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e12:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	7d1b      	ldrb	r3, [r3, #20]
 8009e18:	b25b      	sxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	da1d      	bge.n	8009e5a <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	7858      	ldrb	r0, [r3, #1]
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6a1a      	ldr	r2, [r3, #32]
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	f7fd ff31 	bl	8007c94 <disk_write>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d009      	beq.n	8009e4c <f_write+0x196>
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	755a      	strb	r2, [r3, #21]
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2101      	movs	r1, #1
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7fe f879 	bl	8007f3a <unlock_fs>
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e0f3      	b.n	800a034 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	7d1b      	ldrb	r3, [r3, #20]
 8009e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e5a:	693a      	ldr	r2, [r7, #16]
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	69db      	ldr	r3, [r3, #28]
 8009e60:	4619      	mov	r1, r3
 8009e62:	4610      	mov	r0, r2
 8009e64:	f7fe fad2 	bl	800840c <clust2sect>
 8009e68:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d109      	bne.n	8009e84 <f_write+0x1ce>
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2202      	movs	r2, #2
 8009e74:	755a      	strb	r2, [r3, #21]
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	2102      	movs	r1, #2
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe f85d 	bl	8007f3a <unlock_fs>
 8009e80:	2302      	movs	r3, #2
 8009e82:	e0d7      	b.n	800a034 <f_write+0x37e>
			sect += csect;
 8009e84:	697a      	ldr	r2, [r7, #20]
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	4413      	add	r3, r2
 8009e8a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	899b      	ldrh	r3, [r3, #12]
 8009e90:	461a      	mov	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e98:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e9a:	6a3b      	ldr	r3, [r7, #32]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d048      	beq.n	8009f32 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009ea0:	69ba      	ldr	r2, [r7, #24]
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	693a      	ldr	r2, [r7, #16]
 8009ea8:	8952      	ldrh	r2, [r2, #10]
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d905      	bls.n	8009eba <f_write+0x204>
					cc = fs->csize - csect;
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	895b      	ldrh	r3, [r3, #10]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	7858      	ldrb	r0, [r3, #1]
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	697a      	ldr	r2, [r7, #20]
 8009ec2:	69f9      	ldr	r1, [r7, #28]
 8009ec4:	f7fd fee6 	bl	8007c94 <disk_write>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d009      	beq.n	8009ee2 <f_write+0x22c>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	755a      	strb	r2, [r3, #21]
 8009ed4:	693b      	ldr	r3, [r7, #16]
 8009ed6:	2101      	movs	r1, #1
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7fe f82e 	bl	8007f3a <unlock_fs>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e0a8      	b.n	800a034 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a1a      	ldr	r2, [r3, #32]
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	1ad3      	subs	r3, r2, r3
 8009eea:	6a3a      	ldr	r2, [r7, #32]
 8009eec:	429a      	cmp	r2, r3
 8009eee:	d918      	bls.n	8009f22 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6a1a      	ldr	r2, [r3, #32]
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	1ad3      	subs	r3, r2, r3
 8009efe:	693a      	ldr	r2, [r7, #16]
 8009f00:	8992      	ldrh	r2, [r2, #12]
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	69fa      	ldr	r2, [r7, #28]
 8009f08:	18d1      	adds	r1, r2, r3
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	899b      	ldrh	r3, [r3, #12]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f7fd ff80 	bl	8007e14 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	7d1b      	ldrb	r3, [r3, #20]
 8009f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f1c:	b2da      	uxtb	r2, r3
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	899b      	ldrh	r3, [r3, #12]
 8009f26:	461a      	mov	r2, r3
 8009f28:	6a3b      	ldr	r3, [r7, #32]
 8009f2a:	fb02 f303 	mul.w	r3, r2, r3
 8009f2e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009f30:	e050      	b.n	8009fd4 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6a1b      	ldr	r3, [r3, #32]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d01b      	beq.n	8009f74 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	699a      	ldr	r2, [r3, #24]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d215      	bcs.n	8009f74 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	7858      	ldrb	r0, [r3, #1]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f52:	2301      	movs	r3, #1
 8009f54:	697a      	ldr	r2, [r7, #20]
 8009f56:	f7fd fe7d 	bl	8007c54 <disk_read>
 8009f5a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d009      	beq.n	8009f74 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2201      	movs	r2, #1
 8009f64:	755a      	strb	r2, [r3, #21]
 8009f66:	693b      	ldr	r3, [r7, #16]
 8009f68:	2101      	movs	r1, #1
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fd ffe5 	bl	8007f3a <unlock_fs>
 8009f70:	2301      	movs	r3, #1
 8009f72:	e05f      	b.n	800a034 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	899b      	ldrh	r3, [r3, #12]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	8992      	ldrh	r2, [r2, #12]
 8009f88:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f8c:	fb02 f201 	mul.w	r2, r2, r1
 8009f90:	1a9b      	subs	r3, r3, r2
 8009f92:	1ac3      	subs	r3, r0, r3
 8009f94:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d901      	bls.n	8009fa2 <f_write+0x2ec>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	693a      	ldr	r2, [r7, #16]
 8009fae:	8992      	ldrh	r2, [r2, #12]
 8009fb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8009fb4:	fb02 f200 	mul.w	r2, r2, r0
 8009fb8:	1a9b      	subs	r3, r3, r2
 8009fba:	440b      	add	r3, r1
 8009fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009fbe:	69f9      	ldr	r1, [r7, #28]
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	f7fd ff27 	bl	8007e14 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	7d1b      	ldrb	r3, [r3, #20]
 8009fca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fce:	b2da      	uxtb	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009fd4:	69fa      	ldr	r2, [r7, #28]
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	4413      	add	r3, r2
 8009fda:	61fb      	str	r3, [r7, #28]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	699a      	ldr	r2, [r3, #24]
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	441a      	add	r2, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	619a      	str	r2, [r3, #24]
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	68da      	ldr	r2, [r3, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	bf38      	it	cc
 8009ff4:	461a      	movcc	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	60da      	str	r2, [r3, #12]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	441a      	add	r2, r3
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	601a      	str	r2, [r3, #0]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2b00      	cmp	r3, #0
 800a012:	f47f ae97 	bne.w	8009d44 <f_write+0x8e>
 800a016:	e000      	b.n	800a01a <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a018:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	7d1b      	ldrb	r3, [r3, #20]
 800a01e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a022:	b2da      	uxtb	r2, r3
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	2100      	movs	r1, #0
 800a02c:	4618      	mov	r0, r3
 800a02e:	f7fd ff84 	bl	8007f3a <unlock_fs>
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3730      	adds	r7, #48	; 0x30
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f107 0208 	add.w	r2, r7, #8
 800a04a:	4611      	mov	r1, r2
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7ff fbb3 	bl	80097b8 <validate>
 800a052:	4603      	mov	r3, r0
 800a054:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a056:	7dfb      	ldrb	r3, [r7, #23]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d16d      	bne.n	800a138 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7d1b      	ldrb	r3, [r3, #20]
 800a060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a064:	2b00      	cmp	r3, #0
 800a066:	d067      	beq.n	800a138 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	7d1b      	ldrb	r3, [r3, #20]
 800a06c:	b25b      	sxtb	r3, r3
 800a06e:	2b00      	cmp	r3, #0
 800a070:	da1a      	bge.n	800a0a8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	7858      	ldrb	r0, [r3, #1]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6a1a      	ldr	r2, [r3, #32]
 800a080:	2301      	movs	r3, #1
 800a082:	f7fd fe07 	bl	8007c94 <disk_write>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d006      	beq.n	800a09a <f_sync+0x5e>
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	2101      	movs	r1, #1
 800a090:	4618      	mov	r0, r3
 800a092:	f7fd ff52 	bl	8007f3a <unlock_fs>
 800a096:	2301      	movs	r3, #1
 800a098:	e055      	b.n	800a146 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	7d1b      	ldrb	r3, [r3, #20]
 800a09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a2:	b2da      	uxtb	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a0a8:	f7fd fb40 	bl	800772c <get_fattime>
 800a0ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	f7fe f90a 	bl	80082d0 <move_window>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a0c0:	7dfb      	ldrb	r3, [r7, #23]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d138      	bne.n	800a138 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	330b      	adds	r3, #11
 800a0d0:	781a      	ldrb	r2, [r3, #0]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	330b      	adds	r3, #11
 800a0d6:	f042 0220 	orr.w	r2, r2, #32
 800a0da:	b2d2      	uxtb	r2, r2
 800a0dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	68f9      	ldr	r1, [r7, #12]
 800a0ea:	f7fe fe8f 	bl	8008e0c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f103 021c 	add.w	r2, r3, #28
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	f7fd fe5e 	bl	8007dbc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	3316      	adds	r3, #22
 800a104:	6939      	ldr	r1, [r7, #16]
 800a106:	4618      	mov	r0, r3
 800a108:	f7fd fe58 	bl	8007dbc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	3312      	adds	r3, #18
 800a110:	2100      	movs	r1, #0
 800a112:	4618      	mov	r0, r3
 800a114:	f7fd fe37 	bl	8007d86 <st_word>
					fs->wflag = 1;
 800a118:	68bb      	ldr	r3, [r7, #8]
 800a11a:	2201      	movs	r2, #1
 800a11c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4618      	mov	r0, r3
 800a122:	f7fe f903 	bl	800832c <sync_fs>
 800a126:	4603      	mov	r3, r0
 800a128:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	7d1b      	ldrb	r3, [r3, #20]
 800a12e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a132:	b2da      	uxtb	r2, r3
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	7dfa      	ldrb	r2, [r7, #23]
 800a13c:	4611      	mov	r1, r2
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fd fefb 	bl	8007f3a <unlock_fs>
 800a144:	7dfb      	ldrb	r3, [r7, #23]
}
 800a146:	4618      	mov	r0, r3
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b084      	sub	sp, #16
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f7ff ff70 	bl	800a03c <f_sync>
 800a15c:	4603      	mov	r3, r0
 800a15e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d11d      	bne.n	800a1a2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f107 0208 	add.w	r2, r7, #8
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f7ff fb22 	bl	80097b8 <validate>
 800a174:	4603      	mov	r3, r0
 800a176:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a178:	7bfb      	ldrb	r3, [r7, #15]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d111      	bne.n	800a1a2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	4618      	mov	r0, r3
 800a184:	f7fe f800 	bl	8008188 <dec_lock>
 800a188:	4603      	mov	r3, r0
 800a18a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d102      	bne.n	800a198 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7fd fecc 	bl	8007f3a <unlock_fs>
#endif
		}
	}
	return res;
 800a1a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a1c2:	4b1f      	ldr	r3, [pc, #124]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1c4:	7a5b      	ldrb	r3, [r3, #9]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d131      	bne.n	800a230 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a1cc:	4b1c      	ldr	r3, [pc, #112]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1ce:	7a5b      	ldrb	r3, [r3, #9]
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	4b1a      	ldr	r3, [pc, #104]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a1da:	4b19      	ldr	r3, [pc, #100]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1dc:	7a5b      	ldrb	r3, [r3, #9]
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	4a17      	ldr	r2, [pc, #92]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	4413      	add	r3, r2
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a1ea:	4b15      	ldr	r3, [pc, #84]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1ec:	7a5b      	ldrb	r3, [r3, #9]
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	461a      	mov	r2, r3
 800a1f2:	4b13      	ldr	r3, [pc, #76]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	79fa      	ldrb	r2, [r7, #7]
 800a1f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a1fa:	4b11      	ldr	r3, [pc, #68]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a1fc:	7a5b      	ldrb	r3, [r3, #9]
 800a1fe:	b2db      	uxtb	r3, r3
 800a200:	1c5a      	adds	r2, r3, #1
 800a202:	b2d1      	uxtb	r1, r2
 800a204:	4a0e      	ldr	r2, [pc, #56]	; (800a240 <FATFS_LinkDriverEx+0x94>)
 800a206:	7251      	strb	r1, [r2, #9]
 800a208:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a20a:	7dbb      	ldrb	r3, [r7, #22]
 800a20c:	3330      	adds	r3, #48	; 0x30
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	3301      	adds	r3, #1
 800a218:	223a      	movs	r2, #58	; 0x3a
 800a21a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	3302      	adds	r3, #2
 800a220:	222f      	movs	r2, #47	; 0x2f
 800a222:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	3303      	adds	r3, #3
 800a228:	2200      	movs	r2, #0
 800a22a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a230:	7dfb      	ldrb	r3, [r7, #23]
}
 800a232:	4618      	mov	r0, r3
 800a234:	371c      	adds	r7, #28
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
 800a23e:	bf00      	nop
 800a240:	200024c0 	.word	0x200024c0

0800a244 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b082      	sub	sp, #8
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a24e:	2200      	movs	r2, #0
 800a250:	6839      	ldr	r1, [r7, #0]
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff ffaa 	bl	800a1ac <FATFS_LinkDriverEx>
 800a258:	4603      	mov	r3, r0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a262:	b580      	push	{r7, lr}
 800a264:	b086      	sub	sp, #24
 800a266:	af00      	add	r7, sp, #0
 800a268:	4603      	mov	r3, r0
 800a26a:	6039      	str	r1, [r7, #0]
 800a26c:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800a26e:	2300      	movs	r3, #0
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a276:	f107 030c 	add.w	r3, r7, #12
 800a27a:	2101      	movs	r1, #1
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f985 	bl	800a58c <osSemaphoreCreate>
 800a282:	4602      	mov	r2, r0
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	bf14      	ite	ne
 800a290:	2301      	movne	r3, #1
 800a292:	2300      	moveq	r3, #0
 800a294:	b2db      	uxtb	r3, r3
 800a296:	617b      	str	r3, [r7, #20]

    return ret;
 800a298:	697b      	ldr	r3, [r7, #20]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 fa26 	bl	800a6fc <osSemaphoreDelete>
#endif
    return 1;
 800a2b0:	2301      	movs	r3, #1
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3708      	adds	r7, #8
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b084      	sub	sp, #16
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800a2c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 f992 	bl	800a5f4 <osSemaphoreWait>
 800a2d0:	4603      	mov	r3, r0
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a2da:	68fb      	ldr	r3, [r7, #12]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f9cf 	bl	800a690 <osSemaphoreRelease>
#endif
}
 800a2f2:	bf00      	nop
 800a2f4:	3708      	adds	r7, #8
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	4603      	mov	r3, r0
 800a302:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a304:	2300      	movs	r3, #0
 800a306:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a30c:	2b84      	cmp	r3, #132	; 0x84
 800a30e:	d005      	beq.n	800a31c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a310:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	4413      	add	r3, r2
 800a318:	3303      	adds	r3, #3
 800a31a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a31c:	68fb      	ldr	r3, [r7, #12]
}
 800a31e:	4618      	mov	r0, r3
 800a320:	3714      	adds	r7, #20
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b083      	sub	sp, #12
 800a32e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a330:	f3ef 8305 	mrs	r3, IPSR
 800a334:	607b      	str	r3, [r7, #4]
  return(result);
 800a336:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bf14      	ite	ne
 800a33c:	2301      	movne	r3, #1
 800a33e:	2300      	moveq	r3, #0
 800a340:	b2db      	uxtb	r3, r3
}
 800a342:	4618      	mov	r0, r3
 800a344:	370c      	adds	r7, #12
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a34e:	b580      	push	{r7, lr}
 800a350:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a352:	f001 fcaf 	bl	800bcb4 <vTaskStartScheduler>
  
  return osOK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800a360:	f002 f8be 	bl	800c4e0 <xTaskGetSchedulerState>
 800a364:	4603      	mov	r3, r0
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <osKernelRunning+0x12>
    return 0;
 800a36a:	2300      	movs	r3, #0
 800a36c:	e000      	b.n	800a370 <osKernelRunning+0x14>
  else
    return 1;
 800a36e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800a370:	4618      	mov	r0, r3
 800a372:	bd80      	pop	{r7, pc}

0800a374 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a378:	f7ff ffd7 	bl	800a32a <inHandlerMode>
 800a37c:	4603      	mov	r3, r0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d003      	beq.n	800a38a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a382:	f001 fdaf 	bl	800bee4 <xTaskGetTickCountFromISR>
 800a386:	4603      	mov	r3, r0
 800a388:	e002      	b.n	800a390 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a38a:	f001 fd9b 	bl	800bec4 <xTaskGetTickCount>
 800a38e:	4603      	mov	r3, r0
  }
}
 800a390:	4618      	mov	r0, r3
 800a392:	bd80      	pop	{r7, pc}

0800a394 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a396:	b089      	sub	sp, #36	; 0x24
 800a398:	af04      	add	r7, sp, #16
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	695b      	ldr	r3, [r3, #20]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d020      	beq.n	800a3e8 <osThreadCreate+0x54>
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	699b      	ldr	r3, [r3, #24]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d01c      	beq.n	800a3e8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	685c      	ldr	r4, [r3, #4]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681d      	ldr	r5, [r3, #0]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691e      	ldr	r6, [r3, #16]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7ff ff9a 	bl	800a2fa <makeFreeRtosPriority>
 800a3c6:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3d0:	9202      	str	r2, [sp, #8]
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	9100      	str	r1, [sp, #0]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	4632      	mov	r2, r6
 800a3da:	4629      	mov	r1, r5
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f001 faa5 	bl	800b92c <xTaskCreateStatic>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	60fb      	str	r3, [r7, #12]
 800a3e6:	e01c      	b.n	800a422 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685c      	ldr	r4, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3f4:	b29e      	uxth	r6, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	f7ff ff7c 	bl	800a2fa <makeFreeRtosPriority>
 800a402:	4602      	mov	r2, r0
 800a404:	f107 030c 	add.w	r3, r7, #12
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	9200      	str	r2, [sp, #0]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	4632      	mov	r2, r6
 800a410:	4629      	mov	r1, r5
 800a412:	4620      	mov	r0, r4
 800a414:	f001 fae4 	bl	800b9e0 <xTaskCreate>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d001      	beq.n	800a422 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a41e:	2300      	movs	r3, #0
 800a420:	e000      	b.n	800a424 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a422:	68fb      	ldr	r3, [r7, #12]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a42c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d001      	beq.n	800a442 <osDelay+0x16>
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	e000      	b.n	800a444 <osDelay+0x18>
 800a442:	2301      	movs	r3, #1
 800a444:	4618      	mov	r0, r3
 800a446:	f001 fc01 	bl	800bc4c <vTaskDelay>
  
  return osOK;
 800a44a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3710      	adds	r7, #16
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d007      	beq.n	800a474 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	685b      	ldr	r3, [r3, #4]
 800a468:	4619      	mov	r1, r3
 800a46a:	2001      	movs	r0, #1
 800a46c:	f000 fc55 	bl	800ad1a <xQueueCreateMutexStatic>
 800a470:	4603      	mov	r3, r0
 800a472:	e003      	b.n	800a47c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a474:	2001      	movs	r0, #1
 800a476:	f000 fc38 	bl	800acea <xQueueCreateMutex>
 800a47a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a48e:	2300      	movs	r3, #0
 800a490:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <osMutexWait+0x18>
    return osErrorParameter;
 800a498:	2380      	movs	r3, #128	; 0x80
 800a49a:	e03a      	b.n	800a512 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4a6:	d103      	bne.n	800a4b0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ac:	60fb      	str	r3, [r7, #12]
 800a4ae:	e009      	b.n	800a4c4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d006      	beq.n	800a4c4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d101      	bne.n	800a4c4 <osMutexWait+0x40>
      ticks = 1;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a4c4:	f7ff ff31 	bl	800a32a <inHandlerMode>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d017      	beq.n	800a4fe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a4ce:	f107 0308 	add.w	r3, r7, #8
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f001 f836 	bl	800b548 <xQueueReceiveFromISR>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d001      	beq.n	800a4e6 <osMutexWait+0x62>
      return osErrorOS;
 800a4e2:	23ff      	movs	r3, #255	; 0xff
 800a4e4:	e015      	b.n	800a512 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d011      	beq.n	800a510 <osMutexWait+0x8c>
 800a4ec:	4b0b      	ldr	r3, [pc, #44]	; (800a51c <osMutexWait+0x98>)
 800a4ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f2:	601a      	str	r2, [r3, #0]
 800a4f4:	f3bf 8f4f 	dsb	sy
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	e008      	b.n	800a510 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a4fe:	68f9      	ldr	r1, [r7, #12]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 ff19 	bl	800b338 <xQueueSemaphoreTake>
 800a506:	4603      	mov	r3, r0
 800a508:	2b01      	cmp	r3, #1
 800a50a:	d001      	beq.n	800a510 <osMutexWait+0x8c>
    return osErrorOS;
 800a50c:	23ff      	movs	r3, #255	; 0xff
 800a50e:	e000      	b.n	800a512 <osMutexWait+0x8e>
  }
  
  return osOK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	e000ed04 	.word	0xe000ed04

0800a520 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a528:	2300      	movs	r3, #0
 800a52a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a52c:	2300      	movs	r3, #0
 800a52e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a530:	f7ff fefb 	bl	800a32a <inHandlerMode>
 800a534:	4603      	mov	r3, r0
 800a536:	2b00      	cmp	r3, #0
 800a538:	d016      	beq.n	800a568 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a53a:	f107 0308 	add.w	r3, r7, #8
 800a53e:	4619      	mov	r1, r3
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fd93 	bl	800b06c <xQueueGiveFromISR>
 800a546:	4603      	mov	r3, r0
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d001      	beq.n	800a550 <osMutexRelease+0x30>
      return osErrorOS;
 800a54c:	23ff      	movs	r3, #255	; 0xff
 800a54e:	e017      	b.n	800a580 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d013      	beq.n	800a57e <osMutexRelease+0x5e>
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <osMutexRelease+0x68>)
 800a558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	e00a      	b.n	800a57e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a568:	2300      	movs	r3, #0
 800a56a:	2200      	movs	r2, #0
 800a56c:	2100      	movs	r1, #0
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fbee 	bl	800ad50 <xQueueGenericSend>
 800a574:	4603      	mov	r3, r0
 800a576:	2b01      	cmp	r3, #1
 800a578:	d001      	beq.n	800a57e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a57a:	23ff      	movs	r3, #255	; 0xff
 800a57c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a57e:	68fb      	ldr	r3, [r7, #12]
}
 800a580:	4618      	mov	r0, r3
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	e000ed04 	.word	0xe000ed04

0800a58c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af02      	add	r7, sp, #8
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d010      	beq.n	800a5c0 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d10b      	bne.n	800a5bc <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	685a      	ldr	r2, [r3, #4]
 800a5a8:	2303      	movs	r3, #3
 800a5aa:	9300      	str	r3, [sp, #0]
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	2001      	movs	r0, #1
 800a5b4:	f000 faae 	bl	800ab14 <xQueueGenericCreateStatic>
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	e016      	b.n	800a5ea <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e014      	b.n	800a5ea <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d110      	bne.n	800a5e8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800a5c6:	2203      	movs	r2, #3
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	2001      	movs	r0, #1
 800a5cc:	f000 fb15 	bl	800abfa <xQueueGenericCreate>
 800a5d0:	60f8      	str	r0, [r7, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d005      	beq.n	800a5e4 <osSemaphoreCreate+0x58>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	2200      	movs	r2, #0
 800a5dc:	2100      	movs	r1, #0
 800a5de:	68f8      	ldr	r0, [r7, #12]
 800a5e0:	f000 fbb6 	bl	800ad50 <xQueueGenericSend>
      return sema;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	e000      	b.n	800a5ea <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a5e8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a5fe:	2300      	movs	r3, #0
 800a600:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a608:	2380      	movs	r3, #128	; 0x80
 800a60a:	e03a      	b.n	800a682 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a616:	d103      	bne.n	800a620 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a618:	f04f 33ff 	mov.w	r3, #4294967295
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	e009      	b.n	800a634 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d006      	beq.n	800a634 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d101      	bne.n	800a634 <osSemaphoreWait+0x40>
      ticks = 1;
 800a630:	2301      	movs	r3, #1
 800a632:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a634:	f7ff fe79 	bl	800a32a <inHandlerMode>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d017      	beq.n	800a66e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a63e:	f107 0308 	add.w	r3, r7, #8
 800a642:	461a      	mov	r2, r3
 800a644:	2100      	movs	r1, #0
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f000 ff7e 	bl	800b548 <xQueueReceiveFromISR>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d001      	beq.n	800a656 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a652:	23ff      	movs	r3, #255	; 0xff
 800a654:	e015      	b.n	800a682 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d011      	beq.n	800a680 <osSemaphoreWait+0x8c>
 800a65c:	4b0b      	ldr	r3, [pc, #44]	; (800a68c <osSemaphoreWait+0x98>)
 800a65e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	e008      	b.n	800a680 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a66e:	68f9      	ldr	r1, [r7, #12]
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fe61 	bl	800b338 <xQueueSemaphoreTake>
 800a676:	4603      	mov	r3, r0
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d001      	beq.n	800a680 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a67c:	23ff      	movs	r3, #255	; 0xff
 800a67e:	e000      	b.n	800a682 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a680:	2300      	movs	r3, #0
}
 800a682:	4618      	mov	r0, r3
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	e000ed04 	.word	0xe000ed04

0800a690 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a698:	2300      	movs	r3, #0
 800a69a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a6a0:	f7ff fe43 	bl	800a32a <inHandlerMode>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d016      	beq.n	800a6d8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a6aa:	f107 0308 	add.w	r3, r7, #8
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fcdb 	bl	800b06c <xQueueGiveFromISR>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b01      	cmp	r3, #1
 800a6ba:	d001      	beq.n	800a6c0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a6bc:	23ff      	movs	r3, #255	; 0xff
 800a6be:	e017      	b.n	800a6f0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d013      	beq.n	800a6ee <osSemaphoreRelease+0x5e>
 800a6c6:	4b0c      	ldr	r3, [pc, #48]	; (800a6f8 <osSemaphoreRelease+0x68>)
 800a6c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6cc:	601a      	str	r2, [r3, #0]
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	f3bf 8f6f 	isb	sy
 800a6d6:	e00a      	b.n	800a6ee <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a6d8:	2300      	movs	r3, #0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	2100      	movs	r1, #0
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 fb36 	bl	800ad50 <xQueueGenericSend>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d001      	beq.n	800a6ee <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a6ea:	23ff      	movs	r3, #255	; 0xff
 800a6ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3710      	adds	r7, #16
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	e000ed04 	.word	0xe000ed04

0800a6fc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b082      	sub	sp, #8
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a704:	f7ff fe11 	bl	800a32a <inHandlerMode>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a70e:	2382      	movs	r3, #130	; 0x82
 800a710:	e003      	b.n	800a71a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 ff95 	bl	800b642 <vQueueDelete>

  return osOK; 
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a722:	b590      	push	{r4, r7, lr}
 800a724:	b085      	sub	sp, #20
 800a726:	af02      	add	r7, sp, #8
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	689b      	ldr	r3, [r3, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d012      	beq.n	800a75a <osMessageCreate+0x38>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00e      	beq.n	800a75a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6818      	ldr	r0, [r3, #0]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6859      	ldr	r1, [r3, #4]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	689a      	ldr	r2, [r3, #8]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68dc      	ldr	r4, [r3, #12]
 800a74c:	2300      	movs	r3, #0
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	4623      	mov	r3, r4
 800a752:	f000 f9df 	bl	800ab14 <xQueueGenericCreateStatic>
 800a756:	4603      	mov	r3, r0
 800a758:	e008      	b.n	800a76c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	4619      	mov	r1, r3
 800a766:	f000 fa48 	bl	800abfa <xQueueGenericCreate>
 800a76a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	370c      	adds	r7, #12
 800a770:	46bd      	mov	sp, r7
 800a772:	bd90      	pop	{r4, r7, pc}

0800a774 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b086      	sub	sp, #24
 800a778:	af00      	add	r7, sp, #0
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <osMessagePut+0x1e>
    ticks = 1;
 800a78e:	2301      	movs	r3, #1
 800a790:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a792:	f7ff fdca 	bl	800a32a <inHandlerMode>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d018      	beq.n	800a7ce <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a79c:	f107 0210 	add.w	r2, r7, #16
 800a7a0:	f107 0108 	add.w	r1, r7, #8
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	68f8      	ldr	r0, [r7, #12]
 800a7a8:	f000 fbcc 	bl	800af44 <xQueueGenericSendFromISR>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d001      	beq.n	800a7b6 <osMessagePut+0x42>
      return osErrorOS;
 800a7b2:	23ff      	movs	r3, #255	; 0xff
 800a7b4:	e018      	b.n	800a7e8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d014      	beq.n	800a7e6 <osMessagePut+0x72>
 800a7bc:	4b0c      	ldr	r3, [pc, #48]	; (800a7f0 <osMessagePut+0x7c>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	e00b      	b.n	800a7e6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a7ce:	f107 0108 	add.w	r1, r7, #8
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	68f8      	ldr	r0, [r7, #12]
 800a7d8:	f000 faba 	bl	800ad50 <xQueueGenericSend>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d001      	beq.n	800a7e6 <osMessagePut+0x72>
      return osErrorOS;
 800a7e2:	23ff      	movs	r3, #255	; 0xff
 800a7e4:	e000      	b.n	800a7e8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a7f4:	b590      	push	{r4, r7, lr}
 800a7f6:	b08b      	sub	sp, #44	; 0x2c
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	60f8      	str	r0, [r7, #12]
 800a7fc:	60b9      	str	r1, [r7, #8]
 800a7fe:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d10a      	bne.n	800a824 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a80e:	2380      	movs	r3, #128	; 0x80
 800a810:	617b      	str	r3, [r7, #20]
    return event;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	461c      	mov	r4, r3
 800a816:	f107 0314 	add.w	r3, r7, #20
 800a81a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a81e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a822:	e054      	b.n	800a8ce <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a824:	2300      	movs	r3, #0
 800a826:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a828:	2300      	movs	r3, #0
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a832:	d103      	bne.n	800a83c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a834:	f04f 33ff 	mov.w	r3, #4294967295
 800a838:	627b      	str	r3, [r7, #36]	; 0x24
 800a83a:	e009      	b.n	800a850 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d006      	beq.n	800a850 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d101      	bne.n	800a850 <osMessageGet+0x5c>
      ticks = 1;
 800a84c:	2301      	movs	r3, #1
 800a84e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a850:	f7ff fd6b 	bl	800a32a <inHandlerMode>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d01c      	beq.n	800a894 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a85a:	f107 0220 	add.w	r2, r7, #32
 800a85e:	f107 0314 	add.w	r3, r7, #20
 800a862:	3304      	adds	r3, #4
 800a864:	4619      	mov	r1, r3
 800a866:	68b8      	ldr	r0, [r7, #8]
 800a868:	f000 fe6e 	bl	800b548 <xQueueReceiveFromISR>
 800a86c:	4603      	mov	r3, r0
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d102      	bne.n	800a878 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a872:	2310      	movs	r3, #16
 800a874:	617b      	str	r3, [r7, #20]
 800a876:	e001      	b.n	800a87c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a878:	2300      	movs	r3, #0
 800a87a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a87c:	6a3b      	ldr	r3, [r7, #32]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d01d      	beq.n	800a8be <osMessageGet+0xca>
 800a882:	4b15      	ldr	r3, [pc, #84]	; (800a8d8 <osMessageGet+0xe4>)
 800a884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a888:	601a      	str	r2, [r3, #0]
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	e014      	b.n	800a8be <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a894:	f107 0314 	add.w	r3, r7, #20
 800a898:	3304      	adds	r3, #4
 800a89a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a89c:	4619      	mov	r1, r3
 800a89e:	68b8      	ldr	r0, [r7, #8]
 800a8a0:	f000 fc6e 	bl	800b180 <xQueueReceive>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d102      	bne.n	800a8b0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a8aa:	2310      	movs	r3, #16
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e006      	b.n	800a8be <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <osMessageGet+0xc6>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	e000      	b.n	800a8bc <osMessageGet+0xc8>
 800a8ba:	2340      	movs	r3, #64	; 0x40
 800a8bc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	461c      	mov	r4, r3
 800a8c2:	f107 0314 	add.w	r3, r7, #20
 800a8c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	372c      	adds	r7, #44	; 0x2c
 800a8d2:	46bd      	mov	sp, r7
 800a8d4:	bd90      	pop	{r4, r7, pc}
 800a8d6:	bf00      	nop
 800a8d8:	e000ed04 	.word	0xe000ed04

0800a8dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f103 0208 	add.w	r2, r3, #8
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800a8f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f103 0208 	add.w	r2, r3, #8
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f103 0208 	add.w	r2, r3, #8
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a92a:	bf00      	nop
 800a92c:	370c      	adds	r7, #12
 800a92e:	46bd      	mov	sp, r7
 800a930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a934:	4770      	bx	lr

0800a936 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a936:	b480      	push	{r7}
 800a938:	b085      	sub	sp, #20
 800a93a:	af00      	add	r7, sp, #0
 800a93c:	6078      	str	r0, [r7, #4]
 800a93e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	685b      	ldr	r3, [r3, #4]
 800a944:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	689a      	ldr	r2, [r3, #8]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	683a      	ldr	r2, [r7, #0]
 800a95a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	1c5a      	adds	r2, r3, #1
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	601a      	str	r2, [r3, #0]
}
 800a972:	bf00      	nop
 800a974:	3714      	adds	r7, #20
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr

0800a97e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a97e:	b480      	push	{r7}
 800a980:	b085      	sub	sp, #20
 800a982:	af00      	add	r7, sp, #0
 800a984:	6078      	str	r0, [r7, #4]
 800a986:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a994:	d103      	bne.n	800a99e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	60fb      	str	r3, [r7, #12]
 800a99c:	e00c      	b.n	800a9b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	3308      	adds	r3, #8
 800a9a2:	60fb      	str	r3, [r7, #12]
 800a9a4:	e002      	b.n	800a9ac <vListInsert+0x2e>
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	60fb      	str	r3, [r7, #12]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d2f6      	bcs.n	800a9a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	683a      	ldr	r2, [r7, #0]
 800a9c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	601a      	str	r2, [r3, #0]
}
 800a9e4:	bf00      	nop
 800a9e6:	3714      	adds	r7, #20
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	6892      	ldr	r2, [r2, #8]
 800aa06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	689b      	ldr	r3, [r3, #8]
 800aa0c:	687a      	ldr	r2, [r7, #4]
 800aa0e:	6852      	ldr	r2, [r2, #4]
 800aa10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d103      	bne.n	800aa24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	1e5a      	subs	r2, r3, #1
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3714      	adds	r7, #20
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d109      	bne.n	800aa6c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	60bb      	str	r3, [r7, #8]
 800aa6a:	e7fe      	b.n	800aa6a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800aa6c:	f002 f966 	bl	800cd3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa78:	68f9      	ldr	r1, [r7, #12]
 800aa7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	441a      	add	r2, r3
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa9c:	3b01      	subs	r3, #1
 800aa9e:	68f9      	ldr	r1, [r7, #12]
 800aaa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aaa2:	fb01 f303 	mul.w	r3, r1, r3
 800aaa6:	441a      	add	r2, r3
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	22ff      	movs	r2, #255	; 0xff
 800aab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	22ff      	movs	r2, #255	; 0xff
 800aab8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d114      	bne.n	800aaec <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d01a      	beq.n	800ab00 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	3310      	adds	r3, #16
 800aace:	4618      	mov	r0, r3
 800aad0:	f001 fb50 	bl	800c174 <xTaskRemoveFromEventList>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d012      	beq.n	800ab00 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aada:	4b0d      	ldr	r3, [pc, #52]	; (800ab10 <xQueueGenericReset+0xcc>)
 800aadc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aae0:	601a      	str	r2, [r3, #0]
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	e009      	b.n	800ab00 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	3310      	adds	r3, #16
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7ff fef3 	bl	800a8dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	3324      	adds	r3, #36	; 0x24
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7ff feee 	bl	800a8dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab00:	f002 f94a 	bl	800cd98 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab04:	2301      	movs	r3, #1
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	e000ed04 	.word	0xe000ed04

0800ab14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b08e      	sub	sp, #56	; 0x38
 800ab18:	af02      	add	r7, sp, #8
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
 800ab20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d109      	bne.n	800ab3c <xQueueGenericCreateStatic+0x28>
 800ab28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab2c:	f383 8811 	msr	BASEPRI, r3
 800ab30:	f3bf 8f6f 	isb	sy
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab3a:	e7fe      	b.n	800ab3a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d109      	bne.n	800ab56 <xQueueGenericCreateStatic+0x42>
 800ab42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab46:	f383 8811 	msr	BASEPRI, r3
 800ab4a:	f3bf 8f6f 	isb	sy
 800ab4e:	f3bf 8f4f 	dsb	sy
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
 800ab54:	e7fe      	b.n	800ab54 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d002      	beq.n	800ab62 <xQueueGenericCreateStatic+0x4e>
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <xQueueGenericCreateStatic+0x52>
 800ab62:	2301      	movs	r3, #1
 800ab64:	e000      	b.n	800ab68 <xQueueGenericCreateStatic+0x54>
 800ab66:	2300      	movs	r3, #0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d109      	bne.n	800ab80 <xQueueGenericCreateStatic+0x6c>
 800ab6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab70:	f383 8811 	msr	BASEPRI, r3
 800ab74:	f3bf 8f6f 	isb	sy
 800ab78:	f3bf 8f4f 	dsb	sy
 800ab7c:	623b      	str	r3, [r7, #32]
 800ab7e:	e7fe      	b.n	800ab7e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d102      	bne.n	800ab8c <xQueueGenericCreateStatic+0x78>
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <xQueueGenericCreateStatic+0x7c>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e000      	b.n	800ab92 <xQueueGenericCreateStatic+0x7e>
 800ab90:	2300      	movs	r3, #0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d109      	bne.n	800abaa <xQueueGenericCreateStatic+0x96>
 800ab96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9a:	f383 8811 	msr	BASEPRI, r3
 800ab9e:	f3bf 8f6f 	isb	sy
 800aba2:	f3bf 8f4f 	dsb	sy
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	e7fe      	b.n	800aba8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800abaa:	2348      	movs	r3, #72	; 0x48
 800abac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800abae:	697b      	ldr	r3, [r7, #20]
 800abb0:	2b48      	cmp	r3, #72	; 0x48
 800abb2:	d009      	beq.n	800abc8 <xQueueGenericCreateStatic+0xb4>
 800abb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	61bb      	str	r3, [r7, #24]
 800abc6:	e7fe      	b.n	800abc6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800abc8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d00d      	beq.n	800abf0 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd6:	2201      	movs	r2, #1
 800abd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abdc:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	4613      	mov	r3, r2
 800abe6:	687a      	ldr	r2, [r7, #4]
 800abe8:	68b9      	ldr	r1, [r7, #8]
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f000 f844 	bl	800ac78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3730      	adds	r7, #48	; 0x30
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b08a      	sub	sp, #40	; 0x28
 800abfe:	af02      	add	r7, sp, #8
 800ac00:	60f8      	str	r0, [r7, #12]
 800ac02:	60b9      	str	r1, [r7, #8]
 800ac04:	4613      	mov	r3, r2
 800ac06:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d109      	bne.n	800ac22 <xQueueGenericCreate+0x28>
 800ac0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac12:	f383 8811 	msr	BASEPRI, r3
 800ac16:	f3bf 8f6f 	isb	sy
 800ac1a:	f3bf 8f4f 	dsb	sy
 800ac1e:	613b      	str	r3, [r7, #16]
 800ac20:	e7fe      	b.n	800ac20 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d102      	bne.n	800ac2e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	e004      	b.n	800ac38 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	68ba      	ldr	r2, [r7, #8]
 800ac32:	fb02 f303 	mul.w	r3, r2, r3
 800ac36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	3348      	adds	r3, #72	; 0x48
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f002 f997 	bl	800cf70 <pvPortMalloc>
 800ac42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d011      	beq.n	800ac6e <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac4a:	69bb      	ldr	r3, [r7, #24]
 800ac4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	3348      	adds	r3, #72	; 0x48
 800ac52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac5c:	79fa      	ldrb	r2, [r7, #7]
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	4613      	mov	r3, r2
 800ac64:	697a      	ldr	r2, [r7, #20]
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f000 f805 	bl	800ac78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
	}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3720      	adds	r7, #32
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d103      	bne.n	800ac94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	69ba      	ldr	r2, [r7, #24]
 800ac90:	601a      	str	r2, [r3, #0]
 800ac92:	e002      	b.n	800ac9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	68ba      	ldr	r2, [r7, #8]
 800aca4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aca6:	2101      	movs	r1, #1
 800aca8:	69b8      	ldr	r0, [r7, #24]
 800acaa:	f7ff fecb 	bl	800aa44 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acae:	bf00      	nop
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b082      	sub	sp, #8
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00e      	beq.n	800ace2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2200      	movs	r2, #0
 800acc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800acd6:	2300      	movs	r3, #0
 800acd8:	2200      	movs	r2, #0
 800acda:	2100      	movs	r1, #0
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f837 	bl	800ad50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ace2:	bf00      	nop
 800ace4:	3708      	adds	r7, #8
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd80      	pop	{r7, pc}

0800acea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800acea:	b580      	push	{r7, lr}
 800acec:	b086      	sub	sp, #24
 800acee:	af00      	add	r7, sp, #0
 800acf0:	4603      	mov	r3, r0
 800acf2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800acf4:	2301      	movs	r3, #1
 800acf6:	617b      	str	r3, [r7, #20]
 800acf8:	2300      	movs	r3, #0
 800acfa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	461a      	mov	r2, r3
 800ad00:	6939      	ldr	r1, [r7, #16]
 800ad02:	6978      	ldr	r0, [r7, #20]
 800ad04:	f7ff ff79 	bl	800abfa <xQueueGenericCreate>
 800ad08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f7ff ffd3 	bl	800acb6 <prvInitialiseMutex>

		return xNewQueue;
 800ad10:	68fb      	ldr	r3, [r7, #12]
	}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3718      	adds	r7, #24
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}

0800ad1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ad1a:	b580      	push	{r7, lr}
 800ad1c:	b088      	sub	sp, #32
 800ad1e:	af02      	add	r7, sp, #8
 800ad20:	4603      	mov	r3, r0
 800ad22:	6039      	str	r1, [r7, #0]
 800ad24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ad26:	2301      	movs	r3, #1
 800ad28:	617b      	str	r3, [r7, #20]
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ad2e:	79fb      	ldrb	r3, [r7, #7]
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	2200      	movs	r2, #0
 800ad36:	6939      	ldr	r1, [r7, #16]
 800ad38:	6978      	ldr	r0, [r7, #20]
 800ad3a:	f7ff feeb 	bl	800ab14 <xQueueGenericCreateStatic>
 800ad3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad40:	68f8      	ldr	r0, [r7, #12]
 800ad42:	f7ff ffb8 	bl	800acb6 <prvInitialiseMutex>

		return xNewQueue;
 800ad46:	68fb      	ldr	r3, [r7, #12]
	}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b08e      	sub	sp, #56	; 0x38
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d109      	bne.n	800ad80 <xQueueGenericSend+0x30>
 800ad6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad70:	f383 8811 	msr	BASEPRI, r3
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	f3bf 8f4f 	dsb	sy
 800ad7c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad7e:	e7fe      	b.n	800ad7e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d103      	bne.n	800ad8e <xQueueGenericSend+0x3e>
 800ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d101      	bne.n	800ad92 <xQueueGenericSend+0x42>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e000      	b.n	800ad94 <xQueueGenericSend+0x44>
 800ad92:	2300      	movs	r3, #0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d109      	bne.n	800adac <xQueueGenericSend+0x5c>
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	627b      	str	r3, [r7, #36]	; 0x24
 800adaa:	e7fe      	b.n	800adaa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d103      	bne.n	800adba <xQueueGenericSend+0x6a>
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d101      	bne.n	800adbe <xQueueGenericSend+0x6e>
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <xQueueGenericSend+0x70>
 800adbe:	2300      	movs	r3, #0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d109      	bne.n	800add8 <xQueueGenericSend+0x88>
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	623b      	str	r3, [r7, #32]
 800add6:	e7fe      	b.n	800add6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800add8:	f001 fb82 	bl	800c4e0 <xTaskGetSchedulerState>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <xQueueGenericSend+0x98>
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <xQueueGenericSend+0x9c>
 800ade8:	2301      	movs	r3, #1
 800adea:	e000      	b.n	800adee <xQueueGenericSend+0x9e>
 800adec:	2300      	movs	r3, #0
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d109      	bne.n	800ae06 <xQueueGenericSend+0xb6>
 800adf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf6:	f383 8811 	msr	BASEPRI, r3
 800adfa:	f3bf 8f6f 	isb	sy
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	61fb      	str	r3, [r7, #28]
 800ae04:	e7fe      	b.n	800ae04 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae06:	f001 ff99 	bl	800cd3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d302      	bcc.n	800ae1c <xQueueGenericSend+0xcc>
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d129      	bne.n	800ae70 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae22:	f000 fc48 	bl	800b6b6 <prvCopyDataToQueue>
 800ae26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d010      	beq.n	800ae52 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae32:	3324      	adds	r3, #36	; 0x24
 800ae34:	4618      	mov	r0, r3
 800ae36:	f001 f99d 	bl	800c174 <xTaskRemoveFromEventList>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d013      	beq.n	800ae68 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae40:	4b3f      	ldr	r3, [pc, #252]	; (800af40 <xQueueGenericSend+0x1f0>)
 800ae42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	e00a      	b.n	800ae68 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d007      	beq.n	800ae68 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae58:	4b39      	ldr	r3, [pc, #228]	; (800af40 <xQueueGenericSend+0x1f0>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae68:	f001 ff96 	bl	800cd98 <vPortExitCritical>
				return pdPASS;
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e063      	b.n	800af38 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d103      	bne.n	800ae7e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae76:	f001 ff8f 	bl	800cd98 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e05c      	b.n	800af38 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d106      	bne.n	800ae92 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae84:	f107 0314 	add.w	r3, r7, #20
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 f9d5 	bl	800c238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae92:	f001 ff81 	bl	800cd98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae96:	f000 ff6b 	bl	800bd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae9a:	f001 ff4f 	bl	800cd3c <vPortEnterCritical>
 800ae9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aea4:	b25b      	sxtb	r3, r3
 800aea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeaa:	d103      	bne.n	800aeb4 <xQueueGenericSend+0x164>
 800aeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aeb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aec0:	d103      	bne.n	800aeca <xQueueGenericSend+0x17a>
 800aec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec4:	2200      	movs	r2, #0
 800aec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aeca:	f001 ff65 	bl	800cd98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aece:	1d3a      	adds	r2, r7, #4
 800aed0:	f107 0314 	add.w	r3, r7, #20
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f001 f9c4 	bl	800c264 <xTaskCheckForTimeOut>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d124      	bne.n	800af2c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aee4:	f000 fcdf 	bl	800b8a6 <prvIsQueueFull>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d018      	beq.n	800af20 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aeee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef0:	3310      	adds	r3, #16
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	4611      	mov	r1, r2
 800aef6:	4618      	mov	r0, r3
 800aef8:	f001 f918 	bl	800c12c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aefc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefe:	f000 fc6a 	bl	800b7d6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800af02:	f000 ff43 	bl	800bd8c <xTaskResumeAll>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f47f af7c 	bne.w	800ae06 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800af0e:	4b0c      	ldr	r3, [pc, #48]	; (800af40 <xQueueGenericSend+0x1f0>)
 800af10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af14:	601a      	str	r2, [r3, #0]
 800af16:	f3bf 8f4f 	dsb	sy
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	e772      	b.n	800ae06 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800af20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af22:	f000 fc58 	bl	800b7d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af26:	f000 ff31 	bl	800bd8c <xTaskResumeAll>
 800af2a:	e76c      	b.n	800ae06 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af2e:	f000 fc52 	bl	800b7d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af32:	f000 ff2b 	bl	800bd8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3738      	adds	r7, #56	; 0x38
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	e000ed04 	.word	0xe000ed04

0800af44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08e      	sub	sp, #56	; 0x38
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
 800af50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d109      	bne.n	800af70 <xQueueGenericSendFromISR+0x2c>
 800af5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	627b      	str	r3, [r7, #36]	; 0x24
 800af6e:	e7fe      	b.n	800af6e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d103      	bne.n	800af7e <xQueueGenericSendFromISR+0x3a>
 800af76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <xQueueGenericSendFromISR+0x3e>
 800af7e:	2301      	movs	r3, #1
 800af80:	e000      	b.n	800af84 <xQueueGenericSendFromISR+0x40>
 800af82:	2300      	movs	r3, #0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d109      	bne.n	800af9c <xQueueGenericSendFromISR+0x58>
 800af88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8c:	f383 8811 	msr	BASEPRI, r3
 800af90:	f3bf 8f6f 	isb	sy
 800af94:	f3bf 8f4f 	dsb	sy
 800af98:	623b      	str	r3, [r7, #32]
 800af9a:	e7fe      	b.n	800af9a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b02      	cmp	r3, #2
 800afa0:	d103      	bne.n	800afaa <xQueueGenericSendFromISR+0x66>
 800afa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d101      	bne.n	800afae <xQueueGenericSendFromISR+0x6a>
 800afaa:	2301      	movs	r3, #1
 800afac:	e000      	b.n	800afb0 <xQueueGenericSendFromISR+0x6c>
 800afae:	2300      	movs	r3, #0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d109      	bne.n	800afc8 <xQueueGenericSendFromISR+0x84>
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	61fb      	str	r3, [r7, #28]
 800afc6:	e7fe      	b.n	800afc6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afc8:	f001 ff94 	bl	800cef4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afcc:	f3ef 8211 	mrs	r2, BASEPRI
 800afd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	61ba      	str	r2, [r7, #24]
 800afe2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afe4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afe6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d302      	bcc.n	800affa <xQueueGenericSendFromISR+0xb6>
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2b02      	cmp	r3, #2
 800aff8:	d12c      	bne.n	800b054 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800affa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b000:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00a:	f000 fb54 	bl	800b6b6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b00e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b016:	d112      	bne.n	800b03e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d016      	beq.n	800b04e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	3324      	adds	r3, #36	; 0x24
 800b024:	4618      	mov	r0, r3
 800b026:	f001 f8a5 	bl	800c174 <xTaskRemoveFromEventList>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d00e      	beq.n	800b04e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d00b      	beq.n	800b04e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2201      	movs	r2, #1
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	e007      	b.n	800b04e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b03e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b042:	3301      	adds	r3, #1
 800b044:	b2db      	uxtb	r3, r3
 800b046:	b25a      	sxtb	r2, r3
 800b048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b04a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b04e:	2301      	movs	r3, #1
 800b050:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b052:	e001      	b.n	800b058 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b054:	2300      	movs	r3, #0
 800b056:	637b      	str	r3, [r7, #52]	; 0x34
 800b058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b05a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b05c:	693b      	ldr	r3, [r7, #16]
 800b05e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b064:	4618      	mov	r0, r3
 800b066:	3738      	adds	r7, #56	; 0x38
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b08e      	sub	sp, #56	; 0x38
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d109      	bne.n	800b094 <xQueueGiveFromISR+0x28>
	__asm volatile
 800b080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b084:	f383 8811 	msr	BASEPRI, r3
 800b088:	f3bf 8f6f 	isb	sy
 800b08c:	f3bf 8f4f 	dsb	sy
 800b090:	623b      	str	r3, [r7, #32]
 800b092:	e7fe      	b.n	800b092 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d009      	beq.n	800b0b0 <xQueueGiveFromISR+0x44>
 800b09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61fb      	str	r3, [r7, #28]
 800b0ae:	e7fe      	b.n	800b0ae <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d103      	bne.n	800b0c0 <xQueueGiveFromISR+0x54>
 800b0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <xQueueGiveFromISR+0x58>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e000      	b.n	800b0c6 <xQueueGiveFromISR+0x5a>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d109      	bne.n	800b0de <xQueueGiveFromISR+0x72>
 800b0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ce:	f383 8811 	msr	BASEPRI, r3
 800b0d2:	f3bf 8f6f 	isb	sy
 800b0d6:	f3bf 8f4f 	dsb	sy
 800b0da:	61bb      	str	r3, [r7, #24]
 800b0dc:	e7fe      	b.n	800b0dc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0de:	f001 ff09 	bl	800cef4 <vPortValidateInterruptPriority>
	__asm volatile
 800b0e2:	f3ef 8211 	mrs	r2, BASEPRI
 800b0e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ea:	f383 8811 	msr	BASEPRI, r3
 800b0ee:	f3bf 8f6f 	isb	sy
 800b0f2:	f3bf 8f4f 	dsb	sy
 800b0f6:	617a      	str	r2, [r7, #20]
 800b0f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b0fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b102:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d22b      	bcs.n	800b166 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	1c5a      	adds	r2, r3, #1
 800b11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b11e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b128:	d112      	bne.n	800b150 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d016      	beq.n	800b160 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	3324      	adds	r3, #36	; 0x24
 800b136:	4618      	mov	r0, r3
 800b138:	f001 f81c 	bl	800c174 <xTaskRemoveFromEventList>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00e      	beq.n	800b160 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d00b      	beq.n	800b160 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b148:	683b      	ldr	r3, [r7, #0]
 800b14a:	2201      	movs	r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	e007      	b.n	800b160 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b154:	3301      	adds	r3, #1
 800b156:	b2db      	uxtb	r3, r3
 800b158:	b25a      	sxtb	r2, r3
 800b15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b15c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b160:	2301      	movs	r3, #1
 800b162:	637b      	str	r3, [r7, #52]	; 0x34
 800b164:	e001      	b.n	800b16a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b166:	2300      	movs	r3, #0
 800b168:	637b      	str	r3, [r7, #52]	; 0x34
 800b16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b176:	4618      	mov	r0, r3
 800b178:	3738      	adds	r7, #56	; 0x38
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}
	...

0800b180 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b08c      	sub	sp, #48	; 0x30
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b18c:	2300      	movs	r3, #0
 800b18e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b196:	2b00      	cmp	r3, #0
 800b198:	d109      	bne.n	800b1ae <xQueueReceive+0x2e>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	623b      	str	r3, [r7, #32]
 800b1ac:	e7fe      	b.n	800b1ac <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d103      	bne.n	800b1bc <xQueueReceive+0x3c>
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <xQueueReceive+0x40>
 800b1bc:	2301      	movs	r3, #1
 800b1be:	e000      	b.n	800b1c2 <xQueueReceive+0x42>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d109      	bne.n	800b1da <xQueueReceive+0x5a>
 800b1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ca:	f383 8811 	msr	BASEPRI, r3
 800b1ce:	f3bf 8f6f 	isb	sy
 800b1d2:	f3bf 8f4f 	dsb	sy
 800b1d6:	61fb      	str	r3, [r7, #28]
 800b1d8:	e7fe      	b.n	800b1d8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1da:	f001 f981 	bl	800c4e0 <xTaskGetSchedulerState>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d102      	bne.n	800b1ea <xQueueReceive+0x6a>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d101      	bne.n	800b1ee <xQueueReceive+0x6e>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e000      	b.n	800b1f0 <xQueueReceive+0x70>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d109      	bne.n	800b208 <xQueueReceive+0x88>
 800b1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f8:	f383 8811 	msr	BASEPRI, r3
 800b1fc:	f3bf 8f6f 	isb	sy
 800b200:	f3bf 8f4f 	dsb	sy
 800b204:	61bb      	str	r3, [r7, #24]
 800b206:	e7fe      	b.n	800b206 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b208:	f001 fd98 	bl	800cd3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b20c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b210:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01f      	beq.n	800b258 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b21c:	f000 fab5 	bl	800b78a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	1e5a      	subs	r2, r3, #1
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00f      	beq.n	800b250 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b232:	3310      	adds	r3, #16
 800b234:	4618      	mov	r0, r3
 800b236:	f000 ff9d 	bl	800c174 <xTaskRemoveFromEventList>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d007      	beq.n	800b250 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b240:	4b3c      	ldr	r3, [pc, #240]	; (800b334 <xQueueReceive+0x1b4>)
 800b242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b246:	601a      	str	r2, [r3, #0]
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b250:	f001 fda2 	bl	800cd98 <vPortExitCritical>
				return pdPASS;
 800b254:	2301      	movs	r3, #1
 800b256:	e069      	b.n	800b32c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d103      	bne.n	800b266 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b25e:	f001 fd9b 	bl	800cd98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b262:	2300      	movs	r3, #0
 800b264:	e062      	b.n	800b32c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d106      	bne.n	800b27a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b26c:	f107 0310 	add.w	r3, r7, #16
 800b270:	4618      	mov	r0, r3
 800b272:	f000 ffe1 	bl	800c238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b276:	2301      	movs	r3, #1
 800b278:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b27a:	f001 fd8d 	bl	800cd98 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b27e:	f000 fd77 	bl	800bd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b282:	f001 fd5b 	bl	800cd3c <vPortEnterCritical>
 800b286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b28c:	b25b      	sxtb	r3, r3
 800b28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b292:	d103      	bne.n	800b29c <xQueueReceive+0x11c>
 800b294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b296:	2200      	movs	r2, #0
 800b298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a2:	b25b      	sxtb	r3, r3
 800b2a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a8:	d103      	bne.n	800b2b2 <xQueueReceive+0x132>
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b2:	f001 fd71 	bl	800cd98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2b6:	1d3a      	adds	r2, r7, #4
 800b2b8:	f107 0310 	add.w	r3, r7, #16
 800b2bc:	4611      	mov	r1, r2
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 ffd0 	bl	800c264 <xTaskCheckForTimeOut>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d123      	bne.n	800b312 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2cc:	f000 fad5 	bl	800b87a <prvIsQueueEmpty>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d017      	beq.n	800b306 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d8:	3324      	adds	r3, #36	; 0x24
 800b2da:	687a      	ldr	r2, [r7, #4]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f000 ff24 	bl	800c12c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e6:	f000 fa76 	bl	800b7d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2ea:	f000 fd4f 	bl	800bd8c <xTaskResumeAll>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d189      	bne.n	800b208 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b2f4:	4b0f      	ldr	r3, [pc, #60]	; (800b334 <xQueueReceive+0x1b4>)
 800b2f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	f3bf 8f4f 	dsb	sy
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	e780      	b.n	800b208 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b308:	f000 fa65 	bl	800b7d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b30c:	f000 fd3e 	bl	800bd8c <xTaskResumeAll>
 800b310:	e77a      	b.n	800b208 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b314:	f000 fa5f 	bl	800b7d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b318:	f000 fd38 	bl	800bd8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b31c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b31e:	f000 faac 	bl	800b87a <prvIsQueueEmpty>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	f43f af6f 	beq.w	800b208 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b32a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3730      	adds	r7, #48	; 0x30
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	e000ed04 	.word	0xe000ed04

0800b338 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b08e      	sub	sp, #56	; 0x38
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
 800b340:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b342:	2300      	movs	r3, #0
 800b344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b34a:	2300      	movs	r3, #0
 800b34c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b350:	2b00      	cmp	r3, #0
 800b352:	d109      	bne.n	800b368 <xQueueSemaphoreTake+0x30>
 800b354:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b358:	f383 8811 	msr	BASEPRI, r3
 800b35c:	f3bf 8f6f 	isb	sy
 800b360:	f3bf 8f4f 	dsb	sy
 800b364:	623b      	str	r3, [r7, #32]
 800b366:	e7fe      	b.n	800b366 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b36a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d009      	beq.n	800b384 <xQueueSemaphoreTake+0x4c>
 800b370:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b374:	f383 8811 	msr	BASEPRI, r3
 800b378:	f3bf 8f6f 	isb	sy
 800b37c:	f3bf 8f4f 	dsb	sy
 800b380:	61fb      	str	r3, [r7, #28]
 800b382:	e7fe      	b.n	800b382 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b384:	f001 f8ac 	bl	800c4e0 <xTaskGetSchedulerState>
 800b388:	4603      	mov	r3, r0
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d102      	bne.n	800b394 <xQueueSemaphoreTake+0x5c>
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d101      	bne.n	800b398 <xQueueSemaphoreTake+0x60>
 800b394:	2301      	movs	r3, #1
 800b396:	e000      	b.n	800b39a <xQueueSemaphoreTake+0x62>
 800b398:	2300      	movs	r3, #0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d109      	bne.n	800b3b2 <xQueueSemaphoreTake+0x7a>
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	61bb      	str	r3, [r7, #24]
 800b3b0:	e7fe      	b.n	800b3b0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3b2:	f001 fcc3 	bl	800cd3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b3b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d024      	beq.n	800b40c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c4:	1e5a      	subs	r2, r3, #1
 800b3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d104      	bne.n	800b3dc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b3d2:	f001 fa3f 	bl	800c854 <pvTaskIncrementMutexHeldCount>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d00f      	beq.n	800b404 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e6:	3310      	adds	r3, #16
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	f000 fec3 	bl	800c174 <xTaskRemoveFromEventList>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d007      	beq.n	800b404 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3f4:	4b53      	ldr	r3, [pc, #332]	; (800b544 <xQueueSemaphoreTake+0x20c>)
 800b3f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b404:	f001 fcc8 	bl	800cd98 <vPortExitCritical>
				return pdPASS;
 800b408:	2301      	movs	r3, #1
 800b40a:	e096      	b.n	800b53a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d110      	bne.n	800b434 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b414:	2b00      	cmp	r3, #0
 800b416:	d009      	beq.n	800b42c <xQueueSemaphoreTake+0xf4>
 800b418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b41c:	f383 8811 	msr	BASEPRI, r3
 800b420:	f3bf 8f6f 	isb	sy
 800b424:	f3bf 8f4f 	dsb	sy
 800b428:	617b      	str	r3, [r7, #20]
 800b42a:	e7fe      	b.n	800b42a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b42c:	f001 fcb4 	bl	800cd98 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b430:	2300      	movs	r3, #0
 800b432:	e082      	b.n	800b53a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b436:	2b00      	cmp	r3, #0
 800b438:	d106      	bne.n	800b448 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b43a:	f107 030c 	add.w	r3, r7, #12
 800b43e:	4618      	mov	r0, r3
 800b440:	f000 fefa 	bl	800c238 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b444:	2301      	movs	r3, #1
 800b446:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b448:	f001 fca6 	bl	800cd98 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b44c:	f000 fc90 	bl	800bd70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b450:	f001 fc74 	bl	800cd3c <vPortEnterCritical>
 800b454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b456:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b45a:	b25b      	sxtb	r3, r3
 800b45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b460:	d103      	bne.n	800b46a <xQueueSemaphoreTake+0x132>
 800b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b464:	2200      	movs	r2, #0
 800b466:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b46c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b470:	b25b      	sxtb	r3, r3
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b476:	d103      	bne.n	800b480 <xQueueSemaphoreTake+0x148>
 800b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47a:	2200      	movs	r2, #0
 800b47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b480:	f001 fc8a 	bl	800cd98 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b484:	463a      	mov	r2, r7
 800b486:	f107 030c 	add.w	r3, r7, #12
 800b48a:	4611      	mov	r1, r2
 800b48c:	4618      	mov	r0, r3
 800b48e:	f000 fee9 	bl	800c264 <xTaskCheckForTimeOut>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d132      	bne.n	800b4fe <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b498:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b49a:	f000 f9ee 	bl	800b87a <prvIsQueueEmpty>
 800b49e:	4603      	mov	r3, r0
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d026      	beq.n	800b4f2 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d109      	bne.n	800b4c0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b4ac:	f001 fc46 	bl	800cd3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f001 f831 	bl	800c51c <xTaskPriorityInherit>
 800b4ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b4bc:	f001 fc6c 	bl	800cd98 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	3324      	adds	r3, #36	; 0x24
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f000 fe2f 	bl	800c12c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4d0:	f000 f981 	bl	800b7d6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4d4:	f000 fc5a 	bl	800bd8c <xTaskResumeAll>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f47f af69 	bne.w	800b3b2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b4e0:	4b18      	ldr	r3, [pc, #96]	; (800b544 <xQueueSemaphoreTake+0x20c>)
 800b4e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4e6:	601a      	str	r2, [r3, #0]
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	f3bf 8f6f 	isb	sy
 800b4f0:	e75f      	b.n	800b3b2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b4f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4f4:	f000 f96f 	bl	800b7d6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4f8:	f000 fc48 	bl	800bd8c <xTaskResumeAll>
 800b4fc:	e759      	b.n	800b3b2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b4fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b500:	f000 f969 	bl	800b7d6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b504:	f000 fc42 	bl	800bd8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b508:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b50a:	f000 f9b6 	bl	800b87a <prvIsQueueEmpty>
 800b50e:	4603      	mov	r3, r0
 800b510:	2b00      	cmp	r3, #0
 800b512:	f43f af4e 	beq.w	800b3b2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00d      	beq.n	800b538 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b51c:	f001 fc0e 	bl	800cd3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b522:	f000 f8b0 	bl	800b686 <prvGetDisinheritPriorityAfterTimeout>
 800b526:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b52a:	689b      	ldr	r3, [r3, #8]
 800b52c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b52e:	4618      	mov	r0, r3
 800b530:	f001 f8f8 	bl	800c724 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b534:	f001 fc30 	bl	800cd98 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b538:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b53a:	4618      	mov	r0, r3
 800b53c:	3738      	adds	r7, #56	; 0x38
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
 800b542:	bf00      	nop
 800b544:	e000ed04 	.word	0xe000ed04

0800b548 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b08e      	sub	sp, #56	; 0x38
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d109      	bne.n	800b572 <xQueueReceiveFromISR+0x2a>
 800b55e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b562:	f383 8811 	msr	BASEPRI, r3
 800b566:	f3bf 8f6f 	isb	sy
 800b56a:	f3bf 8f4f 	dsb	sy
 800b56e:	623b      	str	r3, [r7, #32]
 800b570:	e7fe      	b.n	800b570 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d103      	bne.n	800b580 <xQueueReceiveFromISR+0x38>
 800b578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <xQueueReceiveFromISR+0x3c>
 800b580:	2301      	movs	r3, #1
 800b582:	e000      	b.n	800b586 <xQueueReceiveFromISR+0x3e>
 800b584:	2300      	movs	r3, #0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d109      	bne.n	800b59e <xQueueReceiveFromISR+0x56>
 800b58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b58e:	f383 8811 	msr	BASEPRI, r3
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	f3bf 8f4f 	dsb	sy
 800b59a:	61fb      	str	r3, [r7, #28]
 800b59c:	e7fe      	b.n	800b59c <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b59e:	f001 fca9 	bl	800cef4 <vPortValidateInterruptPriority>
	__asm volatile
 800b5a2:	f3ef 8211 	mrs	r2, BASEPRI
 800b5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5aa:	f383 8811 	msr	BASEPRI, r3
 800b5ae:	f3bf 8f6f 	isb	sy
 800b5b2:	f3bf 8f4f 	dsb	sy
 800b5b6:	61ba      	str	r2, [r7, #24]
 800b5b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b5ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d02f      	beq.n	800b62a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b5d4:	68b9      	ldr	r1, [r7, #8]
 800b5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5d8:	f000 f8d7 	bl	800b78a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5de:	1e5a      	subs	r2, r3, #1
 800b5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b5e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5ec:	d112      	bne.n	800b614 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	691b      	ldr	r3, [r3, #16]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d016      	beq.n	800b624 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	3310      	adds	r3, #16
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f000 fdba 	bl	800c174 <xTaskRemoveFromEventList>
 800b600:	4603      	mov	r3, r0
 800b602:	2b00      	cmp	r3, #0
 800b604:	d00e      	beq.n	800b624 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d00b      	beq.n	800b624 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2201      	movs	r2, #1
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	e007      	b.n	800b624 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b618:	3301      	adds	r3, #1
 800b61a:	b2db      	uxtb	r3, r3
 800b61c:	b25a      	sxtb	r2, r3
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b624:	2301      	movs	r3, #1
 800b626:	637b      	str	r3, [r7, #52]	; 0x34
 800b628:	e001      	b.n	800b62e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b62a:	2300      	movs	r3, #0
 800b62c:	637b      	str	r3, [r7, #52]	; 0x34
 800b62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b630:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3738      	adds	r7, #56	; 0x38
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}

0800b642 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d109      	bne.n	800b668 <vQueueDelete+0x26>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	60bb      	str	r3, [r7, #8]
 800b666:	e7fe      	b.n	800b666 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f000 f935 	bl	800b8d8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b674:	2b00      	cmp	r3, #0
 800b676:	d102      	bne.n	800b67e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f001 fd3b 	bl	800d0f4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b67e:	bf00      	nop
 800b680:	3710      	adds	r7, #16
 800b682:	46bd      	mov	sp, r7
 800b684:	bd80      	pop	{r7, pc}

0800b686 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b686:	b480      	push	{r7}
 800b688:	b085      	sub	sp, #20
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b692:	2b00      	cmp	r3, #0
 800b694:	d006      	beq.n	800b6a4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f1c3 0307 	rsb	r3, r3, #7
 800b6a0:	60fb      	str	r3, [r7, #12]
 800b6a2:	e001      	b.n	800b6a8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
	}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3714      	adds	r7, #20
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr

0800b6b6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b086      	sub	sp, #24
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	60f8      	str	r0, [r7, #12]
 800b6be:	60b9      	str	r1, [r7, #8]
 800b6c0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10d      	bne.n	800b6f0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d14d      	bne.n	800b778 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 ff9b 	bl	800c61c <xTaskPriorityDisinherit>
 800b6e6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	609a      	str	r2, [r3, #8]
 800b6ee:	e043      	b.n	800b778 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d119      	bne.n	800b72a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	6858      	ldr	r0, [r3, #4]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6fe:	461a      	mov	r2, r3
 800b700:	68b9      	ldr	r1, [r7, #8]
 800b702:	f001 fe2f 	bl	800d364 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	685a      	ldr	r2, [r3, #4]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70e:	441a      	add	r2, r3
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	685a      	ldr	r2, [r3, #4]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	689b      	ldr	r3, [r3, #8]
 800b71c:	429a      	cmp	r2, r3
 800b71e:	d32b      	bcc.n	800b778 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	605a      	str	r2, [r3, #4]
 800b728:	e026      	b.n	800b778 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	68d8      	ldr	r0, [r3, #12]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b732:	461a      	mov	r2, r3
 800b734:	68b9      	ldr	r1, [r7, #8]
 800b736:	f001 fe15 	bl	800d364 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b742:	425b      	negs	r3, r3
 800b744:	441a      	add	r2, r3
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	68da      	ldr	r2, [r3, #12]
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	429a      	cmp	r2, r3
 800b754:	d207      	bcs.n	800b766 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	689a      	ldr	r2, [r3, #8]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b75e:	425b      	negs	r3, r3
 800b760:	441a      	add	r2, r3
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b02      	cmp	r3, #2
 800b76a:	d105      	bne.n	800b778 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d002      	beq.n	800b778 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	3b01      	subs	r3, #1
 800b776:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b780:	697b      	ldr	r3, [r7, #20]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3718      	adds	r7, #24
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d018      	beq.n	800b7ce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	68da      	ldr	r2, [r3, #12]
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7a4:	441a      	add	r2, r3
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	68da      	ldr	r2, [r3, #12]
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d303      	bcc.n	800b7be <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	68d9      	ldr	r1, [r3, #12]
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7c6:	461a      	mov	r2, r3
 800b7c8:	6838      	ldr	r0, [r7, #0]
 800b7ca:	f001 fdcb 	bl	800d364 <memcpy>
	}
}
 800b7ce:	bf00      	nop
 800b7d0:	3708      	adds	r7, #8
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}

0800b7d6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7d6:	b580      	push	{r7, lr}
 800b7d8:	b084      	sub	sp, #16
 800b7da:	af00      	add	r7, sp, #0
 800b7dc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b7de:	f001 faad 	bl	800cd3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7e8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7ea:	e011      	b.n	800b810 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d012      	beq.n	800b81a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3324      	adds	r3, #36	; 0x24
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 fcbb 	bl	800c174 <xTaskRemoveFromEventList>
 800b7fe:	4603      	mov	r3, r0
 800b800:	2b00      	cmp	r3, #0
 800b802:	d001      	beq.n	800b808 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b804:	f000 fd8e 	bl	800c324 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
 800b80a:	3b01      	subs	r3, #1
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b814:	2b00      	cmp	r3, #0
 800b816:	dce9      	bgt.n	800b7ec <prvUnlockQueue+0x16>
 800b818:	e000      	b.n	800b81c <prvUnlockQueue+0x46>
					break;
 800b81a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	22ff      	movs	r2, #255	; 0xff
 800b820:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b824:	f001 fab8 	bl	800cd98 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b828:	f001 fa88 	bl	800cd3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b832:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b834:	e011      	b.n	800b85a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d012      	beq.n	800b864 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3310      	adds	r3, #16
 800b842:	4618      	mov	r0, r3
 800b844:	f000 fc96 	bl	800c174 <xTaskRemoveFromEventList>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d001      	beq.n	800b852 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b84e:	f000 fd69 	bl	800c324 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b852:	7bbb      	ldrb	r3, [r7, #14]
 800b854:	3b01      	subs	r3, #1
 800b856:	b2db      	uxtb	r3, r3
 800b858:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b85a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	dce9      	bgt.n	800b836 <prvUnlockQueue+0x60>
 800b862:	e000      	b.n	800b866 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b864:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	22ff      	movs	r2, #255	; 0xff
 800b86a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b86e:	f001 fa93 	bl	800cd98 <vPortExitCritical>
}
 800b872:	bf00      	nop
 800b874:	3710      	adds	r7, #16
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b084      	sub	sp, #16
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b882:	f001 fa5b 	bl	800cd3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d102      	bne.n	800b894 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b88e:	2301      	movs	r3, #1
 800b890:	60fb      	str	r3, [r7, #12]
 800b892:	e001      	b.n	800b898 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b894:	2300      	movs	r3, #0
 800b896:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b898:	f001 fa7e 	bl	800cd98 <vPortExitCritical>

	return xReturn;
 800b89c:	68fb      	ldr	r3, [r7, #12]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8ae:	f001 fa45 	bl	800cd3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ba:	429a      	cmp	r2, r3
 800b8bc:	d102      	bne.n	800b8c4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	60fb      	str	r3, [r7, #12]
 800b8c2:	e001      	b.n	800b8c8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8c8:	f001 fa66 	bl	800cd98 <vPortExitCritical>

	return xReturn;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3710      	adds	r7, #16
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}
	...

0800b8d8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	60fb      	str	r3, [r7, #12]
 800b8e4:	e016      	b.n	800b914 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b8e6:	4a10      	ldr	r2, [pc, #64]	; (800b928 <vQueueUnregisterQueue+0x50>)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	00db      	lsls	r3, r3, #3
 800b8ec:	4413      	add	r3, r2
 800b8ee:	685b      	ldr	r3, [r3, #4]
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d10b      	bne.n	800b90e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b8f6:	4a0c      	ldr	r2, [pc, #48]	; (800b928 <vQueueUnregisterQueue+0x50>)
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b900:	4a09      	ldr	r2, [pc, #36]	; (800b928 <vQueueUnregisterQueue+0x50>)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	00db      	lsls	r3, r3, #3
 800b906:	4413      	add	r3, r2
 800b908:	2200      	movs	r2, #0
 800b90a:	605a      	str	r2, [r3, #4]
				break;
 800b90c:	e005      	b.n	800b91a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3301      	adds	r3, #1
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b07      	cmp	r3, #7
 800b918:	d9e5      	bls.n	800b8e6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b91a:	bf00      	nop
 800b91c:	3714      	adds	r7, #20
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr
 800b926:	bf00      	nop
 800b928:	2000863c 	.word	0x2000863c

0800b92c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b08e      	sub	sp, #56	; 0x38
 800b930:	af04      	add	r7, sp, #16
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b93a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d109      	bne.n	800b954 <xTaskCreateStatic+0x28>
 800b940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b944:	f383 8811 	msr	BASEPRI, r3
 800b948:	f3bf 8f6f 	isb	sy
 800b94c:	f3bf 8f4f 	dsb	sy
 800b950:	623b      	str	r3, [r7, #32]
 800b952:	e7fe      	b.n	800b952 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b956:	2b00      	cmp	r3, #0
 800b958:	d109      	bne.n	800b96e <xTaskCreateStatic+0x42>
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	f383 8811 	msr	BASEPRI, r3
 800b962:	f3bf 8f6f 	isb	sy
 800b966:	f3bf 8f4f 	dsb	sy
 800b96a:	61fb      	str	r3, [r7, #28]
 800b96c:	e7fe      	b.n	800b96c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b96e:	2354      	movs	r3, #84	; 0x54
 800b970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	2b54      	cmp	r3, #84	; 0x54
 800b976:	d009      	beq.n	800b98c <xTaskCreateStatic+0x60>
 800b978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b97c:	f383 8811 	msr	BASEPRI, r3
 800b980:	f3bf 8f6f 	isb	sy
 800b984:	f3bf 8f4f 	dsb	sy
 800b988:	61bb      	str	r3, [r7, #24]
 800b98a:	e7fe      	b.n	800b98a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b98c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b990:	2b00      	cmp	r3, #0
 800b992:	d01e      	beq.n	800b9d2 <xTaskCreateStatic+0xa6>
 800b994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b996:	2b00      	cmp	r3, #0
 800b998:	d01b      	beq.n	800b9d2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	2202      	movs	r2, #2
 800b9a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	9303      	str	r3, [sp, #12]
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	9302      	str	r3, [sp, #8]
 800b9b4:	f107 0314 	add.w	r3, r7, #20
 800b9b8:	9301      	str	r3, [sp, #4]
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f000 f850 	bl	800ba6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9cc:	f000 f8d4 	bl	800bb78 <prvAddNewTaskToReadyList>
 800b9d0:	e001      	b.n	800b9d6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9d6:	697b      	ldr	r3, [r7, #20]
	}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3728      	adds	r7, #40	; 0x28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b08c      	sub	sp, #48	; 0x30
 800b9e4:	af04      	add	r7, sp, #16
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	603b      	str	r3, [r7, #0]
 800b9ec:	4613      	mov	r3, r2
 800b9ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9f0:	88fb      	ldrh	r3, [r7, #6]
 800b9f2:	009b      	lsls	r3, r3, #2
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f001 fabb 	bl	800cf70 <pvPortMalloc>
 800b9fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00e      	beq.n	800ba20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ba02:	2054      	movs	r0, #84	; 0x54
 800ba04:	f001 fab4 	bl	800cf70 <pvPortMalloc>
 800ba08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d003      	beq.n	800ba18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	697a      	ldr	r2, [r7, #20]
 800ba14:	631a      	str	r2, [r3, #48]	; 0x30
 800ba16:	e005      	b.n	800ba24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ba18:	6978      	ldr	r0, [r7, #20]
 800ba1a:	f001 fb6b 	bl	800d0f4 <vPortFree>
 800ba1e:	e001      	b.n	800ba24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ba20:	2300      	movs	r3, #0
 800ba22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d017      	beq.n	800ba5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba2a:	69fb      	ldr	r3, [r7, #28]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba32:	88fa      	ldrh	r2, [r7, #6]
 800ba34:	2300      	movs	r3, #0
 800ba36:	9303      	str	r3, [sp, #12]
 800ba38:	69fb      	ldr	r3, [r7, #28]
 800ba3a:	9302      	str	r3, [sp, #8]
 800ba3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba3e:	9301      	str	r3, [sp, #4]
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	9300      	str	r3, [sp, #0]
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	68b9      	ldr	r1, [r7, #8]
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 f80e 	bl	800ba6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba4e:	69f8      	ldr	r0, [r7, #28]
 800ba50:	f000 f892 	bl	800bb78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba54:	2301      	movs	r3, #1
 800ba56:	61bb      	str	r3, [r7, #24]
 800ba58:	e002      	b.n	800ba60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba5a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba60:	69bb      	ldr	r3, [r7, #24]
	}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3720      	adds	r7, #32
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}

0800ba6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba6a:	b580      	push	{r7, lr}
 800ba6c:	b088      	sub	sp, #32
 800ba6e:	af00      	add	r7, sp, #0
 800ba70:	60f8      	str	r0, [r7, #12]
 800ba72:	60b9      	str	r1, [r7, #8]
 800ba74:	607a      	str	r2, [r7, #4]
 800ba76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ba82:	3b01      	subs	r3, #1
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	f023 0307 	bic.w	r3, r3, #7
 800ba90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	f003 0307 	and.w	r3, r3, #7
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d009      	beq.n	800bab0 <prvInitialiseNewTask+0x46>
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	617b      	str	r3, [r7, #20]
 800baae:	e7fe      	b.n	800baae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d01f      	beq.n	800baf6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bab6:	2300      	movs	r3, #0
 800bab8:	61fb      	str	r3, [r7, #28]
 800baba:	e012      	b.n	800bae2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	4413      	add	r3, r2
 800bac2:	7819      	ldrb	r1, [r3, #0]
 800bac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	4413      	add	r3, r2
 800baca:	3334      	adds	r3, #52	; 0x34
 800bacc:	460a      	mov	r2, r1
 800bace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	69fb      	ldr	r3, [r7, #28]
 800bad4:	4413      	add	r3, r2
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d006      	beq.n	800baea <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	3301      	adds	r3, #1
 800bae0:	61fb      	str	r3, [r7, #28]
 800bae2:	69fb      	ldr	r3, [r7, #28]
 800bae4:	2b0f      	cmp	r3, #15
 800bae6:	d9e9      	bls.n	800babc <prvInitialiseNewTask+0x52>
 800bae8:	e000      	b.n	800baec <prvInitialiseNewTask+0x82>
			{
				break;
 800baea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800baf4:	e003      	b.n	800bafe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800baf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf8:	2200      	movs	r2, #0
 800bafa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	2b06      	cmp	r3, #6
 800bb02:	d901      	bls.n	800bb08 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bb04:	2306      	movs	r3, #6
 800bb06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb16:	2200      	movs	r2, #0
 800bb18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7fe fefc 	bl	800a91c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb26:	3318      	adds	r3, #24
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fe fef7 	bl	800a91c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb36:	f1c3 0207 	rsb	r2, r3, #7
 800bb3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb46:	2200      	movs	r2, #0
 800bb48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb52:	683a      	ldr	r2, [r7, #0]
 800bb54:	68f9      	ldr	r1, [r7, #12]
 800bb56:	69b8      	ldr	r0, [r7, #24]
 800bb58:	f000 ffcc 	bl	800caf4 <pxPortInitialiseStack>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d002      	beq.n	800bb6e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb6e:	bf00      	nop
 800bb70:	3720      	adds	r7, #32
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
	...

0800bb78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb80:	f001 f8dc 	bl	800cd3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb84:	4b2a      	ldr	r3, [pc, #168]	; (800bc30 <prvAddNewTaskToReadyList+0xb8>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	4a29      	ldr	r2, [pc, #164]	; (800bc30 <prvAddNewTaskToReadyList+0xb8>)
 800bb8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb8e:	4b29      	ldr	r3, [pc, #164]	; (800bc34 <prvAddNewTaskToReadyList+0xbc>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d109      	bne.n	800bbaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb96:	4a27      	ldr	r2, [pc, #156]	; (800bc34 <prvAddNewTaskToReadyList+0xbc>)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb9c:	4b24      	ldr	r3, [pc, #144]	; (800bc30 <prvAddNewTaskToReadyList+0xb8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d110      	bne.n	800bbc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bba4:	f000 fbe2 	bl	800c36c <prvInitialiseTaskLists>
 800bba8:	e00d      	b.n	800bbc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bbaa:	4b23      	ldr	r3, [pc, #140]	; (800bc38 <prvAddNewTaskToReadyList+0xc0>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d109      	bne.n	800bbc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bbb2:	4b20      	ldr	r3, [pc, #128]	; (800bc34 <prvAddNewTaskToReadyList+0xbc>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d802      	bhi.n	800bbc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bbc0:	4a1c      	ldr	r2, [pc, #112]	; (800bc34 <prvAddNewTaskToReadyList+0xbc>)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bbc6:	4b1d      	ldr	r3, [pc, #116]	; (800bc3c <prvAddNewTaskToReadyList+0xc4>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	3301      	adds	r3, #1
 800bbcc:	4a1b      	ldr	r2, [pc, #108]	; (800bc3c <prvAddNewTaskToReadyList+0xc4>)
 800bbce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd4:	2201      	movs	r2, #1
 800bbd6:	409a      	lsls	r2, r3
 800bbd8:	4b19      	ldr	r3, [pc, #100]	; (800bc40 <prvAddNewTaskToReadyList+0xc8>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	4a18      	ldr	r2, [pc, #96]	; (800bc40 <prvAddNewTaskToReadyList+0xc8>)
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4a15      	ldr	r2, [pc, #84]	; (800bc44 <prvAddNewTaskToReadyList+0xcc>)
 800bbf0:	441a      	add	r2, r3
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	f7fe fe9c 	bl	800a936 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbfe:	f001 f8cb 	bl	800cd98 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bc02:	4b0d      	ldr	r3, [pc, #52]	; (800bc38 <prvAddNewTaskToReadyList+0xc0>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d00e      	beq.n	800bc28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvAddNewTaskToReadyList+0xbc>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d207      	bcs.n	800bc28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bc18:	4b0b      	ldr	r3, [pc, #44]	; (800bc48 <prvAddNewTaskToReadyList+0xd0>)
 800bc1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc1e:	601a      	str	r2, [r3, #0]
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	200025cc 	.word	0x200025cc
 800bc34:	200024cc 	.word	0x200024cc
 800bc38:	200025d8 	.word	0x200025d8
 800bc3c:	200025e8 	.word	0x200025e8
 800bc40:	200025d4 	.word	0x200025d4
 800bc44:	200024d0 	.word	0x200024d0
 800bc48:	e000ed04 	.word	0xe000ed04

0800bc4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc54:	2300      	movs	r3, #0
 800bc56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d016      	beq.n	800bc8c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc5e:	4b13      	ldr	r3, [pc, #76]	; (800bcac <vTaskDelay+0x60>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d009      	beq.n	800bc7a <vTaskDelay+0x2e>
 800bc66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	60bb      	str	r3, [r7, #8]
 800bc78:	e7fe      	b.n	800bc78 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bc7a:	f000 f879 	bl	800bd70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc7e:	2100      	movs	r1, #0
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fed1 	bl	800ca28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc86:	f000 f881 	bl	800bd8c <xTaskResumeAll>
 800bc8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d107      	bne.n	800bca2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800bc92:	4b07      	ldr	r3, [pc, #28]	; (800bcb0 <vTaskDelay+0x64>)
 800bc94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bca2:	bf00      	nop
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}
 800bcaa:	bf00      	nop
 800bcac:	200025f4 	.word	0x200025f4
 800bcb0:	e000ed04 	.word	0xe000ed04

0800bcb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b08a      	sub	sp, #40	; 0x28
 800bcb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	1d39      	adds	r1, r7, #4
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7f4 fc08 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bcd0:	6839      	ldr	r1, [r7, #0]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	68ba      	ldr	r2, [r7, #8]
 800bcd6:	9202      	str	r2, [sp, #8]
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	2300      	movs	r3, #0
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	2300      	movs	r3, #0
 800bce0:	460a      	mov	r2, r1
 800bce2:	491d      	ldr	r1, [pc, #116]	; (800bd58 <vTaskStartScheduler+0xa4>)
 800bce4:	481d      	ldr	r0, [pc, #116]	; (800bd5c <vTaskStartScheduler+0xa8>)
 800bce6:	f7ff fe21 	bl	800b92c <xTaskCreateStatic>
 800bcea:	4602      	mov	r2, r0
 800bcec:	4b1c      	ldr	r3, [pc, #112]	; (800bd60 <vTaskStartScheduler+0xac>)
 800bcee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bcf0:	4b1b      	ldr	r3, [pc, #108]	; (800bd60 <vTaskStartScheduler+0xac>)
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d002      	beq.n	800bcfe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	617b      	str	r3, [r7, #20]
 800bcfc:	e001      	b.n	800bd02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d115      	bne.n	800bd34 <vTaskStartScheduler+0x80>
 800bd08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0c:	f383 8811 	msr	BASEPRI, r3
 800bd10:	f3bf 8f6f 	isb	sy
 800bd14:	f3bf 8f4f 	dsb	sy
 800bd18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bd1a:	4b12      	ldr	r3, [pc, #72]	; (800bd64 <vTaskStartScheduler+0xb0>)
 800bd1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bd22:	4b11      	ldr	r3, [pc, #68]	; (800bd68 <vTaskStartScheduler+0xb4>)
 800bd24:	2201      	movs	r2, #1
 800bd26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd28:	4b10      	ldr	r3, [pc, #64]	; (800bd6c <vTaskStartScheduler+0xb8>)
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd2e:	f000 ff67 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd32:	e00d      	b.n	800bd50 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd3a:	d109      	bne.n	800bd50 <vTaskStartScheduler+0x9c>
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	60fb      	str	r3, [r7, #12]
 800bd4e:	e7fe      	b.n	800bd4e <vTaskStartScheduler+0x9a>
}
 800bd50:	bf00      	nop
 800bd52:	3718      	adds	r7, #24
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}
 800bd58:	0800d86c 	.word	0x0800d86c
 800bd5c:	0800c33d 	.word	0x0800c33d
 800bd60:	200025f0 	.word	0x200025f0
 800bd64:	200025ec 	.word	0x200025ec
 800bd68:	200025d8 	.word	0x200025d8
 800bd6c:	200025d0 	.word	0x200025d0

0800bd70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd70:	b480      	push	{r7}
 800bd72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bd74:	4b04      	ldr	r3, [pc, #16]	; (800bd88 <vTaskSuspendAll+0x18>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3301      	adds	r3, #1
 800bd7a:	4a03      	ldr	r2, [pc, #12]	; (800bd88 <vTaskSuspendAll+0x18>)
 800bd7c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bd7e:	bf00      	nop
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr
 800bd88:	200025f4 	.word	0x200025f4

0800bd8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd92:	2300      	movs	r3, #0
 800bd94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd96:	2300      	movs	r3, #0
 800bd98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd9a:	4b41      	ldr	r3, [pc, #260]	; (800bea0 <xTaskResumeAll+0x114>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d109      	bne.n	800bdb6 <xTaskResumeAll+0x2a>
 800bda2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda6:	f383 8811 	msr	BASEPRI, r3
 800bdaa:	f3bf 8f6f 	isb	sy
 800bdae:	f3bf 8f4f 	dsb	sy
 800bdb2:	603b      	str	r3, [r7, #0]
 800bdb4:	e7fe      	b.n	800bdb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bdb6:	f000 ffc1 	bl	800cd3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bdba:	4b39      	ldr	r3, [pc, #228]	; (800bea0 <xTaskResumeAll+0x114>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3b01      	subs	r3, #1
 800bdc0:	4a37      	ldr	r2, [pc, #220]	; (800bea0 <xTaskResumeAll+0x114>)
 800bdc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdc4:	4b36      	ldr	r3, [pc, #216]	; (800bea0 <xTaskResumeAll+0x114>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d161      	bne.n	800be90 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bdcc:	4b35      	ldr	r3, [pc, #212]	; (800bea4 <xTaskResumeAll+0x118>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d05d      	beq.n	800be90 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdd4:	e02e      	b.n	800be34 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdd6:	4b34      	ldr	r3, [pc, #208]	; (800bea8 <xTaskResumeAll+0x11c>)
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	68db      	ldr	r3, [r3, #12]
 800bddc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	3318      	adds	r3, #24
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fe fe04 	bl	800a9f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7fe fdff 	bl	800a9f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	409a      	lsls	r2, r3
 800bdfa:	4b2c      	ldr	r3, [pc, #176]	; (800beac <xTaskResumeAll+0x120>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	4a2a      	ldr	r2, [pc, #168]	; (800beac <xTaskResumeAll+0x120>)
 800be02:	6013      	str	r3, [r2, #0]
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be08:	4613      	mov	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	4413      	add	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4a27      	ldr	r2, [pc, #156]	; (800beb0 <xTaskResumeAll+0x124>)
 800be12:	441a      	add	r2, r3
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	3304      	adds	r3, #4
 800be18:	4619      	mov	r1, r3
 800be1a:	4610      	mov	r0, r2
 800be1c:	f7fe fd8b 	bl	800a936 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be24:	4b23      	ldr	r3, [pc, #140]	; (800beb4 <xTaskResumeAll+0x128>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be2a:	429a      	cmp	r2, r3
 800be2c:	d302      	bcc.n	800be34 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800be2e:	4b22      	ldr	r3, [pc, #136]	; (800beb8 <xTaskResumeAll+0x12c>)
 800be30:	2201      	movs	r2, #1
 800be32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be34:	4b1c      	ldr	r3, [pc, #112]	; (800bea8 <xTaskResumeAll+0x11c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d1cc      	bne.n	800bdd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d001      	beq.n	800be46 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be42:	f000 fb2d 	bl	800c4a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800be46:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <xTaskResumeAll+0x130>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d010      	beq.n	800be74 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be52:	f000 f859 	bl	800bf08 <xTaskIncrementTick>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800be5c:	4b16      	ldr	r3, [pc, #88]	; (800beb8 <xTaskResumeAll+0x12c>)
 800be5e:	2201      	movs	r2, #1
 800be60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	3b01      	subs	r3, #1
 800be66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d1f1      	bne.n	800be52 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800be6e:	4b13      	ldr	r3, [pc, #76]	; (800bebc <xTaskResumeAll+0x130>)
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be74:	4b10      	ldr	r3, [pc, #64]	; (800beb8 <xTaskResumeAll+0x12c>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d009      	beq.n	800be90 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be7c:	2301      	movs	r3, #1
 800be7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be80:	4b0f      	ldr	r3, [pc, #60]	; (800bec0 <xTaskResumeAll+0x134>)
 800be82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be86:	601a      	str	r2, [r3, #0]
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be90:	f000 ff82 	bl	800cd98 <vPortExitCritical>

	return xAlreadyYielded;
 800be94:	68bb      	ldr	r3, [r7, #8]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	200025f4 	.word	0x200025f4
 800bea4:	200025cc 	.word	0x200025cc
 800bea8:	2000258c 	.word	0x2000258c
 800beac:	200025d4 	.word	0x200025d4
 800beb0:	200024d0 	.word	0x200024d0
 800beb4:	200024cc 	.word	0x200024cc
 800beb8:	200025e0 	.word	0x200025e0
 800bebc:	200025dc 	.word	0x200025dc
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800beca:	4b05      	ldr	r3, [pc, #20]	; (800bee0 <xTaskGetTickCount+0x1c>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bed0:	687b      	ldr	r3, [r7, #4]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	370c      	adds	r7, #12
 800bed6:	46bd      	mov	sp, r7
 800bed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bedc:	4770      	bx	lr
 800bede:	bf00      	nop
 800bee0:	200025d0 	.word	0x200025d0

0800bee4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b082      	sub	sp, #8
 800bee8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800beea:	f001 f803 	bl	800cef4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800beee:	2300      	movs	r3, #0
 800bef0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bef2:	4b04      	ldr	r3, [pc, #16]	; (800bf04 <xTaskGetTickCountFromISR+0x20>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bef8:	683b      	ldr	r3, [r7, #0]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}
 800bf02:	bf00      	nop
 800bf04:	200025d0 	.word	0x200025d0

0800bf08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b086      	sub	sp, #24
 800bf0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf12:	4b4e      	ldr	r3, [pc, #312]	; (800c04c <xTaskIncrementTick+0x144>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	f040 8087 	bne.w	800c02a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bf1c:	4b4c      	ldr	r3, [pc, #304]	; (800c050 <xTaskIncrementTick+0x148>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	3301      	adds	r3, #1
 800bf22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bf24:	4a4a      	ldr	r2, [pc, #296]	; (800c050 <xTaskIncrementTick+0x148>)
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d11f      	bne.n	800bf70 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf30:	4b48      	ldr	r3, [pc, #288]	; (800c054 <xTaskIncrementTick+0x14c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d009      	beq.n	800bf4e <xTaskIncrementTick+0x46>
 800bf3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3e:	f383 8811 	msr	BASEPRI, r3
 800bf42:	f3bf 8f6f 	isb	sy
 800bf46:	f3bf 8f4f 	dsb	sy
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	e7fe      	b.n	800bf4c <xTaskIncrementTick+0x44>
 800bf4e:	4b41      	ldr	r3, [pc, #260]	; (800c054 <xTaskIncrementTick+0x14c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	4b40      	ldr	r3, [pc, #256]	; (800c058 <xTaskIncrementTick+0x150>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	4a3e      	ldr	r2, [pc, #248]	; (800c054 <xTaskIncrementTick+0x14c>)
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	4a3e      	ldr	r2, [pc, #248]	; (800c058 <xTaskIncrementTick+0x150>)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6013      	str	r3, [r2, #0]
 800bf62:	4b3e      	ldr	r3, [pc, #248]	; (800c05c <xTaskIncrementTick+0x154>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	3301      	adds	r3, #1
 800bf68:	4a3c      	ldr	r2, [pc, #240]	; (800c05c <xTaskIncrementTick+0x154>)
 800bf6a:	6013      	str	r3, [r2, #0]
 800bf6c:	f000 fa98 	bl	800c4a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf70:	4b3b      	ldr	r3, [pc, #236]	; (800c060 <xTaskIncrementTick+0x158>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	693a      	ldr	r2, [r7, #16]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d348      	bcc.n	800c00c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf7a:	4b36      	ldr	r3, [pc, #216]	; (800c054 <xTaskIncrementTick+0x14c>)
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d104      	bne.n	800bf8e <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf84:	4b36      	ldr	r3, [pc, #216]	; (800c060 <xTaskIncrementTick+0x158>)
 800bf86:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8a:	601a      	str	r2, [r3, #0]
					break;
 800bf8c:	e03e      	b.n	800c00c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf8e:	4b31      	ldr	r3, [pc, #196]	; (800c054 <xTaskIncrementTick+0x14c>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	685b      	ldr	r3, [r3, #4]
 800bf9c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf9e:	693a      	ldr	r2, [r7, #16]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d203      	bcs.n	800bfae <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bfa6:	4a2e      	ldr	r2, [pc, #184]	; (800c060 <xTaskIncrementTick+0x158>)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bfac:	e02e      	b.n	800c00c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7fe fd1c 	bl	800a9f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d004      	beq.n	800bfca <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bfc0:	68bb      	ldr	r3, [r7, #8]
 800bfc2:	3318      	adds	r3, #24
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7fe fd13 	bl	800a9f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfce:	2201      	movs	r2, #1
 800bfd0:	409a      	lsls	r2, r3
 800bfd2:	4b24      	ldr	r3, [pc, #144]	; (800c064 <xTaskIncrementTick+0x15c>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	4a22      	ldr	r2, [pc, #136]	; (800c064 <xTaskIncrementTick+0x15c>)
 800bfda:	6013      	str	r3, [r2, #0]
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfe0:	4613      	mov	r3, r2
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4a1f      	ldr	r2, [pc, #124]	; (800c068 <xTaskIncrementTick+0x160>)
 800bfea:	441a      	add	r2, r3
 800bfec:	68bb      	ldr	r3, [r7, #8]
 800bfee:	3304      	adds	r3, #4
 800bff0:	4619      	mov	r1, r3
 800bff2:	4610      	mov	r0, r2
 800bff4:	f7fe fc9f 	bl	800a936 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bffc:	4b1b      	ldr	r3, [pc, #108]	; (800c06c <xTaskIncrementTick+0x164>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	429a      	cmp	r2, r3
 800c004:	d3b9      	bcc.n	800bf7a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800c006:	2301      	movs	r3, #1
 800c008:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c00a:	e7b6      	b.n	800bf7a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c00c:	4b17      	ldr	r3, [pc, #92]	; (800c06c <xTaskIncrementTick+0x164>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c012:	4915      	ldr	r1, [pc, #84]	; (800c068 <xTaskIncrementTick+0x160>)
 800c014:	4613      	mov	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	009b      	lsls	r3, r3, #2
 800c01c:	440b      	add	r3, r1
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2b01      	cmp	r3, #1
 800c022:	d907      	bls.n	800c034 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c024:	2301      	movs	r3, #1
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e004      	b.n	800c034 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c02a:	4b11      	ldr	r3, [pc, #68]	; (800c070 <xTaskIncrementTick+0x168>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	3301      	adds	r3, #1
 800c030:	4a0f      	ldr	r2, [pc, #60]	; (800c070 <xTaskIncrementTick+0x168>)
 800c032:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c034:	4b0f      	ldr	r3, [pc, #60]	; (800c074 <xTaskIncrementTick+0x16c>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d001      	beq.n	800c040 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c03c:	2301      	movs	r3, #1
 800c03e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c040:	697b      	ldr	r3, [r7, #20]
}
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	200025f4 	.word	0x200025f4
 800c050:	200025d0 	.word	0x200025d0
 800c054:	20002584 	.word	0x20002584
 800c058:	20002588 	.word	0x20002588
 800c05c:	200025e4 	.word	0x200025e4
 800c060:	200025ec 	.word	0x200025ec
 800c064:	200025d4 	.word	0x200025d4
 800c068:	200024d0 	.word	0x200024d0
 800c06c:	200024cc 	.word	0x200024cc
 800c070:	200025dc 	.word	0x200025dc
 800c074:	200025e0 	.word	0x200025e0

0800c078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c078:	b480      	push	{r7}
 800c07a:	b087      	sub	sp, #28
 800c07c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c07e:	4b26      	ldr	r3, [pc, #152]	; (800c118 <vTaskSwitchContext+0xa0>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c086:	4b25      	ldr	r3, [pc, #148]	; (800c11c <vTaskSwitchContext+0xa4>)
 800c088:	2201      	movs	r2, #1
 800c08a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c08c:	e03e      	b.n	800c10c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800c08e:	4b23      	ldr	r3, [pc, #140]	; (800c11c <vTaskSwitchContext+0xa4>)
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c094:	4b22      	ldr	r3, [pc, #136]	; (800c120 <vTaskSwitchContext+0xa8>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	fab3 f383 	clz	r3, r3
 800c0a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c0a2:	7afb      	ldrb	r3, [r7, #11]
 800c0a4:	f1c3 031f 	rsb	r3, r3, #31
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	491e      	ldr	r1, [pc, #120]	; (800c124 <vTaskSwitchContext+0xac>)
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4413      	add	r3, r2
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	440b      	add	r3, r1
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d109      	bne.n	800c0d2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e7fe      	b.n	800c0d0 <vTaskSwitchContext+0x58>
 800c0d2:	697a      	ldr	r2, [r7, #20]
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	4413      	add	r3, r2
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4a11      	ldr	r2, [pc, #68]	; (800c124 <vTaskSwitchContext+0xac>)
 800c0de:	4413      	add	r3, r2
 800c0e0:	613b      	str	r3, [r7, #16]
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	685a      	ldr	r2, [r3, #4]
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	605a      	str	r2, [r3, #4]
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	693b      	ldr	r3, [r7, #16]
 800c0f2:	3308      	adds	r3, #8
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d104      	bne.n	800c102 <vTaskSwitchContext+0x8a>
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	605a      	str	r2, [r3, #4]
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	68db      	ldr	r3, [r3, #12]
 800c108:	4a07      	ldr	r2, [pc, #28]	; (800c128 <vTaskSwitchContext+0xb0>)
 800c10a:	6013      	str	r3, [r2, #0]
}
 800c10c:	bf00      	nop
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr
 800c118:	200025f4 	.word	0x200025f4
 800c11c:	200025e0 	.word	0x200025e0
 800c120:	200025d4 	.word	0x200025d4
 800c124:	200024d0 	.word	0x200024d0
 800c128:	200024cc 	.word	0x200024cc

0800c12c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d109      	bne.n	800c150 <vTaskPlaceOnEventList+0x24>
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60fb      	str	r3, [r7, #12]
 800c14e:	e7fe      	b.n	800c14e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c150:	4b07      	ldr	r3, [pc, #28]	; (800c170 <vTaskPlaceOnEventList+0x44>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	3318      	adds	r3, #24
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7fe fc10 	bl	800a97e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c15e:	2101      	movs	r1, #1
 800c160:	6838      	ldr	r0, [r7, #0]
 800c162:	f000 fc61 	bl	800ca28 <prvAddCurrentTaskToDelayedList>
}
 800c166:	bf00      	nop
 800c168:	3710      	adds	r7, #16
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	200024cc 	.word	0x200024cc

0800c174 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	68db      	ldr	r3, [r3, #12]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d109      	bne.n	800c19e <xTaskRemoveFromEventList+0x2a>
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	e7fe      	b.n	800c19c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c19e:	693b      	ldr	r3, [r7, #16]
 800c1a0:	3318      	adds	r3, #24
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	f7fe fc24 	bl	800a9f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1a8:	4b1d      	ldr	r3, [pc, #116]	; (800c220 <xTaskRemoveFromEventList+0xac>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d11c      	bne.n	800c1ea <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	3304      	adds	r3, #4
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7fe fc1b 	bl	800a9f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1be:	2201      	movs	r2, #1
 800c1c0:	409a      	lsls	r2, r3
 800c1c2:	4b18      	ldr	r3, [pc, #96]	; (800c224 <xTaskRemoveFromEventList+0xb0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	4a16      	ldr	r2, [pc, #88]	; (800c224 <xTaskRemoveFromEventList+0xb0>)
 800c1ca:	6013      	str	r3, [r2, #0]
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d0:	4613      	mov	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4413      	add	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4a13      	ldr	r2, [pc, #76]	; (800c228 <xTaskRemoveFromEventList+0xb4>)
 800c1da:	441a      	add	r2, r3
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	3304      	adds	r3, #4
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	f7fe fba7 	bl	800a936 <vListInsertEnd>
 800c1e8:	e005      	b.n	800c1f6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	3318      	adds	r3, #24
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	480e      	ldr	r0, [pc, #56]	; (800c22c <xTaskRemoveFromEventList+0xb8>)
 800c1f2:	f7fe fba0 	bl	800a936 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1fa:	4b0d      	ldr	r3, [pc, #52]	; (800c230 <xTaskRemoveFromEventList+0xbc>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c200:	429a      	cmp	r2, r3
 800c202:	d905      	bls.n	800c210 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c204:	2301      	movs	r3, #1
 800c206:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c208:	4b0a      	ldr	r3, [pc, #40]	; (800c234 <xTaskRemoveFromEventList+0xc0>)
 800c20a:	2201      	movs	r2, #1
 800c20c:	601a      	str	r2, [r3, #0]
 800c20e:	e001      	b.n	800c214 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c210:	2300      	movs	r3, #0
 800c212:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c214:	697b      	ldr	r3, [r7, #20]
}
 800c216:	4618      	mov	r0, r3
 800c218:	3718      	adds	r7, #24
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	200025f4 	.word	0x200025f4
 800c224:	200025d4 	.word	0x200025d4
 800c228:	200024d0 	.word	0x200024d0
 800c22c:	2000258c 	.word	0x2000258c
 800c230:	200024cc 	.word	0x200024cc
 800c234:	200025e0 	.word	0x200025e0

0800c238 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c238:	b480      	push	{r7}
 800c23a:	b083      	sub	sp, #12
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c240:	4b06      	ldr	r3, [pc, #24]	; (800c25c <vTaskInternalSetTimeOutState+0x24>)
 800c242:	681a      	ldr	r2, [r3, #0]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c248:	4b05      	ldr	r3, [pc, #20]	; (800c260 <vTaskInternalSetTimeOutState+0x28>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	605a      	str	r2, [r3, #4]
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr
 800c25c:	200025e4 	.word	0x200025e4
 800c260:	200025d0 	.word	0x200025d0

0800c264 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b088      	sub	sp, #32
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d109      	bne.n	800c288 <xTaskCheckForTimeOut+0x24>
 800c274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	613b      	str	r3, [r7, #16]
 800c286:	e7fe      	b.n	800c286 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d109      	bne.n	800c2a2 <xTaskCheckForTimeOut+0x3e>
 800c28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	60fb      	str	r3, [r7, #12]
 800c2a0:	e7fe      	b.n	800c2a0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c2a2:	f000 fd4b 	bl	800cd3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2a6:	4b1d      	ldr	r3, [pc, #116]	; (800c31c <xTaskCheckForTimeOut+0xb8>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	69ba      	ldr	r2, [r7, #24]
 800c2b2:	1ad3      	subs	r3, r2, r3
 800c2b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2be:	d102      	bne.n	800c2c6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	61fb      	str	r3, [r7, #28]
 800c2c4:	e023      	b.n	800c30e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	4b15      	ldr	r3, [pc, #84]	; (800c320 <xTaskCheckForTimeOut+0xbc>)
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d007      	beq.n	800c2e2 <xTaskCheckForTimeOut+0x7e>
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	69ba      	ldr	r2, [r7, #24]
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d302      	bcc.n	800c2e2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2dc:	2301      	movs	r3, #1
 800c2de:	61fb      	str	r3, [r7, #28]
 800c2e0:	e015      	b.n	800c30e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d20b      	bcs.n	800c304 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	1ad2      	subs	r2, r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f7ff ff9d 	bl	800c238 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2fe:	2300      	movs	r3, #0
 800c300:	61fb      	str	r3, [r7, #28]
 800c302:	e004      	b.n	800c30e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	2200      	movs	r2, #0
 800c308:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c30a:	2301      	movs	r3, #1
 800c30c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c30e:	f000 fd43 	bl	800cd98 <vPortExitCritical>

	return xReturn;
 800c312:	69fb      	ldr	r3, [r7, #28]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3720      	adds	r7, #32
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	200025d0 	.word	0x200025d0
 800c320:	200025e4 	.word	0x200025e4

0800c324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c324:	b480      	push	{r7}
 800c326:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c328:	4b03      	ldr	r3, [pc, #12]	; (800c338 <vTaskMissedYield+0x14>)
 800c32a:	2201      	movs	r2, #1
 800c32c:	601a      	str	r2, [r3, #0]
}
 800c32e:	bf00      	nop
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr
 800c338:	200025e0 	.word	0x200025e0

0800c33c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b082      	sub	sp, #8
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c344:	f000 f852 	bl	800c3ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c348:	4b06      	ldr	r3, [pc, #24]	; (800c364 <prvIdleTask+0x28>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d9f9      	bls.n	800c344 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c350:	4b05      	ldr	r3, [pc, #20]	; (800c368 <prvIdleTask+0x2c>)
 800c352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c356:	601a      	str	r2, [r3, #0]
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c360:	e7f0      	b.n	800c344 <prvIdleTask+0x8>
 800c362:	bf00      	nop
 800c364:	200024d0 	.word	0x200024d0
 800c368:	e000ed04 	.word	0xe000ed04

0800c36c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b082      	sub	sp, #8
 800c370:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c372:	2300      	movs	r3, #0
 800c374:	607b      	str	r3, [r7, #4]
 800c376:	e00c      	b.n	800c392 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	4613      	mov	r3, r2
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	4413      	add	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4a12      	ldr	r2, [pc, #72]	; (800c3cc <prvInitialiseTaskLists+0x60>)
 800c384:	4413      	add	r3, r2
 800c386:	4618      	mov	r0, r3
 800c388:	f7fe faa8 	bl	800a8dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	3301      	adds	r3, #1
 800c390:	607b      	str	r3, [r7, #4]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b06      	cmp	r3, #6
 800c396:	d9ef      	bls.n	800c378 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c398:	480d      	ldr	r0, [pc, #52]	; (800c3d0 <prvInitialiseTaskLists+0x64>)
 800c39a:	f7fe fa9f 	bl	800a8dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c39e:	480d      	ldr	r0, [pc, #52]	; (800c3d4 <prvInitialiseTaskLists+0x68>)
 800c3a0:	f7fe fa9c 	bl	800a8dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3a4:	480c      	ldr	r0, [pc, #48]	; (800c3d8 <prvInitialiseTaskLists+0x6c>)
 800c3a6:	f7fe fa99 	bl	800a8dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3aa:	480c      	ldr	r0, [pc, #48]	; (800c3dc <prvInitialiseTaskLists+0x70>)
 800c3ac:	f7fe fa96 	bl	800a8dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3b0:	480b      	ldr	r0, [pc, #44]	; (800c3e0 <prvInitialiseTaskLists+0x74>)
 800c3b2:	f7fe fa93 	bl	800a8dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3b6:	4b0b      	ldr	r3, [pc, #44]	; (800c3e4 <prvInitialiseTaskLists+0x78>)
 800c3b8:	4a05      	ldr	r2, [pc, #20]	; (800c3d0 <prvInitialiseTaskLists+0x64>)
 800c3ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3bc:	4b0a      	ldr	r3, [pc, #40]	; (800c3e8 <prvInitialiseTaskLists+0x7c>)
 800c3be:	4a05      	ldr	r2, [pc, #20]	; (800c3d4 <prvInitialiseTaskLists+0x68>)
 800c3c0:	601a      	str	r2, [r3, #0]
}
 800c3c2:	bf00      	nop
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	bd80      	pop	{r7, pc}
 800c3ca:	bf00      	nop
 800c3cc:	200024d0 	.word	0x200024d0
 800c3d0:	2000255c 	.word	0x2000255c
 800c3d4:	20002570 	.word	0x20002570
 800c3d8:	2000258c 	.word	0x2000258c
 800c3dc:	200025a0 	.word	0x200025a0
 800c3e0:	200025b8 	.word	0x200025b8
 800c3e4:	20002584 	.word	0x20002584
 800c3e8:	20002588 	.word	0x20002588

0800c3ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3f2:	e019      	b.n	800c428 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3f4:	f000 fca2 	bl	800cd3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3f8:	4b0f      	ldr	r3, [pc, #60]	; (800c438 <prvCheckTasksWaitingTermination+0x4c>)
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	68db      	ldr	r3, [r3, #12]
 800c3fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	3304      	adds	r3, #4
 800c404:	4618      	mov	r0, r3
 800c406:	f7fe faf3 	bl	800a9f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c40a:	4b0c      	ldr	r3, [pc, #48]	; (800c43c <prvCheckTasksWaitingTermination+0x50>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	3b01      	subs	r3, #1
 800c410:	4a0a      	ldr	r2, [pc, #40]	; (800c43c <prvCheckTasksWaitingTermination+0x50>)
 800c412:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c414:	4b0a      	ldr	r3, [pc, #40]	; (800c440 <prvCheckTasksWaitingTermination+0x54>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	3b01      	subs	r3, #1
 800c41a:	4a09      	ldr	r2, [pc, #36]	; (800c440 <prvCheckTasksWaitingTermination+0x54>)
 800c41c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c41e:	f000 fcbb 	bl	800cd98 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 f80e 	bl	800c444 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c428:	4b05      	ldr	r3, [pc, #20]	; (800c440 <prvCheckTasksWaitingTermination+0x54>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1e1      	bne.n	800c3f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c430:	bf00      	nop
 800c432:	3708      	adds	r7, #8
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	200025a0 	.word	0x200025a0
 800c43c:	200025cc 	.word	0x200025cc
 800c440:	200025b4 	.word	0x200025b4

0800c444 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c452:	2b00      	cmp	r3, #0
 800c454:	d108      	bne.n	800c468 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 fe4a 	bl	800d0f4 <vPortFree>
				vPortFree( pxTCB );
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 fe47 	bl	800d0f4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c466:	e017      	b.n	800c498 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d103      	bne.n	800c47a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 fe3e 	bl	800d0f4 <vPortFree>
	}
 800c478:	e00e      	b.n	800c498 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c480:	2b02      	cmp	r3, #2
 800c482:	d009      	beq.n	800c498 <prvDeleteTCB+0x54>
 800c484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c488:	f383 8811 	msr	BASEPRI, r3
 800c48c:	f3bf 8f6f 	isb	sy
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	60fb      	str	r3, [r7, #12]
 800c496:	e7fe      	b.n	800c496 <prvDeleteTCB+0x52>
	}
 800c498:	bf00      	nop
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4a6:	4b0c      	ldr	r3, [pc, #48]	; (800c4d8 <prvResetNextTaskUnblockTime+0x38>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d104      	bne.n	800c4ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4b0:	4b0a      	ldr	r3, [pc, #40]	; (800c4dc <prvResetNextTaskUnblockTime+0x3c>)
 800c4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800c4b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4b8:	e008      	b.n	800c4cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ba:	4b07      	ldr	r3, [pc, #28]	; (800c4d8 <prvResetNextTaskUnblockTime+0x38>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68db      	ldr	r3, [r3, #12]
 800c4c0:	68db      	ldr	r3, [r3, #12]
 800c4c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	4a04      	ldr	r2, [pc, #16]	; (800c4dc <prvResetNextTaskUnblockTime+0x3c>)
 800c4ca:	6013      	str	r3, [r2, #0]
}
 800c4cc:	bf00      	nop
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	20002584 	.word	0x20002584
 800c4dc:	200025ec 	.word	0x200025ec

0800c4e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4e6:	4b0b      	ldr	r3, [pc, #44]	; (800c514 <xTaskGetSchedulerState+0x34>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d102      	bne.n	800c4f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	607b      	str	r3, [r7, #4]
 800c4f2:	e008      	b.n	800c506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4f4:	4b08      	ldr	r3, [pc, #32]	; (800c518 <xTaskGetSchedulerState+0x38>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d102      	bne.n	800c502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4fc:	2302      	movs	r3, #2
 800c4fe:	607b      	str	r3, [r7, #4]
 800c500:	e001      	b.n	800c506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c502:	2300      	movs	r3, #0
 800c504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c506:	687b      	ldr	r3, [r7, #4]
	}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c512:	4770      	bx	lr
 800c514:	200025d8 	.word	0x200025d8
 800c518:	200025f4 	.word	0x200025f4

0800c51c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b084      	sub	sp, #16
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d069      	beq.n	800c606 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c536:	4b36      	ldr	r3, [pc, #216]	; (800c610 <xTaskPriorityInherit+0xf4>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c53c:	429a      	cmp	r2, r3
 800c53e:	d259      	bcs.n	800c5f4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	699b      	ldr	r3, [r3, #24]
 800c544:	2b00      	cmp	r3, #0
 800c546:	db06      	blt.n	800c556 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c548:	4b31      	ldr	r3, [pc, #196]	; (800c610 <xTaskPriorityInherit+0xf4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c54e:	f1c3 0207 	rsb	r2, r3, #7
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	6959      	ldr	r1, [r3, #20]
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55e:	4613      	mov	r3, r2
 800c560:	009b      	lsls	r3, r3, #2
 800c562:	4413      	add	r3, r2
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	4a2b      	ldr	r2, [pc, #172]	; (800c614 <xTaskPriorityInherit+0xf8>)
 800c568:	4413      	add	r3, r2
 800c56a:	4299      	cmp	r1, r3
 800c56c:	d13a      	bne.n	800c5e4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	3304      	adds	r3, #4
 800c572:	4618      	mov	r0, r3
 800c574:	f7fe fa3c 	bl	800a9f0 <uxListRemove>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d115      	bne.n	800c5aa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c582:	4924      	ldr	r1, [pc, #144]	; (800c614 <xTaskPriorityInherit+0xf8>)
 800c584:	4613      	mov	r3, r2
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	440b      	add	r3, r1
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d10a      	bne.n	800c5aa <xTaskPriorityInherit+0x8e>
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c598:	2201      	movs	r2, #1
 800c59a:	fa02 f303 	lsl.w	r3, r2, r3
 800c59e:	43da      	mvns	r2, r3
 800c5a0:	4b1d      	ldr	r3, [pc, #116]	; (800c618 <xTaskPriorityInherit+0xfc>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4013      	ands	r3, r2
 800c5a6:	4a1c      	ldr	r2, [pc, #112]	; (800c618 <xTaskPriorityInherit+0xfc>)
 800c5a8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <xTaskPriorityInherit+0xf4>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	409a      	lsls	r2, r3
 800c5bc:	4b16      	ldr	r3, [pc, #88]	; (800c618 <xTaskPriorityInherit+0xfc>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	4a15      	ldr	r2, [pc, #84]	; (800c618 <xTaskPriorityInherit+0xfc>)
 800c5c4:	6013      	str	r3, [r2, #0]
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ca:	4613      	mov	r3, r2
 800c5cc:	009b      	lsls	r3, r3, #2
 800c5ce:	4413      	add	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4a10      	ldr	r2, [pc, #64]	; (800c614 <xTaskPriorityInherit+0xf8>)
 800c5d4:	441a      	add	r2, r3
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	3304      	adds	r3, #4
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7fe f9aa 	bl	800a936 <vListInsertEnd>
 800c5e2:	e004      	b.n	800c5ee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5e4:	4b0a      	ldr	r3, [pc, #40]	; (800c610 <xTaskPriorityInherit+0xf4>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c5ee:	2301      	movs	r3, #1
 800c5f0:	60fb      	str	r3, [r7, #12]
 800c5f2:	e008      	b.n	800c606 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5f8:	4b05      	ldr	r3, [pc, #20]	; (800c610 <xTaskPriorityInherit+0xf4>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5fe:	429a      	cmp	r2, r3
 800c600:	d201      	bcs.n	800c606 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c602:	2301      	movs	r3, #1
 800c604:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c606:	68fb      	ldr	r3, [r7, #12]
	}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}
 800c610:	200024cc 	.word	0x200024cc
 800c614:	200024d0 	.word	0x200024d0
 800c618:	200025d4 	.word	0x200025d4

0800c61c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b086      	sub	sp, #24
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c628:	2300      	movs	r3, #0
 800c62a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d06c      	beq.n	800c70c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c632:	4b39      	ldr	r3, [pc, #228]	; (800c718 <xTaskPriorityDisinherit+0xfc>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	693a      	ldr	r2, [r7, #16]
 800c638:	429a      	cmp	r2, r3
 800c63a:	d009      	beq.n	800c650 <xTaskPriorityDisinherit+0x34>
 800c63c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c640:	f383 8811 	msr	BASEPRI, r3
 800c644:	f3bf 8f6f 	isb	sy
 800c648:	f3bf 8f4f 	dsb	sy
 800c64c:	60fb      	str	r3, [r7, #12]
 800c64e:	e7fe      	b.n	800c64e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c654:	2b00      	cmp	r3, #0
 800c656:	d109      	bne.n	800c66c <xTaskPriorityDisinherit+0x50>
 800c658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65c:	f383 8811 	msr	BASEPRI, r3
 800c660:	f3bf 8f6f 	isb	sy
 800c664:	f3bf 8f4f 	dsb	sy
 800c668:	60bb      	str	r3, [r7, #8]
 800c66a:	e7fe      	b.n	800c66a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c670:	1e5a      	subs	r2, r3, #1
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c67e:	429a      	cmp	r2, r3
 800c680:	d044      	beq.n	800c70c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c686:	2b00      	cmp	r3, #0
 800c688:	d140      	bne.n	800c70c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	3304      	adds	r3, #4
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe f9ae 	bl	800a9f0 <uxListRemove>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d115      	bne.n	800c6c6 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c69e:	491f      	ldr	r1, [pc, #124]	; (800c71c <xTaskPriorityDisinherit+0x100>)
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	440b      	add	r3, r1
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xTaskPriorityDisinherit+0xaa>
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6ba:	43da      	mvns	r2, r3
 800c6bc:	4b18      	ldr	r3, [pc, #96]	; (800c720 <xTaskPriorityDisinherit+0x104>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4013      	ands	r3, r2
 800c6c2:	4a17      	ldr	r2, [pc, #92]	; (800c720 <xTaskPriorityDisinherit+0x104>)
 800c6c4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6ca:	693b      	ldr	r3, [r7, #16]
 800c6cc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d2:	f1c3 0207 	rsb	r2, r3, #7
 800c6d6:	693b      	ldr	r3, [r7, #16]
 800c6d8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6da:	693b      	ldr	r3, [r7, #16]
 800c6dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6de:	2201      	movs	r2, #1
 800c6e0:	409a      	lsls	r2, r3
 800c6e2:	4b0f      	ldr	r3, [pc, #60]	; (800c720 <xTaskPriorityDisinherit+0x104>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	4a0d      	ldr	r2, [pc, #52]	; (800c720 <xTaskPriorityDisinherit+0x104>)
 800c6ea:	6013      	str	r3, [r2, #0]
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4413      	add	r3, r2
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	4a08      	ldr	r2, [pc, #32]	; (800c71c <xTaskPriorityDisinherit+0x100>)
 800c6fa:	441a      	add	r2, r3
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	3304      	adds	r3, #4
 800c700:	4619      	mov	r1, r3
 800c702:	4610      	mov	r0, r2
 800c704:	f7fe f917 	bl	800a936 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c708:	2301      	movs	r3, #1
 800c70a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c70c:	697b      	ldr	r3, [r7, #20]
	}
 800c70e:	4618      	mov	r0, r3
 800c710:	3718      	adds	r7, #24
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	200024cc 	.word	0x200024cc
 800c71c:	200024d0 	.word	0x200024d0
 800c720:	200025d4 	.word	0x200025d4

0800c724 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c724:	b580      	push	{r7, lr}
 800c726:	b088      	sub	sp, #32
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c732:	2301      	movs	r3, #1
 800c734:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	f000 8081 	beq.w	800c840 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c73e:	69bb      	ldr	r3, [r7, #24]
 800c740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c742:	2b00      	cmp	r3, #0
 800c744:	d109      	bne.n	800c75a <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60fb      	str	r3, [r7, #12]
 800c758:	e7fe      	b.n	800c758 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c75e:	683a      	ldr	r2, [r7, #0]
 800c760:	429a      	cmp	r2, r3
 800c762:	d902      	bls.n	800c76a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	61fb      	str	r3, [r7, #28]
 800c768:	e002      	b.n	800c770 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c76e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c774:	69fa      	ldr	r2, [r7, #28]
 800c776:	429a      	cmp	r2, r3
 800c778:	d062      	beq.n	800c840 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	429a      	cmp	r2, r3
 800c782:	d15d      	bne.n	800c840 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c784:	4b30      	ldr	r3, [pc, #192]	; (800c848 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	69ba      	ldr	r2, [r7, #24]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d109      	bne.n	800c7a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c792:	f383 8811 	msr	BASEPRI, r3
 800c796:	f3bf 8f6f 	isb	sy
 800c79a:	f3bf 8f4f 	dsb	sy
 800c79e:	60bb      	str	r3, [r7, #8]
 800c7a0:	e7fe      	b.n	800c7a0 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	69fa      	ldr	r2, [r7, #28]
 800c7ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	699b      	ldr	r3, [r3, #24]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	db04      	blt.n	800c7c0 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	f1c3 0207 	rsb	r2, r3, #7
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c7c0:	69bb      	ldr	r3, [r7, #24]
 800c7c2:	6959      	ldr	r1, [r3, #20]
 800c7c4:	693a      	ldr	r2, [r7, #16]
 800c7c6:	4613      	mov	r3, r2
 800c7c8:	009b      	lsls	r3, r3, #2
 800c7ca:	4413      	add	r3, r2
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	4a1f      	ldr	r2, [pc, #124]	; (800c84c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c7d0:	4413      	add	r3, r2
 800c7d2:	4299      	cmp	r1, r3
 800c7d4:	d134      	bne.n	800c840 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7d6:	69bb      	ldr	r3, [r7, #24]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f7fe f908 	bl	800a9f0 <uxListRemove>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d115      	bne.n	800c812 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7ea:	4918      	ldr	r1, [pc, #96]	; (800c84c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	009b      	lsls	r3, r3, #2
 800c7f4:	440b      	add	r3, r1
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10a      	bne.n	800c812 <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c800:	2201      	movs	r2, #1
 800c802:	fa02 f303 	lsl.w	r3, r2, r3
 800c806:	43da      	mvns	r2, r3
 800c808:	4b11      	ldr	r3, [pc, #68]	; (800c850 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4013      	ands	r3, r2
 800c80e:	4a10      	ldr	r2, [pc, #64]	; (800c850 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c810:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c812:	69bb      	ldr	r3, [r7, #24]
 800c814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c816:	2201      	movs	r2, #1
 800c818:	409a      	lsls	r2, r3
 800c81a:	4b0d      	ldr	r3, [pc, #52]	; (800c850 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4313      	orrs	r3, r2
 800c820:	4a0b      	ldr	r2, [pc, #44]	; (800c850 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c822:	6013      	str	r3, [r2, #0]
 800c824:	69bb      	ldr	r3, [r7, #24]
 800c826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c828:	4613      	mov	r3, r2
 800c82a:	009b      	lsls	r3, r3, #2
 800c82c:	4413      	add	r3, r2
 800c82e:	009b      	lsls	r3, r3, #2
 800c830:	4a06      	ldr	r2, [pc, #24]	; (800c84c <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c832:	441a      	add	r2, r3
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	3304      	adds	r3, #4
 800c838:	4619      	mov	r1, r3
 800c83a:	4610      	mov	r0, r2
 800c83c:	f7fe f87b 	bl	800a936 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c840:	bf00      	nop
 800c842:	3720      	adds	r7, #32
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}
 800c848:	200024cc 	.word	0x200024cc
 800c84c:	200024d0 	.word	0x200024d0
 800c850:	200025d4 	.word	0x200025d4

0800c854 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c854:	b480      	push	{r7}
 800c856:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c858:	4b07      	ldr	r3, [pc, #28]	; (800c878 <pvTaskIncrementMutexHeldCount+0x24>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d004      	beq.n	800c86a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c860:	4b05      	ldr	r3, [pc, #20]	; (800c878 <pvTaskIncrementMutexHeldCount+0x24>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c866:	3201      	adds	r2, #1
 800c868:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c86a:	4b03      	ldr	r3, [pc, #12]	; (800c878 <pvTaskIncrementMutexHeldCount+0x24>)
 800c86c:	681b      	ldr	r3, [r3, #0]
	}
 800c86e:	4618      	mov	r0, r3
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	200024cc 	.word	0x200024cc

0800c87c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c886:	f000 fa59 	bl	800cd3c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c88a:	4b1e      	ldr	r3, [pc, #120]	; (800c904 <ulTaskNotifyTake+0x88>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c890:	2b00      	cmp	r3, #0
 800c892:	d113      	bne.n	800c8bc <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c894:	4b1b      	ldr	r3, [pc, #108]	; (800c904 <ulTaskNotifyTake+0x88>)
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	2201      	movs	r2, #1
 800c89a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d00b      	beq.n	800c8bc <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8a4:	2101      	movs	r1, #1
 800c8a6:	6838      	ldr	r0, [r7, #0]
 800c8a8:	f000 f8be 	bl	800ca28 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c8ac:	4b16      	ldr	r3, [pc, #88]	; (800c908 <ulTaskNotifyTake+0x8c>)
 800c8ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8b2:	601a      	str	r2, [r3, #0]
 800c8b4:	f3bf 8f4f 	dsb	sy
 800c8b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c8bc:	f000 fa6c 	bl	800cd98 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c8c0:	f000 fa3c 	bl	800cd3c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c8c4:	4b0f      	ldr	r3, [pc, #60]	; (800c904 <ulTaskNotifyTake+0x88>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8ca:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d00c      	beq.n	800c8ec <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d004      	beq.n	800c8e2 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c8d8:	4b0a      	ldr	r3, [pc, #40]	; (800c904 <ulTaskNotifyTake+0x88>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	64da      	str	r2, [r3, #76]	; 0x4c
 800c8e0:	e004      	b.n	800c8ec <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c8e2:	4b08      	ldr	r3, [pc, #32]	; (800c904 <ulTaskNotifyTake+0x88>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	68fa      	ldr	r2, [r7, #12]
 800c8e8:	3a01      	subs	r2, #1
 800c8ea:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8ec:	4b05      	ldr	r3, [pc, #20]	; (800c904 <ulTaskNotifyTake+0x88>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800c8f6:	f000 fa4f 	bl	800cd98 <vPortExitCritical>

		return ulReturn;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
	}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3710      	adds	r7, #16
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}
 800c904:	200024cc 	.word	0x200024cc
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b08a      	sub	sp, #40	; 0x28
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d109      	bne.n	800c930 <vTaskNotifyGiveFromISR+0x24>
 800c91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c920:	f383 8811 	msr	BASEPRI, r3
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	61bb      	str	r3, [r7, #24]
 800c92e:	e7fe      	b.n	800c92e <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c930:	f000 fae0 	bl	800cef4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c938:	f3ef 8211 	mrs	r2, BASEPRI
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	617a      	str	r2, [r7, #20]
 800c94e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c950:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c952:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c956:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c95a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	2202      	movs	r2, #2
 800c960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c968:	1c5a      	adds	r2, r3, #1
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c96e:	7ffb      	ldrb	r3, [r7, #31]
 800c970:	2b01      	cmp	r3, #1
 800c972:	d144      	bne.n	800c9fe <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d009      	beq.n	800c990 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 800c97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c980:	f383 8811 	msr	BASEPRI, r3
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	f3bf 8f4f 	dsb	sy
 800c98c:	60fb      	str	r3, [r7, #12]
 800c98e:	e7fe      	b.n	800c98e <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c990:	4b1f      	ldr	r3, [pc, #124]	; (800ca10 <vTaskNotifyGiveFromISR+0x104>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d11c      	bne.n	800c9d2 <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99a:	3304      	adds	r3, #4
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe f827 	bl	800a9f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	409a      	lsls	r2, r3
 800c9aa:	4b1a      	ldr	r3, [pc, #104]	; (800ca14 <vTaskNotifyGiveFromISR+0x108>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	4a18      	ldr	r2, [pc, #96]	; (800ca14 <vTaskNotifyGiveFromISR+0x108>)
 800c9b2:	6013      	str	r3, [r2, #0]
 800c9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b8:	4613      	mov	r3, r2
 800c9ba:	009b      	lsls	r3, r3, #2
 800c9bc:	4413      	add	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	4a15      	ldr	r2, [pc, #84]	; (800ca18 <vTaskNotifyGiveFromISR+0x10c>)
 800c9c2:	441a      	add	r2, r3
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9c6:	3304      	adds	r3, #4
 800c9c8:	4619      	mov	r1, r3
 800c9ca:	4610      	mov	r0, r2
 800c9cc:	f7fd ffb3 	bl	800a936 <vListInsertEnd>
 800c9d0:	e005      	b.n	800c9de <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c9d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d4:	3318      	adds	r3, #24
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4810      	ldr	r0, [pc, #64]	; (800ca1c <vTaskNotifyGiveFromISR+0x110>)
 800c9da:	f7fd ffac 	bl	800a936 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9e2:	4b0f      	ldr	r3, [pc, #60]	; (800ca20 <vTaskNotifyGiveFromISR+0x114>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e8:	429a      	cmp	r2, r3
 800c9ea:	d908      	bls.n	800c9fe <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d002      	beq.n	800c9f8 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	2201      	movs	r2, #1
 800c9f6:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c9f8:	4b0a      	ldr	r3, [pc, #40]	; (800ca24 <vTaskNotifyGiveFromISR+0x118>)
 800c9fa:	2201      	movs	r2, #1
 800c9fc:	601a      	str	r2, [r3, #0]
 800c9fe:	6a3b      	ldr	r3, [r7, #32]
 800ca00:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800ca08:	bf00      	nop
 800ca0a:	3728      	adds	r7, #40	; 0x28
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}
 800ca10:	200025f4 	.word	0x200025f4
 800ca14:	200025d4 	.word	0x200025d4
 800ca18:	200024d0 	.word	0x200024d0
 800ca1c:	2000258c 	.word	0x2000258c
 800ca20:	200024cc 	.word	0x200024cc
 800ca24:	200025e0 	.word	0x200025e0

0800ca28 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
 800ca30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca32:	4b29      	ldr	r3, [pc, #164]	; (800cad8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca38:	4b28      	ldr	r3, [pc, #160]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fd ffd6 	bl	800a9f0 <uxListRemove>
 800ca44:	4603      	mov	r3, r0
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10b      	bne.n	800ca62 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ca4a:	4b24      	ldr	r3, [pc, #144]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca50:	2201      	movs	r2, #1
 800ca52:	fa02 f303 	lsl.w	r3, r2, r3
 800ca56:	43da      	mvns	r2, r3
 800ca58:	4b21      	ldr	r3, [pc, #132]	; (800cae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	4013      	ands	r3, r2
 800ca5e:	4a20      	ldr	r2, [pc, #128]	; (800cae0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca60:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca68:	d10a      	bne.n	800ca80 <prvAddCurrentTaskToDelayedList+0x58>
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d007      	beq.n	800ca80 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca70:	4b1a      	ldr	r3, [pc, #104]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	3304      	adds	r3, #4
 800ca76:	4619      	mov	r1, r3
 800ca78:	481a      	ldr	r0, [pc, #104]	; (800cae4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca7a:	f7fd ff5c 	bl	800a936 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca7e:	e026      	b.n	800cace <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	4413      	add	r3, r2
 800ca86:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca88:	4b14      	ldr	r3, [pc, #80]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	429a      	cmp	r2, r3
 800ca96:	d209      	bcs.n	800caac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca98:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	4b0f      	ldr	r3, [pc, #60]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	3304      	adds	r3, #4
 800caa2:	4619      	mov	r1, r3
 800caa4:	4610      	mov	r0, r2
 800caa6:	f7fd ff6a 	bl	800a97e <vListInsert>
}
 800caaa:	e010      	b.n	800cace <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caac:	4b0f      	ldr	r3, [pc, #60]	; (800caec <prvAddCurrentTaskToDelayedList+0xc4>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	4b0a      	ldr	r3, [pc, #40]	; (800cadc <prvAddCurrentTaskToDelayedList+0xb4>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	3304      	adds	r3, #4
 800cab6:	4619      	mov	r1, r3
 800cab8:	4610      	mov	r0, r2
 800caba:	f7fd ff60 	bl	800a97e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cabe:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68ba      	ldr	r2, [r7, #8]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d202      	bcs.n	800cace <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800cac8:	4a09      	ldr	r2, [pc, #36]	; (800caf0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	6013      	str	r3, [r2, #0]
}
 800cace:	bf00      	nop
 800cad0:	3710      	adds	r7, #16
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	200025d0 	.word	0x200025d0
 800cadc:	200024cc 	.word	0x200024cc
 800cae0:	200025d4 	.word	0x200025d4
 800cae4:	200025b8 	.word	0x200025b8
 800cae8:	20002588 	.word	0x20002588
 800caec:	20002584 	.word	0x20002584
 800caf0:	200025ec 	.word	0x200025ec

0800caf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b085      	sub	sp, #20
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	60f8      	str	r0, [r7, #12]
 800cafc:	60b9      	str	r1, [r7, #8]
 800cafe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	3b04      	subs	r3, #4
 800cb04:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cb0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3b04      	subs	r3, #4
 800cb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb14:	68bb      	ldr	r3, [r7, #8]
 800cb16:	f023 0201 	bic.w	r2, r3, #1
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3b04      	subs	r3, #4
 800cb22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb24:	4a0c      	ldr	r2, [pc, #48]	; (800cb58 <pxPortInitialiseStack+0x64>)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	3b14      	subs	r3, #20
 800cb2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	3b04      	subs	r3, #4
 800cb3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f06f 0202 	mvn.w	r2, #2
 800cb42:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	3b20      	subs	r3, #32
 800cb48:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	0800cb5d 	.word	0x0800cb5d

0800cb5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb62:	2300      	movs	r3, #0
 800cb64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb66:	4b11      	ldr	r3, [pc, #68]	; (800cbac <prvTaskExitError+0x50>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb6e:	d009      	beq.n	800cb84 <prvTaskExitError+0x28>
	__asm volatile
 800cb70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb74:	f383 8811 	msr	BASEPRI, r3
 800cb78:	f3bf 8f6f 	isb	sy
 800cb7c:	f3bf 8f4f 	dsb	sy
 800cb80:	60fb      	str	r3, [r7, #12]
 800cb82:	e7fe      	b.n	800cb82 <prvTaskExitError+0x26>
 800cb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb88:	f383 8811 	msr	BASEPRI, r3
 800cb8c:	f3bf 8f6f 	isb	sy
 800cb90:	f3bf 8f4f 	dsb	sy
 800cb94:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb96:	bf00      	nop
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d0fc      	beq.n	800cb98 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb9e:	bf00      	nop
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	2000000c 	.word	0x2000000c

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	; (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	200024cc 	.word	0x200024cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	; (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b44      	ldr	r3, [pc, #272]	; (800cd18 <xPortStartScheduler+0x118>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a44      	ldr	r2, [pc, #272]	; (800cd1c <xPortStartScheduler+0x11c>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d109      	bne.n	800cc24 <xPortStartScheduler+0x24>
 800cc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	613b      	str	r3, [r7, #16]
 800cc22:	e7fe      	b.n	800cc22 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc24:	4b3c      	ldr	r3, [pc, #240]	; (800cd18 <xPortStartScheduler+0x118>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4a3d      	ldr	r2, [pc, #244]	; (800cd20 <xPortStartScheduler+0x120>)
 800cc2a:	4293      	cmp	r3, r2
 800cc2c:	d109      	bne.n	800cc42 <xPortStartScheduler+0x42>
 800cc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc32:	f383 8811 	msr	BASEPRI, r3
 800cc36:	f3bf 8f6f 	isb	sy
 800cc3a:	f3bf 8f4f 	dsb	sy
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	e7fe      	b.n	800cc40 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc42:	4b38      	ldr	r3, [pc, #224]	; (800cd24 <xPortStartScheduler+0x124>)
 800cc44:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	22ff      	movs	r2, #255	; 0xff
 800cc52:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	781b      	ldrb	r3, [r3, #0]
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	4b30      	ldr	r3, [pc, #192]	; (800cd28 <xPortStartScheduler+0x128>)
 800cc68:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc6a:	4b30      	ldr	r3, [pc, #192]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc6c:	2207      	movs	r2, #7
 800cc6e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc70:	e009      	b.n	800cc86 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800cc72:	4b2e      	ldr	r3, [pc, #184]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	3b01      	subs	r3, #1
 800cc78:	4a2c      	ldr	r2, [pc, #176]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc7a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	b2db      	uxtb	r3, r3
 800cc80:	005b      	lsls	r3, r3, #1
 800cc82:	b2db      	uxtb	r3, r3
 800cc84:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc86:	78fb      	ldrb	r3, [r7, #3]
 800cc88:	b2db      	uxtb	r3, r3
 800cc8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc8e:	2b80      	cmp	r3, #128	; 0x80
 800cc90:	d0ef      	beq.n	800cc72 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc92:	4b26      	ldr	r3, [pc, #152]	; (800cd2c <xPortStartScheduler+0x12c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f1c3 0307 	rsb	r3, r3, #7
 800cc9a:	2b04      	cmp	r3, #4
 800cc9c:	d009      	beq.n	800ccb2 <xPortStartScheduler+0xb2>
 800cc9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cca2:	f383 8811 	msr	BASEPRI, r3
 800cca6:	f3bf 8f6f 	isb	sy
 800ccaa:	f3bf 8f4f 	dsb	sy
 800ccae:	60bb      	str	r3, [r7, #8]
 800ccb0:	e7fe      	b.n	800ccb0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccb2:	4b1e      	ldr	r3, [pc, #120]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	021b      	lsls	r3, r3, #8
 800ccb8:	4a1c      	ldr	r2, [pc, #112]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccbc:	4b1b      	ldr	r3, [pc, #108]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccc4:	4a19      	ldr	r2, [pc, #100]	; (800cd2c <xPortStartScheduler+0x12c>)
 800ccc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	b2da      	uxtb	r2, r3
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccd0:	4b17      	ldr	r3, [pc, #92]	; (800cd30 <xPortStartScheduler+0x130>)
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a16      	ldr	r2, [pc, #88]	; (800cd30 <xPortStartScheduler+0x130>)
 800ccd6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccdc:	4b14      	ldr	r3, [pc, #80]	; (800cd30 <xPortStartScheduler+0x130>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a13      	ldr	r2, [pc, #76]	; (800cd30 <xPortStartScheduler+0x130>)
 800cce2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cce6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cce8:	f000 f8d6 	bl	800ce98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccec:	4b11      	ldr	r3, [pc, #68]	; (800cd34 <xPortStartScheduler+0x134>)
 800ccee:	2200      	movs	r2, #0
 800ccf0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccf2:	f000 f8f5 	bl	800cee0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	4a0f      	ldr	r2, [pc, #60]	; (800cd38 <xPortStartScheduler+0x138>)
 800ccfc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cd00:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd02:	f7ff ff69 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd06:	f7ff f9b7 	bl	800c078 <vTaskSwitchContext>
	prvTaskExitError();
 800cd0a:	f7ff ff27 	bl	800cb5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd0e:	2300      	movs	r3, #0
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3718      	adds	r7, #24
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}
 800cd18:	e000ed00 	.word	0xe000ed00
 800cd1c:	410fc271 	.word	0x410fc271
 800cd20:	410fc270 	.word	0x410fc270
 800cd24:	e000e400 	.word	0xe000e400
 800cd28:	200025f8 	.word	0x200025f8
 800cd2c:	200025fc 	.word	0x200025fc
 800cd30:	e000ed20 	.word	0xe000ed20
 800cd34:	2000000c 	.word	0x2000000c
 800cd38:	e000ef34 	.word	0xe000ef34

0800cd3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b083      	sub	sp, #12
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd54:	4b0e      	ldr	r3, [pc, #56]	; (800cd90 <vPortEnterCritical+0x54>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	3301      	adds	r3, #1
 800cd5a:	4a0d      	ldr	r2, [pc, #52]	; (800cd90 <vPortEnterCritical+0x54>)
 800cd5c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd5e:	4b0c      	ldr	r3, [pc, #48]	; (800cd90 <vPortEnterCritical+0x54>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d10e      	bne.n	800cd84 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd66:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <vPortEnterCritical+0x58>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	b2db      	uxtb	r3, r3
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d009      	beq.n	800cd84 <vPortEnterCritical+0x48>
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	603b      	str	r3, [r7, #0]
 800cd82:	e7fe      	b.n	800cd82 <vPortEnterCritical+0x46>
	}
}
 800cd84:	bf00      	nop
 800cd86:	370c      	adds	r7, #12
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr
 800cd90:	2000000c 	.word	0x2000000c
 800cd94:	e000ed04 	.word	0xe000ed04

0800cd98 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd98:	b480      	push	{r7}
 800cd9a:	b083      	sub	sp, #12
 800cd9c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd9e:	4b11      	ldr	r3, [pc, #68]	; (800cde4 <vPortExitCritical+0x4c>)
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d109      	bne.n	800cdba <vPortExitCritical+0x22>
 800cda6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdaa:	f383 8811 	msr	BASEPRI, r3
 800cdae:	f3bf 8f6f 	isb	sy
 800cdb2:	f3bf 8f4f 	dsb	sy
 800cdb6:	607b      	str	r3, [r7, #4]
 800cdb8:	e7fe      	b.n	800cdb8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800cdba:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <vPortExitCritical+0x4c>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4a08      	ldr	r2, [pc, #32]	; (800cde4 <vPortExitCritical+0x4c>)
 800cdc2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cdc4:	4b07      	ldr	r3, [pc, #28]	; (800cde4 <vPortExitCritical+0x4c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d104      	bne.n	800cdd6 <vPortExitCritical+0x3e>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdd6:	bf00      	nop
 800cdd8:	370c      	adds	r7, #12
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr
 800cde2:	bf00      	nop
 800cde4:	2000000c 	.word	0x2000000c
	...

0800cdf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdf0:	f3ef 8009 	mrs	r0, PSP
 800cdf4:	f3bf 8f6f 	isb	sy
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <pxCurrentTCBConst>)
 800cdfa:	681a      	ldr	r2, [r3, #0]
 800cdfc:	f01e 0f10 	tst.w	lr, #16
 800ce00:	bf08      	it	eq
 800ce02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0a:	6010      	str	r0, [r2, #0]
 800ce0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ce14:	f380 8811 	msr	BASEPRI, r0
 800ce18:	f3bf 8f4f 	dsb	sy
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f7ff f92a 	bl	800c078 <vTaskSwitchContext>
 800ce24:	f04f 0000 	mov.w	r0, #0
 800ce28:	f380 8811 	msr	BASEPRI, r0
 800ce2c:	bc09      	pop	{r0, r3}
 800ce2e:	6819      	ldr	r1, [r3, #0]
 800ce30:	6808      	ldr	r0, [r1, #0]
 800ce32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce36:	f01e 0f10 	tst.w	lr, #16
 800ce3a:	bf08      	it	eq
 800ce3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce40:	f380 8809 	msr	PSP, r0
 800ce44:	f3bf 8f6f 	isb	sy
 800ce48:	4770      	bx	lr
 800ce4a:	bf00      	nop
 800ce4c:	f3af 8000 	nop.w

0800ce50 <pxCurrentTCBConst>:
 800ce50:	200024cc 	.word	0x200024cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce54:	bf00      	nop
 800ce56:	bf00      	nop

0800ce58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce62:	f383 8811 	msr	BASEPRI, r3
 800ce66:	f3bf 8f6f 	isb	sy
 800ce6a:	f3bf 8f4f 	dsb	sy
 800ce6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce70:	f7ff f84a 	bl	800bf08 <xTaskIncrementTick>
 800ce74:	4603      	mov	r3, r0
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d003      	beq.n	800ce82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce7a:	4b06      	ldr	r3, [pc, #24]	; (800ce94 <SysTick_Handler+0x3c>)
 800ce7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce80:	601a      	str	r2, [r3, #0]
 800ce82:	2300      	movs	r3, #0
 800ce84:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce8c:	bf00      	nop
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	e000ed04 	.word	0xe000ed04

0800ce98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce9c:	4b0b      	ldr	r3, [pc, #44]	; (800cecc <vPortSetupTimerInterrupt+0x34>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cea2:	4b0b      	ldr	r3, [pc, #44]	; (800ced0 <vPortSetupTimerInterrupt+0x38>)
 800cea4:	2200      	movs	r2, #0
 800cea6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cea8:	4b0a      	ldr	r3, [pc, #40]	; (800ced4 <vPortSetupTimerInterrupt+0x3c>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	4a0a      	ldr	r2, [pc, #40]	; (800ced8 <vPortSetupTimerInterrupt+0x40>)
 800ceae:	fba2 2303 	umull	r2, r3, r2, r3
 800ceb2:	099b      	lsrs	r3, r3, #6
 800ceb4:	4a09      	ldr	r2, [pc, #36]	; (800cedc <vPortSetupTimerInterrupt+0x44>)
 800ceb6:	3b01      	subs	r3, #1
 800ceb8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ceba:	4b04      	ldr	r3, [pc, #16]	; (800cecc <vPortSetupTimerInterrupt+0x34>)
 800cebc:	2207      	movs	r2, #7
 800cebe:	601a      	str	r2, [r3, #0]
}
 800cec0:	bf00      	nop
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
 800ceca:	bf00      	nop
 800cecc:	e000e010 	.word	0xe000e010
 800ced0:	e000e018 	.word	0xe000e018
 800ced4:	20000000 	.word	0x20000000
 800ced8:	10624dd3 	.word	0x10624dd3
 800cedc:	e000e014 	.word	0xe000e014

0800cee0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cee0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cef0 <vPortEnableVFP+0x10>
 800cee4:	6801      	ldr	r1, [r0, #0]
 800cee6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ceea:	6001      	str	r1, [r0, #0]
 800ceec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ceee:	bf00      	nop
 800cef0:	e000ed88 	.word	0xe000ed88

0800cef4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cef4:	b480      	push	{r7}
 800cef6:	b085      	sub	sp, #20
 800cef8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cefa:	f3ef 8305 	mrs	r3, IPSR
 800cefe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	2b0f      	cmp	r3, #15
 800cf04:	d913      	bls.n	800cf2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf06:	4a16      	ldr	r2, [pc, #88]	; (800cf60 <vPortValidateInterruptPriority+0x6c>)
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	4413      	add	r3, r2
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf10:	4b14      	ldr	r3, [pc, #80]	; (800cf64 <vPortValidateInterruptPriority+0x70>)
 800cf12:	781b      	ldrb	r3, [r3, #0]
 800cf14:	7afa      	ldrb	r2, [r7, #11]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d209      	bcs.n	800cf2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	607b      	str	r3, [r7, #4]
 800cf2c:	e7fe      	b.n	800cf2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf2e:	4b0e      	ldr	r3, [pc, #56]	; (800cf68 <vPortValidateInterruptPriority+0x74>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf36:	4b0d      	ldr	r3, [pc, #52]	; (800cf6c <vPortValidateInterruptPriority+0x78>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	d909      	bls.n	800cf52 <vPortValidateInterruptPriority+0x5e>
 800cf3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf42:	f383 8811 	msr	BASEPRI, r3
 800cf46:	f3bf 8f6f 	isb	sy
 800cf4a:	f3bf 8f4f 	dsb	sy
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	e7fe      	b.n	800cf50 <vPortValidateInterruptPriority+0x5c>
	}
 800cf52:	bf00      	nop
 800cf54:	3714      	adds	r7, #20
 800cf56:	46bd      	mov	sp, r7
 800cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5c:	4770      	bx	lr
 800cf5e:	bf00      	nop
 800cf60:	e000e3f0 	.word	0xe000e3f0
 800cf64:	200025f8 	.word	0x200025f8
 800cf68:	e000ed0c 	.word	0xe000ed0c
 800cf6c:	200025fc 	.word	0x200025fc

0800cf70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b08a      	sub	sp, #40	; 0x28
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf7c:	f7fe fef8 	bl	800bd70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf80:	4b57      	ldr	r3, [pc, #348]	; (800d0e0 <pvPortMalloc+0x170>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d101      	bne.n	800cf8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf88:	f000 f90c 	bl	800d1a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf8c:	4b55      	ldr	r3, [pc, #340]	; (800d0e4 <pvPortMalloc+0x174>)
 800cf8e:	681a      	ldr	r2, [r3, #0]
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4013      	ands	r3, r2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f040 808c 	bne.w	800d0b2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01c      	beq.n	800cfda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cfa0:	2208      	movs	r2, #8
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	4413      	add	r3, r2
 800cfa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f003 0307 	and.w	r3, r3, #7
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d013      	beq.n	800cfda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f023 0307 	bic.w	r3, r3, #7
 800cfb8:	3308      	adds	r3, #8
 800cfba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f003 0307 	and.w	r3, r3, #7
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d009      	beq.n	800cfda <pvPortMalloc+0x6a>
 800cfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfca:	f383 8811 	msr	BASEPRI, r3
 800cfce:	f3bf 8f6f 	isb	sy
 800cfd2:	f3bf 8f4f 	dsb	sy
 800cfd6:	617b      	str	r3, [r7, #20]
 800cfd8:	e7fe      	b.n	800cfd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d068      	beq.n	800d0b2 <pvPortMalloc+0x142>
 800cfe0:	4b41      	ldr	r3, [pc, #260]	; (800d0e8 <pvPortMalloc+0x178>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d863      	bhi.n	800d0b2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfea:	4b40      	ldr	r3, [pc, #256]	; (800d0ec <pvPortMalloc+0x17c>)
 800cfec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfee:	4b3f      	ldr	r3, [pc, #252]	; (800d0ec <pvPortMalloc+0x17c>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cff4:	e004      	b.n	800d000 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cff8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d903      	bls.n	800d012 <pvPortMalloc+0xa2>
 800d00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1f1      	bne.n	800cff6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d012:	4b33      	ldr	r3, [pc, #204]	; (800d0e0 <pvPortMalloc+0x170>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d018:	429a      	cmp	r2, r3
 800d01a:	d04a      	beq.n	800d0b2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d01c:	6a3b      	ldr	r3, [r7, #32]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	2208      	movs	r2, #8
 800d022:	4413      	add	r3, r2
 800d024:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	6a3b      	ldr	r3, [r7, #32]
 800d02c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	685a      	ldr	r2, [r3, #4]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	1ad2      	subs	r2, r2, r3
 800d036:	2308      	movs	r3, #8
 800d038:	005b      	lsls	r3, r3, #1
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d91e      	bls.n	800d07c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d03e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	4413      	add	r3, r2
 800d044:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d046:	69bb      	ldr	r3, [r7, #24]
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d009      	beq.n	800d064 <pvPortMalloc+0xf4>
 800d050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d054:	f383 8811 	msr	BASEPRI, r3
 800d058:	f3bf 8f6f 	isb	sy
 800d05c:	f3bf 8f4f 	dsb	sy
 800d060:	613b      	str	r3, [r7, #16]
 800d062:	e7fe      	b.n	800d062 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d066:	685a      	ldr	r2, [r3, #4]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	1ad2      	subs	r2, r2, r3
 800d06c:	69bb      	ldr	r3, [r7, #24]
 800d06e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d076:	69b8      	ldr	r0, [r7, #24]
 800d078:	f000 f8f6 	bl	800d268 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d07c:	4b1a      	ldr	r3, [pc, #104]	; (800d0e8 <pvPortMalloc+0x178>)
 800d07e:	681a      	ldr	r2, [r3, #0]
 800d080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	1ad3      	subs	r3, r2, r3
 800d086:	4a18      	ldr	r2, [pc, #96]	; (800d0e8 <pvPortMalloc+0x178>)
 800d088:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d08a:	4b17      	ldr	r3, [pc, #92]	; (800d0e8 <pvPortMalloc+0x178>)
 800d08c:	681a      	ldr	r2, [r3, #0]
 800d08e:	4b18      	ldr	r3, [pc, #96]	; (800d0f0 <pvPortMalloc+0x180>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	429a      	cmp	r2, r3
 800d094:	d203      	bcs.n	800d09e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d096:	4b14      	ldr	r3, [pc, #80]	; (800d0e8 <pvPortMalloc+0x178>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a15      	ldr	r2, [pc, #84]	; (800d0f0 <pvPortMalloc+0x180>)
 800d09c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d09e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	4b10      	ldr	r3, [pc, #64]	; (800d0e4 <pvPortMalloc+0x174>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	431a      	orrs	r2, r3
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0b2:	f7fe fe6b 	bl	800bd8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0b6:	69fb      	ldr	r3, [r7, #28]
 800d0b8:	f003 0307 	and.w	r3, r3, #7
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d009      	beq.n	800d0d4 <pvPortMalloc+0x164>
 800d0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
 800d0d2:	e7fe      	b.n	800d0d2 <pvPortMalloc+0x162>
	return pvReturn;
 800d0d4:	69fb      	ldr	r3, [r7, #28]
}
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	3728      	adds	r7, #40	; 0x28
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	bd80      	pop	{r7, pc}
 800d0de:	bf00      	nop
 800d0e0:	20006208 	.word	0x20006208
 800d0e4:	20006214 	.word	0x20006214
 800d0e8:	2000620c 	.word	0x2000620c
 800d0ec:	20006200 	.word	0x20006200
 800d0f0:	20006210 	.word	0x20006210

0800d0f4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b086      	sub	sp, #24
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d046      	beq.n	800d194 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d106:	2308      	movs	r3, #8
 800d108:	425b      	negs	r3, r3
 800d10a:	697a      	ldr	r2, [r7, #20]
 800d10c:	4413      	add	r3, r2
 800d10e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	685a      	ldr	r2, [r3, #4]
 800d118:	4b20      	ldr	r3, [pc, #128]	; (800d19c <vPortFree+0xa8>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	4013      	ands	r3, r2
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d109      	bne.n	800d136 <vPortFree+0x42>
 800d122:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d126:	f383 8811 	msr	BASEPRI, r3
 800d12a:	f3bf 8f6f 	isb	sy
 800d12e:	f3bf 8f4f 	dsb	sy
 800d132:	60fb      	str	r3, [r7, #12]
 800d134:	e7fe      	b.n	800d134 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d009      	beq.n	800d152 <vPortFree+0x5e>
 800d13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d142:	f383 8811 	msr	BASEPRI, r3
 800d146:	f3bf 8f6f 	isb	sy
 800d14a:	f3bf 8f4f 	dsb	sy
 800d14e:	60bb      	str	r3, [r7, #8]
 800d150:	e7fe      	b.n	800d150 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	4b11      	ldr	r3, [pc, #68]	; (800d19c <vPortFree+0xa8>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4013      	ands	r3, r2
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d019      	beq.n	800d194 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d160:	693b      	ldr	r3, [r7, #16]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d115      	bne.n	800d194 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	4b0b      	ldr	r3, [pc, #44]	; (800d19c <vPortFree+0xa8>)
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	43db      	mvns	r3, r3
 800d172:	401a      	ands	r2, r3
 800d174:	693b      	ldr	r3, [r7, #16]
 800d176:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d178:	f7fe fdfa 	bl	800bd70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	4b07      	ldr	r3, [pc, #28]	; (800d1a0 <vPortFree+0xac>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	4413      	add	r3, r2
 800d186:	4a06      	ldr	r2, [pc, #24]	; (800d1a0 <vPortFree+0xac>)
 800d188:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d18a:	6938      	ldr	r0, [r7, #16]
 800d18c:	f000 f86c 	bl	800d268 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d190:	f7fe fdfc 	bl	800bd8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d194:	bf00      	nop
 800d196:	3718      	adds	r7, #24
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}
 800d19c:	20006214 	.word	0x20006214
 800d1a0:	2000620c 	.word	0x2000620c

0800d1a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b085      	sub	sp, #20
 800d1a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d1ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1b0:	4b27      	ldr	r3, [pc, #156]	; (800d250 <prvHeapInit+0xac>)
 800d1b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d00c      	beq.n	800d1d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	3307      	adds	r3, #7
 800d1c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	f023 0307 	bic.w	r3, r3, #7
 800d1ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1cc:	68ba      	ldr	r2, [r7, #8]
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	4a1f      	ldr	r2, [pc, #124]	; (800d250 <prvHeapInit+0xac>)
 800d1d4:	4413      	add	r3, r2
 800d1d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1dc:	4a1d      	ldr	r2, [pc, #116]	; (800d254 <prvHeapInit+0xb0>)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1e2:	4b1c      	ldr	r3, [pc, #112]	; (800d254 <prvHeapInit+0xb0>)
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	68ba      	ldr	r2, [r7, #8]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1f0:	2208      	movs	r2, #8
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	1a9b      	subs	r3, r3, r2
 800d1f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	f023 0307 	bic.w	r3, r3, #7
 800d1fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	4a15      	ldr	r2, [pc, #84]	; (800d258 <prvHeapInit+0xb4>)
 800d204:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d206:	4b14      	ldr	r3, [pc, #80]	; (800d258 <prvHeapInit+0xb4>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	2200      	movs	r2, #0
 800d20c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d20e:	4b12      	ldr	r3, [pc, #72]	; (800d258 <prvHeapInit+0xb4>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	2200      	movs	r2, #0
 800d214:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	1ad2      	subs	r2, r2, r3
 800d220:	683b      	ldr	r3, [r7, #0]
 800d222:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d224:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <prvHeapInit+0xb4>)
 800d226:	681a      	ldr	r2, [r3, #0]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685b      	ldr	r3, [r3, #4]
 800d230:	4a0a      	ldr	r2, [pc, #40]	; (800d25c <prvHeapInit+0xb8>)
 800d232:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	685b      	ldr	r3, [r3, #4]
 800d238:	4a09      	ldr	r2, [pc, #36]	; (800d260 <prvHeapInit+0xbc>)
 800d23a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d23c:	4b09      	ldr	r3, [pc, #36]	; (800d264 <prvHeapInit+0xc0>)
 800d23e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d242:	601a      	str	r2, [r3, #0]
}
 800d244:	bf00      	nop
 800d246:	3714      	adds	r7, #20
 800d248:	46bd      	mov	sp, r7
 800d24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24e:	4770      	bx	lr
 800d250:	20002600 	.word	0x20002600
 800d254:	20006200 	.word	0x20006200
 800d258:	20006208 	.word	0x20006208
 800d25c:	20006210 	.word	0x20006210
 800d260:	2000620c 	.word	0x2000620c
 800d264:	20006214 	.word	0x20006214

0800d268 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d268:	b480      	push	{r7}
 800d26a:	b085      	sub	sp, #20
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d270:	4b28      	ldr	r3, [pc, #160]	; (800d314 <prvInsertBlockIntoFreeList+0xac>)
 800d272:	60fb      	str	r3, [r7, #12]
 800d274:	e002      	b.n	800d27c <prvInsertBlockIntoFreeList+0x14>
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	60fb      	str	r3, [r7, #12]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	687a      	ldr	r2, [r7, #4]
 800d282:	429a      	cmp	r2, r3
 800d284:	d8f7      	bhi.n	800d276 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	68ba      	ldr	r2, [r7, #8]
 800d290:	4413      	add	r3, r2
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	429a      	cmp	r2, r3
 800d296:	d108      	bne.n	800d2aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	685a      	ldr	r2, [r3, #4]
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	441a      	add	r2, r3
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	68ba      	ldr	r2, [r7, #8]
 800d2b4:	441a      	add	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d118      	bne.n	800d2f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	681a      	ldr	r2, [r3, #0]
 800d2c2:	4b15      	ldr	r3, [pc, #84]	; (800d318 <prvInsertBlockIntoFreeList+0xb0>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d00d      	beq.n	800d2e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685a      	ldr	r2, [r3, #4]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	685b      	ldr	r3, [r3, #4]
 800d2d4:	441a      	add	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	601a      	str	r2, [r3, #0]
 800d2e4:	e008      	b.n	800d2f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2e6:	4b0c      	ldr	r3, [pc, #48]	; (800d318 <prvInsertBlockIntoFreeList+0xb0>)
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	e003      	b.n	800d2f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681a      	ldr	r2, [r3, #0]
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2f8:	68fa      	ldr	r2, [r7, #12]
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d002      	beq.n	800d306 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d306:	bf00      	nop
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	20006200 	.word	0x20006200
 800d318:	20006208 	.word	0x20006208

0800d31c <__libc_init_array>:
 800d31c:	b570      	push	{r4, r5, r6, lr}
 800d31e:	4e0d      	ldr	r6, [pc, #52]	; (800d354 <__libc_init_array+0x38>)
 800d320:	4c0d      	ldr	r4, [pc, #52]	; (800d358 <__libc_init_array+0x3c>)
 800d322:	1ba4      	subs	r4, r4, r6
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	2500      	movs	r5, #0
 800d328:	42a5      	cmp	r5, r4
 800d32a:	d109      	bne.n	800d340 <__libc_init_array+0x24>
 800d32c:	4e0b      	ldr	r6, [pc, #44]	; (800d35c <__libc_init_array+0x40>)
 800d32e:	4c0c      	ldr	r4, [pc, #48]	; (800d360 <__libc_init_array+0x44>)
 800d330:	f000 f82c 	bl	800d38c <_init>
 800d334:	1ba4      	subs	r4, r4, r6
 800d336:	10a4      	asrs	r4, r4, #2
 800d338:	2500      	movs	r5, #0
 800d33a:	42a5      	cmp	r5, r4
 800d33c:	d105      	bne.n	800d34a <__libc_init_array+0x2e>
 800d33e:	bd70      	pop	{r4, r5, r6, pc}
 800d340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d344:	4798      	blx	r3
 800d346:	3501      	adds	r5, #1
 800d348:	e7ee      	b.n	800d328 <__libc_init_array+0xc>
 800d34a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d34e:	4798      	blx	r3
 800d350:	3501      	adds	r5, #1
 800d352:	e7f2      	b.n	800d33a <__libc_init_array+0x1e>
 800d354:	0800d930 	.word	0x0800d930
 800d358:	0800d930 	.word	0x0800d930
 800d35c:	0800d930 	.word	0x0800d930
 800d360:	0800d934 	.word	0x0800d934

0800d364 <memcpy>:
 800d364:	b510      	push	{r4, lr}
 800d366:	1e43      	subs	r3, r0, #1
 800d368:	440a      	add	r2, r1
 800d36a:	4291      	cmp	r1, r2
 800d36c:	d100      	bne.n	800d370 <memcpy+0xc>
 800d36e:	bd10      	pop	{r4, pc}
 800d370:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d374:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d378:	e7f7      	b.n	800d36a <memcpy+0x6>

0800d37a <memset>:
 800d37a:	4402      	add	r2, r0
 800d37c:	4603      	mov	r3, r0
 800d37e:	4293      	cmp	r3, r2
 800d380:	d100      	bne.n	800d384 <memset+0xa>
 800d382:	4770      	bx	lr
 800d384:	f803 1b01 	strb.w	r1, [r3], #1
 800d388:	e7f9      	b.n	800d37e <memset+0x4>
	...

0800d38c <_init>:
 800d38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d38e:	bf00      	nop
 800d390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d392:	bc08      	pop	{r3}
 800d394:	469e      	mov	lr, r3
 800d396:	4770      	bx	lr

0800d398 <_fini>:
 800d398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39a:	bf00      	nop
 800d39c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d39e:	bc08      	pop	{r3}
 800d3a0:	469e      	mov	lr, r3
 800d3a2:	4770      	bx	lr
