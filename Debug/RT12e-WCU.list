
RT12e-WCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  0800cc04  0800cc04  0001cc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce9c  0800ce9c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800ce9c  0800ce9c  0001ce9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cea4  0800cea4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cea4  0800cea4  0001cea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cea8  0800cea8  0001cea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800ceac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008698  20000010  0800cebc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200086a8  0800cebc  000286a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000211f7  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046cf  00000000  00000000  00041237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb0  00000000  00000000  00045908  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a88  00000000  00000000  000475b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024d59  00000000  00000000  00049040  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018c26  00000000  00000000  0006dd99  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d49da  00000000  00000000  000869bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015b399  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077b0  00000000  00000000  0015b414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cbec 	.word	0x0800cbec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800cbec 	.word	0x0800cbec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0ca      	sub	sp, #296	; 0x128
 8000518:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800051a:	f001 fbeb 	bl	8001cf4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800051e:	f000 f92d 	bl	800077c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000522:	f000 fb27 	bl	8000b74 <MX_GPIO_Init>
	MX_DMA_Init();
 8000526:	f000 faf5 	bl	8000b14 <MX_DMA_Init>
	MX_CAN1_Init();
 800052a:	f000 f991 	bl	8000850 <MX_CAN1_Init>
	MX_CRC_Init();
 800052e:	f000 f9c5 	bl	80008bc <MX_CRC_Init>
	MX_IWDG_Init();
 8000532:	f000 f9d7 	bl	80008e4 <MX_IWDG_Init>
	MX_SDIO_SD_Init();
 8000536:	f000 f9ef 	bl	8000918 <MX_SDIO_SD_Init>
	MX_SPI1_Init();
 800053a:	f000 fa0d 	bl	8000958 <MX_SPI1_Init>
	MX_UART4_Init();
 800053e:	f000 fa41 	bl	80009c4 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8000542:	f000 fa69 	bl	8000a18 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000546:	f000 fa91 	bl	8000a6c <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800054a:	f000 fab9 	bl	8000ac0 <MX_USART3_UART_Init>
	MX_FATFS_Init();
 800054e:	f006 fd09 	bl	8006f64 <MX_FATFS_Init>

	/* USER CODE END 2 */

	/* Create the mutex(es) */
	/* definition and creation of crcMutex */
	osMutexDef(crcMutex);
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000558:	2300      	movs	r3, #0
 800055a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	crcMutexHandle = osMutexCreate(osMutex(crcMutex));
 800055e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000562:	4618      	mov	r0, r3
 8000564:	f009 fba4 	bl	8009cb0 <osMutexCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b6c      	ldr	r3, [pc, #432]	; (800071c <main+0x208>)
 800056c:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* Create the queue(s) */
	/* definition and creation of reportToWatchdogQueue */
	osMessageQDef(reportToWatchdogQueue, 16, osThreadId);
 800056e:	4b6c      	ldr	r3, [pc, #432]	; (8000720 <main+0x20c>)
 8000570:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	reportToWatchdogQueueHandle = osMessageCreate(
 800057a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f009 fcfc 	bl	8009f7e <osMessageCreate>
 8000586:	4602      	mov	r2, r0
 8000588:	4b66      	ldr	r3, [pc, #408]	; (8000724 <main+0x210>)
 800058a:	601a      	str	r2, [r3, #0]
			osMessageQ(reportToWatchdogQueue), NULL);

	/* definition and creation of canTransmitQueue */
	osMessageQDef(canTransmitQueue, 16, CanFrameTypedef);
 800058c:	4b66      	ldr	r3, [pc, #408]	; (8000728 <main+0x214>)
 800058e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	canTransmitQueueHandle = osMessageCreate(osMessageQ(canTransmitQueue),
 8000598:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f009 fced 	bl	8009f7e <osMessageCreate>
 80005a4:	4602      	mov	r2, r0
 80005a6:	4b61      	ldr	r3, [pc, #388]	; (800072c <main+0x218>)
 80005a8:	601a      	str	r2, [r3, #0]
	NULL);

	/* definition and creation of canReceiveQueue */
	osMessageQDef(canReceiveQueue, 16, CanFrameTypedef);
 80005aa:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <main+0x214>)
 80005ac:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80005b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	canReceiveQueueHandle = osMessageCreate(osMessageQ(canReceiveQueue), NULL);
 80005b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f009 fcde 	bl	8009f7e <osMessageCreate>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b5a      	ldr	r3, [pc, #360]	; (8000730 <main+0x21c>)
 80005c6:	601a      	str	r2, [r3, #0]

	/* definition and creation of sdSubscriptionQueue */
	osMessageQDef(sdSubscriptionQueue, 32, uint32_t);
 80005c8:	4b5a      	ldr	r3, [pc, #360]	; (8000734 <main+0x220>)
 80005ca:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	sdSubscriptionQueueHandle = osMessageCreate(osMessageQ(sdSubscriptionQueue),
 80005d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f009 fccf 	bl	8009f7e <osMessageCreate>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b55      	ldr	r3, [pc, #340]	; (8000738 <main+0x224>)
 80005e4:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of watchdog */
	osThreadDef(watchdog, StartWatchdogTask, osPriorityNormal, 0, 256);
 80005e6:	4b55      	ldr	r3, [pc, #340]	; (800073c <main+0x228>)
 80005e8:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 80005fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f009 faf5 	bl	8009bf0 <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b4d      	ldr	r3, [pc, #308]	; (8000740 <main+0x22c>)
 800060a:	601a      	str	r2, [r3, #0]

	/* definition and creation of btReceive */
	osThreadDef(btReceive, StartBtReceiveTask, osPriorityLow, 0, 256);
 800060c:	4b4d      	ldr	r3, [pc, #308]	; (8000744 <main+0x230>)
 800060e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	btReceiveHandle = osThreadCreate(osThread(btReceive), NULL);
 8000620:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f009 fae2 	bl	8009bf0 <osThreadCreate>
 800062c:	4602      	mov	r2, r0
 800062e:	4b46      	ldr	r3, [pc, #280]	; (8000748 <main+0x234>)
 8000630:	601a      	str	r2, [r3, #0]

	/* definition and creation of xbeeSend */
	osThreadDef(xbeeSend, StartXbeeSendTask, osPriorityIdle, 0, 256);
 8000632:	4b46      	ldr	r3, [pc, #280]	; (800074c <main+0x238>)
 8000634:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xbeeSendHandle = osThreadCreate(osThread(xbeeSend), NULL);
 8000646:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f009 facf 	bl	8009bf0 <osThreadCreate>
 8000652:	4602      	mov	r2, r0
 8000654:	4b3e      	ldr	r3, [pc, #248]	; (8000750 <main+0x23c>)
 8000656:	601a      	str	r2, [r3, #0]

	/* definition and creation of xbeeReceive */
	osThreadDef(xbeeReceive, StartXbeeReceiveTask, osPriorityIdle, 0, 256);
 8000658:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <main+0x240>)
 800065a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xbeeReceiveHandle = osThreadCreate(osThread(xbeeReceive), NULL);
 800066c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 fabc 	bl	8009bf0 <osThreadCreate>
 8000678:	4602      	mov	r2, r0
 800067a:	4b37      	ldr	r3, [pc, #220]	; (8000758 <main+0x244>)
 800067c:	601a      	str	r2, [r3, #0]

	/* definition and creation of gnssReceive */
	osThreadDef(gnssReceive, StartGnssReceiveTask, osPriorityIdle, 0, 256);
 800067e:	4b37      	ldr	r3, [pc, #220]	; (800075c <main+0x248>)
 8000680:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000684:	461d      	mov	r5, r3
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gnssReceiveHandle = osThreadCreate(osThread(gnssReceive), NULL);
 8000692:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f009 faa9 	bl	8009bf0 <osThreadCreate>
 800069e:	4602      	mov	r2, r0
 80006a0:	4b2f      	ldr	r3, [pc, #188]	; (8000760 <main+0x24c>)
 80006a2:	601a      	str	r2, [r3, #0]

	/* definition and creation of rfReceive */
	osThreadDef(rfReceive, StartRfReceiveTask, osPriorityIdle, 0, 256);
 80006a4:	4b2f      	ldr	r3, [pc, #188]	; (8000764 <main+0x250>)
 80006a6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	rfReceiveHandle = osThreadCreate(osThread(rfReceive), NULL);
 80006b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 fa96 	bl	8009bf0 <osThreadCreate>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b28      	ldr	r3, [pc, #160]	; (8000768 <main+0x254>)
 80006c8:	601a      	str	r2, [r3, #0]

	/* definition and creation of canGatekeeper */
	osThreadDef(canGatekeeper, StartCanGatekeeperTask, osPriorityIdle, 0, 256);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4a27      	ldr	r2, [pc, #156]	; (800076c <main+0x258>)
 80006d0:	461c      	mov	r4, r3
 80006d2:	4615      	mov	r5, r2
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	canGatekeeperHandle = osThreadCreate(osThread(canGatekeeper), NULL);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f009 fa82 	bl	8009bf0 <osThreadCreate>
 80006ec:	4602      	mov	r2, r0
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <main+0x25c>)
 80006f0:	601a      	str	r2, [r3, #0]

	/* definition and creation of sdGatekeeper */
	osThreadDef(sdGatekeeper, StartSdGatekeeperTask, osPriorityIdle, 0, 256);
 80006f2:	463b      	mov	r3, r7
 80006f4:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <main+0x260>)
 80006f6:	461c      	mov	r4, r3
 80006f8:	4615      	mov	r5, r2
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000702:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	sdGatekeeperHandle = osThreadCreate(osThread(sdGatekeeper), NULL);
 8000706:	463b      	mov	r3, r7
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f009 fa70 	bl	8009bf0 <osThreadCreate>
 8000710:	4602      	mov	r2, r0
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <main+0x264>)
 8000714:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000716:	f009 fa48 	bl	8009baa <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800071a:	e7fe      	b.n	800071a <main+0x206>
 800071c:	2000640c 	.word	0x2000640c
 8000720:	0800cc04 	.word	0x0800cc04
 8000724:	20006304 	.word	0x20006304
 8000728:	0800cc14 	.word	0x0800cc14
 800072c:	2000653c 	.word	0x2000653c
 8000730:	20006538 	.word	0x20006538
 8000734:	0800cc24 	.word	0x0800cc24
 8000738:	20006498 	.word	0x20006498
 800073c:	0800cc40 	.word	0x0800cc40
 8000740:	200062a8 	.word	0x200062a8
 8000744:	0800cc68 	.word	0x0800cc68
 8000748:	2000649c 	.word	0x2000649c
 800074c:	0800cc90 	.word	0x0800cc90
 8000750:	20006300 	.word	0x20006300
 8000754:	0800ccb8 	.word	0x0800ccb8
 8000758:	20006308 	.word	0x20006308
 800075c:	0800cce0 	.word	0x0800cce0
 8000760:	20006410 	.word	0x20006410
 8000764:	0800cd08 	.word	0x0800cd08
 8000768:	200065b0 	.word	0x200065b0
 800076c:	0800cd34 	.word	0x0800cd34
 8000770:	20006540 	.word	0x20006540
 8000774:	0800cd60 	.word	0x0800cd60
 8000778:	200065ac 	.word	0x200065ac

0800077c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f00c fa25 	bl	800cbda <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <SystemClock_Config+0xcc>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a27      	ldr	r2, [pc, #156]	; (8000848 <SystemClock_Config+0xcc>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b25      	ldr	r3, [pc, #148]	; (8000848 <SystemClock_Config+0xcc>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a21      	ldr	r2, [pc, #132]	; (800084c <SystemClock_Config+0xd0>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <SystemClock_Config+0xd0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80007d8:	230a      	movs	r3, #10
 80007da:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e4:	2301      	movs	r3, #1
 80007e6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e8:	2302      	movs	r3, #2
 80007ea:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007ec:	2300      	movs	r3, #0
 80007ee:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 16;
 80007f0:	2310      	movs	r3, #16
 80007f2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 192;
 80007f4:	23c0      	movs	r3, #192	; 0xc0
 80007f6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000800:	f107 0320 	add.w	r3, r7, #32
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fd95 	bl	8003334 <HAL_RCC_OscConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x98>
		Error_Handler();
 8000810:	f000 fe16 	bl	8001440 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000814:	230f      	movs	r3, #15
 8000816:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000818:	2300      	movs	r3, #0
 800081a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	2100      	movs	r1, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f002 fff0 	bl	8003814 <HAL_RCC_ClockConfig>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0xc2>
		Error_Handler();
 800083a:	f000 fe01 	bl	8001440 <Error_Handler>
	}
}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	; 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800
 800084c:	40007000 	.word	0x40007000

08000850 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_CAN1_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 2;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_CAN1_Init+0x64>)
 800085c:	2202      	movs	r2, #2
 800085e:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000868:	2200      	movs	r2, #0
 800086a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_CAN1_Init+0x64>)
 800086e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000872:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_CAN1_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_CAN1_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_CAN1_Init+0x64>)
 8000894:	2200      	movs	r2, #0
 8000896:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_CAN1_Init+0x64>)
 800089a:	2200      	movs	r2, #0
 800089c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_CAN1_Init+0x64>)
 80008a0:	f001 fa8c 	bl	8001dbc <HAL_CAN_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_CAN1_Init+0x5e>
		Error_Handler();
 80008aa:	f000 fdc9 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20006584 	.word	0x20006584
 80008b8:	40006400 	.word	0x40006400

080008bc <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_CRC_Init+0x20>)
 80008c2:	4a07      	ldr	r2, [pc, #28]	; (80008e0 <MX_CRC_Init+0x24>)
 80008c4:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_CRC_Init+0x20>)
 80008c8:	f001 ff4c 	bl	8002764 <HAL_CRC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_CRC_Init+0x1a>
		Error_Handler();
 80008d2:	f000 fdb5 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200062f8 	.word	0x200062f8
 80008e0:	40023000 	.word	0x40023000

080008e4 <MX_IWDG_Init>:
/**
 * @brief IWDG Initialization Function
 * @param None
 * @retval None
 */
static void MX_IWDG_Init(void) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	/* USER CODE END IWDG_Init 0 */

	/* USER CODE BEGIN IWDG_Init 1 */

	/* USER CODE END IWDG_Init 1 */
	hiwdg.Instance = IWDG;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_IWDG_Init+0x2c>)
 80008ea:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <MX_IWDG_Init+0x30>)
 80008ec:	601a      	str	r2, [r3, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_IWDG_Init+0x2c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
	hiwdg.Init.Reload = 4095;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_IWDG_Init+0x2c>)
 80008f6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008fa:	609a      	str	r2, [r3, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <MX_IWDG_Init+0x2c>)
 80008fe:	f002 fcd0 	bl	80032a2 <HAL_IWDG_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_IWDG_Init+0x28>
		Error_Handler();
 8000908:	f000 fd9a 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN IWDG_Init 2 */

	/* USER CODE END IWDG_Init 2 */

}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200062ec 	.word	0x200062ec
 8000914:	40003000 	.word	0x40003000

08000918 <MX_SDIO_SD_Init>:
/**
 * @brief SDIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDIO_SD_Init(void) {
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
	/* USER CODE END SDIO_Init 0 */

	/* USER CODE BEGIN SDIO_Init 1 */

	/* USER CODE END SDIO_Init 1 */
	hsd.Instance = SDIO;
 800091c:	4b0c      	ldr	r3, [pc, #48]	; (8000950 <MX_SDIO_SD_Init+0x38>)
 800091e:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <MX_SDIO_SD_Init+0x3c>)
 8000920:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000922:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <MX_SDIO_SD_Init+0x38>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <MX_SDIO_SD_Init+0x38>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MX_SDIO_SD_Init+0x38>)
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MX_SDIO_SD_Init+0x38>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MX_SDIO_SD_Init+0x38>)
 800093c:	2200      	movs	r2, #0
 800093e:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv = 0;
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <MX_SDIO_SD_Init+0x38>)
 8000942:	2200      	movs	r2, #0
 8000944:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDIO_Init 2 */

	/* USER CODE END SDIO_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	46bd      	mov	sp, r7
 800094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094e:	4770      	bx	lr
 8000950:	20006414 	.word	0x20006414
 8000954:	40012c00 	.word	0x40012c00

08000958 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800095c:	4b17      	ldr	r3, [pc, #92]	; (80009bc <MX_SPI1_Init+0x64>)
 800095e:	4a18      	ldr	r2, [pc, #96]	; (80009c0 <MX_SPI1_Init+0x68>)
 8000960:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <MX_SPI1_Init+0x64>)
 8000964:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000968:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_SPI1_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_SPI1_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_SPI1_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_SPI1_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_SPI1_Init+0x64>)
 8000984:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000988:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_SPI1_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000990:	4b0a      	ldr	r3, [pc, #40]	; (80009bc <MX_SPI1_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_SPI1_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800099c:	4b07      	ldr	r3, [pc, #28]	; (80009bc <MX_SPI1_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_SPI1_Init+0x64>)
 80009a4:	220a      	movs	r2, #10
 80009a6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80009a8:	4804      	ldr	r0, [pc, #16]	; (80009bc <MX_SPI1_Init+0x64>)
 80009aa:	f004 fc2f 	bl	800520c <HAL_SPI_Init>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80009b4:	f000 fd44 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	200064e0 	.word	0x200064e0
 80009c0:	40013000 	.word	0x40013000

080009c4 <MX_UART4_Init>:
/**
 * @brief UART4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART4_Init(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009ca:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <MX_UART4_Init+0x50>)
 80009cc:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = 115200;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d4:	605a      	str	r2, [r3, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009d6:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009ea:	220c      	movs	r2, #12
 80009ec:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ee:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 80009fa:	4805      	ldr	r0, [pc, #20]	; (8000a10 <MX_UART4_Init+0x4c>)
 80009fc:	f004 fea8 	bl	8005750 <HAL_UART_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_UART4_Init+0x46>
		Error_Handler();
 8000a06:	f000 fd1b 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */

	/* USER CODE END UART4_Init 2 */

}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200064a0 	.word	0x200064a0
 8000a14:	40004c00 	.word	0x40004c00

08000a18 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	; (8000a68 <MX_USART1_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f004 fe7e 	bl	8005750 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a5a:	f000 fcf1 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000636c 	.word	0x2000636c
 8000a68:	40011000 	.word	0x40011000

08000a6c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <MX_USART2_UART_Init+0x50>)
 8000a74:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a7c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7e:	4b0e      	ldr	r3, [pc, #56]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a90:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a92:	220c      	movs	r2, #12
 8000a94:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_USART2_UART_Init+0x4c>)
 8000aa4:	f004 fe54 	bl	8005750 <HAL_UART_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000aae:	f000 fcc7 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20006544 	.word	0x20006544
 8000abc:	40004400 	.word	0x40004400

08000ac0 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	; (8000b10 <MX_USART3_UART_Init+0x50>)
 8000ac8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000acc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aea:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af0:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <MX_USART3_UART_Init+0x4c>)
 8000af8:	f004 fe2a 	bl	8005750 <HAL_UART_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8000b02:	f000 fc9d 	bl	8001440 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200062ac 	.word	0x200062ac
 8000b10:	40004800 	.word	0x40004800

08000b14 <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_DMA_Init+0x5c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <MX_DMA_Init+0x5c>)
 8000b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_DMA_Init+0x5c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2105      	movs	r1, #5
 8000b3a:	203a      	movs	r0, #58	; 0x3a
 8000b3c:	f001 fde8 	bl	8002710 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b40:	203a      	movs	r0, #58	; 0x3a
 8000b42:	f001 fe01 	bl	8002748 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2105      	movs	r1, #5
 8000b4a:	203b      	movs	r0, #59	; 0x3b
 8000b4c:	f001 fde0 	bl	8002710 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b50:	203b      	movs	r0, #59	; 0x3b
 8000b52:	f001 fdf9 	bl	8002748 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000b56:	2200      	movs	r2, #0
 8000b58:	2105      	movs	r1, #5
 8000b5a:	2045      	movs	r0, #69	; 0x45
 8000b5c:	f001 fdd8 	bl	8002710 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b60:	2045      	movs	r0, #69	; 0x45
 8000b62:	f001 fdf1 	bl	8002748 <HAL_NVIC_EnableIRQ>

}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40023800 	.word	0x40023800

08000b74 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b08a      	sub	sp, #40	; 0x28
 8000b78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b46      	ldr	r3, [pc, #280]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a45      	ldr	r2, [pc, #276]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b43      	ldr	r3, [pc, #268]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b3f      	ldr	r3, [pc, #252]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a3e      	ldr	r2, [pc, #248]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b3c      	ldr	r3, [pc, #240]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b38      	ldr	r3, [pc, #224]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a37      	ldr	r2, [pc, #220]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b35      	ldr	r3, [pc, #212]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a30      	ldr	r2, [pc, #192]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b2e      	ldr	r3, [pc, #184]	; (8000ca8 <MX_GPIO_Init+0x134>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2108      	movs	r1, #8
 8000bfe:	482b      	ldr	r0, [pc, #172]	; (8000cac <MX_GPIO_Init+0x138>)
 8000c00:	f002 fb36 	bl	8003270 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RF_SPI1_CSN_GPIO_Port, RF_SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	4829      	ldr	r0, [pc, #164]	; (8000cb0 <MX_GPIO_Init+0x13c>)
 8000c0a:	f002 fb31 	bl	8003270 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f243 0134 	movw	r1, #12340	; 0x3034
 8000c14:	4827      	ldr	r0, [pc, #156]	; (8000cb4 <MX_GPIO_Init+0x140>)
 8000c16:	f002 fb2b 	bl	8003270 <HAL_GPIO_WritePin>
			RF_PWR_UP_Pin | RF_TRX_CE_Pin | RF_TX_EN_Pin | GNSS_FORCE_ON_Pin
					| GNSS_RESET_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : XBEE_RSSI_Pin RF_DR_Pin RF_AM_Pin */
	GPIO_InitStruct.Pin = XBEE_RSSI_Pin | RF_DR_Pin | RF_AM_Pin;
 8000c1a:	2334      	movs	r3, #52	; 0x34
 8000c1c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	481f      	ldr	r0, [pc, #124]	; (8000cac <MX_GPIO_Init+0x138>)
 8000c2e:	f002 f985 	bl	8002f3c <HAL_GPIO_Init>

	/*Configure GPIO pin : XBEE_RESET_Pin */
	GPIO_InitStruct.Pin = XBEE_RESET_Pin;
 8000c32:	2308      	movs	r3, #8
 8000c34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(XBEE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	4818      	ldr	r0, [pc, #96]	; (8000cac <MX_GPIO_Init+0x138>)
 8000c4a:	f002 f977 	bl	8002f3c <HAL_GPIO_Init>

	/*Configure GPIO pin : RF_SPI1_CSN_Pin */
	GPIO_InitStruct.Pin = RF_SPI1_CSN_Pin;
 8000c4e:	2310      	movs	r3, #16
 8000c50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2301      	movs	r3, #1
 8000c54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RF_SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4812      	ldr	r0, [pc, #72]	; (8000cb0 <MX_GPIO_Init+0x13c>)
 8000c66:	f002 f969 	bl	8002f3c <HAL_GPIO_Init>

	/*Configure GPIO pins : RF_CD_Pin RF_uPCLK_Pin GNSS_1PPS_Pin */
	GPIO_InitStruct.Pin = RF_CD_Pin | RF_uPCLK_Pin | GNSS_1PPS_Pin;
 8000c6a:	230b      	movs	r3, #11
 8000c6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <MX_GPIO_Init+0x140>)
 8000c7e:	f002 f95d 	bl	8002f3c <HAL_GPIO_Init>

	/*Configure GPIO pins : RF_PWR_UP_Pin RF_TRX_CE_Pin RF_TX_EN_Pin GNSS_FORCE_ON_Pin
	 GNSS_RESET_Pin */
	GPIO_InitStruct.Pin = RF_PWR_UP_Pin | RF_TRX_CE_Pin | RF_TX_EN_Pin
 8000c82:	f243 0334 	movw	r3, #12340	; 0x3034
 8000c86:	617b      	str	r3, [r7, #20]
			| GNSS_FORCE_ON_Pin | GNSS_RESET_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4806      	ldr	r0, [pc, #24]	; (8000cb4 <MX_GPIO_Init+0x140>)
 8000c9c:	f002 f94e 	bl	8002f3c <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020000 	.word	0x40020000
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	static BaseType_t dummy; /* Buffer for pxHigherPriorityTaskWoken flag */
	switch ((uint32_t) huart->Instance) {
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <HAL_UART_RxCpltCallback+0x40>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00a      	beq.n	8000ce0 <HAL_UART_RxCpltCallback+0x28>
 8000cca:	4a0c      	ldr	r2, [pc, #48]	; (8000cfc <HAL_UART_RxCpltCallback+0x44>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d000      	beq.n	8000cd2 <HAL_UART_RxCpltCallback+0x1a>
	case (uint32_t) GNSS_UART_INSTANCE:
		/* Notify gnssReceive task */
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
		break;
	}
}
 8000cd0:	e00d      	b.n	8000cee <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) btReceiveHandle, &dummy);
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_UART_RxCpltCallback+0x48>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	490b      	ldr	r1, [pc, #44]	; (8000d04 <HAL_UART_RxCpltCallback+0x4c>)
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f00b fa45 	bl	800c168 <vTaskNotifyGiveFromISR>
		break;
 8000cde:	e006      	b.n	8000cee <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_UART_RxCpltCallback+0x50>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4907      	ldr	r1, [pc, #28]	; (8000d04 <HAL_UART_RxCpltCallback+0x4c>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f00b fa3e 	bl	800c168 <vTaskNotifyGiveFromISR>
		break;
 8000cec:	bf00      	nop
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004800 	.word	0x40004800
 8000cfc:	40011000 	.word	0x40011000
 8000d00:	2000649c 	.word	0x2000649c
 8000d04:	20000280 	.word	0x20000280
 8000d08:	20006410 	.word	0x20006410

08000d0c <StartWatchdogTask>:
 * @brief  Function implementing the watchdog thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdogTask */
void StartWatchdogTask(void const *argument) {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Initialize the watchdog */
	HAL_IWDG_Init(&hiwdg);
 8000d14:	4847      	ldr	r0, [pc, #284]	; (8000e34 <StartWatchdogTask+0x128>)
 8000d16:	f002 fac4 	bl	80032a2 <HAL_IWDG_Init>

	/* Define key-value pair array for testing threads activity */
	struct {
		osThreadId Id;
		bool Reported;
	} reportSheet[WCU_NUMBER_OF_WATCHED_THREADS ] = { { .Id = btReceiveHandle,
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <StartWatchdogTask+0x12c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	2300      	movs	r3, #0
 8000d22:	743b      	strb	r3, [r7, #16]
 8000d24:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <StartWatchdogTask+0x130>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	763b      	strb	r3, [r7, #24]
 8000d2e:	4b44      	ldr	r3, [pc, #272]	; (8000e40 <StartWatchdogTask+0x134>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	2300      	movs	r3, #0
 8000d36:	f887 3020 	strb.w	r3, [r7, #32]
 8000d3a:	4b42      	ldr	r3, [pc, #264]	; (8000e44 <StartWatchdogTask+0x138>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000d46:	4b40      	ldr	r3, [pc, #256]	; (8000e48 <StartWatchdogTask+0x13c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	bool allReported; /* Flag raised when all watched threads have reported to the watchdog */

	/* Infinite loop */
	for (;;) {
		/* Test for all threads' activity */
		if (pdTRUE == xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000d52:	4b3e      	ldr	r3, [pc, #248]	; (8000e4c <StartWatchdogTask+0x140>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f107 0108 	add.w	r1, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f009 fe3d 	bl	800a9dc <xQueueReceive>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d161      	bne.n	8000e2c <StartWatchdogTask+0x120>
		WCU_REPORTTOWATCHDOG_QUEUE_RECEIVE_TIMEOUT)) {
			/* Identify the thread that just reported and set the appropriate flag in the report sheet */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d68:	2300      	movs	r3, #0
 8000d6a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d6e:	e018      	b.n	8000da2 <StartWatchdogTask+0x96>
				if (buff == reportSheet[i].Id) {
 8000d70:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d7a:	4413      	add	r3, r2
 8000d7c:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d108      	bne.n	8000d98 <StartWatchdogTask+0x8c>
					reportSheet[i].Reported = true;
 8000d86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d8a:	00db      	lsls	r3, r3, #3
 8000d8c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d90:	4413      	add	r3, r2
 8000d92:	2201      	movs	r2, #1
 8000d94:	f803 2c28 	strb.w	r2, [r3, #-40]
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d98:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000da2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d9e2      	bls.n	8000d70 <StartWatchdogTask+0x64>
				}
			}

			/* Assume all threads reported to the watchdog */
			allReported = true;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			/* Test for threads that did not report */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000db0:	2300      	movs	r3, #0
 8000db2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000db6:	e015      	b.n	8000de4 <StartWatchdogTask+0xd8>
				if (reportSheet[i].Reported == false) {
 8000db8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000dbc:	00db      	lsls	r3, r3, #3
 8000dbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000dc8:	f083 0301 	eor.w	r3, r3, #1
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <StartWatchdogTask+0xce>
					/* If a thread did not report to the watchdog, reset the flag and break */
					allReported = false;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8000dd8:	e008      	b.n	8000dec <StartWatchdogTask+0xe0>
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000dda:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000dde:	3301      	adds	r3, #1
 8000de0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000de4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000de8:	2b04      	cmp	r3, #4
 8000dea:	d9e5      	bls.n	8000db8 <StartWatchdogTask+0xac>
				}
			}

			if (true == allReported) {
 8000dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d01b      	beq.n	8000e2c <StartWatchdogTask+0x120>
				/* If all threads have reported to the watchdog, refresh the timer */
				HAL_IWDG_Refresh(&hiwdg);
 8000df4:	480f      	ldr	r0, [pc, #60]	; (8000e34 <StartWatchdogTask+0x128>)
 8000df6:	f002 fa8d 	bl	8003314 <HAL_IWDG_Refresh>

				/* Reset the report sheet */
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000e00:	e00d      	b.n	8000e1e <StartWatchdogTask+0x112>
						1U) {
					reportSheet[i].Reported = false;
 8000e02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e0c:	4413      	add	r3, r2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f803 2c28 	strb.w	r2, [r3, #-40]
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000e14:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000e1e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	d9ed      	bls.n	8000e02 <StartWatchdogTask+0xf6>
				}

				/* Reset the flag */
				allReported = false;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	f008 ff2b 	bl	8009c88 <osDelay>
		if (pdTRUE == xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000e32:	e78e      	b.n	8000d52 <StartWatchdogTask+0x46>
 8000e34:	200062ec 	.word	0x200062ec
 8000e38:	2000649c 	.word	0x2000649c
 8000e3c:	20006300 	.word	0x20006300
 8000e40:	20006410 	.word	0x20006410
 8000e44:	200065b0 	.word	0x200065b0
 8000e48:	20006540 	.word	0x20006540
 8000e4c:	20006304 	.word	0x20006304

08000e50 <StartBtReceiveTask>:
 * @brief Function implementing the btReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBtReceiveTask */
void StartBtReceiveTask(void const *argument) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	static uint16_t readCrc; /* Buffer for the transmitted CRC */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */

	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000e58:	2214      	movs	r2, #20
 8000e5a:	494a      	ldr	r1, [pc, #296]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000e5c:	484a      	ldr	r0, [pc, #296]	; (8000f88 <StartBtReceiveTask+0x138>)
 8000e5e:	f004 fe03 	bl	8005a68 <HAL_UART_Receive_DMA>
		WCU_BT_UART_RX_BUFF_SIZE);

		/* Wait for notify from ISR/message received callback */
		if (0UL < ulTaskNotifyTake(pdTRUE,
 8000e62:	f04f 31ff 	mov.w	r1, #4294967295
 8000e66:	2001      	movs	r0, #1
 8000e68:	f00b f936 	bl	800c0d8 <ulTaskNotifyTake>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d073      	beq.n	8000f5a <StartBtReceiveTask+0x10a>
		WCU_BT_UART_RX_NOTIFY_TAKE_TIMEOUT)) {
			/* Validate the VER and RES/SEQ field */
			if (R3TP_VER0_VER_RES_SEQ_BYTE != btUartRxBuff[0]) {
 8000e72:	4b44      	ldr	r3, [pc, #272]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d17b      	bne.n	8000f72 <StartBtReceiveTask+0x122>
				continue;
			}

			/* Validate the END SEQ field */
			if ((R3TP_END_SEQ_LOW_BYTE
					!= btUartRxBuff[R3TP_VER0_FRAME_SIZE - 2U])
 8000e7a:	4b42      	ldr	r3, [pc, #264]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000e7c:	7c9b      	ldrb	r3, [r3, #18]
			if ((R3TP_END_SEQ_LOW_BYTE
 8000e7e:	2bde      	cmp	r3, #222	; 0xde
 8000e80:	d179      	bne.n	8000f76 <StartBtReceiveTask+0x126>
					|| (R3TP_END_SEQ_HIGH_BYTE
							!= btUartRxBuff[R3TP_VER0_FRAME_SIZE - 1U])) {
 8000e82:	4b40      	ldr	r3, [pc, #256]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000e84:	7cdb      	ldrb	r3, [r3, #19]
					|| (R3TP_END_SEQ_HIGH_BYTE
 8000e86:	2bed      	cmp	r3, #237	; 0xed
 8000e88:	d175      	bne.n	8000f76 <StartBtReceiveTask+0x126>
				LOGERROR("Invalid END SEQ in btReceive\r\n");
				continue;
			}

			/* Read CRC - note that the CRC is transmitted as little endian */
			readCrc = READAS16BIT(btUartRxBuff[3], btUartRxBuff[2]);
 8000e8a:	4b3e      	ldr	r3, [pc, #248]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000e8c:	78db      	ldrb	r3, [r3, #3]
 8000e8e:	021b      	lsls	r3, r3, #8
 8000e90:	b21a      	sxth	r2, r3
 8000e92:	4b3c      	ldr	r3, [pc, #240]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000e94:	789b      	ldrb	r3, [r3, #2]
 8000e96:	b21b      	sxth	r3, r3
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	b21b      	sxth	r3, r3
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b3b      	ldr	r3, [pc, #236]	; (8000f8c <StartBtReceiveTask+0x13c>)
 8000ea0:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(btUartRxBuff + 2U, 0x00, 2U);
 8000ea2:	4b3b      	ldr	r3, [pc, #236]	; (8000f90 <StartBtReceiveTask+0x140>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f00b fe96 	bl	800cbda <memset>

			/* Calculate the CRC */
			if (osOK == osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT)) {
 8000eae:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <StartBtReceiveTask+0x144>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f008 ff12 	bl	8009ce0 <osMutexWait>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d15b      	bne.n	8000f7a <StartBtReceiveTask+0x12a>
				calculatedCrc =
						GET16LSBITS(
 8000ec2:	2205      	movs	r2, #5
 8000ec4:	492f      	ldr	r1, [pc, #188]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000ec6:	4834      	ldr	r0, [pc, #208]	; (8000f98 <StartBtReceiveTask+0x148>)
 8000ec8:	f001 fc68 	bl	800279c <HAL_CRC_Calculate>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	b29a      	uxth	r2, r3
				calculatedCrc =
 8000ed0:	4b32      	ldr	r3, [pc, #200]	; (8000f9c <StartBtReceiveTask+0x14c>)
 8000ed2:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t*)btUartRxBuff, WCU_BT_UART_RX_BUFF_SIZE / 4U));
				osMutexRelease(crcMutexHandle);
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <StartBtReceiveTask+0x144>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f008 ff4f 	bl	8009d7c <osMutexRelease>
				LOGERROR("crcMutex timeout in btReceive\r\n");
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 8000ede:	4b2b      	ldr	r3, [pc, #172]	; (8000f8c <StartBtReceiveTask+0x13c>)
 8000ee0:	881a      	ldrh	r2, [r3, #0]
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <StartBtReceiveTask+0x14c>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d149      	bne.n	8000f7e <StartBtReceiveTask+0x12e>
				LOGERROR("Invalid CRC in btReceive\r\n");
				continue;
			}

			/* Read the CAN ID - note that the CAN ID is transmitted as little endian */
			canFrame.Header.Tx.StdId = READAS32BIT(btUartRxBuff[7],
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000eec:	79db      	ldrb	r3, [r3, #7]
 8000eee:	061a      	lsls	r2, r3, #24
 8000ef0:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000ef2:	799b      	ldrb	r3, [r3, #6]
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	431a      	orrs	r2, r3
 8000ef8:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000efa:	795b      	ldrb	r3, [r3, #5]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	4313      	orrs	r3, r2
 8000f00:	4a20      	ldr	r2, [pc, #128]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000f02:	7912      	ldrb	r2, [r2, #4]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	4b25      	ldr	r3, [pc, #148]	; (8000fa0 <StartBtReceiveTask+0x150>)
 8000f0a:	605a      	str	r2, [r3, #4]
					btUartRxBuff[6], btUartRxBuff[5], btUartRxBuff[4]);
			/* Read the Data Length Code */
			canFrame.Header.Tx.DLC = (uint32_t) (
					btUartRxBuff[8] < WCU_CAN_PAYLOAD_SIZE ?
 8000f0c:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000f0e:	7a1b      	ldrb	r3, [r3, #8]
			canFrame.Header.Tx.DLC = (uint32_t) (
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	bf28      	it	cs
 8000f14:	2308      	movcs	r3, #8
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <StartBtReceiveTask+0x150>)
 8000f1c:	615a      	str	r2, [r3, #20]
							btUartRxBuff[8] : WCU_CAN_PAYLOAD_SIZE);

			/* Read the payload */
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	e00d      	b.n	8000f40 <StartBtReceiveTask+0xf0>
				canFrame.Payload[i] = btUartRxBuff[9 + i];
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	f103 0209 	add.w	r2, r3, #9
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	4915      	ldr	r1, [pc, #84]	; (8000f84 <StartBtReceiveTask+0x134>)
 8000f2e:	5c89      	ldrb	r1, [r1, r2]
 8000f30:	4a1b      	ldr	r2, [pc, #108]	; (8000fa0 <StartBtReceiveTask+0x150>)
 8000f32:	4413      	add	r3, r2
 8000f34:	460a      	mov	r2, r1
 8000f36:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8000f3a:	7bfb      	ldrb	r3, [r7, #15]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	7bfa      	ldrb	r2, [r7, #15]
 8000f42:	4b17      	ldr	r3, [pc, #92]	; (8000fa0 <StartBtReceiveTask+0x150>)
 8000f44:	695b      	ldr	r3, [r3, #20]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d3ec      	bcc.n	8000f24 <StartBtReceiveTask+0xd4>
			}

			/* Push CAN frame to queue */
			if (pdTRUE
					!= xQueueSend(canTransmitQueueHandle, &canFrame,
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <StartBtReceiveTask+0x154>)
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	4912      	ldr	r1, [pc, #72]	; (8000fa0 <StartBtReceiveTask+0x150>)
 8000f56:	f009 fb29 	bl	800a5ac <xQueueGenericSend>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &btReceiveHandle,
 8000f5a:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <StartBtReceiveTask+0x158>)
 8000f5c:	6818      	ldr	r0, [r3, #0]
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f04f 32ff 	mov.w	r2, #4294967295
 8000f64:	4911      	ldr	r1, [pc, #68]	; (8000fac <StartBtReceiveTask+0x15c>)
 8000f66:	f009 fb21 	bl	800a5ac <xQueueGenericSend>
						WCU_REPORTTOWATCHDOG_QUEUE_SEND_TIMEOUT)) {
			LOGERROR("btReceive failed to send to reportToWatchdogQueue\r\n");
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f008 fe8c 	bl	8009c88 <osDelay>
 8000f70:	e772      	b.n	8000e58 <StartBtReceiveTask+0x8>
				continue;
 8000f72:	bf00      	nop
 8000f74:	e770      	b.n	8000e58 <StartBtReceiveTask+0x8>
				continue;
 8000f76:	bf00      	nop
 8000f78:	e76e      	b.n	8000e58 <StartBtReceiveTask+0x8>
				continue;
 8000f7a:	bf00      	nop
 8000f7c:	e76c      	b.n	8000e58 <StartBtReceiveTask+0x8>
				continue;
 8000f7e:	bf00      	nop
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000f80:	e76a      	b.n	8000e58 <StartBtReceiveTask+0x8>
 8000f82:	bf00      	nop
 8000f84:	20000284 	.word	0x20000284
 8000f88:	2000636c 	.word	0x2000636c
 8000f8c:	20000298 	.word	0x20000298
 8000f90:	20000286 	.word	0x20000286
 8000f94:	2000640c 	.word	0x2000640c
 8000f98:	200062f8 	.word	0x200062f8
 8000f9c:	2000029a 	.word	0x2000029a
 8000fa0:	2000029c 	.word	0x2000029c
 8000fa4:	2000653c 	.word	0x2000653c
 8000fa8:	20006304 	.word	0x20006304
 8000fac:	2000649c 	.word	0x2000649c

08000fb0 <StartXbeeSendTask>:
 * @brief Function implementing the xbeeSend thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeSendTask */
void StartXbeeSendTask(void const *argument) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	static uint8_t xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE]; /* UART Tx buffer */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */
	static uint8_t seqNum = 0U; /* Sequence number */

	/* Activate XBEE Pro by driving the XBEE_RESET pin high */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2108      	movs	r1, #8
 8000fbc:	4846      	ldr	r0, [pc, #280]	; (80010d8 <StartXbeeSendTask+0x128>)
 8000fbe:	f002 f957 	bl	8003270 <HAL_GPIO_WritePin>

	/* Infinite loop */
	for (;;) {
		if (pdTRUE == xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 8000fc2:	4b46      	ldr	r3, [pc, #280]	; (80010dc <StartXbeeSendTask+0x12c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4945      	ldr	r1, [pc, #276]	; (80010e0 <StartXbeeSendTask+0x130>)
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f009 fd06 	bl	800a9dc <xQueueReceive>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d172      	bne.n	80010bc <StartXbeeSendTask+0x10c>
		WCU_CANSUBBEDFRAMES_QUEUE_RECEIVE_TIMEOUT)) {
			if (RX == frameBuff.DataDirection) {
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <StartXbeeSendTask+0x134>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d16e      	bne.n	80010bc <StartXbeeSendTask+0x10c>
				/* Clear the buffer */
				memset(xbeeUartTxBuff, 0x00, R3TP_VER0_FRAME_SIZE);
 8000fde:	2214      	movs	r2, #20
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	483f      	ldr	r0, [pc, #252]	; (80010e0 <StartXbeeSendTask+0x130>)
 8000fe4:	f00b fdf9 	bl	800cbda <memset>

				/* Set VER and RES/SEQ field */
				xbeeUartTxBuff[0] = R3TP_VER0_VER_RES_SEQ_BYTE;
 8000fe8:	4b3d      	ldr	r3, [pc, #244]	; (80010e0 <StartXbeeSendTask+0x130>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	701a      	strb	r2, [r3, #0]

				/* Set the SEQ NUM field */
				xbeeUartTxBuff[1] = seqNum;
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <StartXbeeSendTask+0x138>)
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	4b3b      	ldr	r3, [pc, #236]	; (80010e0 <StartXbeeSendTask+0x130>)
 8000ff4:	705a      	strb	r2, [r3, #1]
				/* Increment the sequence number */
				seqNum = (seqNum < 255U) ? seqNum + 1 : 0U;
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <StartXbeeSendTask+0x138>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2bff      	cmp	r3, #255	; 0xff
 8000ffc:	d004      	beq.n	8001008 <StartXbeeSendTask+0x58>
 8000ffe:	4b3a      	ldr	r3, [pc, #232]	; (80010e8 <StartXbeeSendTask+0x138>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	3301      	adds	r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	e000      	b.n	800100a <StartXbeeSendTask+0x5a>
 8001008:	2300      	movs	r3, #0
 800100a:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <StartXbeeSendTask+0x138>)
 800100c:	7013      	strb	r3, [r2, #0]

				/* Set the END SEQ field */
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 2U] =
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <StartXbeeSendTask+0x130>)
 8001010:	22de      	movs	r2, #222	; 0xde
 8001012:	749a      	strb	r2, [r3, #18]
				R3TP_END_SEQ_LOW_BYTE;
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 1U] =
 8001014:	4b32      	ldr	r3, [pc, #200]	; (80010e0 <StartXbeeSendTask+0x130>)
 8001016:	22ed      	movs	r2, #237	; 0xed
 8001018:	74da      	strb	r2, [r3, #19]
				R3TP_END_SEQ_HIGH_BYTE;

				/* Set CAN ID field - note that the CAN ID is transmitted as little endian */
				xbeeUartTxBuff[4] = GETLSBOF16(frameBuff.Header.Rx.StdId);
 800101a:	4b32      	ldr	r3, [pc, #200]	; (80010e4 <StartXbeeSendTask+0x134>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b2f      	ldr	r3, [pc, #188]	; (80010e0 <StartXbeeSendTask+0x130>)
 8001022:	711a      	strb	r2, [r3, #4]
				xbeeUartTxBuff[5] = GETMSBOF16(frameBuff.Header.Rx.StdId);
 8001024:	4b2f      	ldr	r3, [pc, #188]	; (80010e4 <StartXbeeSendTask+0x134>)
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	b29b      	uxth	r3, r3
 800102a:	0a1b      	lsrs	r3, r3, #8
 800102c:	b29b      	uxth	r3, r3
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <StartXbeeSendTask+0x130>)
 8001032:	715a      	strb	r2, [r3, #5]

				/* Set the DLC field */
				xbeeUartTxBuff[8] = (uint8_t) frameBuff.Header.Rx.DLC;
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <StartXbeeSendTask+0x134>)
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4b29      	ldr	r3, [pc, #164]	; (80010e0 <StartXbeeSendTask+0x130>)
 800103c:	721a      	strb	r2, [r3, #8]

				/* Set the DATA field */
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 800103e:	2300      	movs	r3, #0
 8001040:	73fb      	strb	r3, [r7, #15]
 8001042:	e00b      	b.n	800105c <StartXbeeSendTask+0xac>
					xbeeUartTxBuff[9 + i] = frameBuff.Payload[i];
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	3309      	adds	r3, #9
 800104a:	4926      	ldr	r1, [pc, #152]	; (80010e4 <StartXbeeSendTask+0x134>)
 800104c:	440a      	add	r2, r1
 800104e:	f892 1020 	ldrb.w	r1, [r2, #32]
 8001052:	4a23      	ldr	r2, [pc, #140]	; (80010e0 <StartXbeeSendTask+0x130>)
 8001054:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	3301      	adds	r3, #1
 800105a:	73fb      	strb	r3, [r7, #15]
 800105c:	7bfa      	ldrb	r2, [r7, #15]
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <StartXbeeSendTask+0x134>)
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	429a      	cmp	r2, r3
 8001064:	d3ee      	bcc.n	8001044 <StartXbeeSendTask+0x94>
				}

				/* Calculate the CRC */
				if (osOK
						== osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT)) {
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <StartXbeeSendTask+0x13c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f04f 31ff 	mov.w	r1, #4294967295
 800106e:	4618      	mov	r0, r3
 8001070:	f008 fe36 	bl	8009ce0 <osMutexWait>
 8001074:	4603      	mov	r3, r0
				if (osOK
 8001076:	2b00      	cmp	r3, #0
 8001078:	d12c      	bne.n	80010d4 <StartXbeeSendTask+0x124>
					calculatedCrc =
							GET16LSBITS(
 800107a:	2205      	movs	r2, #5
 800107c:	4918      	ldr	r1, [pc, #96]	; (80010e0 <StartXbeeSendTask+0x130>)
 800107e:	481c      	ldr	r0, [pc, #112]	; (80010f0 <StartXbeeSendTask+0x140>)
 8001080:	f001 fb8c 	bl	800279c <HAL_CRC_Calculate>
 8001084:	4603      	mov	r3, r0
 8001086:	b29a      	uxth	r2, r3
					calculatedCrc =
 8001088:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <StartXbeeSendTask+0x144>)
 800108a:	801a      	strh	r2, [r3, #0]
									HAL_CRC_Calculate(&hcrc, (uint32_t*)xbeeUartTxBuff, R3TP_VER0_FRAME_SIZE / 4));
					osMutexRelease(crcMutexHandle);
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <StartXbeeSendTask+0x13c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f008 fe73 	bl	8009d7c <osMutexRelease>

					/* Set the CRC field - note that the CRC is transmitted as little endian */
					xbeeUartTxBuff[2] = GETLSBOF16(calculatedCrc);
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <StartXbeeSendTask+0x144>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <StartXbeeSendTask+0x130>)
 800109e:	709a      	strb	r2, [r3, #2]
					xbeeUartTxBuff[3] = GETMSBOF16(calculatedCrc);
 80010a0:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <StartXbeeSendTask+0x144>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <StartXbeeSendTask+0x130>)
 80010ac:	70da      	strb	r2, [r3, #3]
					LOGERROR("crcMutex timeout in xbeeSend\r\n");
					continue;
				}

				/* Transmit frame */
				HAL_UART_Transmit(&XBEE_UART_HANDLE, xbeeUartTxBuff,
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	2214      	movs	r2, #20
 80010b4:	490a      	ldr	r1, [pc, #40]	; (80010e0 <StartXbeeSendTask+0x130>)
 80010b6:	4810      	ldr	r0, [pc, #64]	; (80010f8 <StartXbeeSendTask+0x148>)
 80010b8:	f004 fb97 	bl	80057ea <HAL_UART_Transmit>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &xbeeSendHandle,
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <StartXbeeSendTask+0x14c>)
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	2300      	movs	r3, #0
 80010c2:	f04f 32ff 	mov.w	r2, #4294967295
 80010c6:	490e      	ldr	r1, [pc, #56]	; (8001100 <StartXbeeSendTask+0x150>)
 80010c8:	f009 fa70 	bl	800a5ac <xQueueGenericSend>
						WCU_REPORTTOWATCHDOG_QUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("xbeeSend failed to send to reportToWatchdogQueue\r\n");
		}

		osDelay(WCU_DEFAULT_TASK_DELAY);
 80010cc:	2001      	movs	r0, #1
 80010ce:	f008 fddb 	bl	8009c88 <osDelay>
 80010d2:	e776      	b.n	8000fc2 <StartXbeeSendTask+0x12>
					continue;
 80010d4:	bf00      	nop
		if (pdTRUE == xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 80010d6:	e774      	b.n	8000fc2 <StartXbeeSendTask+0x12>
 80010d8:	40020800 	.word	0x40020800
 80010dc:	20006538 	.word	0x20006538
 80010e0:	200002c4 	.word	0x200002c4
 80010e4:	200002d8 	.word	0x200002d8
 80010e8:	20000300 	.word	0x20000300
 80010ec:	2000640c 	.word	0x2000640c
 80010f0:	200062f8 	.word	0x200062f8
 80010f4:	20000302 	.word	0x20000302
 80010f8:	200064a0 	.word	0x200064a0
 80010fc:	20006304 	.word	0x20006304
 8001100:	20006300 	.word	0x20006300

08001104 <StartXbeeReceiveTask>:
 * @brief Function implementing the xbeeReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeReceiveTask */
void StartXbeeReceiveTask(void const *argument) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	static uint32_t subscription[R3TP_VER1_MAX_FRAME_NUM]; /* Buffer for telemetry subscription CAN IDs */

	/* Infinite loop */
	for (;;) {
		/* Listen for the subscription (VER1) frame */
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	2201      	movs	r2, #1
 8001112:	4962      	ldr	r1, [pc, #392]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001114:	4862      	ldr	r0, [pc, #392]	; (80012a0 <StartXbeeReceiveTask+0x19c>)
 8001116:	f004 fc01 	bl	800591c <HAL_UART_Receive>
		WCU_XBEE_UART_RX_TIMEOUT);
		/* Validate the VER and RES/SEQ field */
		if (R3TP_VER1_VER_RES_SEQ_BYTE == xbeeUartRxBuff[0]) {
 800111a:	4b60      	ldr	r3, [pc, #384]	; (800129c <StartXbeeReceiveTask+0x198>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b20      	cmp	r3, #32
 8001120:	f040 80b0 	bne.w	8001284 <StartXbeeReceiveTask+0x180>
			/* On valid version byte, receive SEQ NUM, CHECKSUM and FRAME NUM */
			HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff + 1, 7,
 8001124:	495f      	ldr	r1, [pc, #380]	; (80012a4 <StartXbeeReceiveTask+0x1a0>)
 8001126:	f04f 33ff 	mov.w	r3, #4294967295
 800112a:	2207      	movs	r2, #7
 800112c:	485c      	ldr	r0, [pc, #368]	; (80012a0 <StartXbeeReceiveTask+0x19c>)
 800112e:	f004 fbf5 	bl	800591c <HAL_UART_Receive>
			WCU_XBEE_UART_RX_TIMEOUT);

			/* Read the FRAME NUM field */
			frameNum = READAS32BIT(xbeeUartRxBuff[7], xbeeUartRxBuff[6],
 8001132:	4b5a      	ldr	r3, [pc, #360]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001134:	79db      	ldrb	r3, [r3, #7]
 8001136:	061a      	lsls	r2, r3, #24
 8001138:	4b58      	ldr	r3, [pc, #352]	; (800129c <StartXbeeReceiveTask+0x198>)
 800113a:	799b      	ldrb	r3, [r3, #6]
 800113c:	041b      	lsls	r3, r3, #16
 800113e:	431a      	orrs	r2, r3
 8001140:	4b56      	ldr	r3, [pc, #344]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001142:	795b      	ldrb	r3, [r3, #5]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	4313      	orrs	r3, r2
 8001148:	4a54      	ldr	r2, [pc, #336]	; (800129c <StartXbeeReceiveTask+0x198>)
 800114a:	7912      	ldrb	r2, [r2, #4]
 800114c:	4313      	orrs	r3, r2
 800114e:	461a      	mov	r2, r3
 8001150:	4b55      	ldr	r3, [pc, #340]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 8001152:	601a      	str	r2, [r3, #0]
					xbeeUartRxBuff[5], xbeeUartRxBuff[4]);

			/* Assert the payload won't overflow the buffer */
			if (frameNum > R3TP_VER1_MAX_FRAME_NUM) {
 8001154:	4b54      	ldr	r3, [pc, #336]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b1c      	cmp	r3, #28
 800115a:	f200 8097 	bhi.w	800128c <StartXbeeReceiveTask+0x188>
				LOGERROR("Invalid FRAME NUM in xbeeReceive\r\n");
				continue;
			}

			/* Receive the payload */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 800115e:	4953      	ldr	r1, [pc, #332]	; (80012ac <StartXbeeReceiveTask+0x1a8>)
 8001160:	4b51      	ldr	r3, [pc, #324]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	b29a      	uxth	r2, r3
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	484c      	ldr	r0, [pc, #304]	; (80012a0 <StartXbeeReceiveTask+0x19c>)
 8001170:	f004 fbd4 	bl	800591c <HAL_UART_Receive>
					R3TP_VER1_PAYLOAD_BEGIN(xbeeUartRxBuff), frameNum * 4,
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Receive the frame align bytes (two) and END SEQ (also two bytes) */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
					R3TP_VER1_EPILOGUE_BEGIN(xbeeUartRxBuff, frameNum), 4,
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 8001176:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 8001178:	3302      	adds	r3, #2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4a47      	ldr	r2, [pc, #284]	; (800129c <StartXbeeReceiveTask+0x198>)
 800117e:	1899      	adds	r1, r3, r2
 8001180:	f04f 33ff 	mov.w	r3, #4294967295
 8001184:	2204      	movs	r2, #4
 8001186:	4846      	ldr	r0, [pc, #280]	; (80012a0 <StartXbeeReceiveTask+0x19c>)
 8001188:	f004 fbc8 	bl	800591c <HAL_UART_Receive>
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Validate the END SEQ field */
			if ((R3TP_END_SEQ_LOW_BYTE
					!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum) - 2U])
 800118c:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3303      	adds	r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	3b02      	subs	r3, #2
 8001196:	4a41      	ldr	r2, [pc, #260]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001198:	5cd3      	ldrb	r3, [r2, r3]
			if ((R3TP_END_SEQ_LOW_BYTE
 800119a:	2bde      	cmp	r3, #222	; 0xde
 800119c:	d178      	bne.n	8001290 <StartXbeeReceiveTask+0x18c>
					|| (R3TP_END_SEQ_HIGH_BYTE
							!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum)
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3303      	adds	r3, #3
 80011a4:	009b      	lsls	r3, r3, #2
									- 1U])) {
 80011a6:	3b01      	subs	r3, #1
							!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum)
 80011a8:	4a3c      	ldr	r2, [pc, #240]	; (800129c <StartXbeeReceiveTask+0x198>)
 80011aa:	5cd3      	ldrb	r3, [r2, r3]
					|| (R3TP_END_SEQ_HIGH_BYTE
 80011ac:	2bed      	cmp	r3, #237	; 0xed
 80011ae:	d16f      	bne.n	8001290 <StartXbeeReceiveTask+0x18c>
				LOGERROR("Invalid END SEQ in xbeeReceive\r\n");
				continue;
			}

			/* Read the CHECKSUM */
			readCrc = READAS16BIT(xbeeUartRxBuff[3], xbeeUartRxBuff[2]);
 80011b0:	4b3a      	ldr	r3, [pc, #232]	; (800129c <StartXbeeReceiveTask+0x198>)
 80011b2:	78db      	ldrb	r3, [r3, #3]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b38      	ldr	r3, [pc, #224]	; (800129c <StartXbeeReceiveTask+0x198>)
 80011ba:	789b      	ldrb	r3, [r3, #2]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b3a      	ldr	r3, [pc, #232]	; (80012b0 <StartXbeeReceiveTask+0x1ac>)
 80011c6:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(xbeeUartRxBuff + 2U, 0x00, 2U);
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <StartXbeeReceiveTask+0x1b0>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f00b fd03 	bl	800cbda <memset>

			if (osOK == osMutexWait(crcMutexHandle, WCU_CRC_MUTEX_TIMEOUT)) {
 80011d4:	4b38      	ldr	r3, [pc, #224]	; (80012b8 <StartXbeeReceiveTask+0x1b4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	4618      	mov	r0, r3
 80011de:	f008 fd7f 	bl	8009ce0 <osMutexWait>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d155      	bne.n	8001294 <StartXbeeReceiveTask+0x190>
				/* Calculate the CRC */
				calculatedCrc =
						GET16LSBITS(
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3303      	adds	r3, #3
 80011ee:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80011f2:	461a      	mov	r2, r3
 80011f4:	4929      	ldr	r1, [pc, #164]	; (800129c <StartXbeeReceiveTask+0x198>)
 80011f6:	4831      	ldr	r0, [pc, #196]	; (80012bc <StartXbeeReceiveTask+0x1b8>)
 80011f8:	f001 fad0 	bl	800279c <HAL_CRC_Calculate>
 80011fc:	4603      	mov	r3, r0
 80011fe:	b29a      	uxth	r2, r3
				calculatedCrc =
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <StartXbeeReceiveTask+0x1bc>)
 8001202:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t* )xbeeUartRxBuff, R3TP_VER1_MESSAGE_LENGTH(frameNum)/4));
				osMutexRelease(crcMutexHandle);
 8001204:	4b2c      	ldr	r3, [pc, #176]	; (80012b8 <StartXbeeReceiveTask+0x1b4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f008 fdb7 	bl	8009d7c <osMutexRelease>
				LOGERROR("crcMutex timeout in xbeeReceive\r\n");
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 800120e:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <StartXbeeReceiveTask+0x1ac>)
 8001210:	881a      	ldrh	r2, [r3, #0]
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <StartXbeeReceiveTask+0x1bc>)
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	429a      	cmp	r2, r3
 8001218:	d13e      	bne.n	8001298 <StartXbeeReceiveTask+0x194>
				LOGERROR("Invalid CRC in xbeeReceive\r\n");
				continue;
			}

			/* Read the payload */
			for (uint32_t i = 0; i < frameNum; i += 1) {
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	e025      	b.n	800126c <StartXbeeReceiveTask+0x168>
				subscription[i] =
						READAS32BIT(
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	330b      	adds	r3, #11
 8001226:	4a1d      	ldr	r2, [pc, #116]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001228:	4413      	add	r3, r2
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	061a      	lsls	r2, r3, #24
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	330a      	adds	r3, #10
 8001234:	4919      	ldr	r1, [pc, #100]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001236:	440b      	add	r3, r1
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	041b      	lsls	r3, r3, #16
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	3309      	adds	r3, #9
 8001244:	4915      	ldr	r1, [pc, #84]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001246:	440b      	add	r3, r1
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	4313      	orrs	r3, r2
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	3202      	adds	r2, #2
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4911      	ldr	r1, [pc, #68]	; (800129c <StartXbeeReceiveTask+0x198>)
 8001256:	440a      	add	r2, r1
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	4313      	orrs	r3, r2
 800125c:	4619      	mov	r1, r3
				subscription[i] =
 800125e:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <StartXbeeReceiveTask+0x1c0>)
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint32_t i = 0; i < frameNum; i += 1) {
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	3301      	adds	r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	429a      	cmp	r2, r3
 8001274:	d3d4      	bcc.n	8001220 <StartXbeeReceiveTask+0x11c>
			 * TODO:
			 * Write subscription to SD
			 */

			/* Set the CAN filters */
			setCanFilterList(&hcan1, subscription, frameNum);
 8001276:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <StartXbeeReceiveTask+0x1a4>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4911      	ldr	r1, [pc, #68]	; (80012c4 <StartXbeeReceiveTask+0x1c0>)
 800127e:	4812      	ldr	r0, [pc, #72]	; (80012c8 <StartXbeeReceiveTask+0x1c4>)
 8001280:	f000 f8e6 	bl	8001450 <setCanFilterList>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001284:	2001      	movs	r0, #1
 8001286:	f008 fcff 	bl	8009c88 <osDelay>
 800128a:	e73f      	b.n	800110c <StartXbeeReceiveTask+0x8>
				continue;
 800128c:	bf00      	nop
 800128e:	e73d      	b.n	800110c <StartXbeeReceiveTask+0x8>
				continue;
 8001290:	bf00      	nop
 8001292:	e73b      	b.n	800110c <StartXbeeReceiveTask+0x8>
				continue;
 8001294:	bf00      	nop
 8001296:	e739      	b.n	800110c <StartXbeeReceiveTask+0x8>
				continue;
 8001298:	bf00      	nop
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 800129a:	e737      	b.n	800110c <StartXbeeReceiveTask+0x8>
 800129c:	20000304 	.word	0x20000304
 80012a0:	200064a0 	.word	0x200064a0
 80012a4:	20000305 	.word	0x20000305
 80012a8:	20000380 	.word	0x20000380
 80012ac:	2000030c 	.word	0x2000030c
 80012b0:	20000384 	.word	0x20000384
 80012b4:	20000306 	.word	0x20000306
 80012b8:	2000640c 	.word	0x2000640c
 80012bc:	200062f8 	.word	0x200062f8
 80012c0:	20000386 	.word	0x20000386
 80012c4:	20000388 	.word	0x20000388
 80012c8:	20006584 	.word	0x20006584

080012cc <StartGnssReceiveTask>:
 * @brief Function implementing the gnssReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGnssReceiveTask */
void StartGnssReceiveTask(void const *argument) {
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &gnssReceiveHandle,
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <StartGnssReceiveTask+0x20>)
 80012d6:	6818      	ldr	r0, [r3, #0]
 80012d8:	2300      	movs	r3, #0
 80012da:	f04f 32ff 	mov.w	r2, #4294967295
 80012de:	4904      	ldr	r1, [pc, #16]	; (80012f0 <StartGnssReceiveTask+0x24>)
 80012e0:	f009 f964 	bl	800a5ac <xQueueGenericSend>
						WCU_REPORTTOWATCHDOG_QUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("gnssReceive failed to send to reportToWatchdogQueue\r\n");
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f008 fccf 	bl	8009c88 <osDelay>
		if (pdTRUE
 80012ea:	e7f3      	b.n	80012d4 <StartGnssReceiveTask+0x8>
 80012ec:	20006304 	.word	0x20006304
 80012f0:	20006410 	.word	0x20006410

080012f4 <StartRfReceiveTask>:
 * @brief Function implementing the rfReceive thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfReceiveTask */
void StartRfReceiveTask(void const *argument) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &rfReceiveHandle,
 80012fc:	4b05      	ldr	r3, [pc, #20]	; (8001314 <StartRfReceiveTask+0x20>)
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	f04f 32ff 	mov.w	r2, #4294967295
 8001306:	4904      	ldr	r1, [pc, #16]	; (8001318 <StartRfReceiveTask+0x24>)
 8001308:	f009 f950 	bl	800a5ac <xQueueGenericSend>
						WCU_REPORTTOWATCHDOG_QUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("rfReceive failed to send to reportToWatchdogQueue\r\n");
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800130c:	2001      	movs	r0, #1
 800130e:	f008 fcbb 	bl	8009c88 <osDelay>
		if (pdTRUE
 8001312:	e7f3      	b.n	80012fc <StartRfReceiveTask+0x8>
 8001314:	20006304 	.word	0x20006304
 8001318:	200065b0 	.word	0x200065b0

0800131c <StartCanGatekeeperTask>:
 * @brief Function implementing the canGatekeeper thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanGatekeeperTask */
void StartCanGatekeeperTask(void const *argument) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	static CanFrameTypedef frameBuff; /* CAN frame buffer */
	static uint32_t dummy; /* CAN Tx mailbox */
	/* Infinite loop */
	for (;;) {
		/* Check for outgoing messages */
		if (pdTRUE == xQueueReceive(canTransmitQueueHandle, &frameBuff,
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <StartCanGatekeeperTask+0x78>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2200      	movs	r2, #0
 800132a:	491b      	ldr	r1, [pc, #108]	; (8001398 <StartCanGatekeeperTask+0x7c>)
 800132c:	4618      	mov	r0, r3
 800132e:	f009 fb55 	bl	800a9dc <xQueueReceive>
 8001332:	4603      	mov	r3, r0
 8001334:	2b01      	cmp	r3, #1
 8001336:	d109      	bne.n	800134c <StartCanGatekeeperTask+0x30>
		WCU_CANTRANSMIT_QUEUE_RECEIVE_TIMEOUT)) {
			/* Validate the DataDirection member */
			if (TX == frameBuff.DataDirection) {
 8001338:	4b17      	ldr	r3, [pc, #92]	; (8001398 <StartCanGatekeeperTask+0x7c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d105      	bne.n	800134c <StartCanGatekeeperTask+0x30>
				/* Send the message */
				HAL_CAN_AddTxMessage(&hcan1, &frameBuff.Header.Tx,
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <StartCanGatekeeperTask+0x80>)
 8001342:	4a17      	ldr	r2, [pc, #92]	; (80013a0 <StartCanGatekeeperTask+0x84>)
 8001344:	4917      	ldr	r1, [pc, #92]	; (80013a4 <StartCanGatekeeperTask+0x88>)
 8001346:	4818      	ldr	r0, [pc, #96]	; (80013a8 <StartCanGatekeeperTask+0x8c>)
 8001348:	f000 ff14 	bl	8002174 <HAL_CAN_AddTxMessage>
				LOGERROR("Invalid DataDirection in canGatekeeper\r\n");
			}
		}

		/* Check for incoming messages */
		if (0U < HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0)) {
 800134c:	2100      	movs	r1, #0
 800134e:	4816      	ldr	r0, [pc, #88]	; (80013a8 <StartCanGatekeeperTask+0x8c>)
 8001350:	f001 f8fd 	bl	800254e <HAL_CAN_GetRxFifoFillLevel>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d010      	beq.n	800137c <StartCanGatekeeperTask+0x60>
			/* Receive the message */
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &frameBuff.Header.Rx,
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <StartCanGatekeeperTask+0x84>)
 800135c:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <StartCanGatekeeperTask+0x88>)
 800135e:	2100      	movs	r1, #0
 8001360:	4811      	ldr	r0, [pc, #68]	; (80013a8 <StartCanGatekeeperTask+0x8c>)
 8001362:	f000 ffe2 	bl	800232a <HAL_CAN_GetRxMessage>
					frameBuff.Payload);
			/* Set the DataDirection member in the CAN frame struct */
			frameBuff.DataDirection = RX;
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <StartCanGatekeeperTask+0x7c>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
			/* Send the frame to the telemetry queue */
			if (pdTRUE
					!= xQueueSend(canReceiveQueueHandle, &frameBuff,
 800136c:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <StartCanGatekeeperTask+0x90>)
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	f04f 32ff 	mov.w	r2, #4294967295
 8001376:	4908      	ldr	r1, [pc, #32]	; (8001398 <StartCanGatekeeperTask+0x7c>)
 8001378:	f009 f918 	bl	800a5ac <xQueueGenericSend>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &canGatekeeperHandle,
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <StartCanGatekeeperTask+0x94>)
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	2300      	movs	r3, #0
 8001382:	f04f 32ff 	mov.w	r2, #4294967295
 8001386:	490b      	ldr	r1, [pc, #44]	; (80013b4 <StartCanGatekeeperTask+0x98>)
 8001388:	f009 f910 	bl	800a5ac <xQueueGenericSend>
						WCU_REPORTTOWATCHDOG_QUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR(
					"canGatekeeper failed to send to reportToWatchdogQueue\r\n");
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800138c:	2001      	movs	r0, #1
 800138e:	f008 fc7b 	bl	8009c88 <osDelay>
		if (pdTRUE == xQueueReceive(canTransmitQueueHandle, &frameBuff,
 8001392:	e7c7      	b.n	8001324 <StartCanGatekeeperTask+0x8>
 8001394:	2000653c 	.word	0x2000653c
 8001398:	200003f8 	.word	0x200003f8
 800139c:	20000420 	.word	0x20000420
 80013a0:	20000418 	.word	0x20000418
 80013a4:	200003fc 	.word	0x200003fc
 80013a8:	20006584 	.word	0x20006584
 80013ac:	20006538 	.word	0x20006538
 80013b0:	20006304 	.word	0x20006304
 80013b4:	20006540 	.word	0x20006540

080013b8 <StartSdGatekeeperTask>:
 * @brief Function implementing the sdGatekeeper thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartSdGatekeeperTask */
void StartSdGatekeeperTask(void const *argument) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
	static FIL subscriptionFile; /* Telemetry subscription file object structure */
	static uint8_t errorLogBuff[50]; /* Error message buffer */
	static UINT bytesWritten; /* Buffer for the number of bytes written */

	/* Mount a logical drive */
	while (FR_OK != f_mount(&fatFs, SDPath, 1)) {
 80013c0:	e000      	b.n	80013c4 <StartSdGatekeeperTask+0xc>
		__NOP();
 80013c2:	bf00      	nop
	while (FR_OK != f_mount(&fatFs, SDPath, 1)) {
 80013c4:	2201      	movs	r2, #1
 80013c6:	490f      	ldr	r1, [pc, #60]	; (8001404 <StartSdGatekeeperTask+0x4c>)
 80013c8:	480f      	ldr	r0, [pc, #60]	; (8001408 <StartSdGatekeeperTask+0x50>)
 80013ca:	f007 fe6b 	bl	80090a4 <f_mount>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d1f6      	bne.n	80013c2 <StartSdGatekeeperTask+0xa>
		 * TODO
		 */
		/* On incoming error message */
		{
			/* Open the error log file */
			if (FR_OK == f_open(&errorLogFile, WCU_ERROR_LOG_FILE_PATH,
 80013d4:	2232      	movs	r2, #50	; 0x32
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <StartSdGatekeeperTask+0x54>)
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <StartSdGatekeeperTask+0x58>)
 80013da:	f007 fec7 	bl	800916c <f_open>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10b      	bne.n	80013fc <StartSdGatekeeperTask+0x44>
			FA_WRITE | FA_OPEN_APPEND)) {
				/* Write the error message to the log */
				f_write(&errorLogFile, errorLogBuff,
 80013e4:	480b      	ldr	r0, [pc, #44]	; (8001414 <StartSdGatekeeperTask+0x5c>)
 80013e6:	f7fe fef3 	bl	80001d0 <strlen>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <StartSdGatekeeperTask+0x60>)
 80013ee:	4909      	ldr	r1, [pc, #36]	; (8001414 <StartSdGatekeeperTask+0x5c>)
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <StartSdGatekeeperTask+0x58>)
 80013f2:	f008 f88e 	bl	8009512 <f_write>
						strlen((const char*) errorLogBuff), &bytesWritten);
				/* Close the file */
				f_close(&errorLogFile);
 80013f6:	4806      	ldr	r0, [pc, #24]	; (8001410 <StartSdGatekeeperTask+0x58>)
 80013f8:	f008 fad7 	bl	80099aa <f_close>
			}
		}

		/* Wait for new subscription */

		osDelay(WCU_DEFAULT_TASK_DELAY);
 80013fc:	2001      	movs	r0, #1
 80013fe:	f008 fc43 	bl	8009c88 <osDelay>
			if (FR_OK == f_open(&errorLogFile, WCU_ERROR_LOG_FILE_PATH,
 8001402:	e7e7      	b.n	80013d4 <StartSdGatekeeperTask+0x1c>
 8001404:	200065fc 	.word	0x200065fc
 8001408:	20000424 	.word	0x20000424
 800140c:	0800cd7c 	.word	0x0800cd7c
 8001410:	2000145c 	.word	0x2000145c
 8001414:	2000248c 	.word	0x2000248c
 8001418:	200024c0 	.word	0x200024c0

0800141c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a04      	ldr	r2, [pc, #16]	; (800143c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d101      	bne.n	8001432 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800142e:	f000 fc83 	bl	8001d38 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40001000 	.word	0x40001000

08001440 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
	...

08001450 <setCanFilterList>:
 * @param hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @param ids Pointer to an array of 32-bit CAN IDs to filter for
 * @param count Length of the ids array
 */
void setCanFilterList(CAN_HandleTypeDef *hcan, uint32_t* ids, uint32_t count) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	; 0x40
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	/* Assert valid ids array length */
	if(count <= CAN_FILTERBANKS_COUNT * 4) {
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b70      	cmp	r3, #112	; 0x70
 8001460:	d878      	bhi.n	8001554 <setCanFilterList+0x104>
		/* Prepare the filter configuration structure */
		CAN_FilterTypeDef filterConfig;
		/* Select the CAN FIFO to filter */
		filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
		/* Select the filter mode as IDLIST - CAN IDs will be stored in the filter bank registers */
		filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001466:	2301      	movs	r3, #1
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
		/* Set the filter scale as 16 bit, since only the standard 11-bit CAN IDs are used - this allows four IDs per bank */
		filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Clear the previous filter config */
		filterConfig.FilterIdHigh = 0x00000000U;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
		filterConfig.FilterIdLow = 0x00000000U;
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
		filterConfig.FilterMaskIdHigh = 0x00000000U;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
		filterConfig.FilterMaskIdLow = 0x00000000U;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
		filterConfig.FilterActivation = DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 8001482:	2300      	movs	r3, #0
 8001484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001486:	e00a      	b.n	800149e <setCanFilterList+0x4e>
			filterConfig.FilterBank = i;
 8001488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_CAN_ConfigFilter(hcan, &filterConfig);
 800148c:	f107 0310 	add.w	r3, r7, #16
 8001490:	4619      	mov	r1, r3
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f000 fd8e 	bl	8001fb4 <HAL_CAN_ConfigFilter>
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 8001498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800149a:	3301      	adds	r3, #1
 800149c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800149e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014a0:	2b1b      	cmp	r3, #27
 80014a2:	d9f1      	bls.n	8001488 <setCanFilterList+0x38>
		}

		/* Set the new filter */
		filterConfig.FilterActivation = ENABLE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < count; i += 1) {
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80014ac:	e04e      	b.n	800154c <setCanFilterList+0xfc>
			switch(i % 4) {
 80014ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d82b      	bhi.n	8001510 <setCanFilterList+0xc0>
 80014b8:	a201      	add	r2, pc, #4	; (adr r2, 80014c0 <setCanFilterList+0x70>)
 80014ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014be:	bf00      	nop
 80014c0:	080014d1 	.word	0x080014d1
 80014c4:	080014e1 	.word	0x080014e1
 80014c8:	080014f1 	.word	0x080014f1
 80014cc:	08001501 	.word	0x08001501
			case 0:
				filterConfig.FilterIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 80014d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	4413      	add	r3, r2
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	015b      	lsls	r3, r3, #5
 80014dc:	613b      	str	r3, [r7, #16]
				break;
 80014de:	e017      	b.n	8001510 <setCanFilterList+0xc0>
			case 1:
				filterConfig.FilterIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 80014e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	68ba      	ldr	r2, [r7, #8]
 80014e6:	4413      	add	r3, r2
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	015b      	lsls	r3, r3, #5
 80014ec:	617b      	str	r3, [r7, #20]
				break;
 80014ee:	e00f      	b.n	8001510 <setCanFilterList+0xc0>
			case 2:
				filterConfig.FilterMaskIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 80014f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	4413      	add	r3, r2
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	015b      	lsls	r3, r3, #5
 80014fc:	61bb      	str	r3, [r7, #24]
				break;
 80014fe:	e007      	b.n	8001510 <setCanFilterList+0xc0>
			case 3:
				filterConfig.FilterMaskIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	4413      	add	r3, r2
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	015b      	lsls	r3, r3, #5
 800150c:	61fb      	str	r3, [r7, #28]
				break;
 800150e:	bf00      	nop
			}

			/* If the filter bank is fully configured or there are no more IDs, call HAL_CAN_ConfigFilter */
			if((i % 4 == 3) || (i + 1 == count)) {
 8001510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	2b03      	cmp	r3, #3
 8001518:	d004      	beq.n	8001524 <setCanFilterList+0xd4>
 800151a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800151c:	3301      	adds	r3, #1
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	429a      	cmp	r2, r3
 8001522:	d110      	bne.n	8001546 <setCanFilterList+0xf6>
				/* Configure the filter */
				HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	68f8      	ldr	r0, [r7, #12]
 800152c:	f000 fd42 	bl	8001fb4 <HAL_CAN_ConfigFilter>
				/* On fully configured filter bank, proceed to the next one */
				filterConfig.FilterBank += 1;
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	3301      	adds	r3, #1
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
				/* Clear the config structure ID members */
				filterConfig.FilterIdHigh = 0x00000000U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
				filterConfig.FilterIdLow = 0x00000000U;
 800153a:	2300      	movs	r3, #0
 800153c:	617b      	str	r3, [r7, #20]
				filterConfig.FilterMaskIdHigh = 0x00000000U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
				filterConfig.FilterMaskIdLow = 0x00000000U;
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < count; i += 1) {
 8001546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001548:	3301      	adds	r3, #1
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38
 800154c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	429a      	cmp	r2, r3
 8001552:	d3ac      	bcc.n	80014ae <setCanFilterList+0x5e>
			}
		}
	}
}
 8001554:	bf00      	nop
 8001556:	3740      	adds	r7, #64	; 0x40
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_MspInit+0x54>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	4a11      	ldr	r2, [pc, #68]	; (80015b0 <HAL_MspInit+0x54>)
 800156c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001570:	6453      	str	r3, [r2, #68]	; 0x44
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_MspInit+0x54>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_MspInit+0x54>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_MspInit+0x54>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_MspInit+0x54>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	603b      	str	r3, [r7, #0]
 8001598:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	210f      	movs	r1, #15
 800159e:	f06f 0001 	mvn.w	r0, #1
 80015a2:	f001 f8b5 	bl	8002710 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a19      	ldr	r2, [pc, #100]	; (8001638 <HAL_CAN_MspInit+0x84>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d12c      	bne.n	8001630 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	613b      	str	r3, [r7, #16]
 80015da:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_CAN_MspInit+0x88>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_CAN_MspInit+0x88>)
 80015e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_CAN_MspInit+0x88>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_CAN_MspInit+0x88>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_CAN_MspInit+0x88>)
 80015fc:	f043 0302 	orr.w	r3, r3, #2
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_CAN_MspInit+0x88>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800160e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001614:	2302      	movs	r3, #2
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161c:	2303      	movs	r3, #3
 800161e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001620:	2309      	movs	r3, #9
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001624:	f107 0314 	add.w	r3, r7, #20
 8001628:	4619      	mov	r1, r3
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <HAL_CAN_MspInit+0x8c>)
 800162c:	f001 fc86 	bl	8002f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001630:	bf00      	nop
 8001632:	3728      	adds	r7, #40	; 0x28
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	40006400 	.word	0x40006400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020400 	.word	0x40020400

08001644 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <HAL_CRC_MspInit+0x3c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d10d      	bne.n	8001672 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_CRC_MspInit+0x40>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165e:	4a09      	ldr	r2, [pc, #36]	; (8001684 <HAL_CRC_MspInit+0x40>)
 8001660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001664:	6313      	str	r3, [r2, #48]	; 0x30
 8001666:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_CRC_MspInit+0x40>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	40023000 	.word	0x40023000
 8001684:	40023800 	.word	0x40023800

08001688 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b08a      	sub	sp, #40	; 0x28
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a68      	ldr	r2, [pc, #416]	; (8001848 <HAL_SD_MspInit+0x1c0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	f040 80c9 	bne.w	800183e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	4a65      	ldr	r2, [pc, #404]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016ba:	6453      	str	r3, [r2, #68]	; 0x44
 80016bc:	4b63      	ldr	r3, [pc, #396]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4b5f      	ldr	r3, [pc, #380]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	4a5e      	ldr	r2, [pc, #376]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016d2:	f043 0304 	orr.w	r3, r3, #4
 80016d6:	6313      	str	r3, [r2, #48]	; 0x30
 80016d8:	4b5c      	ldr	r3, [pc, #368]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e4:	2300      	movs	r3, #0
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	4b58      	ldr	r3, [pc, #352]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	4a57      	ldr	r2, [pc, #348]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016ee:	f043 0308 	orr.w	r3, r3, #8
 80016f2:	6313      	str	r3, [r2, #48]	; 0x30
 80016f4:	4b55      	ldr	r3, [pc, #340]	; (800184c <HAL_SD_MspInit+0x1c4>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	f003 0308 	and.w	r3, r3, #8
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001700:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001704:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001706:	2302      	movs	r3, #2
 8001708:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170e:	2303      	movs	r3, #3
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001712:	230c      	movs	r3, #12
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001716:	f107 0314 	add.w	r3, r7, #20
 800171a:	4619      	mov	r1, r3
 800171c:	484c      	ldr	r0, [pc, #304]	; (8001850 <HAL_SD_MspInit+0x1c8>)
 800171e:	f001 fc0d 	bl	8002f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001722:	2304      	movs	r3, #4
 8001724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001726:	2302      	movs	r3, #2
 8001728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001732:	230c      	movs	r3, #12
 8001734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001736:	f107 0314 	add.w	r3, r7, #20
 800173a:	4619      	mov	r1, r3
 800173c:	4845      	ldr	r0, [pc, #276]	; (8001854 <HAL_SD_MspInit+0x1cc>)
 800173e:	f001 fbfd 	bl	8002f3c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001742:	4b45      	ldr	r3, [pc, #276]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001744:	4a45      	ldr	r2, [pc, #276]	; (800185c <HAL_SD_MspInit+0x1d4>)
 8001746:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001748:	4b43      	ldr	r3, [pc, #268]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 800174a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800174e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001750:	4b41      	ldr	r3, [pc, #260]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001756:	4b40      	ldr	r3, [pc, #256]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800175c:	4b3e      	ldr	r3, [pc, #248]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 800175e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001762:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001766:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800176c:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 800176e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001772:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001774:	4b38      	ldr	r3, [pc, #224]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001776:	2220      	movs	r2, #32
 8001778:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001780:	4b35      	ldr	r3, [pc, #212]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001782:	2204      	movs	r2, #4
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001788:	2203      	movs	r2, #3
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800178c:	4b32      	ldr	r3, [pc, #200]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 800178e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001794:	4b30      	ldr	r3, [pc, #192]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 8001796:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800179a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800179c:	482e      	ldr	r0, [pc, #184]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 800179e:	f001 f831 	bl	8002804 <HAL_DMA_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80017a8:	f7ff fe4a 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a2a      	ldr	r2, [pc, #168]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
 80017b2:	4a29      	ldr	r2, [pc, #164]	; (8001858 <HAL_SD_MspInit+0x1d0>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017ba:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <HAL_SD_MspInit+0x1dc>)
 80017bc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80017be:	4b28      	ldr	r3, [pc, #160]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017c4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017cc:	4b24      	ldr	r3, [pc, #144]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017d8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017da:	4b21      	ldr	r3, [pc, #132]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017e8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017ec:	2220      	movs	r2, #32
 80017ee:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80017f6:	4b1a      	ldr	r3, [pc, #104]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017f8:	2204      	movs	r2, #4
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80017fc:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 80017fe:	2203      	movs	r2, #3
 8001800:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001802:	4b17      	ldr	r3, [pc, #92]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 8001804:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 800180c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001810:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001812:	4813      	ldr	r0, [pc, #76]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 8001814:	f000 fff6 	bl	8002804 <HAL_DMA_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800181e:	f7ff fe0f 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a0e      	ldr	r2, [pc, #56]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 8001826:	63da      	str	r2, [r3, #60]	; 0x3c
 8001828:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <HAL_SD_MspInit+0x1d8>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2105      	movs	r1, #5
 8001832:	2031      	movs	r0, #49	; 0x31
 8001834:	f000 ff6c 	bl	8002710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001838:	2031      	movs	r0, #49	; 0x31
 800183a:	f000 ff85 	bl	8002748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3728      	adds	r7, #40	; 0x28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40023800 	.word	0x40023800
 8001850:	40020800 	.word	0x40020800
 8001854:	40020c00 	.word	0x40020c00
 8001858:	20006248 	.word	0x20006248
 800185c:	40026458 	.word	0x40026458
 8001860:	200063ac 	.word	0x200063ac
 8001864:	400264a0 	.word	0x400264a0

08001868 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08a      	sub	sp, #40	; 0x28
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a19      	ldr	r2, [pc, #100]	; (80018ec <HAL_SPI_MspInit+0x84>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d12b      	bne.n	80018e2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 8001890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 8001894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001898:	6453      	str	r3, [r2, #68]	; 0x44
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a10      	ldr	r2, [pc, #64]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 80018b0:	f043 0301 	orr.w	r3, r3, #1
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_SPI_MspInit+0x88>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SP1_SCK_Pin|RF_SPI1_MISO_Pin|RF_SPI1_MOSI_Pin;
 80018c2:	23e0      	movs	r3, #224	; 0xe0
 80018c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c6:	2302      	movs	r3, #2
 80018c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	2303      	movs	r3, #3
 80018d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018d2:	2305      	movs	r3, #5
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <HAL_SPI_MspInit+0x8c>)
 80018de:	f001 fb2d 	bl	8002f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	; 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40013000 	.word	0x40013000
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020000 	.word	0x40020000

080018f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b090      	sub	sp, #64	; 0x40
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a7c      	ldr	r2, [pc, #496]	; (8001b08 <HAL_UART_MspInit+0x210>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12c      	bne.n	8001974 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	62bb      	str	r3, [r7, #40]	; 0x28
 800191e:	4b7b      	ldr	r3, [pc, #492]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a7a      	ldr	r2, [pc, #488]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001924:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b78      	ldr	r3, [pc, #480]	; (8001b0c <HAL_UART_MspInit+0x214>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
 8001934:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
 800193a:	4b74      	ldr	r3, [pc, #464]	; (8001b0c <HAL_UART_MspInit+0x214>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a73      	ldr	r2, [pc, #460]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b71      	ldr	r3, [pc, #452]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = XBEE_UART3_TX_Pin|XBEE_UART3_RX_Pin;
 8001952:	2303      	movs	r3, #3
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800195a:	2301      	movs	r3, #1
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001962:	2308      	movs	r3, #8
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800196a:	4619      	mov	r1, r3
 800196c:	4868      	ldr	r0, [pc, #416]	; (8001b10 <HAL_UART_MspInit+0x218>)
 800196e:	f001 fae5 	bl	8002f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001972:	e0c5      	b.n	8001b00 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a66      	ldr	r2, [pc, #408]	; (8001b14 <HAL_UART_MspInit+0x21c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d15c      	bne.n	8001a38 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
 8001982:	4b62      	ldr	r3, [pc, #392]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	4a61      	ldr	r2, [pc, #388]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001988:	f043 0310 	orr.w	r3, r3, #16
 800198c:	6453      	str	r3, [r2, #68]	; 0x44
 800198e:	4b5f      	ldr	r3, [pc, #380]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	623b      	str	r3, [r7, #32]
 8001998:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	4b5b      	ldr	r3, [pc, #364]	; (8001b0c <HAL_UART_MspInit+0x214>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a5a      	ldr	r2, [pc, #360]	; (8001b0c <HAL_UART_MspInit+0x214>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b58      	ldr	r3, [pc, #352]	; (8001b0c <HAL_UART_MspInit+0x214>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = BT_UART1_TX_Pin|BT_UART1_RX_Pin;
 80019b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019c8:	2307      	movs	r3, #7
 80019ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	484f      	ldr	r0, [pc, #316]	; (8001b10 <HAL_UART_MspInit+0x218>)
 80019d4:	f001 fab2 	bl	8002f3c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80019d8:	4b4f      	ldr	r3, [pc, #316]	; (8001b18 <HAL_UART_MspInit+0x220>)
 80019da:	4a50      	ldr	r2, [pc, #320]	; (8001b1c <HAL_UART_MspInit+0x224>)
 80019dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80019de:	4b4e      	ldr	r3, [pc, #312]	; (8001b18 <HAL_UART_MspInit+0x220>)
 80019e0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019e6:	4b4c      	ldr	r3, [pc, #304]	; (8001b18 <HAL_UART_MspInit+0x220>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ec:	4b4a      	ldr	r3, [pc, #296]	; (8001b18 <HAL_UART_MspInit+0x220>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019f2:	4b49      	ldr	r3, [pc, #292]	; (8001b18 <HAL_UART_MspInit+0x220>)
 80019f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019fa:	4b47      	ldr	r3, [pc, #284]	; (8001b18 <HAL_UART_MspInit+0x220>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a00:	4b45      	ldr	r3, [pc, #276]	; (8001b18 <HAL_UART_MspInit+0x220>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001a06:	4b44      	ldr	r3, [pc, #272]	; (8001b18 <HAL_UART_MspInit+0x220>)
 8001a08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a0c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a0e:	4b42      	ldr	r3, [pc, #264]	; (8001b18 <HAL_UART_MspInit+0x220>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a14:	4b40      	ldr	r3, [pc, #256]	; (8001b18 <HAL_UART_MspInit+0x220>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001a1a:	483f      	ldr	r0, [pc, #252]	; (8001b18 <HAL_UART_MspInit+0x220>)
 8001a1c:	f000 fef2 	bl	8002804 <HAL_DMA_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001a26:	f7ff fd0b 	bl	8001440 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a3a      	ldr	r2, [pc, #232]	; (8001b18 <HAL_UART_MspInit+0x220>)
 8001a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a30:	4a39      	ldr	r2, [pc, #228]	; (8001b18 <HAL_UART_MspInit+0x220>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a36:	e063      	b.n	8001b00 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a38      	ldr	r2, [pc, #224]	; (8001b20 <HAL_UART_MspInit+0x228>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d12c      	bne.n	8001a9c <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	61bb      	str	r3, [r7, #24]
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a30      	ldr	r2, [pc, #192]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
 8001a62:	4b2a      	ldr	r3, [pc, #168]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	4a29      	ldr	r2, [pc, #164]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6e:	4b27      	ldr	r3, [pc, #156]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	617b      	str	r3, [r7, #20]
 8001a78:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7e:	2302      	movs	r3, #2
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	2303      	movs	r3, #3
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a8a:	2307      	movs	r3, #7
 8001a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	481e      	ldr	r0, [pc, #120]	; (8001b10 <HAL_UART_MspInit+0x218>)
 8001a96:	f001 fa51 	bl	8002f3c <HAL_GPIO_Init>
}
 8001a9a:	e031      	b.n	8001b00 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_UART_MspInit+0x22c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d12c      	bne.n	8001b00 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	4a17      	ldr	r2, [pc, #92]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001ab0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001acc:	f043 0302 	orr.w	r3, r3, #2
 8001ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_UART_MspInit+0x214>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_UART4_TX_Pin|GNSS_UART4_RX_Pin;
 8001ade:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aec:	2303      	movs	r3, #3
 8001aee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001af0:	2307      	movs	r3, #7
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af8:	4619      	mov	r1, r3
 8001afa:	480b      	ldr	r0, [pc, #44]	; (8001b28 <HAL_UART_MspInit+0x230>)
 8001afc:	f001 fa1e 	bl	8002f3c <HAL_GPIO_Init>
}
 8001b00:	bf00      	nop
 8001b02:	3740      	adds	r7, #64	; 0x40
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40004c00 	.word	0x40004c00
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40011000 	.word	0x40011000
 8001b18:	2000630c 	.word	0x2000630c
 8001b1c:	40026440 	.word	0x40026440
 8001b20:	40004400 	.word	0x40004400
 8001b24:	40004800 	.word	0x40004800
 8001b28:	40020400 	.word	0x40020400

08001b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08c      	sub	sp, #48	; 0x30
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	2036      	movs	r0, #54	; 0x36
 8001b42:	f000 fde5 	bl	8002710 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8001b46:	2036      	movs	r0, #54	; 0x36
 8001b48:	f000 fdfe 	bl	8002748 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	4b1e      	ldr	r3, [pc, #120]	; (8001bcc <HAL_InitTick+0xa0>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_InitTick+0xa0>)
 8001b56:	f043 0310 	orr.w	r3, r3, #16
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_InitTick+0xa0>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b68:	f107 0210 	add.w	r2, r7, #16
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4611      	mov	r1, r2
 8001b72:	4618      	mov	r0, r3
 8001b74:	f002 f81a 	bl	8003bac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b78:	f001 fff0 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8001b7c:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <HAL_InitTick+0xa4>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9b      	lsrs	r3, r3, #18
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001b8e:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_InitTick+0xac>)
 8001b90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b92:	4b10      	ldr	r3, [pc, #64]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001b94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b98:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba6:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001bae:	f003 fb91 	bl	80052d4 <HAL_TIM_Base_Init>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d104      	bne.n	8001bc2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001bb8:	4806      	ldr	r0, [pc, #24]	; (8001bd4 <HAL_InitTick+0xa8>)
 8001bba:	f003 fbc0 	bl	800533e <HAL_TIM_Base_Start_IT>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3730      	adds	r7, #48	; 0x30
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	200065b4 	.word	0x200065b4
 8001bd8:	40001000 	.word	0x40001000

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bee:	e7fe      	b.n	8001bee <HardFault_Handler+0x4>

08001bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf4:	e7fe      	b.n	8001bf4 <MemManage_Handler+0x4>

08001bf6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bfa:	e7fe      	b.n	8001bfa <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <SDIO_IRQHandler+0x10>)
 8001c16:	f002 fa65 	bl	80040e4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20006414 	.word	0x20006414

08001c24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <TIM6_DAC_IRQHandler+0x10>)
 8001c2a:	f003 fbac 	bl	8005386 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	200065b4 	.word	0x200065b4

08001c38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c3c:	4802      	ldr	r0, [pc, #8]	; (8001c48 <DMA2_Stream2_IRQHandler+0x10>)
 8001c3e:	f000 ff09 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000630c 	.word	0x2000630c

08001c4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001c50:	4802      	ldr	r0, [pc, #8]	; (8001c5c <DMA2_Stream3_IRQHandler+0x10>)
 8001c52:	f000 feff 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20006248 	.word	0x20006248

08001c60 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001c64:	4802      	ldr	r0, [pc, #8]	; (8001c70 <DMA2_Stream6_IRQHandler+0x10>)
 8001c66:	f000 fef5 	bl	8002a54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	200063ac 	.word	0x200063ac

08001c74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c78:	4b08      	ldr	r3, [pc, #32]	; (8001c9c <SystemInit+0x28>)
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <SystemInit+0x28>)
 8001c80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <SystemInit+0x28>)
 8001c8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ca4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ca6:	e003      	b.n	8001cb0 <LoopCopyDataInit>

08001ca8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001caa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cae:	3104      	adds	r1, #4

08001cb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cb0:	480b      	ldr	r0, [pc, #44]	; (8001ce0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001cb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001cb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cb8:	d3f6      	bcc.n	8001ca8 <CopyDataInit>
  ldr  r2, =_sbss
 8001cba:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cbc:	e002      	b.n	8001cc4 <LoopFillZerobss>

08001cbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001cbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cc0:	f842 3b04 	str.w	r3, [r2], #4

08001cc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cc8:	d3f9      	bcc.n	8001cbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001cca:	f7ff ffd3 	bl	8001c74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cce:	f00a ff55 	bl	800cb7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cd2:	f7fe fc1f 	bl	8000514 <main>
  bx  lr    
 8001cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cdc:	0800ceac 	.word	0x0800ceac
  ldr  r0, =_sdata
 8001ce0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ce4:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001ce8:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8001cec:	200086a8 	.word	0x200086a8

08001cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf0:	e7fe      	b.n	8001cf0 <ADC_IRQHandler>
	...

08001cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0d      	ldr	r2, [pc, #52]	; (8001d34 <HAL_Init+0x40>)
 8001cfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_Init+0x40>)
 8001d0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d10:	4b08      	ldr	r3, [pc, #32]	; (8001d34 <HAL_Init+0x40>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a07      	ldr	r2, [pc, #28]	; (8001d34 <HAL_Init+0x40>)
 8001d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d1c:	2003      	movs	r0, #3
 8001d1e:	f000 fcec 	bl	80026fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d22:	2000      	movs	r0, #0
 8001d24:	f7ff ff02 	bl	8001b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d28:	f7ff fc18 	bl	800155c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023c00 	.word	0x40023c00

08001d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <HAL_IncTick+0x20>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x24>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4413      	add	r3, r2
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <HAL_IncTick+0x24>)
 8001d4a:	6013      	str	r3, [r2, #0]
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	200065f4 	.word	0x200065f4

08001d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return uwTick;
 8001d64:	4b03      	ldr	r3, [pc, #12]	; (8001d74 <HAL_GetTick+0x14>)
 8001d66:	681b      	ldr	r3, [r3, #0]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	200065f4 	.word	0x200065f4

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff ffee 	bl	8001d60 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_Delay+0x40>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffde 	bl	8001d60 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000008 	.word	0x20000008

08001dbc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e0ed      	b.n	8001faa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fbea 	bl	80015b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0202 	bic.w	r2, r2, #2
 8001dee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff ffb6 	bl	8001d60 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001df6:	e012      	b.n	8001e1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001df8:	f7ff ffb2 	bl	8001d60 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b0a      	cmp	r3, #10
 8001e04:	d90b      	bls.n	8001e1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2205      	movs	r2, #5
 8001e16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0c5      	b.n	8001faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1e5      	bne.n	8001df8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e3c:	f7ff ff90 	bl	8001d60 <HAL_GetTick>
 8001e40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e42:	e012      	b.n	8001e6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e44:	f7ff ff8c 	bl	8001d60 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b0a      	cmp	r3, #10
 8001e50:	d90b      	bls.n	8001e6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2205      	movs	r2, #5
 8001e62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e09f      	b.n	8001faa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0e5      	beq.n	8001e44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	7e1b      	ldrb	r3, [r3, #24]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d108      	bne.n	8001e92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e007      	b.n	8001ea2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	7e5b      	ldrb	r3, [r3, #25]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d108      	bne.n	8001ebc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e007      	b.n	8001ecc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	7e9b      	ldrb	r3, [r3, #26]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d108      	bne.n	8001ee6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0220 	orr.w	r2, r2, #32
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e007      	b.n	8001ef6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0220 	bic.w	r2, r2, #32
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7edb      	ldrb	r3, [r3, #27]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d108      	bne.n	8001f10 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681a      	ldr	r2, [r3, #0]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 0210 	bic.w	r2, r2, #16
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	e007      	b.n	8001f20 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f042 0210 	orr.w	r2, r2, #16
 8001f1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7f1b      	ldrb	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d108      	bne.n	8001f3a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e007      	b.n	8001f4a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0208 	bic.w	r2, r2, #8
 8001f48:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	7f5b      	ldrb	r3, [r3, #29]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d108      	bne.n	8001f64 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0204 	orr.w	r2, r2, #4
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	e007      	b.n	8001f74 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0204 	bic.w	r2, r2, #4
 8001f72:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	431a      	orrs	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	ea42 0103 	orr.w	r1, r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	1e5a      	subs	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b087      	sub	sp, #28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fcc:	7cfb      	ldrb	r3, [r7, #19]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d003      	beq.n	8001fda <HAL_CAN_ConfigFilter+0x26>
 8001fd2:	7cfb      	ldrb	r3, [r7, #19]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	f040 80be 	bne.w	8002156 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001fda:	4b65      	ldr	r3, [pc, #404]	; (8002170 <HAL_CAN_ConfigFilter+0x1bc>)
 8001fdc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	431a      	orrs	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	2201      	movs	r2, #1
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	401a      	ands	r2, r3
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	69db      	ldr	r3, [r3, #28]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d123      	bne.n	8002084 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	43db      	mvns	r3, r3
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800205e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3248      	adds	r2, #72	; 0x48
 8002064:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002078:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800207a:	6979      	ldr	r1, [r7, #20]
 800207c:	3348      	adds	r3, #72	; 0x48
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d122      	bne.n	80020d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	431a      	orrs	r2, r3
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80020ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	3248      	adds	r2, #72	; 0x48
 80020b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020c8:	6979      	ldr	r1, [r7, #20]
 80020ca:	3348      	adds	r3, #72	; 0x48
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	440b      	add	r3, r1
 80020d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80020ec:	e007      	b.n	80020fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d109      	bne.n	800211a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	43db      	mvns	r3, r3
 8002110:	401a      	ands	r2, r3
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002118:	e007      	b.n	800212a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	431a      	orrs	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d107      	bne.n	8002142 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	431a      	orrs	r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002148:	f023 0201 	bic.w	r2, r3, #1
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e006      	b.n	8002164 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
  }
}
 8002164:	4618      	mov	r0, r3
 8002166:	371c      	adds	r7, #28
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	40006400 	.word	0x40006400

08002174 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002174:	b480      	push	{r7}
 8002176:	b089      	sub	sp, #36	; 0x24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002188:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d003      	beq.n	80021a0 <HAL_CAN_AddTxMessage+0x2c>
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	2b02      	cmp	r3, #2
 800219c:	f040 80b8 	bne.w	8002310 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d105      	bne.n	80021c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 80a0 	beq.w	8002300 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	0e1b      	lsrs	r3, r3, #24
 80021c4:	f003 0303 	and.w	r3, r3, #3
 80021c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d907      	bls.n	80021e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e09e      	b.n	800231e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80021e0:	2201      	movs	r2, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	409a      	lsls	r2, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10d      	bne.n	800220e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80021fc:	68f9      	ldr	r1, [r7, #12]
 80021fe:	6809      	ldr	r1, [r1, #0]
 8002200:	431a      	orrs	r2, r3
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	3318      	adds	r3, #24
 8002206:	011b      	lsls	r3, r3, #4
 8002208:	440b      	add	r3, r1
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e00f      	b.n	800222e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002218:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800221e:	68f9      	ldr	r1, [r7, #12]
 8002220:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002222:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3318      	adds	r3, #24
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	440b      	add	r3, r1
 800222c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6819      	ldr	r1, [r3, #0]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	691a      	ldr	r2, [r3, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3318      	adds	r3, #24
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	440b      	add	r3, r1
 800223e:	3304      	adds	r3, #4
 8002240:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	7d1b      	ldrb	r3, [r3, #20]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d111      	bne.n	800226e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3318      	adds	r3, #24
 8002252:	011b      	lsls	r3, r3, #4
 8002254:	4413      	add	r3, r2
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	6811      	ldr	r1, [r2, #0]
 800225e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	3318      	adds	r3, #24
 8002266:	011b      	lsls	r3, r3, #4
 8002268:	440b      	add	r3, r1
 800226a:	3304      	adds	r3, #4
 800226c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3307      	adds	r3, #7
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	061a      	lsls	r2, r3, #24
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3306      	adds	r3, #6
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	041b      	lsls	r3, r3, #16
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3305      	adds	r3, #5
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	021b      	lsls	r3, r3, #8
 8002288:	4313      	orrs	r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	3204      	adds	r2, #4
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	4610      	mov	r0, r2
 8002292:	68fa      	ldr	r2, [r7, #12]
 8002294:	6811      	ldr	r1, [r2, #0]
 8002296:	ea43 0200 	orr.w	r2, r3, r0
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	440b      	add	r3, r1
 80022a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80022a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3303      	adds	r3, #3
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	061a      	lsls	r2, r3, #24
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3302      	adds	r3, #2
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	041b      	lsls	r3, r3, #16
 80022b6:	431a      	orrs	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	3301      	adds	r3, #1
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	021b      	lsls	r3, r3, #8
 80022c0:	4313      	orrs	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	7812      	ldrb	r2, [r2, #0]
 80022c6:	4610      	mov	r0, r2
 80022c8:	68fa      	ldr	r2, [r7, #12]
 80022ca:	6811      	ldr	r1, [r2, #0]
 80022cc:	ea43 0200 	orr.w	r2, r3, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	440b      	add	r3, r1
 80022d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80022da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3318      	adds	r3, #24
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	4413      	add	r3, r2
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68fa      	ldr	r2, [r7, #12]
 80022ec:	6811      	ldr	r1, [r2, #0]
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	3318      	adds	r3, #24
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	440b      	add	r3, r1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e00e      	b.n	800231e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e006      	b.n	800231e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
  }
}
 800231e:	4618      	mov	r0, r3
 8002320:	3724      	adds	r7, #36	; 0x24
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800232a:	b480      	push	{r7}
 800232c:	b087      	sub	sp, #28
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800233e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002340:	7dfb      	ldrb	r3, [r7, #23]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d003      	beq.n	800234e <HAL_CAN_GetRxMessage+0x24>
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	2b02      	cmp	r3, #2
 800234a:	f040 80f3 	bne.w	8002534 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10e      	bne.n	8002372 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	f003 0303 	and.w	r3, r3, #3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d116      	bne.n	8002390 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e0e7      	b.n	8002542 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f003 0303 	and.w	r3, r3, #3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d107      	bne.n	8002390 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d8      	b.n	8002542 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	331b      	adds	r3, #27
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	4413      	add	r3, r2
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0204 	and.w	r2, r3, #4
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	331b      	adds	r3, #27
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	4413      	add	r3, r2
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	0d5b      	lsrs	r3, r3, #21
 80023be:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e00b      	b.n	80023e0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	331b      	adds	r3, #27
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	4413      	add	r3, r2
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	08db      	lsrs	r3, r3, #3
 80023d8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	331b      	adds	r3, #27
 80023e8:	011b      	lsls	r3, r3, #4
 80023ea:	4413      	add	r3, r2
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0202 	and.w	r2, r3, #2
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	331b      	adds	r3, #27
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	4413      	add	r3, r2
 8002402:	3304      	adds	r3, #4
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 020f 	and.w	r2, r3, #15
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	331b      	adds	r3, #27
 8002416:	011b      	lsls	r3, r3, #4
 8002418:	4413      	add	r3, r2
 800241a:	3304      	adds	r3, #4
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b2da      	uxtb	r2, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	331b      	adds	r3, #27
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	4413      	add	r3, r2
 8002432:	3304      	adds	r3, #4
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0c1b      	lsrs	r3, r3, #16
 8002438:	b29a      	uxth	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	4413      	add	r3, r2
 8002448:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	4413      	add	r3, r2
 800245e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0a1a      	lsrs	r2, r3, #8
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	3301      	adds	r3, #1
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	011b      	lsls	r3, r3, #4
 8002476:	4413      	add	r3, r2
 8002478:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	0c1a      	lsrs	r2, r3, #16
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	3302      	adds	r3, #2
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e1a      	lsrs	r2, r3, #24
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	3303      	adds	r3, #3
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	3304      	adds	r3, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	0a1a      	lsrs	r2, r3, #8
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3305      	adds	r3, #5
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	4413      	add	r3, r2
 80024de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0c1a      	lsrs	r2, r3, #16
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	3306      	adds	r3, #6
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	0e1a      	lsrs	r2, r3, #24
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	3307      	adds	r3, #7
 8002504:	b2d2      	uxtb	r2, r2
 8002506:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d108      	bne.n	8002520 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	e007      	b.n	8002530 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0220 	orr.w	r2, r2, #32
 800252e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002530:	2300      	movs	r3, #0
 8002532:	e006      	b.n	8002542 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800254e:	b480      	push	{r7}
 8002550:	b085      	sub	sp, #20
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002562:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002564:	7afb      	ldrb	r3, [r7, #11]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d002      	beq.n	8002570 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d10f      	bne.n	8002590 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0303 	and.w	r3, r3, #3
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	e005      	b.n	8002590 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002590:	68fb      	ldr	r3, [r7, #12]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
	...

080025a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b0:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025d2:	4a04      	ldr	r2, [pc, #16]	; (80025e4 <__NVIC_SetPriorityGrouping+0x44>)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	60d3      	str	r3, [r2, #12]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <__NVIC_GetPriorityGrouping+0x18>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	0a1b      	lsrs	r3, r3, #8
 80025f2:	f003 0307 	and.w	r3, r3, #7
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db0b      	blt.n	800262e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	f003 021f 	and.w	r2, r3, #31
 800261c:	4907      	ldr	r1, [pc, #28]	; (800263c <__NVIC_EnableIRQ+0x38>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	2001      	movs	r0, #1
 8002626:	fa00 f202 	lsl.w	r2, r0, r2
 800262a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	e000e100 	.word	0xe000e100

08002640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	6039      	str	r1, [r7, #0]
 800264a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800264c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002650:	2b00      	cmp	r3, #0
 8002652:	db0a      	blt.n	800266a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	b2da      	uxtb	r2, r3
 8002658:	490c      	ldr	r1, [pc, #48]	; (800268c <__NVIC_SetPriority+0x4c>)
 800265a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	440b      	add	r3, r1
 8002664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002668:	e00a      	b.n	8002680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4908      	ldr	r1, [pc, #32]	; (8002690 <__NVIC_SetPriority+0x50>)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	f003 030f 	and.w	r3, r3, #15
 8002676:	3b04      	subs	r3, #4
 8002678:	0112      	lsls	r2, r2, #4
 800267a:	b2d2      	uxtb	r2, r2
 800267c:	440b      	add	r3, r1
 800267e:	761a      	strb	r2, [r3, #24]
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100
 8002690:	e000ed00 	.word	0xe000ed00

08002694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f1c3 0307 	rsb	r3, r3, #7
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf28      	it	cs
 80026b2:	2304      	movcs	r3, #4
 80026b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3304      	adds	r3, #4
 80026ba:	2b06      	cmp	r3, #6
 80026bc:	d902      	bls.n	80026c4 <NVIC_EncodePriority+0x30>
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3b03      	subs	r3, #3
 80026c2:	e000      	b.n	80026c6 <NVIC_EncodePriority+0x32>
 80026c4:	2300      	movs	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c8:	f04f 32ff 	mov.w	r2, #4294967295
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	43da      	mvns	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	401a      	ands	r2, r3
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	f04f 31ff 	mov.w	r1, #4294967295
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	fa01 f303 	lsl.w	r3, r1, r3
 80026e6:	43d9      	mvns	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	4313      	orrs	r3, r2
         );
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3724      	adds	r7, #36	; 0x24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr

080026fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ff4c 	bl	80025a0 <__NVIC_SetPriorityGrouping>
}
 8002708:	bf00      	nop
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002722:	f7ff ff61 	bl	80025e8 <__NVIC_GetPriorityGrouping>
 8002726:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	f7ff ffb1 	bl	8002694 <NVIC_EncodePriority>
 8002732:	4602      	mov	r2, r0
 8002734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002738:	4611      	mov	r1, r2
 800273a:	4618      	mov	r0, r3
 800273c:	f7ff ff80 	bl	8002640 <__NVIC_SetPriority>
}
 8002740:	bf00      	nop
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff ff54 	bl	8002604 <__NVIC_EnableIRQ>
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e00e      	b.n	8002794 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	795b      	ldrb	r3, [r3, #5]
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d105      	bne.n	800278c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7fe ff5c 	bl	8001644 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3708      	adds	r7, #8
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800279c:	b480      	push	{r7}
 800279e:	b087      	sub	sp, #28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2202      	movs	r2, #2
 80027b0:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	e00a      	b.n	80027de <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	441a      	add	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d3f0      	bcc.n	80027c8 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2201      	movs	r2, #1
 80027f2:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 80027f4:	693b      	ldr	r3, [r7, #16]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	371c      	adds	r7, #28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
	...

08002804 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800280c:	2300      	movs	r3, #0
 800280e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff faa6 	bl	8001d60 <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e099      	b.n	8002954 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002840:	e00f      	b.n	8002862 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002842:	f7ff fa8d 	bl	8001d60 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b05      	cmp	r3, #5
 800284e:	d908      	bls.n	8002862 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2203      	movs	r2, #3
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e078      	b.n	8002954 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e8      	bne.n	8002842 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4b38      	ldr	r3, [pc, #224]	; (800295c <HAL_DMA_Init+0x158>)
 800287c:	4013      	ands	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d107      	bne.n	80028cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	4313      	orrs	r3, r2
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	f023 0307 	bic.w	r3, r3, #7
 80028e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d117      	bne.n	8002926 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	697a      	ldr	r2, [r7, #20]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00e      	beq.n	8002926 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 fa9d 	bl	8002e48 <DMA_CheckFifoParam>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d008      	beq.n	8002926 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2240      	movs	r2, #64	; 0x40
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002922:	2301      	movs	r3, #1
 8002924:	e016      	b.n	8002954 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa54 	bl	8002ddc <DMA_CalcBaseAndBitshift>
 8002934:	4603      	mov	r3, r0
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	223f      	movs	r2, #63	; 0x3f
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	f010803f 	.word	0xf010803f

08002960 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002976:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_DMA_Start_IT+0x26>
 8002982:	2302      	movs	r3, #2
 8002984:	e040      	b.n	8002a08 <HAL_DMA_Start_IT+0xa8>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b01      	cmp	r3, #1
 8002998:	d12f      	bne.n	80029fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2202      	movs	r2, #2
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f9e6 	bl	8002d80 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	223f      	movs	r2, #63	; 0x3f
 80029ba:	409a      	lsls	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0216 	orr.w	r2, r2, #22
 80029ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0208 	orr.w	r2, r2, #8
 80029e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f042 0201 	orr.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	e005      	b.n	8002a06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a02:	2302      	movs	r3, #2
 8002a04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3718      	adds	r7, #24
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d004      	beq.n	8002a2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00c      	b.n	8002a48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2205      	movs	r2, #5
 8002a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b086      	sub	sp, #24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a60:	4b92      	ldr	r3, [pc, #584]	; (8002cac <HAL_DMA_IRQHandler+0x258>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a92      	ldr	r2, [pc, #584]	; (8002cb0 <HAL_DMA_IRQHandler+0x25c>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	0a9b      	lsrs	r3, r3, #10
 8002a6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	2208      	movs	r2, #8
 8002a80:	409a      	lsls	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01a      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d013      	beq.n	8002ac0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0204 	bic.w	r2, r2, #4
 8002aa6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aac:	2208      	movs	r2, #8
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab8:	f043 0201 	orr.w	r2, r3, #1
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	409a      	lsls	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d012      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00b      	beq.n	8002af6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	409a      	lsls	r2, r3
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aee:	f043 0202 	orr.w	r2, r3, #2
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2204      	movs	r2, #4
 8002afc:	409a      	lsls	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00b      	beq.n	8002b2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	2204      	movs	r2, #4
 8002b1a:	409a      	lsls	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b24:	f043 0204 	orr.w	r2, r3, #4
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	2210      	movs	r2, #16
 8002b32:	409a      	lsls	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d043      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d03c      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b4e:	2210      	movs	r2, #16
 8002b50:	409a      	lsls	r2, r3
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d108      	bne.n	8002b84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d024      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
 8002b82:	e01f      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d01b      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	4798      	blx	r3
 8002b94:	e016      	b.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d107      	bne.n	8002bb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0208 	bic.w	r2, r2, #8
 8002bb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d003      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc8:	2220      	movs	r2, #32
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4013      	ands	r3, r2
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 808e 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0310 	and.w	r3, r3, #16
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 8086 	beq.w	8002cf2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2220      	movs	r2, #32
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d136      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0216 	bic.w	r2, r2, #22
 8002c0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d103      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x1da>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0208 	bic.w	r2, r2, #8
 8002c3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c42:	223f      	movs	r2, #63	; 0x3f
 8002c44:	409a      	lsls	r2, r3
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d07d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	4798      	blx	r3
        }
        return;
 8002c6a:	e078      	b.n	8002d5e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d01c      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d108      	bne.n	8002c9a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d030      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
 8002c98:	e02b      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d027      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	4798      	blx	r3
 8002caa:	e022      	b.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
 8002cac:	20000000 	.word	0x20000000
 8002cb0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10f      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0210 	bic.w	r2, r2, #16
 8002cd0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d032      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	f003 0301 	and.w	r3, r3, #1
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d022      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2205      	movs	r2, #5
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	3301      	adds	r3, #1
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d307      	bcc.n	8002d3a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1f2      	bne.n	8002d1e <HAL_DMA_IRQHandler+0x2ca>
 8002d38:	e000      	b.n	8002d3c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d3a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d005      	beq.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4798      	blx	r3
 8002d5c:	e000      	b.n	8002d60 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d5e:	bf00      	nop
    }
  }
}
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop

08002d68 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
 8002d8c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d9c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d108      	bne.n	8002dc0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dbe:	e007      	b.n	8002dd0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	60da      	str	r2, [r3, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	3b10      	subs	r3, #16
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <DMA_CalcBaseAndBitshift+0x64>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002df6:	4a13      	ldr	r2, [pc, #76]	; (8002e44 <DMA_CalcBaseAndBitshift+0x68>)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d909      	bls.n	8002e1e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e12:	f023 0303 	bic.w	r3, r3, #3
 8002e16:	1d1a      	adds	r2, r3, #4
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e1c:	e007      	b.n	8002e2e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	aaaaaaab 	.word	0xaaaaaaab
 8002e44:	0800ce00 	.word	0x0800ce00

08002e48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e50:	2300      	movs	r3, #0
 8002e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d11f      	bne.n	8002ea2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b03      	cmp	r3, #3
 8002e66:	d855      	bhi.n	8002f14 <DMA_CheckFifoParam+0xcc>
 8002e68:	a201      	add	r2, pc, #4	; (adr r2, 8002e70 <DMA_CheckFifoParam+0x28>)
 8002e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6e:	bf00      	nop
 8002e70:	08002e81 	.word	0x08002e81
 8002e74:	08002e93 	.word	0x08002e93
 8002e78:	08002e81 	.word	0x08002e81
 8002e7c:	08002f15 	.word	0x08002f15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d045      	beq.n	8002f18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e90:	e042      	b.n	8002f18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e9a:	d13f      	bne.n	8002f1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e03c      	b.n	8002f1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eaa:	d121      	bne.n	8002ef0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d836      	bhi.n	8002f20 <DMA_CheckFifoParam+0xd8>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <DMA_CheckFifoParam+0x70>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002ec9 	.word	0x08002ec9
 8002ebc:	08002ecf 	.word	0x08002ecf
 8002ec0:	08002ec9 	.word	0x08002ec9
 8002ec4:	08002ee1 	.word	0x08002ee1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73fb      	strb	r3, [r7, #15]
      break;
 8002ecc:	e02f      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d024      	beq.n	8002f24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ede:	e021      	b.n	8002f24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ee8:	d11e      	bne.n	8002f28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002eee:	e01b      	b.n	8002f28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d902      	bls.n	8002efc <DMA_CheckFifoParam+0xb4>
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d003      	beq.n	8002f02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002efa:	e018      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e015      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00e      	beq.n	8002f2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      break;
 8002f12:	e00b      	b.n	8002f2c <DMA_CheckFifoParam+0xe4>
      break;
 8002f14:	bf00      	nop
 8002f16:	e00a      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;
 8002f18:	bf00      	nop
 8002f1a:	e008      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;
 8002f1c:	bf00      	nop
 8002f1e:	e006      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;
 8002f20:	bf00      	nop
 8002f22:	e004      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;
 8002f24:	bf00      	nop
 8002f26:	e002      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;   
 8002f28:	bf00      	nop
 8002f2a:	e000      	b.n	8002f2e <DMA_CheckFifoParam+0xe6>
      break;
 8002f2c:	bf00      	nop
    }
  } 
  
  return status; 
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3714      	adds	r7, #20
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	e16b      	b.n	8003230 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	f040 815a 	bne.w	800322a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d00b      	beq.n	8002f96 <HAL_GPIO_Init+0x5a>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8a:	2b11      	cmp	r3, #17
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d130      	bne.n	8002ff8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 0201 	and.w	r2, r3, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0xfc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b12      	cmp	r3, #18
 8003036:	d123      	bne.n	8003080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	08da      	lsrs	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3208      	adds	r2, #8
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	220f      	movs	r2, #15
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80b4 	beq.w	800322a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b5f      	ldr	r3, [pc, #380]	; (8003244 <HAL_GPIO_Init+0x308>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	4a5e      	ldr	r2, [pc, #376]	; (8003244 <HAL_GPIO_Init+0x308>)
 80030cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d0:	6453      	str	r3, [r2, #68]	; 0x44
 80030d2:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_GPIO_Init+0x308>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030de:	4a5a      	ldr	r2, [pc, #360]	; (8003248 <HAL_GPIO_Init+0x30c>)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a51      	ldr	r2, [pc, #324]	; (800324c <HAL_GPIO_Init+0x310>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d02b      	beq.n	8003162 <HAL_GPIO_Init+0x226>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a50      	ldr	r2, [pc, #320]	; (8003250 <HAL_GPIO_Init+0x314>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d025      	beq.n	800315e <HAL_GPIO_Init+0x222>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_GPIO_Init+0x318>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01f      	beq.n	800315a <HAL_GPIO_Init+0x21e>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4e      	ldr	r2, [pc, #312]	; (8003258 <HAL_GPIO_Init+0x31c>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d019      	beq.n	8003156 <HAL_GPIO_Init+0x21a>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4d      	ldr	r2, [pc, #308]	; (800325c <HAL_GPIO_Init+0x320>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d013      	beq.n	8003152 <HAL_GPIO_Init+0x216>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4c      	ldr	r2, [pc, #304]	; (8003260 <HAL_GPIO_Init+0x324>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00d      	beq.n	800314e <HAL_GPIO_Init+0x212>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4b      	ldr	r2, [pc, #300]	; (8003264 <HAL_GPIO_Init+0x328>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <HAL_GPIO_Init+0x20e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4a      	ldr	r2, [pc, #296]	; (8003268 <HAL_GPIO_Init+0x32c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_GPIO_Init+0x20a>
 8003142:	2307      	movs	r3, #7
 8003144:	e00e      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003146:	2308      	movs	r3, #8
 8003148:	e00c      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800314a:	2306      	movs	r3, #6
 800314c:	e00a      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800314e:	2305      	movs	r3, #5
 8003150:	e008      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003152:	2304      	movs	r3, #4
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003156:	2303      	movs	r3, #3
 8003158:	e004      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800315a:	2302      	movs	r3, #2
 800315c:	e002      	b.n	8003164 <HAL_GPIO_Init+0x228>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x228>
 8003162:	2300      	movs	r3, #0
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	f002 0203 	and.w	r2, r2, #3
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003174:	4934      	ldr	r1, [pc, #208]	; (8003248 <HAL_GPIO_Init+0x30c>)
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003182:	4b3a      	ldr	r3, [pc, #232]	; (800326c <HAL_GPIO_Init+0x330>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a6:	4a31      	ldr	r2, [pc, #196]	; (800326c <HAL_GPIO_Init+0x330>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031ac:	4b2f      	ldr	r3, [pc, #188]	; (800326c <HAL_GPIO_Init+0x330>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d0:	4a26      	ldr	r2, [pc, #152]	; (800326c <HAL_GPIO_Init+0x330>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d6:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_GPIO_Init+0x330>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	43db      	mvns	r3, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4013      	ands	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031fa:	4a1c      	ldr	r2, [pc, #112]	; (800326c <HAL_GPIO_Init+0x330>)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003200:	4b1a      	ldr	r3, [pc, #104]	; (800326c <HAL_GPIO_Init+0x330>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003224:	4a11      	ldr	r2, [pc, #68]	; (800326c <HAL_GPIO_Init+0x330>)
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	2b0f      	cmp	r3, #15
 8003234:	f67f ae90 	bls.w	8002f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003238:	bf00      	nop
 800323a:	3724      	adds	r7, #36	; 0x24
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40023800 	.word	0x40023800
 8003248:	40013800 	.word	0x40013800
 800324c:	40020000 	.word	0x40020000
 8003250:	40020400 	.word	0x40020400
 8003254:	40020800 	.word	0x40020800
 8003258:	40020c00 	.word	0x40020c00
 800325c:	40021000 	.word	0x40021000
 8003260:	40021400 	.word	0x40021400
 8003264:	40021800 	.word	0x40021800
 8003268:	40021c00 	.word	0x40021c00
 800326c:	40013c00 	.word	0x40013c00

08003270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
 800327c:	4613      	mov	r3, r2
 800327e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003280:	787b      	ldrb	r3, [r7, #1]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003286:	887a      	ldrh	r2, [r7, #2]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800328c:	e003      	b.n	8003296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	041a      	lsls	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	619a      	str	r2, [r3, #24]
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b084      	sub	sp, #16
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e02b      	b.n	800330c <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80032bc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f245 5255 	movw	r2, #21845	; 0x5555
 80032c6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6852      	ldr	r2, [r2, #4]
 80032d0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6892      	ldr	r2, [r2, #8]
 80032da:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80032dc:	f7fe fd40 	bl	8001d60 <HAL_GetTick>
 80032e0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 80032e2:	e008      	b.n	80032f6 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80032e4:	f7fe fd3c 	bl	8001d60 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b30      	cmp	r3, #48	; 0x30
 80032f0:	d901      	bls.n	80032f6 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e00a      	b.n	800330c <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1f1      	bne.n	80032e4 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003308:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003324:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e25b      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d075      	beq.n	800343e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003352:	4ba3      	ldr	r3, [pc, #652]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	2b04      	cmp	r3, #4
 800335c:	d00c      	beq.n	8003378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800335e:	4ba0      	ldr	r3, [pc, #640]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003366:	2b08      	cmp	r3, #8
 8003368:	d112      	bne.n	8003390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800336a:	4b9d      	ldr	r3, [pc, #628]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003376:	d10b      	bne.n	8003390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003378:	4b99      	ldr	r3, [pc, #612]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d05b      	beq.n	800343c <HAL_RCC_OscConfig+0x108>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d157      	bne.n	800343c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e236      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d106      	bne.n	80033a8 <HAL_RCC_OscConfig+0x74>
 800339a:	4b91      	ldr	r3, [pc, #580]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a90      	ldr	r2, [pc, #576]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xb0>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0x98>
 80033b2:	4b8b      	ldr	r3, [pc, #556]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a8a      	ldr	r2, [pc, #552]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b88      	ldr	r3, [pc, #544]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a87      	ldr	r2, [pc, #540]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xb0>
 80033cc:	4b84      	ldr	r3, [pc, #528]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a83      	ldr	r2, [pc, #524]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b81      	ldr	r3, [pc, #516]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a80      	ldr	r2, [pc, #512]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fe fcb8 	bl	8001d60 <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fe fcb4 	bl	8001d60 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e1fb      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b76      	ldr	r3, [pc, #472]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xc0>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003414:	f7fe fca4 	bl	8001d60 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800341c:	f7fe fca0 	bl	8001d60 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1e7      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b6c      	ldr	r3, [pc, #432]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0xe8>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d063      	beq.n	8003512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800344a:	4b65      	ldr	r3, [pc, #404]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b62      	ldr	r3, [pc, #392]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800345e:	2b08      	cmp	r3, #8
 8003460:	d11c      	bne.n	800349c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003462:	4b5f      	ldr	r3, [pc, #380]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	4b5c      	ldr	r3, [pc, #368]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_OscConfig+0x152>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1bb      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b56      	ldr	r3, [pc, #344]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4952      	ldr	r1, [pc, #328]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	e03a      	b.n	8003512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d020      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCC_OscConfig+0x2b0>)
 80034a6:	2201      	movs	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034aa:	f7fe fc59 	bl	8001d60 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034b2:	f7fe fc55 	bl	8001d60 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b02      	cmp	r3, #2
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e19c      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0302 	and.w	r3, r3, #2
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d0:	4b43      	ldr	r3, [pc, #268]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4940      	ldr	r1, [pc, #256]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
 80034e4:	e015      	b.n	8003512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034e6:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_OscConfig+0x2b0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe fc38 	bl	8001d60 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034f4:	f7fe fc34 	bl	8001d60 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e17b      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b00      	cmp	r3, #0
 800351c:	d030      	beq.n	8003580 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d016      	beq.n	8003554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003526:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <HAL_RCC_OscConfig+0x2b4>)
 8003528:	2201      	movs	r2, #1
 800352a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe fc18 	bl	8001d60 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003534:	f7fe fc14 	bl	8001d60 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e15b      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003546:	4b26      	ldr	r3, [pc, #152]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0x200>
 8003552:	e015      	b.n	8003580 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003554:	4b24      	ldr	r3, [pc, #144]	; (80035e8 <HAL_RCC_OscConfig+0x2b4>)
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355a:	f7fe fc01 	bl	8001d60 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003562:	f7fe fbfd 	bl	8001d60 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e144      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1f0      	bne.n	8003562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80a0 	beq.w	80036ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10f      	bne.n	80035be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	4b0f      	ldr	r3, [pc, #60]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a0e      	ldr	r2, [pc, #56]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <HAL_RCC_OscConfig+0x2ac>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	60bb      	str	r3, [r7, #8]
 80035b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ba:	2301      	movs	r3, #1
 80035bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x2b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d121      	bne.n	800360e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCC_OscConfig+0x2b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a07      	ldr	r2, [pc, #28]	; (80035ec <HAL_RCC_OscConfig+0x2b8>)
 80035d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035d6:	f7fe fbc3 	bl	8001d60 <HAL_GetTick>
 80035da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035dc:	e011      	b.n	8003602 <HAL_RCC_OscConfig+0x2ce>
 80035de:	bf00      	nop
 80035e0:	40023800 	.word	0x40023800
 80035e4:	42470000 	.word	0x42470000
 80035e8:	42470e80 	.word	0x42470e80
 80035ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe fbb6 	bl	8001d60 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e0fd      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b81      	ldr	r3, [pc, #516]	; (8003808 <HAL_RCC_OscConfig+0x4d4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d106      	bne.n	8003624 <HAL_RCC_OscConfig+0x2f0>
 8003616:	4b7d      	ldr	r3, [pc, #500]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361a:	4a7c      	ldr	r2, [pc, #496]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	6713      	str	r3, [r2, #112]	; 0x70
 8003622:	e01c      	b.n	800365e <HAL_RCC_OscConfig+0x32a>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d10c      	bne.n	8003646 <HAL_RCC_OscConfig+0x312>
 800362c:	4b77      	ldr	r3, [pc, #476]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 800362e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003630:	4a76      	ldr	r2, [pc, #472]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6713      	str	r3, [r2, #112]	; 0x70
 8003638:	4b74      	ldr	r3, [pc, #464]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 800363a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363c:	4a73      	ldr	r2, [pc, #460]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6713      	str	r3, [r2, #112]	; 0x70
 8003644:	e00b      	b.n	800365e <HAL_RCC_OscConfig+0x32a>
 8003646:	4b71      	ldr	r3, [pc, #452]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	4a70      	ldr	r2, [pc, #448]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	6713      	str	r3, [r2, #112]	; 0x70
 8003652:	4b6e      	ldr	r3, [pc, #440]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	4a6d      	ldr	r2, [pc, #436]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d015      	beq.n	8003692 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003666:	f7fe fb7b 	bl	8001d60 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fb77 	bl	8001d60 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	; 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0bc      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ee      	beq.n	800366e <HAL_RCC_OscConfig+0x33a>
 8003690:	e014      	b.n	80036bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fe fb65 	bl	8001d60 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe fb61 	bl	8001d60 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e0a6      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	4b56      	ldr	r3, [pc, #344]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ee      	bne.n	800369a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c2:	4b52      	ldr	r3, [pc, #328]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a51      	ldr	r2, [pc, #324]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8092 	beq.w	80037fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036d8:	4b4c      	ldr	r3, [pc, #304]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d05c      	beq.n	800379e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d141      	bne.n	8003770 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ec:	4b48      	ldr	r3, [pc, #288]	; (8003810 <HAL_RCC_OscConfig+0x4dc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fb35 	bl	8001d60 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fe fb31 	bl	8001d60 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e078      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800370c:	4b3f      	ldr	r3, [pc, #252]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	69da      	ldr	r2, [r3, #28]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	431a      	orrs	r2, r3
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	019b      	lsls	r3, r3, #6
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	3b01      	subs	r3, #1
 8003732:	041b      	lsls	r3, r3, #16
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373a:	061b      	lsls	r3, r3, #24
 800373c:	4933      	ldr	r1, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003742:	4b33      	ldr	r3, [pc, #204]	; (8003810 <HAL_RCC_OscConfig+0x4dc>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fe fb0a 	bl	8001d60 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003750:	f7fe fb06 	bl	8001d60 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e04d      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b2a      	ldr	r3, [pc, #168]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x41c>
 800376e:	e045      	b.n	80037fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003770:	4b27      	ldr	r3, [pc, #156]	; (8003810 <HAL_RCC_OscConfig+0x4dc>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003776:	f7fe faf3 	bl	8001d60 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377c:	e008      	b.n	8003790 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800377e:	f7fe faef 	bl	8001d60 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e036      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003790:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1f0      	bne.n	800377e <HAL_RCC_OscConfig+0x44a>
 800379c:	e02e      	b.n	80037fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e029      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037aa:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_RCC_OscConfig+0x4d8>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d11c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d115      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037d2:	4013      	ands	r3, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d8:	4293      	cmp	r3, r2
 80037da:	d10d      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d106      	bne.n	80037f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d001      	beq.n	80037fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40007000 	.word	0x40007000
 800380c:	40023800 	.word	0x40023800
 8003810:	42470060 	.word	0x42470060

08003814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d101      	bne.n	8003828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0cc      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003828:	4b68      	ldr	r3, [pc, #416]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 030f 	and.w	r3, r3, #15
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d90c      	bls.n	8003850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b65      	ldr	r3, [pc, #404]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b63      	ldr	r3, [pc, #396]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0b8      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d020      	beq.n	800389e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003868:	4b59      	ldr	r3, [pc, #356]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	4a58      	ldr	r2, [pc, #352]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 0308 	and.w	r3, r3, #8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003880:	4b53      	ldr	r3, [pc, #332]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800388a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800388c:	4b50      	ldr	r3, [pc, #320]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	494d      	ldr	r1, [pc, #308]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d044      	beq.n	8003934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b2:	4b47      	ldr	r3, [pc, #284]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d119      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e07f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d003      	beq.n	80038d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ce:	2b03      	cmp	r3, #3
 80038d0:	d107      	bne.n	80038e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d2:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e06f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038e2:	4b3b      	ldr	r3, [pc, #236]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d101      	bne.n	80038f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e067      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038f2:	4b37      	ldr	r3, [pc, #220]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f023 0203 	bic.w	r2, r3, #3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	4934      	ldr	r1, [pc, #208]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003900:	4313      	orrs	r3, r2
 8003902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003904:	f7fe fa2c 	bl	8001d60 <HAL_GetTick>
 8003908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800390a:	e00a      	b.n	8003922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800390c:	f7fe fa28 	bl	8001d60 <HAL_GetTick>
 8003910:	4602      	mov	r2, r0
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	f241 3288 	movw	r2, #5000	; 0x1388
 800391a:	4293      	cmp	r3, r2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e04f      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003922:	4b2b      	ldr	r3, [pc, #172]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f003 020c 	and.w	r2, r3, #12
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	429a      	cmp	r2, r3
 8003932:	d1eb      	bne.n	800390c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003934:	4b25      	ldr	r3, [pc, #148]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d20c      	bcs.n	800395c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b22      	ldr	r3, [pc, #136]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 030f 	and.w	r3, r3, #15
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e032      	b.n	80039c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d008      	beq.n	800397a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003968:	4b19      	ldr	r3, [pc, #100]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4916      	ldr	r1, [pc, #88]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0308 	and.w	r3, r3, #8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d009      	beq.n	800399a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003986:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	490e      	ldr	r1, [pc, #56]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003996:	4313      	orrs	r3, r2
 8003998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800399a:	f000 f821 	bl	80039e0 <HAL_RCC_GetSysClockFreq>
 800399e:	4601      	mov	r1, r0
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	4a0a      	ldr	r2, [pc, #40]	; (80039d4 <HAL_RCC_ClockConfig+0x1c0>)
 80039ac:	5cd3      	ldrb	r3, [r2, r3]
 80039ae:	fa21 f303 	lsr.w	r3, r1, r3
 80039b2:	4a09      	ldr	r2, [pc, #36]	; (80039d8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7fe f8b6 	bl	8001b2c <HAL_InitTick>

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40023c00 	.word	0x40023c00
 80039d0:	40023800 	.word	0x40023800
 80039d4:	0800cde8 	.word	0x0800cde8
 80039d8:	20000000 	.word	0x20000000
 80039dc:	20000004 	.word	0x20000004

080039e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	2300      	movs	r3, #0
 80039ec:	60fb      	str	r3, [r7, #12]
 80039ee:	2300      	movs	r3, #0
 80039f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039f6:	4b50      	ldr	r3, [pc, #320]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x158>)
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 030c 	and.w	r3, r3, #12
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d007      	beq.n	8003a12 <HAL_RCC_GetSysClockFreq+0x32>
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d008      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x38>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f040 808d 	bne.w	8003b26 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a0c:	4b4b      	ldr	r3, [pc, #300]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a0e:	60bb      	str	r3, [r7, #8]
       break;
 8003a10:	e08c      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a12:	4b4b      	ldr	r3, [pc, #300]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a14:	60bb      	str	r3, [r7, #8]
      break;
 8003a16:	e089      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a18:	4b47      	ldr	r3, [pc, #284]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a22:	4b45      	ldr	r3, [pc, #276]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2e:	4b42      	ldr	r3, [pc, #264]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	099b      	lsrs	r3, r3, #6
 8003a34:	f04f 0400 	mov.w	r4, #0
 8003a38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	ea03 0501 	and.w	r5, r3, r1
 8003a44:	ea04 0602 	and.w	r6, r4, r2
 8003a48:	4a3d      	ldr	r2, [pc, #244]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a4a:	fb02 f106 	mul.w	r1, r2, r6
 8003a4e:	2200      	movs	r2, #0
 8003a50:	fb02 f205 	mul.w	r2, r2, r5
 8003a54:	440a      	add	r2, r1
 8003a56:	493a      	ldr	r1, [pc, #232]	; (8003b40 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a58:	fba5 0101 	umull	r0, r1, r5, r1
 8003a5c:	1853      	adds	r3, r2, r1
 8003a5e:	4619      	mov	r1, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f04f 0400 	mov.w	r4, #0
 8003a66:	461a      	mov	r2, r3
 8003a68:	4623      	mov	r3, r4
 8003a6a:	f7fc fbb9 	bl	80001e0 <__aeabi_uldivmod>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	460c      	mov	r4, r1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	e049      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a76:	4b30      	ldr	r3, [pc, #192]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	099b      	lsrs	r3, r3, #6
 8003a7c:	f04f 0400 	mov.w	r4, #0
 8003a80:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	ea03 0501 	and.w	r5, r3, r1
 8003a8c:	ea04 0602 	and.w	r6, r4, r2
 8003a90:	4629      	mov	r1, r5
 8003a92:	4632      	mov	r2, r6
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	f04f 0400 	mov.w	r4, #0
 8003a9c:	0154      	lsls	r4, r2, #5
 8003a9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aa2:	014b      	lsls	r3, r1, #5
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	1b49      	subs	r1, r1, r5
 8003aaa:	eb62 0206 	sbc.w	r2, r2, r6
 8003aae:	f04f 0300 	mov.w	r3, #0
 8003ab2:	f04f 0400 	mov.w	r4, #0
 8003ab6:	0194      	lsls	r4, r2, #6
 8003ab8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003abc:	018b      	lsls	r3, r1, #6
 8003abe:	1a5b      	subs	r3, r3, r1
 8003ac0:	eb64 0402 	sbc.w	r4, r4, r2
 8003ac4:	f04f 0100 	mov.w	r1, #0
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	00e2      	lsls	r2, r4, #3
 8003ace:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ad2:	00d9      	lsls	r1, r3, #3
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	195b      	adds	r3, r3, r5
 8003ada:	eb44 0406 	adc.w	r4, r4, r6
 8003ade:	f04f 0100 	mov.w	r1, #0
 8003ae2:	f04f 0200 	mov.w	r2, #0
 8003ae6:	02a2      	lsls	r2, r4, #10
 8003ae8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aec:	0299      	lsls	r1, r3, #10
 8003aee:	460b      	mov	r3, r1
 8003af0:	4614      	mov	r4, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	4621      	mov	r1, r4
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	461a      	mov	r2, r3
 8003afe:	4623      	mov	r3, r4
 8003b00:	f7fc fb6e 	bl	80001e0 <__aeabi_uldivmod>
 8003b04:	4603      	mov	r3, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b0a:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <HAL_RCC_GetSysClockFreq+0x158>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0c1b      	lsrs	r3, r3, #16
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	3301      	adds	r3, #1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b22:	60bb      	str	r3, [r7, #8]
      break;
 8003b24:	e002      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003b28:	60bb      	str	r3, [r7, #8]
      break;
 8003b2a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2c:	68bb      	ldr	r3, [r7, #8]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	00f42400 	.word	0x00f42400
 8003b40:	017d7840 	.word	0x017d7840

08003b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b48:	4b03      	ldr	r3, [pc, #12]	; (8003b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000000 	.word	0x20000000

08003b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b60:	f7ff fff0 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b64:	4601      	mov	r1, r0
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	0a9b      	lsrs	r3, r3, #10
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	4a03      	ldr	r2, [pc, #12]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b72:	5cd3      	ldrb	r3, [r2, r3]
 8003b74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	0800cdf8 	.word	0x0800cdf8

08003b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b88:	f7ff ffdc 	bl	8003b44 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	0b5b      	lsrs	r3, r3, #13
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9a:	5cd3      	ldrb	r3, [r2, r3]
 8003b9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	0800cdf8 	.word	0x0800cdf8

08003bac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	220f      	movs	r2, #15
 8003bba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f003 0203 	and.w	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bc8:	4b0f      	ldr	r3, [pc, #60]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_GetClockConfig+0x5c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	08db      	lsrs	r3, r3, #3
 8003be6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <HAL_RCC_GetClockConfig+0x60>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 020f 	and.w	r2, r3, #15
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	601a      	str	r2, [r3, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	40023c00 	.word	0x40023c00

08003c10 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d105      	bne.n	8003c3a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fd fd27 	bl	8001688 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f814 	bl	8003c70 <HAL_SD_InitCard>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e00a      	b.n	8003c68 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c70:	b5b0      	push	{r4, r5, r7, lr}
 8003c72:	b08e      	sub	sp, #56	; 0x38
 8003c74:	af04      	add	r7, sp, #16
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c80:	2300      	movs	r3, #0
 8003c82:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003c8c:	2376      	movs	r3, #118	; 0x76
 8003c8e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681d      	ldr	r5, [r3, #0]
 8003c94:	466c      	mov	r4, sp
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c9e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003ca2:	f107 0308 	add.w	r3, r7, #8
 8003ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f002 fbf7 	bl	800649c <SDIO_Init>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003cb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e031      	b.n	8003d24 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_SD_InitCard+0xbc>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f002 fc2f 	bl	800652e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003cd0:	4b16      	ldr	r3, [pc, #88]	; (8003d2c <HAL_SD_InitCard+0xbc>)
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 ffdc 	bl	8004c94 <SD_PowerON>
 8003cdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cde:	6a3b      	ldr	r3, [r7, #32]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00b      	beq.n	8003cfc <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e013      	b.n	8003d24 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fefb 	bl	8004af8 <SD_InitCard>
 8003d02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3728      	adds	r7, #40	; 0x28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d2c:	422580a0 	.word	0x422580a0

08003d30 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08c      	sub	sp, #48	; 0x30
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d107      	bne.n	8003d58 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0c9      	b.n	8003eec <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	f040 80c2 	bne.w	8003eea <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d907      	bls.n	8003d8a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e0b0      	b.n	8003eec <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2200      	movs	r2, #0
 8003d98:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	6812      	ldr	r2, [r2, #0]
 8003da4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8003da8:	f043 0302 	orr.w	r3, r3, #2
 8003dac:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db2:	4a50      	ldr	r2, [pc, #320]	; (8003ef4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8003db4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	4a4f      	ldr	r2, [pc, #316]	; (8003ef8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8003dbc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3380      	adds	r3, #128	; 0x80
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	025b      	lsls	r3, r3, #9
 8003dd8:	089b      	lsrs	r3, r3, #2
 8003dda:	f7fe fdc1 	bl	8002960 <HAL_DMA_Start_IT>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d017      	beq.n	8003e14 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8003df2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a40      	ldr	r2, [pc, #256]	; (8003efc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e06b      	b.n	8003eec <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8003e14:	4b3a      	ldr	r3, [pc, #232]	; (8003f00 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d002      	beq.n	8003e28 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	025b      	lsls	r3, r3, #9
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e30:	4618      	mov	r0, r3
 8003e32:	f002 fc0f 	bl	8006654 <SDMMC_CmdBlockLength>
 8003e36:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00f      	beq.n	8003e5e <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2e      	ldr	r2, [pc, #184]	; (8003efc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4c:	431a      	orrs	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e046      	b.n	8003eec <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e62:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	025b      	lsls	r3, r3, #9
 8003e68:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003e6a:	2390      	movs	r3, #144	; 0x90
 8003e6c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8003e76:	2301      	movs	r3, #1
 8003e78:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f107 0210 	add.w	r2, r7, #16
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 fbb9 	bl	80065fc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d90a      	bls.n	8003ea6 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2282      	movs	r2, #130	; 0x82
 8003e94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f002 fc1d 	bl	80066dc <SDMMC_CmdReadMultiBlock>
 8003ea2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003ea4:	e009      	b.n	8003eba <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2281      	movs	r2, #129	; 0x81
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f002 fbf0 	bl	8006698 <SDMMC_CmdReadSingleBlock>
 8003eb8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8003eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d012      	beq.n	8003ee6 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	; (8003efc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e002      	b.n	8003eec <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	e000      	b.n	8003eec <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3730      	adds	r7, #48	; 0x30
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	08004907 	.word	0x08004907
 8003ef8:	08004979 	.word	0x08004979
 8003efc:	004005ff 	.word	0x004005ff
 8003f00:	4225858c 	.word	0x4225858c

08003f04 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d107      	bne.n	8003f2c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e0ce      	b.n	80040ca <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	f040 80c7 	bne.w	80040c8 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003f40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	441a      	add	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d907      	bls.n	8003f5e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e0b5      	b.n	80040ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2203      	movs	r2, #3
 8003f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8003f7c:	f043 0302 	orr.w	r3, r3, #2
 8003f80:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	4a53      	ldr	r2, [pc, #332]	; (80040d4 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8003f88:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	4a52      	ldr	r2, [pc, #328]	; (80040d8 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8003f90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	2200      	movs	r2, #0
 8003f98:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8003fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa4:	025b      	lsls	r3, r3, #9
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f002 fb4f 	bl	8006654 <SDMMC_CmdBlockLength>
 8003fb6:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00f      	beq.n	8003fde <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a46      	ldr	r2, [pc, #280]	; (80040dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e075      	b.n	80040ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d90a      	bls.n	8003ffa <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	22a0      	movs	r2, #160	; 0xa0
 8003fe8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f002 fbb7 	bl	8006764 <SDMMC_CmdWriteMultiBlock>
 8003ff6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003ff8:	e009      	b.n	800400e <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2290      	movs	r2, #144	; 0x90
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004006:	4618      	mov	r0, r3
 8004008:	f002 fb8a 	bl	8006720 <SDMMC_CmdWriteSingleBlock>
 800400c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	2b00      	cmp	r3, #0
 8004012:	d012      	beq.n	800403a <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a30      	ldr	r2, [pc, #192]	; (80040dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004022:	431a      	orrs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e047      	b.n	80040ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800403a:	4b29      	ldr	r3, [pc, #164]	; (80040e0 <HAL_SD_WriteBlocks_DMA+0x1dc>)
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3380      	adds	r3, #128	; 0x80
 800404c:	461a      	mov	r2, r3
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	025b      	lsls	r3, r3, #9
 8004052:	089b      	lsrs	r3, r3, #2
 8004054:	f7fe fc84 	bl	8002960 <HAL_DMA_Start_IT>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01c      	beq.n	8004098 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004064:	68fa      	ldr	r2, [r7, #12]
 8004066:	6812      	ldr	r2, [r2, #0]
 8004068:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800406c:	f023 0302 	bic.w	r3, r3, #2
 8004070:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004078:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e018      	b.n	80040ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	025b      	lsls	r3, r3, #9
 80040a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80040a4:	2390      	movs	r3, #144	; 0x90
 80040a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80040b0:	2301      	movs	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f107 0210 	add.w	r2, r7, #16
 80040bc:	4611      	mov	r1, r2
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 fa9c 	bl	80065fc <SDIO_ConfigData>

      return HAL_OK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e000      	b.n	80040ca <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 80040c8:	2302      	movs	r3, #2
  }
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3730      	adds	r7, #48	; 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	080048dd 	.word	0x080048dd
 80040d8:	08004979 	.word	0x08004979
 80040dc:	004005ff 	.word	0x004005ff
 80040e0:	4225858c 	.word	0x4225858c

080040e4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_SD_IRQHandler+0x2e>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 ffd8 	bl	80050c0 <SD_Read_IT>
 8004110:	e165      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 808f 	beq.w	8004240 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800412a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800413a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800413e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 0308 	and.w	r3, r3, #8
 8004156:	2b00      	cmp	r3, #0
 8004158:	d039      	beq.n	80041ce <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d104      	bne.n	800416e <HAL_SD_IRQHandler+0x8a>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d011      	beq.n	8004192 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f002 fb18 	bl	80067a8 <SDMMC_CmdStopTransfer>
 8004178:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f92f 	bl	80043f0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f240 523a 	movw	r2, #1338	; 0x53a
 800419a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d104      	bne.n	80041be <HAL_SD_IRQHandler+0xda>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f002 ff76 	bl	80070b0 <HAL_SD_RxCpltCallback>
 80041c4:	e10b      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f002 ff68 	bl	800709c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041cc:	e107      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8102 	beq.w	80043de <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0320 	and.w	r3, r3, #32
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d011      	beq.n	8004208 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4618      	mov	r0, r3
 80041ea:	f002 fadd 	bl	80067a8 <SDMMC_CmdStopTransfer>
 80041ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d008      	beq.n	8004208 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	431a      	orrs	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 f8f4 	bl	80043f0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f003 0301 	and.w	r3, r3, #1
 800420e:	2b00      	cmp	r3, #0
 8004210:	f040 80e5 	bne.w	80043de <HAL_SD_IRQHandler+0x2fa>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 80df 	bne.w	80043de <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f022 0208 	bic.w	r2, r2, #8
 800422e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f002 ff2f 	bl	800709c <HAL_SD_TxCpltCallback>
}
 800423e:	e0ce      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d008      	beq.n	8004260 <HAL_SD_IRQHandler+0x17c>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 ff82 	bl	8005162 <SD_Write_IT>
 800425e:	e0be      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004266:	f240 233a 	movw	r3, #570	; 0x23a
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80b6 	beq.w	80043de <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d005      	beq.n	800428c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004284:	f043 0202 	orr.w	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	f043 0208 	orr.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	f003 0320 	and.w	r3, r3, #32
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	f043 0220 	orr.w	r2, r3, #32
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d005      	beq.n	80042da <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d2:	f043 0210 	orr.w	r2, r3, #16
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f043 0208 	orr.w	r2, r3, #8
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f240 723a 	movw	r2, #1850	; 0x73a
 80042fc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6812      	ldr	r2, [r2, #0]
 8004308:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800430c:	f023 0302 	bic.w	r3, r3, #2
 8004310:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4618      	mov	r0, r3
 8004318:	f002 fa46 	bl	80067a8 <SDMMC_CmdStopTransfer>
 800431c:	4602      	mov	r2, r0
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00a      	beq.n	8004348 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 f855 	bl	80043f0 <HAL_SD_ErrorCallback>
}
 8004346:	e04a      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434e:	2b00      	cmp	r3, #0
 8004350:	d045      	beq.n	80043de <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d104      	bne.n	8004366 <HAL_SD_IRQHandler+0x282>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f003 0320 	and.w	r3, r3, #32
 8004362:	2b00      	cmp	r3, #0
 8004364:	d011      	beq.n	800438a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <HAL_SD_IRQHandler+0x304>)
 800436c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe fb4c 	bl	8002a10 <HAL_DMA_Abort_IT>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d02f      	beq.n	80043de <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fb4a 	bl	8004a1c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004388:	e029      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d104      	bne.n	800439e <HAL_SD_IRQHandler+0x2ba>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d011      	beq.n	80043c2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	4a12      	ldr	r2, [pc, #72]	; (80043ec <HAL_SD_IRQHandler+0x308>)
 80043a4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fe fb30 	bl	8002a10 <HAL_DMA_Abort_IT>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d013      	beq.n	80043de <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fb65 	bl	8004a8a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80043c0:	e00d      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f002 fe56 	bl	8007088 <HAL_SD_AbortCallback>
}
 80043dc:	e7ff      	b.n	80043de <HAL_SD_IRQHandler+0x2fa>
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	08004a1d 	.word	0x08004a1d
 80043ec:	08004a8b 	.word	0x08004a8b

080043f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004412:	0f9b      	lsrs	r3, r3, #30
 8004414:	b2da      	uxtb	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441e:	0e9b      	lsrs	r3, r3, #26
 8004420:	b2db      	uxtb	r3, r3
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	b2da      	uxtb	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004430:	0e1b      	lsrs	r3, r3, #24
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	b2da      	uxtb	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004442:	0c1b      	lsrs	r3, r3, #16
 8004444:	b2da      	uxtb	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	b2da      	uxtb	r2, r3
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800445a:	b2da      	uxtb	r2, r3
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004464:	0d1b      	lsrs	r3, r3, #20
 8004466:	b29a      	uxth	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004470:	0c1b      	lsrs	r3, r3, #16
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	b2da      	uxtb	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004482:	0bdb      	lsrs	r3, r3, #15
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004494:	0b9b      	lsrs	r3, r3, #14
 8004496:	b2db      	uxtb	r3, r3
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	b2da      	uxtb	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a6:	0b5b      	lsrs	r3, r3, #13
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	b2da      	uxtb	r2, r3
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b8:	0b1b      	lsrs	r3, r3, #12
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d163      	bne.n	800459c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d8:	009a      	lsls	r2, r3, #2
 80044da:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044de:	4013      	ands	r3, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80044e4:	0f92      	lsrs	r2, r2, #30
 80044e6:	431a      	orrs	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f0:	0edb      	lsrs	r3, r3, #27
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004502:	0e1b      	lsrs	r3, r3, #24
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	b2da      	uxtb	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004514:	0d5b      	lsrs	r3, r3, #21
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	b2da      	uxtb	r2, r3
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004526:	0c9b      	lsrs	r3, r3, #18
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	b2da      	uxtb	r2, r3
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004538:	0bdb      	lsrs	r3, r3, #15
 800453a:	b2db      	uxtb	r3, r3
 800453c:	f003 0307 	and.w	r3, r3, #7
 8004540:	b2da      	uxtb	r2, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	7e1b      	ldrb	r3, [r3, #24]
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	3302      	adds	r3, #2
 800455c:	2201      	movs	r2, #1
 800455e:	fa02 f303 	lsl.w	r3, r2, r3
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004566:	fb02 f203 	mul.w	r2, r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	7a1b      	ldrb	r3, [r3, #8]
 8004572:	b2db      	uxtb	r3, r3
 8004574:	f003 030f 	and.w	r3, r3, #15
 8004578:	2201      	movs	r2, #1
 800457a:	409a      	lsls	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004588:	0a52      	lsrs	r2, r2, #9
 800458a:	fb02 f203 	mul.w	r2, r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004598:	661a      	str	r2, [r3, #96]	; 0x60
 800459a:	e031      	b.n	8004600 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d11d      	bne.n	80045e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b2:	0c1b      	lsrs	r3, r3, #16
 80045b4:	431a      	orrs	r2, r3
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	3301      	adds	r3, #1
 80045c0:	029a      	lsls	r2, r3, #10
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	661a      	str	r2, [r3, #96]	; 0x60
 80045de:	e00f      	b.n	8004600 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a58      	ldr	r2, [pc, #352]	; (8004748 <HAL_SD_GetCardCSD+0x344>)
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e09d      	b.n	800473c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004604:	0b9b      	lsrs	r3, r3, #14
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	b2da      	uxtb	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004616:	09db      	lsrs	r3, r3, #7
 8004618:	b2db      	uxtb	r3, r3
 800461a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461e:	b2da      	uxtb	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004628:	b2db      	uxtb	r3, r3
 800462a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462e:	b2da      	uxtb	r2, r3
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004638:	0fdb      	lsrs	r3, r3, #31
 800463a:	b2da      	uxtb	r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	0f5b      	lsrs	r3, r3, #29
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	b2da      	uxtb	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004656:	0e9b      	lsrs	r3, r3, #26
 8004658:	b2db      	uxtb	r3, r3
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	b2da      	uxtb	r2, r3
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004668:	0d9b      	lsrs	r3, r3, #22
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	b2da      	uxtb	r2, r3
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	0d5b      	lsrs	r3, r3, #21
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	b2da      	uxtb	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	0c1b      	lsrs	r3, r3, #16
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	0bdb      	lsrs	r3, r3, #15
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	0b9b      	lsrs	r3, r3, #14
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	0b5b      	lsrs	r3, r3, #13
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e6:	0b1b      	lsrs	r3, r3, #12
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fa:	0a9b      	lsrs	r3, r3, #10
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	b2da      	uxtb	r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470e:	0a1b      	lsrs	r3, r3, #8
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	b2da      	uxtb	r2, r3
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	085b      	lsrs	r3, r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800472a:	b2da      	uxtb	r2, r3
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	004005ff 	.word	0x004005ff

0800474c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80047a4:	b5b0      	push	{r4, r5, r7, lr}
 80047a6:	b08e      	sub	sp, #56	; 0x38
 80047a8:	af04      	add	r7, sp, #16
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2203      	movs	r2, #3
 80047b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d02e      	beq.n	800481c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c4:	d106      	bne.n	80047d4 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	639a      	str	r2, [r3, #56]	; 0x38
 80047d2:	e029      	b.n	8004828 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047da:	d10a      	bne.n	80047f2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fb0f 	bl	8004e00 <SD_WideBus_Enable>
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
 80047f0:	e01a      	b.n	8004828 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fb4c 	bl	8004e96 <SD_WideBus_Disable>
 80047fe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
 800480c:	e00c      	b.n	8004828 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004812:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
 800481a:	e005      	b.n	8004828 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004836:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e024      	b.n	800488e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681d      	ldr	r5, [r3, #0]
 800486a:	466c      	mov	r4, sp
 800486c:	f107 0318 	add.w	r3, r7, #24
 8004870:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004874:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004878:	f107 030c 	add.w	r3, r7, #12
 800487c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800487e:	4628      	mov	r0, r5
 8004880:	f001 fe0c 	bl	800649c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3728      	adds	r7, #40	; 0x28
 8004892:	46bd      	mov	sp, r7
 8004894:	bdb0      	pop	{r4, r5, r7, pc}
 8004896:	bf00      	nop
 8004898:	004005ff 	.word	0x004005ff

0800489c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80048a8:	f107 030c 	add.w	r3, r7, #12
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fa7e 	bl	8004db0 <SD_SendStatus>
 80048b4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d005      	beq.n	80048c8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	431a      	orrs	r2, r3
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	0a5b      	lsrs	r3, r3, #9
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80048d2:	693b      	ldr	r3, [r7, #16]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80048fa:	bf00      	nop
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b084      	sub	sp, #16
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b82      	cmp	r3, #130	; 0x82
 800491a:	d111      	bne.n	8004940 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f001 ff41 	bl	80067a8 <SDMMC_CmdStopTransfer>
 8004926:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	431a      	orrs	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff fd58 	bl	80043f0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0208 	bic.w	r2, r2, #8
 800494e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f240 523a 	movw	r2, #1338	; 0x53a
 8004958:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f002 fba1 	bl	80070b0 <HAL_SD_RxCpltCallback>
#endif
}
 800496e:	bf00      	nop
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7fe f9ee 	bl	8002d68 <HAL_DMA_GetError>
 800498c:	4603      	mov	r3, r0
 800498e:	2b02      	cmp	r3, #2
 8004990:	d03e      	beq.n	8004a10 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004998:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d002      	beq.n	80049ae <SD_DMAError+0x36>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d12d      	bne.n	8004a0a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a19      	ldr	r2, [pc, #100]	; (8004a18 <SD_DMAError+0xa0>)
 80049b4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80049d2:	6978      	ldr	r0, [r7, #20]
 80049d4:	f7ff ff62 	bl	800489c <HAL_SD_GetCardState>
 80049d8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	2b06      	cmp	r3, #6
 80049de:	d002      	beq.n	80049e6 <SD_DMAError+0x6e>
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d10a      	bne.n	80049fc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 fedc 	bl	80067a8 <SDMMC_CmdStopTransfer>
 80049f0:	4602      	mov	r2, r0
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	431a      	orrs	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f7ff fcf0 	bl	80043f0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004a10:	bf00      	nop
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	004005ff 	.word	0x004005ff

08004a1c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a32:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ff31 	bl	800489c <HAL_SD_GetCardState>
 8004a3a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b06      	cmp	r3, #6
 8004a4e:	d002      	beq.n	8004a56 <SD_DMATxAbort+0x3a>
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b05      	cmp	r3, #5
 8004a54:	d10a      	bne.n	8004a6c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 fea4 	bl	80067a8 <SDMMC_CmdStopTransfer>
 8004a60:	4602      	mov	r2, r0
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f002 fb07 	bl	8007088 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004a7a:	e002      	b.n	8004a82 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff fcb7 	bl	80043f0 <HAL_SD_ErrorCallback>
}
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8004a8a:	b580      	push	{r7, lr}
 8004a8c:	b084      	sub	sp, #16
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004aa0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7ff fefa 	bl	800489c <HAL_SD_GetCardState>
 8004aa8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b06      	cmp	r3, #6
 8004abc:	d002      	beq.n	8004ac4 <SD_DMARxAbort+0x3a>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b05      	cmp	r3, #5
 8004ac2:	d10a      	bne.n	8004ada <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f001 fe6d 	bl	80067a8 <SDMMC_CmdStopTransfer>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad4:	431a      	orrs	r2, r3
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d103      	bne.n	8004aea <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f002 fad0 	bl	8007088 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004ae8:	e002      	b.n	8004af0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7ff fc80 	bl	80043f0 <HAL_SD_ErrorCallback>
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004af8:	b5b0      	push	{r4, r5, r7, lr}
 8004afa:	b094      	sub	sp, #80	; 0x50
 8004afc:	af04      	add	r7, sp, #16
 8004afe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b00:	2301      	movs	r3, #1
 8004b02:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 fd1f 	bl	800654c <SDIO_GetPowerState>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b14:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b18:	e0b7      	b.n	8004c8a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1e:	2b03      	cmp	r3, #3
 8004b20:	d02f      	beq.n	8004b82 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f001 ff48 	bl	80069bc <SDMMC_CmdSendCID>
 8004b2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d001      	beq.n	8004b38 <SD_InitCard+0x40>
    {
      return errorstate;
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	e0a8      	b.n	8004c8a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f001 fd49 	bl	80065d6 <SDIO_GetResponse>
 8004b44:	4602      	mov	r2, r0
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2104      	movs	r1, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f001 fd40 	bl	80065d6 <SDIO_GetResponse>
 8004b56:	4602      	mov	r2, r0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2108      	movs	r1, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f001 fd37 	bl	80065d6 <SDIO_GetResponse>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	210c      	movs	r1, #12
 8004b74:	4618      	mov	r0, r3
 8004b76:	f001 fd2e 	bl	80065d6 <SDIO_GetResponse>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	2b03      	cmp	r3, #3
 8004b88:	d00d      	beq.n	8004ba6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f107 020e 	add.w	r2, r7, #14
 8004b92:	4611      	mov	r1, r2
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 ff4e 	bl	8006a36 <SDMMC_CmdSetRelAdd>
 8004b9a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d001      	beq.n	8004ba6 <SD_InitCard+0xae>
    {
      return errorstate;
 8004ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba4:	e071      	b.n	8004c8a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d036      	beq.n	8004c1c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004bae:	89fb      	ldrh	r3, [r7, #14]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bbe:	041b      	lsls	r3, r3, #16
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4610      	mov	r0, r2
 8004bc4:	f001 ff18 	bl	80069f8 <SDMMC_CmdSendCSD>
 8004bc8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d001      	beq.n	8004bd4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd2:	e05a      	b.n	8004c8a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 fcfb 	bl	80065d6 <SDIO_GetResponse>
 8004be0:	4602      	mov	r2, r0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2104      	movs	r1, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fcf2 	bl	80065d6 <SDIO_GetResponse>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2108      	movs	r1, #8
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f001 fce9 	bl	80065d6 <SDIO_GetResponse>
 8004c04:	4602      	mov	r2, r0
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	210c      	movs	r1, #12
 8004c10:	4618      	mov	r0, r3
 8004c12:	f001 fce0 	bl	80065d6 <SDIO_GetResponse>
 8004c16:	4602      	mov	r2, r0
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2104      	movs	r1, #4
 8004c22:	4618      	mov	r0, r3
 8004c24:	f001 fcd7 	bl	80065d6 <SDIO_GetResponse>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	0d1a      	lsrs	r2, r3, #20
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	4619      	mov	r1, r3
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff fbe4 	bl	8004404 <HAL_SD_GetCardCSD>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c46:	e020      	b.n	8004c8a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6819      	ldr	r1, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	f04f 0400 	mov.w	r4, #0
 8004c56:	461a      	mov	r2, r3
 8004c58:	4623      	mov	r3, r4
 8004c5a:	4608      	mov	r0, r1
 8004c5c:	f001 fdc6 	bl	80067ec <SDMMC_CmdSelDesel>
 8004c60:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <SD_InitCard+0x174>
  {
    return errorstate;
 8004c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6a:	e00e      	b.n	8004c8a <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681d      	ldr	r5, [r3, #0]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	466c      	mov	r4, sp
 8004c74:	f103 0210 	add.w	r2, r3, #16
 8004c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c7e:	3304      	adds	r3, #4
 8004c80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c82:	4628      	mov	r0, r5
 8004c84:	f001 fc0a 	bl	800649c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3740      	adds	r7, #64	; 0x40
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004c94 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f001 fdc0 	bl	8006832 <SDMMC_CmdGoIdleState>
 8004cb2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <SD_PowerON+0x2a>
  {
    return errorstate;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	e072      	b.n	8004da4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f001 fdd3 	bl	800686e <SDMMC_CmdOperCond>
 8004cc8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00d      	beq.n	8004cec <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fda9 	bl	8006832 <SDMMC_CmdGoIdleState>
 8004ce0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d004      	beq.n	8004cf2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	e05b      	b.n	8004da4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d137      	bne.n	8004d6a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f001 fdd3 	bl	80068ac <SDMMC_CmdAppCommand>
 8004d06:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d02d      	beq.n	8004d6a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d0e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d12:	e047      	b.n	8004da4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2100      	movs	r1, #0
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 fdc6 	bl	80068ac <SDMMC_CmdAppCommand>
 8004d20:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <SD_PowerON+0x98>
    {
      return errorstate;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	e03b      	b.n	8004da4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	491e      	ldr	r1, [pc, #120]	; (8004dac <SD_PowerON+0x118>)
 8004d32:	4618      	mov	r0, r3
 8004d34:	f001 fddc 	bl	80068f0 <SDMMC_CmdAppOperCommand>
 8004d38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d44:	e02e      	b.n	8004da4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 fc42 	bl	80065d6 <SDIO_GetResponse>
 8004d52:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	0fdb      	lsrs	r3, r3, #31
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <SD_PowerON+0xcc>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <SD_PowerON+0xce>
 8004d60:	2300      	movs	r3, #0
 8004d62:	613b      	str	r3, [r7, #16]

    count++;
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3301      	adds	r3, #1
 8004d68:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d802      	bhi.n	8004d7a <SD_PowerON+0xe6>
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0cc      	beq.n	8004d14 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d902      	bls.n	8004d8a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d88:	e00c      	b.n	8004da4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	645a      	str	r2, [r3, #68]	; 0x44
 8004d9a:	e002      	b.n	8004da2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	c1100000 	.word	0xc1100000

08004db0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d102      	bne.n	8004dc6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004dc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dc4:	e018      	b.n	8004df8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f001 fe50 	bl	8006a78 <SDMMC_CmdSendStatus>
 8004dd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	e009      	b.n	8004df8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fbf3 	bl	80065d6 <SDIO_GetResponse>
 8004df0:	4602      	mov	r2, r0
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2100      	movs	r1, #0
 8004e16:	4618      	mov	r0, r3
 8004e18:	f001 fbdd 	bl	80065d6 <SDIO_GetResponse>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e26:	d102      	bne.n	8004e2e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e2c:	e02f      	b.n	8004e8e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004e2e:	f107 030c 	add.w	r3, r7, #12
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f879 	bl	8004f2c <SD_FindSCR>
 8004e3a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	e023      	b.n	8004e8e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d01c      	beq.n	8004e8a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e58:	041b      	lsls	r3, r3, #16
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4610      	mov	r0, r2
 8004e5e:	f001 fd25 	bl	80068ac <SDMMC_CmdAppCommand>
 8004e62:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	e00f      	b.n	8004e8e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2102      	movs	r1, #2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f001 fd5e 	bl	8006936 <SDMMC_CmdBusWidth>
 8004e7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	e003      	b.n	8004e8e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	e001      	b.n	8004e8e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b086      	sub	sp, #24
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fb92 	bl	80065d6 <SDIO_GetResponse>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ebc:	d102      	bne.n	8004ec4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ebe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ec2:	e02f      	b.n	8004f24 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	4619      	mov	r1, r3
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f82e 	bl	8004f2c <SD_FindSCR>
 8004ed0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d001      	beq.n	8004edc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	e023      	b.n	8004f24 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d01c      	beq.n	8004f20 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f001 fcda 	bl	80068ac <SDMMC_CmdAppCommand>
 8004ef8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	e00f      	b.n	8004f24 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f001 fd13 	bl	8006936 <SDMMC_CmdBusWidth>
 8004f10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	e003      	b.n	8004f24 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	e001      	b.n	8004f24 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3718      	adds	r7, #24
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b08f      	sub	sp, #60	; 0x3c
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f36:	f7fc ff13 	bl	8001d60 <HAL_GetTick>
 8004f3a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004f40:	2300      	movs	r3, #0
 8004f42:	60bb      	str	r3, [r7, #8]
 8004f44:	2300      	movs	r3, #0
 8004f46:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2108      	movs	r1, #8
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 fb7e 	bl	8006654 <SDMMC_CmdBlockLength>
 8004f58:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	e0a9      	b.n	80050b8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f6c:	041b      	lsls	r3, r3, #16
 8004f6e:	4619      	mov	r1, r3
 8004f70:	4610      	mov	r0, r2
 8004f72:	f001 fc9b 	bl	80068ac <SDMMC_CmdAppCommand>
 8004f76:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	e09a      	b.n	80050b8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f82:	f04f 33ff 	mov.w	r3, #4294967295
 8004f86:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004f88:	2308      	movs	r3, #8
 8004f8a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004f8c:	2330      	movs	r3, #48	; 0x30
 8004f8e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004f90:	2302      	movs	r3, #2
 8004f92:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f107 0210 	add.w	r2, r7, #16
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f001 fb28 	bl	80065fc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f001 fce2 	bl	800697a <SDMMC_CmdSendSCR>
 8004fb6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d022      	beq.n	8005004 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	e07a      	b.n	80050b8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d00e      	beq.n	8004fee <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6819      	ldr	r1, [r3, #0]
 8004fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	f107 0208 	add.w	r2, r7, #8
 8004fdc:	18d4      	adds	r4, r2, r3
 8004fde:	4608      	mov	r0, r1
 8004fe0:	f001 fa87 	bl	80064f2 <SDIO_ReadFIFO>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	6023      	str	r3, [r4, #0]
      index++;
 8004fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fea:	3301      	adds	r3, #1
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004fee:	f7fc feb7 	bl	8001d60 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d102      	bne.n	8005004 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004ffe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005002:	e059      	b.n	80050b8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800500a:	f240 432a 	movw	r3, #1066	; 0x42a
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0d6      	beq.n	8004fc2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d005      	beq.n	800502e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2208      	movs	r2, #8
 8005028:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800502a:	2308      	movs	r3, #8
 800502c:	e044      	b.n	80050b8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2202      	movs	r2, #2
 8005042:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005044:	2302      	movs	r3, #2
 8005046:	e037      	b.n	80050b8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	f003 0320 	and.w	r3, r3, #32
 8005052:	2b00      	cmp	r3, #0
 8005054:	d005      	beq.n	8005062 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2220      	movs	r2, #32
 800505c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800505e:	2320      	movs	r3, #32
 8005060:	e02a      	b.n	80050b8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f240 523a 	movw	r2, #1338	; 0x53a
 800506a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	061a      	lsls	r2, r3, #24
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005078:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005082:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	0e1b      	lsrs	r3, r3, #24
 8005088:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	601a      	str	r2, [r3, #0]
    scr++;
 800508e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005090:	3304      	adds	r3, #4
 8005092:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	061a      	lsls	r2, r3, #24
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	021b      	lsls	r3, r3, #8
 800509c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	0a1b      	lsrs	r3, r3, #8
 80050a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80050aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	0e1b      	lsrs	r3, r3, #24
 80050b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	373c      	adds	r7, #60	; 0x3c
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd90      	pop	{r4, r7, pc}

080050c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d03f      	beq.n	800515a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	e033      	b.n	8005148 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f001 fa04 	bl	80064f2 <SDIO_ReadFIFO>
 80050ea:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3301      	adds	r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	3b01      	subs	r3, #1
 80050fe:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	0a1b      	lsrs	r3, r3, #8
 8005104:	b2da      	uxtb	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	701a      	strb	r2, [r3, #0]
      tmp++;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	3301      	adds	r3, #1
 800510e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	3b01      	subs	r3, #1
 8005114:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	b2da      	uxtb	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3301      	adds	r3, #1
 8005124:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	3b01      	subs	r3, #1
 800512a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	0e1b      	lsrs	r3, r3, #24
 8005130:	b2da      	uxtb	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	3301      	adds	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	3b01      	subs	r3, #1
 8005140:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3301      	adds	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2b07      	cmp	r3, #7
 800514c:	d9c8      	bls.n	80050e0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800515a:	bf00      	nop
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b086      	sub	sp, #24
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005174:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d043      	beq.n	8005204 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	e037      	b.n	80051f2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	3b01      	subs	r3, #1
 8005192:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	021a      	lsls	r2, r3, #8
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	041a      	lsls	r2, r3, #16
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	3301      	adds	r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	3b01      	subs	r3, #1
 80051c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	061a      	lsls	r2, r3, #24
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	3b01      	subs	r3, #1
 80051da:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f107 0208 	add.w	r2, r7, #8
 80051e4:	4611      	mov	r1, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f001 f990 	bl	800650c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3301      	adds	r3, #1
 80051f0:	617b      	str	r3, [r7, #20]
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	2b07      	cmp	r3, #7
 80051f6:	d9c4      	bls.n	8005182 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005204:	bf00      	nop
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e056      	b.n	80052cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d106      	bne.n	800523e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7fc fb15 	bl	8001868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2202      	movs	r2, #2
 8005242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005254:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	431a      	orrs	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	ea42 0103 	orr.w	r1, r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	0c1b      	lsrs	r3, r3, #16
 800529c:	f003 0104 	and.w	r1, r3, #4
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	69da      	ldr	r2, [r3, #28]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e01d      	b.n	8005322 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f815 	bl	800532a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	3304      	adds	r3, #4
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f000 f968 	bl	80055e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800533e:	b480      	push	{r7}
 8005340:	b085      	sub	sp, #20
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f042 0201 	orr.w	r2, r2, #1
 8005354:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 0307 	and.w	r3, r3, #7
 8005360:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b06      	cmp	r3, #6
 8005366:	d007      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0201 	orr.w	r2, r2, #1
 8005376:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b082      	sub	sp, #8
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b02      	cmp	r3, #2
 800539a:	d122      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68db      	ldr	r3, [r3, #12]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d11b      	bne.n	80053e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f06f 0202 	mvn.w	r2, #2
 80053b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8ee 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 80053ce:	e005      	b.n	80053dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 f8e0 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f8f1 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d122      	bne.n	8005436 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	f003 0304 	and.w	r3, r3, #4
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d11b      	bne.n	8005436 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f06f 0204 	mvn.w	r2, #4
 8005406:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f8c4 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 8005422:	e005      	b.n	8005430 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f8b6 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f8c7 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b08      	cmp	r3, #8
 8005442:	d122      	bne.n	800548a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	f003 0308 	and.w	r3, r3, #8
 800544e:	2b08      	cmp	r3, #8
 8005450:	d11b      	bne.n	800548a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f06f 0208 	mvn.w	r2, #8
 800545a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2204      	movs	r2, #4
 8005460:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f89a 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 8005476:	e005      	b.n	8005484 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f88c 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f89d 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b10      	cmp	r3, #16
 8005496:	d122      	bne.n	80054de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f003 0310 	and.w	r3, r3, #16
 80054a2:	2b10      	cmp	r3, #16
 80054a4:	d11b      	bne.n	80054de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f06f 0210 	mvn.w	r2, #16
 80054ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2208      	movs	r2, #8
 80054b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d003      	beq.n	80054cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 f870 	bl	80055aa <HAL_TIM_IC_CaptureCallback>
 80054ca:	e005      	b.n	80054d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f000 f862 	bl	8005596 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f873 	bl	80055be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691b      	ldr	r3, [r3, #16]
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d10e      	bne.n	800550a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d107      	bne.n	800550a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f06f 0201 	mvn.w	r2, #1
 8005502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f7fb ff89 	bl	800141c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005514:	2b80      	cmp	r3, #128	; 0x80
 8005516:	d10e      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d107      	bne.n	8005536 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800552e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f903 	bl	800573c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d10e      	bne.n	8005562 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d107      	bne.n	8005562 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800555a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f000 f838 	bl	80055d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b20      	cmp	r3, #32
 800556e:	d10e      	bne.n	800558e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b20      	cmp	r3, #32
 800557c:	d107      	bne.n	800558e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f06f 0220 	mvn.w	r2, #32
 8005586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f000 f8cd 	bl	8005728 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005596:	b480      	push	{r7}
 8005598:	b083      	sub	sp, #12
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055b2:	bf00      	nop
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055be:	b480      	push	{r7}
 80055c0:	b083      	sub	sp, #12
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c6:	bf00      	nop
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
	...

080055e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a40      	ldr	r2, [pc, #256]	; (80056fc <TIM_Base_SetConfig+0x114>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005606:	d00f      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3d      	ldr	r2, [pc, #244]	; (8005700 <TIM_Base_SetConfig+0x118>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00b      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3c      	ldr	r2, [pc, #240]	; (8005704 <TIM_Base_SetConfig+0x11c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d007      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3b      	ldr	r2, [pc, #236]	; (8005708 <TIM_Base_SetConfig+0x120>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d003      	beq.n	8005628 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a3a      	ldr	r2, [pc, #232]	; (800570c <TIM_Base_SetConfig+0x124>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d108      	bne.n	800563a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800562e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a2f      	ldr	r2, [pc, #188]	; (80056fc <TIM_Base_SetConfig+0x114>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d02b      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005648:	d027      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2c      	ldr	r2, [pc, #176]	; (8005700 <TIM_Base_SetConfig+0x118>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d023      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2b      	ldr	r2, [pc, #172]	; (8005704 <TIM_Base_SetConfig+0x11c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01f      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2a      	ldr	r2, [pc, #168]	; (8005708 <TIM_Base_SetConfig+0x120>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01b      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a29      	ldr	r2, [pc, #164]	; (800570c <TIM_Base_SetConfig+0x124>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d017      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <TIM_Base_SetConfig+0x128>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a27      	ldr	r2, [pc, #156]	; (8005714 <TIM_Base_SetConfig+0x12c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00f      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a26      	ldr	r2, [pc, #152]	; (8005718 <TIM_Base_SetConfig+0x130>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d00b      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a25      	ldr	r2, [pc, #148]	; (800571c <TIM_Base_SetConfig+0x134>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a24      	ldr	r2, [pc, #144]	; (8005720 <TIM_Base_SetConfig+0x138>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a23      	ldr	r2, [pc, #140]	; (8005724 <TIM_Base_SetConfig+0x13c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d108      	bne.n	80056ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	689a      	ldr	r2, [r3, #8]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a0a      	ldr	r2, [pc, #40]	; (80056fc <TIM_Base_SetConfig+0x114>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_Base_SetConfig+0xf8>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a0c      	ldr	r2, [pc, #48]	; (800570c <TIM_Base_SetConfig+0x124>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d103      	bne.n	80056e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	615a      	str	r2, [r3, #20]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40010000 	.word	0x40010000
 8005700:	40000400 	.word	0x40000400
 8005704:	40000800 	.word	0x40000800
 8005708:	40000c00 	.word	0x40000c00
 800570c:	40010400 	.word	0x40010400
 8005710:	40014000 	.word	0x40014000
 8005714:	40014400 	.word	0x40014400
 8005718:	40014800 	.word	0x40014800
 800571c:	40001800 	.word	0x40001800
 8005720:	40001c00 	.word	0x40001c00
 8005724:	40002000 	.word	0x40002000

08005728 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr

08005750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e03f      	b.n	80057e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f7fc f8be 	bl	80018f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2224      	movs	r2, #36	; 0x24
 8005780:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 fb05 	bl	8005da4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691a      	ldr	r2, [r3, #16]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695a      	ldr	r2, [r3, #20]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2220      	movs	r2, #32
 80057d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3708      	adds	r7, #8
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b088      	sub	sp, #32
 80057ee:	af02      	add	r7, sp, #8
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	603b      	str	r3, [r7, #0]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b20      	cmp	r3, #32
 8005808:	f040 8083 	bne.w	8005912 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_UART_Transmit+0x2e>
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e07b      	b.n	8005914 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_UART_Transmit+0x40>
 8005826:	2302      	movs	r3, #2
 8005828:	e074      	b.n	8005914 <HAL_UART_Transmit+0x12a>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2221      	movs	r2, #33	; 0x21
 800583c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005840:	f7fc fa8e 	bl	8001d60 <HAL_GetTick>
 8005844:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	88fa      	ldrh	r2, [r7, #6]
 800584a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	88fa      	ldrh	r2, [r7, #6]
 8005850:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800585a:	e042      	b.n	80058e2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005860:	b29b      	uxth	r3, r3
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	d122      	bne.n	80058ba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	2200      	movs	r2, #0
 800587c:	2180      	movs	r1, #128	; 0x80
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fa12 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e042      	b.n	8005914 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d103      	bne.n	80058b2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	3302      	adds	r3, #2
 80058ae:	60bb      	str	r3, [r7, #8]
 80058b0:	e017      	b.n	80058e2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60bb      	str	r3, [r7, #8]
 80058b8:	e013      	b.n	80058e2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	9300      	str	r3, [sp, #0]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	2200      	movs	r2, #0
 80058c2:	2180      	movs	r1, #128	; 0x80
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 f9ef 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d001      	beq.n	80058d4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e01f      	b.n	8005914 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	60ba      	str	r2, [r7, #8]
 80058da:	781a      	ldrb	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1b7      	bne.n	800585c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	2200      	movs	r2, #0
 80058f4:	2140      	movs	r1, #64	; 0x40
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f9d6 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e006      	b.n	8005914 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	e000      	b.n	8005914 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005912:	2302      	movs	r3, #2
  }
}
 8005914:	4618      	mov	r0, r3
 8005916:	3718      	adds	r7, #24
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	4613      	mov	r3, r2
 800592a:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800592c:	2300      	movs	r3, #0
 800592e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b20      	cmp	r3, #32
 800593a:	f040 8090 	bne.w	8005a5e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d002      	beq.n	800594a <HAL_UART_Receive+0x2e>
 8005944:	88fb      	ldrh	r3, [r7, #6]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e088      	b.n	8005a60 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_UART_Receive+0x40>
 8005958:	2302      	movs	r3, #2
 800595a:	e081      	b.n	8005a60 <HAL_UART_Receive+0x144>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2222      	movs	r2, #34	; 0x22
 800596e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005972:	f7fc f9f5 	bl	8001d60 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	88fa      	ldrh	r2, [r7, #6]
 800597c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800598c:	e05c      	b.n	8005a48 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a4:	d12b      	bne.n	80059fe <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	2120      	movs	r1, #32
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 f979 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e04f      	b.n	8005a60 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10c      	bne.n	80059e6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059d8:	b29a      	uxth	r2, r3
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	3302      	adds	r3, #2
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	e030      	b.n	8005a48 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	3301      	adds	r3, #1
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	e024      	b.n	8005a48 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2200      	movs	r2, #0
 8005a06:	2120      	movs	r1, #32
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f000 f94d 	bl	8005ca8 <UART_WaitOnFlagUntilTimeout>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e023      	b.n	8005a60 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d108      	bne.n	8005a32 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6859      	ldr	r1, [r3, #4]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	60ba      	str	r2, [r7, #8]
 8005a2c:	b2ca      	uxtb	r2, r1
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e00a      	b.n	8005a48 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	1c59      	adds	r1, r3, #1
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d19d      	bne.n	800598e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2220      	movs	r2, #32
 8005a56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e000      	b.n	8005a60 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b20      	cmp	r3, #32
 8005a80:	d166      	bne.n	8005b50 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <HAL_UART_Receive_DMA+0x26>
 8005a88:	88fb      	ldrh	r3, [r7, #6]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d101      	bne.n	8005a92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e05f      	b.n	8005b52 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_UART_Receive_DMA+0x38>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e058      	b.n	8005b52 <HAL_UART_Receive_DMA+0xea>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	88fa      	ldrh	r2, [r7, #6]
 8005ab2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2222      	movs	r2, #34	; 0x22
 8005abe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	4a25      	ldr	r2, [pc, #148]	; (8005b5c <HAL_UART_Receive_DMA+0xf4>)
 8005ac8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ace:	4a24      	ldr	r2, [pc, #144]	; (8005b60 <HAL_UART_Receive_DMA+0xf8>)
 8005ad0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad6:	4a23      	ldr	r2, [pc, #140]	; (8005b64 <HAL_UART_Receive_DMA+0xfc>)
 8005ad8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	2200      	movs	r2, #0
 8005ae0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3304      	adds	r3, #4
 8005af2:	4619      	mov	r1, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	f7fc ff31 	bl	8002960 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	613b      	str	r3, [r7, #16]
 8005b12:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0201 	orr.w	r2, r2, #1
 8005b3a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b4a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3718      	adds	r7, #24
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	08005b91 	.word	0x08005b91
 8005b60:	08005bf9 	.word	0x08005bf9
 8005b64:	08005c15 	.word	0x08005c15

08005b68 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d11e      	bne.n	8005bea <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005bc0:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695a      	ldr	r2, [r3, #20]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0201 	bic.w	r2, r2, #1
 8005bd0:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	695a      	ldr	r2, [r3, #20]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2220      	movs	r2, #32
 8005be6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7fb f864 	bl	8000cb8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c04:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f7ff ffae 	bl	8005b68 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c0c:	bf00      	nop
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c24:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c30:	2b80      	cmp	r3, #128	; 0x80
 8005c32:	bf0c      	ite	eq
 8005c34:	2301      	moveq	r3, #1
 8005c36:	2300      	movne	r3, #0
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b21      	cmp	r3, #33	; 0x21
 8005c46:	d108      	bne.n	8005c5a <UART_DMAError+0x46>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d005      	beq.n	8005c5a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	f000 f871 	bl	8005d3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	695b      	ldr	r3, [r3, #20]
 8005c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c64:	2b40      	cmp	r3, #64	; 0x40
 8005c66:	bf0c      	ite	eq
 8005c68:	2301      	moveq	r3, #1
 8005c6a:	2300      	movne	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	2b22      	cmp	r3, #34	; 0x22
 8005c7a:	d108      	bne.n	8005c8e <UART_DMAError+0x7a>
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2200      	movs	r2, #0
 8005c86:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c88:	68b8      	ldr	r0, [r7, #8]
 8005c8a:	f000 f86d 	bl	8005d68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	f043 0210 	orr.w	r2, r3, #16
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c9a:	68b8      	ldr	r0, [r7, #8]
 8005c9c:	f7ff ff6e 	bl	8005b7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cb8:	e02c      	b.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cba:	69bb      	ldr	r3, [r7, #24]
 8005cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc0:	d028      	beq.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d007      	beq.n	8005cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cc8:	f7fc f84a 	bl	8001d60 <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d21d      	bcs.n	8005d14 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ce6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695a      	ldr	r2, [r3, #20]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0201 	bic.w	r2, r2, #1
 8005cf6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e00f      	b.n	8005d34 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	79fb      	ldrb	r3, [r7, #7]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d0c3      	beq.n	8005cba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3710      	adds	r7, #16
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d52:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005d7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2220      	movs	r2, #32
 8005d94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da8:	b085      	sub	sp, #20
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689a      	ldr	r2, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005de6:	f023 030c 	bic.w	r3, r3, #12
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6812      	ldr	r2, [r2, #0]
 8005dee:	68f9      	ldr	r1, [r7, #12]
 8005df0:	430b      	orrs	r3, r1
 8005df2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e12:	f040 818b 	bne.w	800612c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4ac1      	ldr	r2, [pc, #772]	; (8006120 <UART_SetConfig+0x37c>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d005      	beq.n	8005e2c <UART_SetConfig+0x88>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4abf      	ldr	r2, [pc, #764]	; (8006124 <UART_SetConfig+0x380>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	f040 80bd 	bne.w	8005fa6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e2c:	f7fd feaa 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8005e30:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	461d      	mov	r5, r3
 8005e36:	f04f 0600 	mov.w	r6, #0
 8005e3a:	46a8      	mov	r8, r5
 8005e3c:	46b1      	mov	r9, r6
 8005e3e:	eb18 0308 	adds.w	r3, r8, r8
 8005e42:	eb49 0409 	adc.w	r4, r9, r9
 8005e46:	4698      	mov	r8, r3
 8005e48:	46a1      	mov	r9, r4
 8005e4a:	eb18 0805 	adds.w	r8, r8, r5
 8005e4e:	eb49 0906 	adc.w	r9, r9, r6
 8005e52:	f04f 0100 	mov.w	r1, #0
 8005e56:	f04f 0200 	mov.w	r2, #0
 8005e5a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005e5e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005e62:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005e66:	4688      	mov	r8, r1
 8005e68:	4691      	mov	r9, r2
 8005e6a:	eb18 0005 	adds.w	r0, r8, r5
 8005e6e:	eb49 0106 	adc.w	r1, r9, r6
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	461d      	mov	r5, r3
 8005e78:	f04f 0600 	mov.w	r6, #0
 8005e7c:	196b      	adds	r3, r5, r5
 8005e7e:	eb46 0406 	adc.w	r4, r6, r6
 8005e82:	461a      	mov	r2, r3
 8005e84:	4623      	mov	r3, r4
 8005e86:	f7fa f9ab 	bl	80001e0 <__aeabi_uldivmod>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	461a      	mov	r2, r3
 8005e90:	4ba5      	ldr	r3, [pc, #660]	; (8006128 <UART_SetConfig+0x384>)
 8005e92:	fba3 2302 	umull	r2, r3, r3, r2
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	461d      	mov	r5, r3
 8005ea0:	f04f 0600 	mov.w	r6, #0
 8005ea4:	46a9      	mov	r9, r5
 8005ea6:	46b2      	mov	sl, r6
 8005ea8:	eb19 0309 	adds.w	r3, r9, r9
 8005eac:	eb4a 040a 	adc.w	r4, sl, sl
 8005eb0:	4699      	mov	r9, r3
 8005eb2:	46a2      	mov	sl, r4
 8005eb4:	eb19 0905 	adds.w	r9, r9, r5
 8005eb8:	eb4a 0a06 	adc.w	sl, sl, r6
 8005ebc:	f04f 0100 	mov.w	r1, #0
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ec8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ecc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005ed0:	4689      	mov	r9, r1
 8005ed2:	4692      	mov	sl, r2
 8005ed4:	eb19 0005 	adds.w	r0, r9, r5
 8005ed8:	eb4a 0106 	adc.w	r1, sl, r6
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	461d      	mov	r5, r3
 8005ee2:	f04f 0600 	mov.w	r6, #0
 8005ee6:	196b      	adds	r3, r5, r5
 8005ee8:	eb46 0406 	adc.w	r4, r6, r6
 8005eec:	461a      	mov	r2, r3
 8005eee:	4623      	mov	r3, r4
 8005ef0:	f7fa f976 	bl	80001e0 <__aeabi_uldivmod>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	460c      	mov	r4, r1
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4b8b      	ldr	r3, [pc, #556]	; (8006128 <UART_SetConfig+0x384>)
 8005efc:	fba3 1302 	umull	r1, r3, r3, r2
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	2164      	movs	r1, #100	; 0x64
 8005f04:	fb01 f303 	mul.w	r3, r1, r3
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	3332      	adds	r3, #50	; 0x32
 8005f0e:	4a86      	ldr	r2, [pc, #536]	; (8006128 <UART_SetConfig+0x384>)
 8005f10:	fba2 2303 	umull	r2, r3, r2, r3
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f1c:	4498      	add	r8, r3
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	461d      	mov	r5, r3
 8005f22:	f04f 0600 	mov.w	r6, #0
 8005f26:	46a9      	mov	r9, r5
 8005f28:	46b2      	mov	sl, r6
 8005f2a:	eb19 0309 	adds.w	r3, r9, r9
 8005f2e:	eb4a 040a 	adc.w	r4, sl, sl
 8005f32:	4699      	mov	r9, r3
 8005f34:	46a2      	mov	sl, r4
 8005f36:	eb19 0905 	adds.w	r9, r9, r5
 8005f3a:	eb4a 0a06 	adc.w	sl, sl, r6
 8005f3e:	f04f 0100 	mov.w	r1, #0
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f52:	4689      	mov	r9, r1
 8005f54:	4692      	mov	sl, r2
 8005f56:	eb19 0005 	adds.w	r0, r9, r5
 8005f5a:	eb4a 0106 	adc.w	r1, sl, r6
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	461d      	mov	r5, r3
 8005f64:	f04f 0600 	mov.w	r6, #0
 8005f68:	196b      	adds	r3, r5, r5
 8005f6a:	eb46 0406 	adc.w	r4, r6, r6
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4623      	mov	r3, r4
 8005f72:	f7fa f935 	bl	80001e0 <__aeabi_uldivmod>
 8005f76:	4603      	mov	r3, r0
 8005f78:	460c      	mov	r4, r1
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	4b6a      	ldr	r3, [pc, #424]	; (8006128 <UART_SetConfig+0x384>)
 8005f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	2164      	movs	r1, #100	; 0x64
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	3332      	adds	r3, #50	; 0x32
 8005f90:	4a65      	ldr	r2, [pc, #404]	; (8006128 <UART_SetConfig+0x384>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	f003 0207 	and.w	r2, r3, #7
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4442      	add	r2, r8
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	e26f      	b.n	8006486 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005fa6:	f7fd fdd9 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 8005faa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	461d      	mov	r5, r3
 8005fb0:	f04f 0600 	mov.w	r6, #0
 8005fb4:	46a8      	mov	r8, r5
 8005fb6:	46b1      	mov	r9, r6
 8005fb8:	eb18 0308 	adds.w	r3, r8, r8
 8005fbc:	eb49 0409 	adc.w	r4, r9, r9
 8005fc0:	4698      	mov	r8, r3
 8005fc2:	46a1      	mov	r9, r4
 8005fc4:	eb18 0805 	adds.w	r8, r8, r5
 8005fc8:	eb49 0906 	adc.w	r9, r9, r6
 8005fcc:	f04f 0100 	mov.w	r1, #0
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005fd8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005fdc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005fe0:	4688      	mov	r8, r1
 8005fe2:	4691      	mov	r9, r2
 8005fe4:	eb18 0005 	adds.w	r0, r8, r5
 8005fe8:	eb49 0106 	adc.w	r1, r9, r6
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	461d      	mov	r5, r3
 8005ff2:	f04f 0600 	mov.w	r6, #0
 8005ff6:	196b      	adds	r3, r5, r5
 8005ff8:	eb46 0406 	adc.w	r4, r6, r6
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	4623      	mov	r3, r4
 8006000:	f7fa f8ee 	bl	80001e0 <__aeabi_uldivmod>
 8006004:	4603      	mov	r3, r0
 8006006:	460c      	mov	r4, r1
 8006008:	461a      	mov	r2, r3
 800600a:	4b47      	ldr	r3, [pc, #284]	; (8006128 <UART_SetConfig+0x384>)
 800600c:	fba3 2302 	umull	r2, r3, r3, r2
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	461d      	mov	r5, r3
 800601a:	f04f 0600 	mov.w	r6, #0
 800601e:	46a9      	mov	r9, r5
 8006020:	46b2      	mov	sl, r6
 8006022:	eb19 0309 	adds.w	r3, r9, r9
 8006026:	eb4a 040a 	adc.w	r4, sl, sl
 800602a:	4699      	mov	r9, r3
 800602c:	46a2      	mov	sl, r4
 800602e:	eb19 0905 	adds.w	r9, r9, r5
 8006032:	eb4a 0a06 	adc.w	sl, sl, r6
 8006036:	f04f 0100 	mov.w	r1, #0
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006042:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006046:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800604a:	4689      	mov	r9, r1
 800604c:	4692      	mov	sl, r2
 800604e:	eb19 0005 	adds.w	r0, r9, r5
 8006052:	eb4a 0106 	adc.w	r1, sl, r6
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	461d      	mov	r5, r3
 800605c:	f04f 0600 	mov.w	r6, #0
 8006060:	196b      	adds	r3, r5, r5
 8006062:	eb46 0406 	adc.w	r4, r6, r6
 8006066:	461a      	mov	r2, r3
 8006068:	4623      	mov	r3, r4
 800606a:	f7fa f8b9 	bl	80001e0 <__aeabi_uldivmod>
 800606e:	4603      	mov	r3, r0
 8006070:	460c      	mov	r4, r1
 8006072:	461a      	mov	r2, r3
 8006074:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <UART_SetConfig+0x384>)
 8006076:	fba3 1302 	umull	r1, r3, r3, r2
 800607a:	095b      	lsrs	r3, r3, #5
 800607c:	2164      	movs	r1, #100	; 0x64
 800607e:	fb01 f303 	mul.w	r3, r1, r3
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	3332      	adds	r3, #50	; 0x32
 8006088:	4a27      	ldr	r2, [pc, #156]	; (8006128 <UART_SetConfig+0x384>)
 800608a:	fba2 2303 	umull	r2, r3, r2, r3
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	005b      	lsls	r3, r3, #1
 8006092:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006096:	4498      	add	r8, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	461d      	mov	r5, r3
 800609c:	f04f 0600 	mov.w	r6, #0
 80060a0:	46a9      	mov	r9, r5
 80060a2:	46b2      	mov	sl, r6
 80060a4:	eb19 0309 	adds.w	r3, r9, r9
 80060a8:	eb4a 040a 	adc.w	r4, sl, sl
 80060ac:	4699      	mov	r9, r3
 80060ae:	46a2      	mov	sl, r4
 80060b0:	eb19 0905 	adds.w	r9, r9, r5
 80060b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80060b8:	f04f 0100 	mov.w	r1, #0
 80060bc:	f04f 0200 	mov.w	r2, #0
 80060c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060cc:	4689      	mov	r9, r1
 80060ce:	4692      	mov	sl, r2
 80060d0:	eb19 0005 	adds.w	r0, r9, r5
 80060d4:	eb4a 0106 	adc.w	r1, sl, r6
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	461d      	mov	r5, r3
 80060de:	f04f 0600 	mov.w	r6, #0
 80060e2:	196b      	adds	r3, r5, r5
 80060e4:	eb46 0406 	adc.w	r4, r6, r6
 80060e8:	461a      	mov	r2, r3
 80060ea:	4623      	mov	r3, r4
 80060ec:	f7fa f878 	bl	80001e0 <__aeabi_uldivmod>
 80060f0:	4603      	mov	r3, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	461a      	mov	r2, r3
 80060f6:	4b0c      	ldr	r3, [pc, #48]	; (8006128 <UART_SetConfig+0x384>)
 80060f8:	fba3 1302 	umull	r1, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	2164      	movs	r1, #100	; 0x64
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	3332      	adds	r3, #50	; 0x32
 800610a:	4a07      	ldr	r2, [pc, #28]	; (8006128 <UART_SetConfig+0x384>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 0207 	and.w	r2, r3, #7
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4442      	add	r2, r8
 800611c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800611e:	e1b2      	b.n	8006486 <UART_SetConfig+0x6e2>
 8006120:	40011000 	.word	0x40011000
 8006124:	40011400 	.word	0x40011400
 8006128:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4ad7      	ldr	r2, [pc, #860]	; (8006490 <UART_SetConfig+0x6ec>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d005      	beq.n	8006142 <UART_SetConfig+0x39e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4ad6      	ldr	r2, [pc, #856]	; (8006494 <UART_SetConfig+0x6f0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	f040 80d1 	bne.w	80062e4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006142:	f7fd fd1f 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 8006146:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	469a      	mov	sl, r3
 800614c:	f04f 0b00 	mov.w	fp, #0
 8006150:	46d0      	mov	r8, sl
 8006152:	46d9      	mov	r9, fp
 8006154:	eb18 0308 	adds.w	r3, r8, r8
 8006158:	eb49 0409 	adc.w	r4, r9, r9
 800615c:	4698      	mov	r8, r3
 800615e:	46a1      	mov	r9, r4
 8006160:	eb18 080a 	adds.w	r8, r8, sl
 8006164:	eb49 090b 	adc.w	r9, r9, fp
 8006168:	f04f 0100 	mov.w	r1, #0
 800616c:	f04f 0200 	mov.w	r2, #0
 8006170:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006174:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006178:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800617c:	4688      	mov	r8, r1
 800617e:	4691      	mov	r9, r2
 8006180:	eb1a 0508 	adds.w	r5, sl, r8
 8006184:	eb4b 0609 	adc.w	r6, fp, r9
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4619      	mov	r1, r3
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	f04f 0400 	mov.w	r4, #0
 800619a:	0094      	lsls	r4, r2, #2
 800619c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061a0:	008b      	lsls	r3, r1, #2
 80061a2:	461a      	mov	r2, r3
 80061a4:	4623      	mov	r3, r4
 80061a6:	4628      	mov	r0, r5
 80061a8:	4631      	mov	r1, r6
 80061aa:	f7fa f819 	bl	80001e0 <__aeabi_uldivmod>
 80061ae:	4603      	mov	r3, r0
 80061b0:	460c      	mov	r4, r1
 80061b2:	461a      	mov	r2, r3
 80061b4:	4bb8      	ldr	r3, [pc, #736]	; (8006498 <UART_SetConfig+0x6f4>)
 80061b6:	fba3 2302 	umull	r2, r3, r3, r2
 80061ba:	095b      	lsrs	r3, r3, #5
 80061bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	469b      	mov	fp, r3
 80061c4:	f04f 0c00 	mov.w	ip, #0
 80061c8:	46d9      	mov	r9, fp
 80061ca:	46e2      	mov	sl, ip
 80061cc:	eb19 0309 	adds.w	r3, r9, r9
 80061d0:	eb4a 040a 	adc.w	r4, sl, sl
 80061d4:	4699      	mov	r9, r3
 80061d6:	46a2      	mov	sl, r4
 80061d8:	eb19 090b 	adds.w	r9, r9, fp
 80061dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80061e0:	f04f 0100 	mov.w	r1, #0
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061f4:	4689      	mov	r9, r1
 80061f6:	4692      	mov	sl, r2
 80061f8:	eb1b 0509 	adds.w	r5, fp, r9
 80061fc:	eb4c 060a 	adc.w	r6, ip, sl
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4619      	mov	r1, r3
 8006206:	f04f 0200 	mov.w	r2, #0
 800620a:	f04f 0300 	mov.w	r3, #0
 800620e:	f04f 0400 	mov.w	r4, #0
 8006212:	0094      	lsls	r4, r2, #2
 8006214:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006218:	008b      	lsls	r3, r1, #2
 800621a:	461a      	mov	r2, r3
 800621c:	4623      	mov	r3, r4
 800621e:	4628      	mov	r0, r5
 8006220:	4631      	mov	r1, r6
 8006222:	f7f9 ffdd 	bl	80001e0 <__aeabi_uldivmod>
 8006226:	4603      	mov	r3, r0
 8006228:	460c      	mov	r4, r1
 800622a:	461a      	mov	r2, r3
 800622c:	4b9a      	ldr	r3, [pc, #616]	; (8006498 <UART_SetConfig+0x6f4>)
 800622e:	fba3 1302 	umull	r1, r3, r3, r2
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2164      	movs	r1, #100	; 0x64
 8006236:	fb01 f303 	mul.w	r3, r1, r3
 800623a:	1ad3      	subs	r3, r2, r3
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	3332      	adds	r3, #50	; 0x32
 8006240:	4a95      	ldr	r2, [pc, #596]	; (8006498 <UART_SetConfig+0x6f4>)
 8006242:	fba2 2303 	umull	r2, r3, r2, r3
 8006246:	095b      	lsrs	r3, r3, #5
 8006248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800624c:	4498      	add	r8, r3
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	469b      	mov	fp, r3
 8006252:	f04f 0c00 	mov.w	ip, #0
 8006256:	46d9      	mov	r9, fp
 8006258:	46e2      	mov	sl, ip
 800625a:	eb19 0309 	adds.w	r3, r9, r9
 800625e:	eb4a 040a 	adc.w	r4, sl, sl
 8006262:	4699      	mov	r9, r3
 8006264:	46a2      	mov	sl, r4
 8006266:	eb19 090b 	adds.w	r9, r9, fp
 800626a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800626e:	f04f 0100 	mov.w	r1, #0
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800627a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800627e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006282:	4689      	mov	r9, r1
 8006284:	4692      	mov	sl, r2
 8006286:	eb1b 0509 	adds.w	r5, fp, r9
 800628a:	eb4c 060a 	adc.w	r6, ip, sl
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	4619      	mov	r1, r3
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	f04f 0400 	mov.w	r4, #0
 80062a0:	0094      	lsls	r4, r2, #2
 80062a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80062a6:	008b      	lsls	r3, r1, #2
 80062a8:	461a      	mov	r2, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	4628      	mov	r0, r5
 80062ae:	4631      	mov	r1, r6
 80062b0:	f7f9 ff96 	bl	80001e0 <__aeabi_uldivmod>
 80062b4:	4603      	mov	r3, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	461a      	mov	r2, r3
 80062ba:	4b77      	ldr	r3, [pc, #476]	; (8006498 <UART_SetConfig+0x6f4>)
 80062bc:	fba3 1302 	umull	r1, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	2164      	movs	r1, #100	; 0x64
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	3332      	adds	r3, #50	; 0x32
 80062ce:	4a72      	ldr	r2, [pc, #456]	; (8006498 <UART_SetConfig+0x6f4>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f003 020f 	and.w	r2, r3, #15
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4442      	add	r2, r8
 80062e0:	609a      	str	r2, [r3, #8]
 80062e2:	e0d0      	b.n	8006486 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80062e4:	f7fd fc3a 	bl	8003b5c <HAL_RCC_GetPCLK1Freq>
 80062e8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	469a      	mov	sl, r3
 80062ee:	f04f 0b00 	mov.w	fp, #0
 80062f2:	46d0      	mov	r8, sl
 80062f4:	46d9      	mov	r9, fp
 80062f6:	eb18 0308 	adds.w	r3, r8, r8
 80062fa:	eb49 0409 	adc.w	r4, r9, r9
 80062fe:	4698      	mov	r8, r3
 8006300:	46a1      	mov	r9, r4
 8006302:	eb18 080a 	adds.w	r8, r8, sl
 8006306:	eb49 090b 	adc.w	r9, r9, fp
 800630a:	f04f 0100 	mov.w	r1, #0
 800630e:	f04f 0200 	mov.w	r2, #0
 8006312:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006316:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800631a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800631e:	4688      	mov	r8, r1
 8006320:	4691      	mov	r9, r2
 8006322:	eb1a 0508 	adds.w	r5, sl, r8
 8006326:	eb4b 0609 	adc.w	r6, fp, r9
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4619      	mov	r1, r3
 8006330:	f04f 0200 	mov.w	r2, #0
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	f04f 0400 	mov.w	r4, #0
 800633c:	0094      	lsls	r4, r2, #2
 800633e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006342:	008b      	lsls	r3, r1, #2
 8006344:	461a      	mov	r2, r3
 8006346:	4623      	mov	r3, r4
 8006348:	4628      	mov	r0, r5
 800634a:	4631      	mov	r1, r6
 800634c:	f7f9 ff48 	bl	80001e0 <__aeabi_uldivmod>
 8006350:	4603      	mov	r3, r0
 8006352:	460c      	mov	r4, r1
 8006354:	461a      	mov	r2, r3
 8006356:	4b50      	ldr	r3, [pc, #320]	; (8006498 <UART_SetConfig+0x6f4>)
 8006358:	fba3 2302 	umull	r2, r3, r3, r2
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	469b      	mov	fp, r3
 8006366:	f04f 0c00 	mov.w	ip, #0
 800636a:	46d9      	mov	r9, fp
 800636c:	46e2      	mov	sl, ip
 800636e:	eb19 0309 	adds.w	r3, r9, r9
 8006372:	eb4a 040a 	adc.w	r4, sl, sl
 8006376:	4699      	mov	r9, r3
 8006378:	46a2      	mov	sl, r4
 800637a:	eb19 090b 	adds.w	r9, r9, fp
 800637e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006382:	f04f 0100 	mov.w	r1, #0
 8006386:	f04f 0200 	mov.w	r2, #0
 800638a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800638e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006392:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006396:	4689      	mov	r9, r1
 8006398:	4692      	mov	sl, r2
 800639a:	eb1b 0509 	adds.w	r5, fp, r9
 800639e:	eb4c 060a 	adc.w	r6, ip, sl
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	4619      	mov	r1, r3
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	f04f 0300 	mov.w	r3, #0
 80063b0:	f04f 0400 	mov.w	r4, #0
 80063b4:	0094      	lsls	r4, r2, #2
 80063b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063ba:	008b      	lsls	r3, r1, #2
 80063bc:	461a      	mov	r2, r3
 80063be:	4623      	mov	r3, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	4631      	mov	r1, r6
 80063c4:	f7f9 ff0c 	bl	80001e0 <__aeabi_uldivmod>
 80063c8:	4603      	mov	r3, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	461a      	mov	r2, r3
 80063ce:	4b32      	ldr	r3, [pc, #200]	; (8006498 <UART_SetConfig+0x6f4>)
 80063d0:	fba3 1302 	umull	r1, r3, r3, r2
 80063d4:	095b      	lsrs	r3, r3, #5
 80063d6:	2164      	movs	r1, #100	; 0x64
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	011b      	lsls	r3, r3, #4
 80063e0:	3332      	adds	r3, #50	; 0x32
 80063e2:	4a2d      	ldr	r2, [pc, #180]	; (8006498 <UART_SetConfig+0x6f4>)
 80063e4:	fba2 2303 	umull	r2, r3, r2, r3
 80063e8:	095b      	lsrs	r3, r3, #5
 80063ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ee:	4498      	add	r8, r3
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	469b      	mov	fp, r3
 80063f4:	f04f 0c00 	mov.w	ip, #0
 80063f8:	46d9      	mov	r9, fp
 80063fa:	46e2      	mov	sl, ip
 80063fc:	eb19 0309 	adds.w	r3, r9, r9
 8006400:	eb4a 040a 	adc.w	r4, sl, sl
 8006404:	4699      	mov	r9, r3
 8006406:	46a2      	mov	sl, r4
 8006408:	eb19 090b 	adds.w	r9, r9, fp
 800640c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006410:	f04f 0100 	mov.w	r1, #0
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800641c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006420:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006424:	4689      	mov	r9, r1
 8006426:	4692      	mov	sl, r2
 8006428:	eb1b 0509 	adds.w	r5, fp, r9
 800642c:	eb4c 060a 	adc.w	r6, ip, sl
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	4619      	mov	r1, r3
 8006436:	f04f 0200 	mov.w	r2, #0
 800643a:	f04f 0300 	mov.w	r3, #0
 800643e:	f04f 0400 	mov.w	r4, #0
 8006442:	0094      	lsls	r4, r2, #2
 8006444:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006448:	008b      	lsls	r3, r1, #2
 800644a:	461a      	mov	r2, r3
 800644c:	4623      	mov	r3, r4
 800644e:	4628      	mov	r0, r5
 8006450:	4631      	mov	r1, r6
 8006452:	f7f9 fec5 	bl	80001e0 <__aeabi_uldivmod>
 8006456:	4603      	mov	r3, r0
 8006458:	460c      	mov	r4, r1
 800645a:	461a      	mov	r2, r3
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <UART_SetConfig+0x6f4>)
 800645e:	fba3 1302 	umull	r1, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	2164      	movs	r1, #100	; 0x64
 8006466:	fb01 f303 	mul.w	r3, r1, r3
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	011b      	lsls	r3, r3, #4
 800646e:	3332      	adds	r3, #50	; 0x32
 8006470:	4a09      	ldr	r2, [pc, #36]	; (8006498 <UART_SetConfig+0x6f4>)
 8006472:	fba2 2303 	umull	r2, r3, r2, r3
 8006476:	095b      	lsrs	r3, r3, #5
 8006478:	f003 020f 	and.w	r2, r3, #15
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4442      	add	r2, r8
 8006482:	609a      	str	r2, [r3, #8]
}
 8006484:	e7ff      	b.n	8006486 <UART_SetConfig+0x6e2>
 8006486:	bf00      	nop
 8006488:	3714      	adds	r7, #20
 800648a:	46bd      	mov	sp, r7
 800648c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006490:	40011000 	.word	0x40011000
 8006494:	40011400 	.word	0x40011400
 8006498:	51eb851f 	.word	0x51eb851f

0800649c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800649c:	b084      	sub	sp, #16
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
 80064a6:	f107 001c 	add.w	r0, r7, #28
 80064aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80064ae:	2300      	movs	r3, #0
 80064b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80064b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80064b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80064b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80064ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80064be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80064c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80064c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80064c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80064d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	431a      	orrs	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	b004      	add	sp, #16
 80064f0:	4770      	bx	lr

080064f2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80064f2:	b480      	push	{r7}
 80064f4:	b083      	sub	sp, #12
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006500:	4618      	mov	r0, r3
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800652e:	b580      	push	{r7, lr}
 8006530:	b082      	sub	sp, #8
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2203      	movs	r2, #3
 800653a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800653c:	2002      	movs	r0, #2
 800653e:	f7fb fc1b 	bl	8001d78 <HAL_Delay>
  
  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 0303 	and.w	r3, r3, #3
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006572:	2300      	movs	r3, #0
 8006574:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006586:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800658c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006592:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4313      	orrs	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80065a2:	f023 030f 	bic.w	r3, r3, #15
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3714      	adds	r7, #20
 80065b4:	46bd      	mov	sp, r7
 80065b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ba:	4770      	bx	lr

080065bc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	b2db      	uxtb	r3, r3
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	3314      	adds	r3, #20
 80065e4:	461a      	mov	r2, r3
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	4413      	add	r3, r2
 80065ea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
}  
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006622:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006628:	431a      	orrs	r2, r3
                       Data->DPSM);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800662e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	4313      	orrs	r3, r2
 8006634:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	431a      	orrs	r2, r3
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006646:	2300      	movs	r3, #0

}
 8006648:	4618      	mov	r0, r3
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006662:	2310      	movs	r3, #16
 8006664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006666:	2340      	movs	r3, #64	; 0x40
 8006668:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800666a:	2300      	movs	r3, #0
 800666c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800666e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006672:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006674:	f107 0308 	add.w	r3, r7, #8
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7ff ff74 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006680:	f241 3288 	movw	r2, #5000	; 0x1388
 8006684:	2110      	movs	r1, #16
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fa40 	bl	8006b0c <SDMMC_GetCmdResp1>
 800668c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800668e:	69fb      	ldr	r3, [r7, #28]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80066a6:	2311      	movs	r3, #17
 80066a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066aa:	2340      	movs	r3, #64	; 0x40
 80066ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066b8:	f107 0308 	add.w	r3, r7, #8
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7ff ff52 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80066c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80066c8:	2111      	movs	r1, #17
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fa1e 	bl	8006b0c <SDMMC_GetCmdResp1>
 80066d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066d2:	69fb      	ldr	r3, [r7, #28]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3720      	adds	r7, #32
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80066ea:	2312      	movs	r3, #18
 80066ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80066ee:	2340      	movs	r3, #64	; 0x40
 80066f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80066f2:	2300      	movs	r3, #0
 80066f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80066f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80066fc:	f107 0308 	add.w	r3, r7, #8
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f7ff ff30 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006708:	f241 3288 	movw	r2, #5000	; 0x1388
 800670c:	2112      	movs	r1, #18
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 f9fc 	bl	8006b0c <SDMMC_GetCmdResp1>
 8006714:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006716:	69fb      	ldr	r3, [r7, #28]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3720      	adds	r7, #32
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800672e:	2318      	movs	r3, #24
 8006730:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006732:	2340      	movs	r3, #64	; 0x40
 8006734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006736:	2300      	movs	r3, #0
 8006738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800673a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800673e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006740:	f107 0308 	add.w	r3, r7, #8
 8006744:	4619      	mov	r1, r3
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7ff ff0e 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800674c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006750:	2118      	movs	r1, #24
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f9da 	bl	8006b0c <SDMMC_GetCmdResp1>
 8006758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800675a:	69fb      	ldr	r3, [r7, #28]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3720      	adds	r7, #32
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b088      	sub	sp, #32
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006772:	2319      	movs	r3, #25
 8006774:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006776:	2340      	movs	r3, #64	; 0x40
 8006778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800677a:	2300      	movs	r3, #0
 800677c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800677e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006782:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006784:	f107 0308 	add.w	r3, r7, #8
 8006788:	4619      	mov	r1, r3
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7ff feec 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006790:	f241 3288 	movw	r2, #5000	; 0x1388
 8006794:	2119      	movs	r1, #25
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f9b8 	bl	8006b0c <SDMMC_GetCmdResp1>
 800679c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800679e:	69fb      	ldr	r3, [r7, #28]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b088      	sub	sp, #32
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80067b4:	230c      	movs	r3, #12
 80067b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80067b8:	2340      	movs	r3, #64	; 0x40
 80067ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80067c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80067c6:	f107 0308 	add.w	r3, r7, #8
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff fecb 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80067d2:	4a05      	ldr	r2, [pc, #20]	; (80067e8 <SDMMC_CmdStopTransfer+0x40>)
 80067d4:	210c      	movs	r1, #12
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f998 	bl	8006b0c <SDMMC_GetCmdResp1>
 80067dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80067de:	69fb      	ldr	r3, [r7, #28]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3720      	adds	r7, #32
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	05f5e100 	.word	0x05f5e100

080067ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80067fc:	2307      	movs	r3, #7
 80067fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006800:	2340      	movs	r3, #64	; 0x40
 8006802:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800680c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800680e:	f107 0310 	add.w	r3, r7, #16
 8006812:	4619      	mov	r1, r3
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	f7ff fea7 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800681a:	f241 3288 	movw	r2, #5000	; 0x1388
 800681e:	2107      	movs	r1, #7
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 f973 	bl	8006b0c <SDMMC_GetCmdResp1>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800682a:	4618      	mov	r0, r3
 800682c:	3728      	adds	r7, #40	; 0x28
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b088      	sub	sp, #32
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800683a:	2300      	movs	r3, #0
 800683c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006846:	2300      	movs	r3, #0
 8006848:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800684a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800684e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006850:	f107 0308 	add.w	r3, r7, #8
 8006854:	4619      	mov	r1, r3
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fe86 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 f92d 	bl	8006abc <SDMMC_GetCmdError>
 8006862:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006864:	69fb      	ldr	r3, [r7, #28]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3720      	adds	r7, #32
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b088      	sub	sp, #32
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006876:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800687a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800687c:	2308      	movs	r3, #8
 800687e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006880:	2340      	movs	r3, #64	; 0x40
 8006882:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006884:	2300      	movs	r3, #0
 8006886:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006888:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800688c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800688e:	f107 0308 	add.w	r3, r7, #8
 8006892:	4619      	mov	r1, r3
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7ff fe67 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fb16 	bl	8006ecc <SDMMC_GetCmdResp7>
 80068a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068a2:	69fb      	ldr	r3, [r7, #28]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80068ba:	2337      	movs	r3, #55	; 0x37
 80068bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80068be:	2340      	movs	r3, #64	; 0x40
 80068c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80068c2:	2300      	movs	r3, #0
 80068c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80068c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80068cc:	f107 0308 	add.w	r3, r7, #8
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fe48 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80068d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068dc:	2137      	movs	r1, #55	; 0x37
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 f914 	bl	8006b0c <SDMMC_GetCmdResp1>
 80068e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80068e6:	69fb      	ldr	r3, [r7, #28]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3720      	adds	r7, #32
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006900:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006906:	2329      	movs	r3, #41	; 0x29
 8006908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800690a:	2340      	movs	r3, #64	; 0x40
 800690c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006916:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006918:	f107 0308 	add.w	r3, r7, #8
 800691c:	4619      	mov	r1, r3
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fe22 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fa23 	bl	8006d70 <SDMMC_GetCmdResp3>
 800692a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800692c:	69fb      	ldr	r3, [r7, #28]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3720      	adds	r7, #32
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b088      	sub	sp, #32
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
 800693e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006944:	2306      	movs	r3, #6
 8006946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006948:	2340      	movs	r3, #64	; 0x40
 800694a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800694c:	2300      	movs	r3, #0
 800694e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006950:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006954:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006956:	f107 0308 	add.w	r3, r7, #8
 800695a:	4619      	mov	r1, r3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff fe03 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8006962:	f241 3288 	movw	r2, #5000	; 0x1388
 8006966:	2106      	movs	r1, #6
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f8cf 	bl	8006b0c <SDMMC_GetCmdResp1>
 800696e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006970:	69fb      	ldr	r3, [r7, #28]
}
 8006972:	4618      	mov	r0, r3
 8006974:	3720      	adds	r7, #32
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b088      	sub	sp, #32
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8006986:	2333      	movs	r3, #51	; 0x33
 8006988:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800698a:	2340      	movs	r3, #64	; 0x40
 800698c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006992:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006996:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006998:	f107 0308 	add.w	r3, r7, #8
 800699c:	4619      	mov	r1, r3
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff fde2 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80069a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a8:	2133      	movs	r1, #51	; 0x33
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f8ae 	bl	8006b0c <SDMMC_GetCmdResp1>
 80069b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069b2:	69fb      	ldr	r3, [r7, #28]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80069c8:	2302      	movs	r3, #2
 80069ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80069cc:	23c0      	movs	r3, #192	; 0xc0
 80069ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069da:	f107 0308 	add.w	r3, r7, #8
 80069de:	4619      	mov	r1, r3
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f7ff fdc1 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 f97c 	bl	8006ce4 <SDMMC_GetCmdResp2>
 80069ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069ee:	69fb      	ldr	r3, [r7, #28]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3720      	adds	r7, #32
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006a06:	2309      	movs	r3, #9
 8006a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006a0a:	23c0      	movs	r3, #192	; 0xc0
 8006a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a18:	f107 0308 	add.w	r3, r7, #8
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fda2 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 f95d 	bl	8006ce4 <SDMMC_GetCmdResp2>
 8006a2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3720      	adds	r7, #32
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b088      	sub	sp, #32
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
 8006a3e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006a40:	2300      	movs	r3, #0
 8006a42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006a44:	2303      	movs	r3, #3
 8006a46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a48:	2340      	movs	r3, #64	; 0x40
 8006a4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a56:	f107 0308 	add.w	r3, r7, #8
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff fd83 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	2103      	movs	r1, #3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f9bc 	bl	8006de4 <SDMMC_GetCmdResp6>
 8006a6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006a86:	230d      	movs	r3, #13
 8006a88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a8a:	2340      	movs	r3, #64	; 0x40
 8006a8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a96:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a98:	f107 0308 	add.w	r3, r7, #8
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f7ff fd62 	bl	8006568 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa8:	210d      	movs	r1, #13
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f82e 	bl	8006b0c <SDMMC_GetCmdResp1>
 8006ab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006abc:	b490      	push	{r4, r7}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ac4:	4b0f      	ldr	r3, [pc, #60]	; (8006b04 <SDMMC_GetCmdError+0x48>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a0f      	ldr	r2, [pc, #60]	; (8006b08 <SDMMC_GetCmdError+0x4c>)
 8006aca:	fba2 2303 	umull	r2, r3, r2, r3
 8006ace:	0a5b      	lsrs	r3, r3, #9
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006ad8:	4623      	mov	r3, r4
 8006ada:	1e5c      	subs	r4, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d102      	bne.n	8006ae6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ae0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ae4:	e009      	b.n	8006afa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f2      	beq.n	8006ad8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	22c5      	movs	r2, #197	; 0xc5
 8006af6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3708      	adds	r7, #8
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bc90      	pop	{r4, r7}
 8006b02:	4770      	bx	lr
 8006b04:	20000000 	.word	0x20000000
 8006b08:	10624dd3 	.word	0x10624dd3

08006b0c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006b0c:	b590      	push	{r4, r7, lr}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	460b      	mov	r3, r1
 8006b16:	607a      	str	r2, [r7, #4]
 8006b18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006b1a:	4b6f      	ldr	r3, [pc, #444]	; (8006cd8 <SDMMC_GetCmdResp1+0x1cc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a6f      	ldr	r2, [pc, #444]	; (8006cdc <SDMMC_GetCmdResp1+0x1d0>)
 8006b20:	fba2 2303 	umull	r2, r3, r2, r3
 8006b24:	0a5b      	lsrs	r3, r3, #9
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006b2c:	4623      	mov	r3, r4
 8006b2e:	1e5c      	subs	r4, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b38:	e0c9      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b3e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <SDMMC_GetCmdResp1+0x20>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1eb      	bne.n	8006b2c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d004      	beq.n	8006b6a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2204      	movs	r2, #4
 8006b64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b66:	2304      	movs	r3, #4
 8006b68:	e0b1      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d004      	beq.n	8006b80 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e0a6      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	22c5      	movs	r2, #197	; 0xc5
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff fd18 	bl	80065bc <SDIO_GetCommandResponse>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	7afb      	ldrb	r3, [r7, #11]
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d001      	beq.n	8006b9a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e099      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fd1a 	bl	80065d6 <SDIO_GetResponse>
 8006ba2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4b4e      	ldr	r3, [pc, #312]	; (8006ce0 <SDMMC_GetCmdResp1+0x1d4>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e08d      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	da02      	bge.n	8006bbe <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bbc:	e087      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006bc8:	2340      	movs	r3, #64	; 0x40
 8006bca:	e080      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006bcc:	693b      	ldr	r3, [r7, #16]
 8006bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006bd6:	2380      	movs	r3, #128	; 0x80
 8006bd8:	e079      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006be4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be8:	e071      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf8:	e069      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c08:	e061      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006c14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c18:	e059      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d002      	beq.n	8006c2a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c28:	e051      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c38:	e049      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006c44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c48:	e041      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8006c54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c58:	e039      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006c64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c68:	e031      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d002      	beq.n	8006c7a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006c74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c78:	e029      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d002      	beq.n	8006c8a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006c84:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c88:	e021      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006c94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c98:	e019      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d002      	beq.n	8006caa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006ca4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ca8:	e011      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d002      	beq.n	8006cba <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006cb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006cb8:	e009      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f003 0308 	and.w	r3, r3, #8
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d002      	beq.n	8006cca <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006cc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006cc8:	e001      	b.n	8006cce <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd90      	pop	{r4, r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000000 	.word	0x20000000
 8006cdc:	10624dd3 	.word	0x10624dd3
 8006ce0:	fdffe008 	.word	0xfdffe008

08006ce4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006ce4:	b490      	push	{r4, r7}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006cec:	4b1e      	ldr	r3, [pc, #120]	; (8006d68 <SDMMC_GetCmdResp2+0x84>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a1e      	ldr	r2, [pc, #120]	; (8006d6c <SDMMC_GetCmdResp2+0x88>)
 8006cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8006cf6:	0a5b      	lsrs	r3, r3, #9
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d00:	4623      	mov	r3, r4
 8006d02:	1e5c      	subs	r4, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d102      	bne.n	8006d0e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d08:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d0c:	e026      	b.n	8006d5c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0f0      	beq.n	8006d00 <SDMMC_GetCmdResp2+0x1c>
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1eb      	bne.n	8006d00 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d004      	beq.n	8006d3e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2204      	movs	r2, #4
 8006d38:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d3a:	2304      	movs	r3, #4
 8006d3c:	e00e      	b.n	8006d5c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d42:	f003 0301 	and.w	r3, r3, #1
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d004      	beq.n	8006d54 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d50:	2301      	movs	r3, #1
 8006d52:	e003      	b.n	8006d5c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	22c5      	movs	r2, #197	; 0xc5
 8006d58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc90      	pop	{r4, r7}
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000000 	.word	0x20000000
 8006d6c:	10624dd3 	.word	0x10624dd3

08006d70 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006d70:	b490      	push	{r4, r7}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d78:	4b18      	ldr	r3, [pc, #96]	; (8006ddc <SDMMC_GetCmdResp3+0x6c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a18      	ldr	r2, [pc, #96]	; (8006de0 <SDMMC_GetCmdResp3+0x70>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	0a5b      	lsrs	r3, r3, #9
 8006d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d88:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006d8c:	4623      	mov	r3, r4
 8006d8e:	1e5c      	subs	r4, r3, #1
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d98:	e01b      	b.n	8006dd2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d9e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f0      	beq.n	8006d8c <SDMMC_GetCmdResp3+0x1c>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1eb      	bne.n	8006d8c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d004      	beq.n	8006dca <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2204      	movs	r2, #4
 8006dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	e003      	b.n	8006dd2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	22c5      	movs	r2, #197	; 0xc5
 8006dce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc90      	pop	{r4, r7}
 8006dda:	4770      	bx	lr
 8006ddc:	20000000 	.word	0x20000000
 8006de0:	10624dd3 	.word	0x10624dd3

08006de4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b087      	sub	sp, #28
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	460b      	mov	r3, r1
 8006dee:	607a      	str	r2, [r7, #4]
 8006df0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <SDMMC_GetCmdResp6+0xe0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a34      	ldr	r2, [pc, #208]	; (8006ec8 <SDMMC_GetCmdResp6+0xe4>)
 8006df8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfc:	0a5b      	lsrs	r3, r3, #9
 8006dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e02:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006e06:	4623      	mov	r3, r4
 8006e08:	1e5c      	subs	r4, r3, #1
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d102      	bne.n	8006e14 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e12:	e052      	b.n	8006eba <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e18:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0f0      	beq.n	8006e06 <SDMMC_GetCmdResp6+0x22>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1eb      	bne.n	8006e06 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	f003 0304 	and.w	r3, r3, #4
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d004      	beq.n	8006e44 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e40:	2304      	movs	r3, #4
 8006e42:	e03a      	b.n	8006eba <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e02f      	b.n	8006eba <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f7ff fbae 	bl	80065bc <SDIO_GetCommandResponse>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	7afb      	ldrb	r3, [r7, #11]
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d001      	beq.n	8006e6e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	e025      	b.n	8006eba <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	22c5      	movs	r2, #197	; 0xc5
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006e74:	2100      	movs	r1, #0
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f7ff fbad 	bl	80065d6 <SDIO_GetResponse>
 8006e7c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d106      	bne.n	8006e96 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	0c1b      	lsrs	r3, r3, #16
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e011      	b.n	8006eba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006ea0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ea4:	e009      	b.n	8006eba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d002      	beq.n	8006eb6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006eb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006eb4:	e001      	b.n	8006eba <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006eb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	371c      	adds	r7, #28
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	20000000 	.word	0x20000000
 8006ec8:	10624dd3 	.word	0x10624dd3

08006ecc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006ecc:	b490      	push	{r4, r7}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006ed4:	4b21      	ldr	r3, [pc, #132]	; (8006f5c <SDMMC_GetCmdResp7+0x90>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a21      	ldr	r2, [pc, #132]	; (8006f60 <SDMMC_GetCmdResp7+0x94>)
 8006eda:	fba2 2303 	umull	r2, r3, r2, r3
 8006ede:	0a5b      	lsrs	r3, r3, #9
 8006ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8006ee8:	4623      	mov	r3, r4
 8006eea:	1e5c      	subs	r4, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d102      	bne.n	8006ef6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ef0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ef4:	e02c      	b.n	8006f50 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d0f0      	beq.n	8006ee8 <SDMMC_GetCmdResp7+0x1c>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1eb      	bne.n	8006ee8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f14:	f003 0304 	and.w	r3, r3, #4
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d004      	beq.n	8006f26 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2204      	movs	r2, #4
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006f22:	2304      	movs	r3, #4
 8006f24:	e014      	b.n	8006f50 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2201      	movs	r2, #1
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e009      	b.n	8006f50 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2240      	movs	r2, #64	; 0x40
 8006f4c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006f4e:	2300      	movs	r3, #0
  
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bc90      	pop	{r4, r7}
 8006f58:	4770      	bx	lr
 8006f5a:	bf00      	nop
 8006f5c:	20000000 	.word	0x20000000
 8006f60:	10624dd3 	.word	0x10624dd3

08006f64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006f68:	4904      	ldr	r1, [pc, #16]	; (8006f7c <MX_FATFS_Init+0x18>)
 8006f6a:	4805      	ldr	r0, [pc, #20]	; (8006f80 <MX_FATFS_Init+0x1c>)
 8006f6c:	f002 fd98 	bl	8009aa0 <FATFS_LinkDriver>
 8006f70:	4603      	mov	r3, r0
 8006f72:	461a      	mov	r2, r3
 8006f74:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <MX_FATFS_Init+0x20>)
 8006f76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8006f78:	bf00      	nop
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	200065fc 	.word	0x200065fc
 8006f80:	0800ce08 	.word	0x0800ce08
 8006f84:	200065f8 	.word	0x200065f8

08006f88 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006f8c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006fa2:	f000 f896 	bl	80070d2 <BSP_SD_IsDetected>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d001      	beq.n	8006fb0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e012      	b.n	8006fd6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006fb0:	480b      	ldr	r0, [pc, #44]	; (8006fe0 <BSP_SD_Init+0x48>)
 8006fb2:	f7fc fe2d 	bl	8003c10 <HAL_SD_Init>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8006fba:	79fb      	ldrb	r3, [r7, #7]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8006fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fc4:	4806      	ldr	r0, [pc, #24]	; (8006fe0 <BSP_SD_Init+0x48>)
 8006fc6:	f7fd fbed 	bl	80047a4 <HAL_SD_ConfigWideBusOperation>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	20006414 	.word	0x20006414

08006fe4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b086      	sub	sp, #24
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	68f9      	ldr	r1, [r7, #12]
 8006ffa:	4806      	ldr	r0, [pc, #24]	; (8007014 <BSP_SD_ReadBlocks_DMA+0x30>)
 8006ffc:	f7fc fe98 	bl	8003d30 <HAL_SD_ReadBlocks_DMA>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d001      	beq.n	800700a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800700a:	7dfb      	ldrb	r3, [r7, #23]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	20006414 	.word	0x20006414

08007018 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	68f9      	ldr	r1, [r7, #12]
 800702e:	4806      	ldr	r0, [pc, #24]	; (8007048 <BSP_SD_WriteBlocks_DMA+0x30>)
 8007030:	f7fc ff68 	bl	8003f04 <HAL_SD_WriteBlocks_DMA>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d001      	beq.n	800703e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 800703e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007040:	4618      	mov	r0, r3
 8007042:	3718      	adds	r7, #24
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20006414 	.word	0x20006414

0800704c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007050:	4805      	ldr	r0, [pc, #20]	; (8007068 <BSP_SD_GetCardState+0x1c>)
 8007052:	f7fd fc23 	bl	800489c <HAL_SD_GetCardState>
 8007056:	4603      	mov	r3, r0
 8007058:	2b04      	cmp	r3, #4
 800705a:	bf14      	ite	ne
 800705c:	2301      	movne	r3, #1
 800705e:	2300      	moveq	r3, #0
 8007060:	b2db      	uxtb	r3, r3
}
 8007062:	4618      	mov	r0, r3
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20006414 	.word	0x20006414

0800706c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	4803      	ldr	r0, [pc, #12]	; (8007084 <BSP_SD_GetCardInfo+0x18>)
 8007078:	f7fd fb68 	bl	800474c <HAL_SD_GetCardInfo>
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20006414 	.word	0x20006414

08007088 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007090:	f000 f818 	bl	80070c4 <BSP_SD_AbortCallback>
}
 8007094:	bf00      	nop
 8007096:	3708      	adds	r7, #8
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80070a4:	f000 f9a8 	bl	80073f8 <BSP_SD_WriteCpltCallback>
}
 80070a8:	bf00      	nop
 80070aa:	3708      	adds	r7, #8
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80070b8:	f000 f9ac 	bl	8007414 <BSP_SD_ReadCpltCallback>
}
 80070bc:	bf00      	nop
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80070c4:	b480      	push	{r7}
 80070c6:	af00      	add	r7, sp, #0

}
 80070c8:	bf00      	nop
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80070d2:	b480      	push	{r7}
 80070d4:	b083      	sub	sp, #12
 80070d6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80070d8:	2301      	movs	r3, #1
 80070da:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80070dc:	79fb      	ldrb	r3, [r7, #7]
 80070de:	b2db      	uxtb	r3, r3
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	370c      	adds	r7, #12
 80070e4:	46bd      	mov	sp, r7
 80070e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ea:	4770      	bx	lr

080070ec <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 80070f4:	f002 fd6c 	bl	8009bd0 <osKernelSysTick>
 80070f8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 80070fa:	e006      	b.n	800710a <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80070fc:	f7ff ffa6 	bl	800704c <BSP_SD_GetCardState>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d101      	bne.n	800710a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007106:	2300      	movs	r3, #0
 8007108:	e009      	b.n	800711e <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800710a:	f002 fd61 	bl	8009bd0 <osKernelSysTick>
 800710e:	4602      	mov	r2, r0
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	429a      	cmp	r2, r3
 8007118:	d8f0      	bhi.n	80070fc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800711a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <SD_CheckStatus+0x38>)
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007138:	f7ff ff88 	bl	800704c <BSP_SD_GetCardState>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d107      	bne.n	8007152 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007142:	4b07      	ldr	r3, [pc, #28]	; (8007160 <SD_CheckStatus+0x38>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	b2da      	uxtb	r2, r3
 800714e:	4b04      	ldr	r3, [pc, #16]	; (8007160 <SD_CheckStatus+0x38>)
 8007150:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007152:	4b03      	ldr	r3, [pc, #12]	; (8007160 <SD_CheckStatus+0x38>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	b2db      	uxtb	r3, r3
}
 8007158:	4618      	mov	r0, r3
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000009 	.word	0x20000009

08007164 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b087      	sub	sp, #28
 8007168:	af00      	add	r7, sp, #0
 800716a:	4603      	mov	r3, r0
 800716c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 800716e:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <SD_initialize+0x8c>)
 8007170:	2201      	movs	r2, #1
 8007172:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 8007174:	f002 fd20 	bl	8009bb8 <osKernelRunning>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d030      	beq.n	80071e0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800717e:	f7ff ff0b 	bl	8006f98 <BSP_SD_Init>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d107      	bne.n	8007198 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007188:	79fb      	ldrb	r3, [r7, #7]
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff ffcc 	bl	8007128 <SD_CheckStatus>
 8007190:	4603      	mov	r3, r0
 8007192:	461a      	mov	r2, r3
 8007194:	4b16      	ldr	r3, [pc, #88]	; (80071f0 <SD_initialize+0x8c>)
 8007196:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007198:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <SD_initialize+0x8c>)
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d01e      	beq.n	80071e0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 80071a2:	4b14      	ldr	r3, [pc, #80]	; (80071f4 <SD_initialize+0x90>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d10e      	bne.n	80071c8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <SD_initialize+0x94>)
 80071ac:	f107 0408 	add.w	r4, r7, #8
 80071b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80071b6:	f107 0308 	add.w	r3, r7, #8
 80071ba:	2100      	movs	r1, #0
 80071bc:	4618      	mov	r0, r3
 80071be:	f002 fede 	bl	8009f7e <osMessageCreate>
 80071c2:	4602      	mov	r2, r0
 80071c4:	4b0b      	ldr	r3, [pc, #44]	; (80071f4 <SD_initialize+0x90>)
 80071c6:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <SD_initialize+0x90>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d107      	bne.n	80071e0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <SD_initialize+0x8c>)
 80071d2:	781b      	ldrb	r3, [r3, #0]
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	f043 0301 	orr.w	r3, r3, #1
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	4b04      	ldr	r3, [pc, #16]	; (80071f0 <SD_initialize+0x8c>)
 80071de:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80071e0:	4b03      	ldr	r3, [pc, #12]	; (80071f0 <SD_initialize+0x8c>)
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	b2db      	uxtb	r3, r3
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd90      	pop	{r4, r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000009 	.word	0x20000009
 80071f4:	200024c4 	.word	0x200024c4
 80071f8:	0800cd8c 	.word	0x0800cd8c

080071fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b082      	sub	sp, #8
 8007200:	af00      	add	r7, sp, #0
 8007202:	4603      	mov	r3, r0
 8007204:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	4618      	mov	r0, r3
 800720a:	f7ff ff8d 	bl	8007128 <SD_CheckStatus>
 800720e:	4603      	mov	r3, r0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	; 0x28
 800721c:	af00      	add	r7, sp, #0
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	607a      	str	r2, [r7, #4]
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	4603      	mov	r3, r0
 8007226:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800722e:	f247 5030 	movw	r0, #30000	; 0x7530
 8007232:	f7ff ff5b 	bl	80070ec <SD_CheckStatusWithTimeout>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	da02      	bge.n	8007242 <SD_read+0x2a>
  {
    return res;
 800723c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007240:	e032      	b.n	80072a8 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007242:	683a      	ldr	r2, [r7, #0]
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	68b8      	ldr	r0, [r7, #8]
 8007248:	f7ff fecc 	bl	8006fe4 <BSP_SD_ReadBlocks_DMA>
 800724c:	4603      	mov	r3, r0
 800724e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 8007252:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007256:	2b00      	cmp	r3, #0
 8007258:	d124      	bne.n	80072a4 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800725a:	4b15      	ldr	r3, [pc, #84]	; (80072b0 <SD_read+0x98>)
 800725c:	6819      	ldr	r1, [r3, #0]
 800725e:	f107 0314 	add.w	r3, r7, #20
 8007262:	f247 5230 	movw	r2, #30000	; 0x7530
 8007266:	4618      	mov	r0, r3
 8007268:	f002 fef2 	bl	800a050 <osMessageGet>

    if (event.status == osEventMessage)
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2b10      	cmp	r3, #16
 8007270:	d118      	bne.n	80072a4 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d115      	bne.n	80072a4 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 8007278:	f002 fcaa 	bl	8009bd0 <osKernelSysTick>
 800727c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800727e:	e008      	b.n	8007292 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007280:	f7ff fee4 	bl	800704c <BSP_SD_GetCardState>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d103      	bne.n	8007292 <SD_read+0x7a>
              {
                res = RES_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007290:	e008      	b.n	80072a4 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007292:	f002 fc9d 	bl	8009bd0 <osKernelSysTick>
 8007296:	4602      	mov	r2, r0
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	f247 522f 	movw	r2, #29999	; 0x752f
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d9ed      	bls.n	8007280 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80072a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3728      	adds	r7, #40	; 0x28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	200024c4 	.word	0x200024c4

080072b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b08a      	sub	sp, #40	; 0x28
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80072ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80072ce:	f7ff ff0d 	bl	80070ec <SD_CheckStatusWithTimeout>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	da02      	bge.n	80072de <SD_write+0x2a>
  {
    return res;
 80072d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072dc:	e02e      	b.n	800733c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	68b8      	ldr	r0, [r7, #8]
 80072e4:	f7ff fe98 	bl	8007018 <BSP_SD_WriteBlocks_DMA>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d124      	bne.n	8007338 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80072ee:	4b15      	ldr	r3, [pc, #84]	; (8007344 <SD_write+0x90>)
 80072f0:	6819      	ldr	r1, [r3, #0]
 80072f2:	f107 0314 	add.w	r3, r7, #20
 80072f6:	f247 5230 	movw	r2, #30000	; 0x7530
 80072fa:	4618      	mov	r0, r3
 80072fc:	f002 fea8 	bl	800a050 <osMessageGet>

    if (event.status == osEventMessage)
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	2b10      	cmp	r3, #16
 8007304:	d118      	bne.n	8007338 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d115      	bne.n	8007338 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800730c:	f002 fc60 	bl	8009bd0 <osKernelSysTick>
 8007310:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007312:	e008      	b.n	8007326 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007314:	f7ff fe9a 	bl	800704c <BSP_SD_GetCardState>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d103      	bne.n	8007326 <SD_write+0x72>
          {
            res = RES_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007324:	e008      	b.n	8007338 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007326:	f002 fc53 	bl	8009bd0 <osKernelSysTick>
 800732a:	4602      	mov	r2, r0
 800732c:	6a3b      	ldr	r3, [r7, #32]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	f247 522f 	movw	r2, #29999	; 0x752f
 8007334:	4293      	cmp	r3, r2
 8007336:	d9ed      	bls.n	8007314 <SD_write+0x60>
    }

  }
#endif

  return res;
 8007338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800733c:	4618      	mov	r0, r3
 800733e:	3728      	adds	r7, #40	; 0x28
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	200024c4 	.word	0x200024c4

08007348 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08c      	sub	sp, #48	; 0x30
 800734c:	af00      	add	r7, sp, #0
 800734e:	4603      	mov	r3, r0
 8007350:	603a      	str	r2, [r7, #0]
 8007352:	71fb      	strb	r3, [r7, #7]
 8007354:	460b      	mov	r3, r1
 8007356:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800735e:	4b25      	ldr	r3, [pc, #148]	; (80073f4 <SD_ioctl+0xac>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	b2db      	uxtb	r3, r3
 8007364:	f003 0301 	and.w	r3, r3, #1
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <SD_ioctl+0x28>
 800736c:	2303      	movs	r3, #3
 800736e:	e03c      	b.n	80073ea <SD_ioctl+0xa2>

  switch (cmd)
 8007370:	79bb      	ldrb	r3, [r7, #6]
 8007372:	2b03      	cmp	r3, #3
 8007374:	d834      	bhi.n	80073e0 <SD_ioctl+0x98>
 8007376:	a201      	add	r2, pc, #4	; (adr r2, 800737c <SD_ioctl+0x34>)
 8007378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800737c:	0800738d 	.word	0x0800738d
 8007380:	08007395 	.word	0x08007395
 8007384:	080073ad 	.word	0x080073ad
 8007388:	080073c7 	.word	0x080073c7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007392:	e028      	b.n	80073e6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007394:	f107 030c 	add.w	r3, r7, #12
 8007398:	4618      	mov	r0, r3
 800739a:	f7ff fe67 	bl	800706c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800739e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073aa:	e01c      	b.n	80073e6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80073ac:	f107 030c 	add.w	r3, r7, #12
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fe5b 	bl	800706c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80073b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80073be:	2300      	movs	r3, #0
 80073c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073c4:	e00f      	b.n	80073e6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fe4e 	bl	800706c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	0a5a      	lsrs	r2, r3, #9
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80073d8:	2300      	movs	r3, #0
 80073da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80073de:	e002      	b.n	80073e6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80073e0:	2304      	movs	r3, #4
 80073e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80073e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3730      	adds	r7, #48	; 0x30
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20000009 	.word	0x20000009

080073f8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <BSP_SD_WriteCpltCallback+0x18>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2200      	movs	r2, #0
 8007402:	2102      	movs	r1, #2
 8007404:	4618      	mov	r0, r3
 8007406:	f002 fde3 	bl	8009fd0 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800740a:	bf00      	nop
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	200024c4 	.word	0x200024c4

08007414 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007418:	4b04      	ldr	r3, [pc, #16]	; (800742c <BSP_SD_ReadCpltCallback+0x18>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2200      	movs	r2, #0
 800741e:	2101      	movs	r1, #1
 8007420:	4618      	mov	r0, r3
 8007422:	f002 fdd5 	bl	8009fd0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007426:	bf00      	nop
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	200024c4 	.word	0x200024c4

08007430 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	4a08      	ldr	r2, [pc, #32]	; (8007460 <disk_status+0x30>)
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	79fa      	ldrb	r2, [r7, #7]
 8007448:	4905      	ldr	r1, [pc, #20]	; (8007460 <disk_status+0x30>)
 800744a:	440a      	add	r2, r1
 800744c:	7a12      	ldrb	r2, [r2, #8]
 800744e:	4610      	mov	r0, r2
 8007450:	4798      	blx	r3
 8007452:	4603      	mov	r3, r0
 8007454:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007456:	7bfb      	ldrb	r3, [r7, #15]
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	200024f0 	.word	0x200024f0

08007464 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800746e:	2300      	movs	r3, #0
 8007470:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007472:	79fb      	ldrb	r3, [r7, #7]
 8007474:	4a0d      	ldr	r2, [pc, #52]	; (80074ac <disk_initialize+0x48>)
 8007476:	5cd3      	ldrb	r3, [r2, r3]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d111      	bne.n	80074a0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800747c:	79fb      	ldrb	r3, [r7, #7]
 800747e:	4a0b      	ldr	r2, [pc, #44]	; (80074ac <disk_initialize+0x48>)
 8007480:	2101      	movs	r1, #1
 8007482:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	4a09      	ldr	r2, [pc, #36]	; (80074ac <disk_initialize+0x48>)
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	79fa      	ldrb	r2, [r7, #7]
 8007492:	4906      	ldr	r1, [pc, #24]	; (80074ac <disk_initialize+0x48>)
 8007494:	440a      	add	r2, r1
 8007496:	7a12      	ldrb	r2, [r2, #8]
 8007498:	4610      	mov	r0, r2
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	200024f0 	.word	0x200024f0

080074b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b087      	sub	sp, #28
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	607a      	str	r2, [r7, #4]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80074c0:	7bfb      	ldrb	r3, [r7, #15]
 80074c2:	4a0a      	ldr	r2, [pc, #40]	; (80074ec <disk_read+0x3c>)
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	689c      	ldr	r4, [r3, #8]
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	4a07      	ldr	r2, [pc, #28]	; (80074ec <disk_read+0x3c>)
 80074d0:	4413      	add	r3, r2
 80074d2:	7a18      	ldrb	r0, [r3, #8]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	47a0      	blx	r4
 80074dc:	4603      	mov	r3, r0
 80074de:	75fb      	strb	r3, [r7, #23]
  return res;
 80074e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	371c      	adds	r7, #28
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd90      	pop	{r4, r7, pc}
 80074ea:	bf00      	nop
 80074ec:	200024f0 	.word	0x200024f0

080074f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80074f0:	b590      	push	{r4, r7, lr}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	607a      	str	r2, [r7, #4]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4603      	mov	r3, r0
 80074fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007500:	7bfb      	ldrb	r3, [r7, #15]
 8007502:	4a0a      	ldr	r2, [pc, #40]	; (800752c <disk_write+0x3c>)
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	68dc      	ldr	r4, [r3, #12]
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	4a07      	ldr	r2, [pc, #28]	; (800752c <disk_write+0x3c>)
 8007510:	4413      	add	r3, r2
 8007512:	7a18      	ldrb	r0, [r3, #8]
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	47a0      	blx	r4
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]
  return res;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
}
 8007522:	4618      	mov	r0, r3
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	bd90      	pop	{r4, r7, pc}
 800752a:	bf00      	nop
 800752c:	200024f0 	.word	0x200024f0

08007530 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	4603      	mov	r3, r0
 8007538:	603a      	str	r2, [r7, #0]
 800753a:	71fb      	strb	r3, [r7, #7]
 800753c:	460b      	mov	r3, r1
 800753e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007540:	79fb      	ldrb	r3, [r7, #7]
 8007542:	4a09      	ldr	r2, [pc, #36]	; (8007568 <disk_ioctl+0x38>)
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	79fa      	ldrb	r2, [r7, #7]
 800754e:	4906      	ldr	r1, [pc, #24]	; (8007568 <disk_ioctl+0x38>)
 8007550:	440a      	add	r2, r1
 8007552:	7a10      	ldrb	r0, [r2, #8]
 8007554:	79b9      	ldrb	r1, [r7, #6]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4798      	blx	r3
 800755a:	4603      	mov	r3, r0
 800755c:	73fb      	strb	r3, [r7, #15]
  return res;
 800755e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	200024f0 	.word	0x200024f0

0800756c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3301      	adds	r3, #1
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800757c:	89fb      	ldrh	r3, [r7, #14]
 800757e:	021b      	lsls	r3, r3, #8
 8007580:	b21a      	sxth	r2, r3
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b21b      	sxth	r3, r3
 8007588:	4313      	orrs	r3, r2
 800758a:	b21b      	sxth	r3, r3
 800758c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800758e:	89fb      	ldrh	r3, [r7, #14]
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3303      	adds	r3, #3
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	021b      	lsls	r3, r3, #8
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	3202      	adds	r2, #2
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	4313      	orrs	r3, r2
 80075b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	3201      	adds	r2, #1
 80075c2:	7812      	ldrb	r2, [r2, #0]
 80075c4:	4313      	orrs	r3, r2
 80075c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	021b      	lsls	r3, r3, #8
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7812      	ldrb	r2, [r2, #0]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	60fb      	str	r3, [r7, #12]
	return rv;
 80075d4:	68fb      	ldr	r3, [r7, #12]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	460b      	mov	r3, r1
 80075ec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	1c5a      	adds	r2, r3, #1
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	887a      	ldrh	r2, [r7, #2]
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]
 80075fa:	887b      	ldrh	r3, [r7, #2]
 80075fc:	0a1b      	lsrs	r3, r3, #8
 80075fe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	887a      	ldrh	r2, [r7, #2]
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	701a      	strb	r2, [r3, #0]
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	683a      	ldr	r2, [r7, #0]
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	701a      	strb	r2, [r3, #0]
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	0a1b      	lsrs	r3, r3, #8
 8007632:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	607a      	str	r2, [r7, #4]
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	b2d2      	uxtb	r2, r2
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	0a1b      	lsrs	r3, r3, #8
 8007644:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	607a      	str	r2, [r7, #4]
 800764c:	683a      	ldr	r2, [r7, #0]
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	0a1b      	lsrs	r3, r3, #8
 8007656:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	1c5a      	adds	r2, r3, #1
 800765c:	607a      	str	r2, [r7, #4]
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	b2d2      	uxtb	r2, r2
 8007662:	701a      	strb	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	370c      	adds	r7, #12
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00d      	beq.n	80076a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	1c53      	adds	r3, r2, #1
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	1c59      	adds	r1, r3, #1
 8007694:	6179      	str	r1, [r7, #20]
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	3b01      	subs	r3, #1
 800769e:	607b      	str	r3, [r7, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1f1      	bne.n	800768a <mem_cpy+0x1a>
	}
}
 80076a6:	bf00      	nop
 80076a8:	371c      	adds	r7, #28
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr

080076b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80076b2:	b480      	push	{r7}
 80076b4:	b087      	sub	sp, #28
 80076b6:	af00      	add	r7, sp, #0
 80076b8:	60f8      	str	r0, [r7, #12]
 80076ba:	60b9      	str	r1, [r7, #8]
 80076bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	617a      	str	r2, [r7, #20]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	3b01      	subs	r3, #1
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d1f3      	bne.n	80076c2 <mem_set+0x10>
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80076e6:	b480      	push	{r7}
 80076e8:	b089      	sub	sp, #36	; 0x24
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	61fb      	str	r3, [r7, #28]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	61fa      	str	r2, [r7, #28]
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	4619      	mov	r1, r3
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	61ba      	str	r2, [r7, #24]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	1acb      	subs	r3, r1, r3
 8007712:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	3b01      	subs	r3, #1
 8007718:	607b      	str	r3, [r7, #4]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d002      	beq.n	8007726 <mem_cmp+0x40>
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0eb      	beq.n	80076fe <mem_cmp+0x18>

	return r;
 8007726:	697b      	ldr	r3, [r7, #20]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3724      	adds	r7, #36	; 0x24
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800773e:	e002      	b.n	8007746 <chk_chr+0x12>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3301      	adds	r3, #1
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <chk_chr+0x26>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	4293      	cmp	r3, r2
 8007758:	d1f2      	bne.n	8007740 <chk_chr+0xc>
	return *str;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	781b      	ldrb	r3, [r3, #0]
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b082      	sub	sp, #8
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d009      	beq.n	800778c <lock_fs+0x22>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	4618      	mov	r0, r3
 800777e:	f002 f9ca 	bl	8009b16 <ff_req_grant>
 8007782:	4603      	mov	r3, r0
 8007784:	2b00      	cmp	r3, #0
 8007786:	d001      	beq.n	800778c <lock_fs+0x22>
 8007788:	2301      	movs	r3, #1
 800778a:	e000      	b.n	800778e <lock_fs+0x24>
 800778c:	2300      	movs	r3, #0
}
 800778e:	4618      	mov	r0, r3
 8007790:	3708      	adds	r7, #8
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b082      	sub	sp, #8
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <unlock_fs+0x2e>
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	2b0c      	cmp	r3, #12
 80077ac:	d00a      	beq.n	80077c4 <unlock_fs+0x2e>
 80077ae:	78fb      	ldrb	r3, [r7, #3]
 80077b0:	2b0b      	cmp	r3, #11
 80077b2:	d007      	beq.n	80077c4 <unlock_fs+0x2e>
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	2b0f      	cmp	r3, #15
 80077b8:	d004      	beq.n	80077c4 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	4618      	mov	r0, r3
 80077c0:	f002 f9be 	bl	8009b40 <ff_rel_grant>
	}
}
 80077c4:	bf00      	nop
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80077d6:	2300      	movs	r3, #0
 80077d8:	60bb      	str	r3, [r7, #8]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	e029      	b.n	8007834 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80077e0:	4a27      	ldr	r2, [pc, #156]	; (8007880 <chk_lock+0xb4>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	011b      	lsls	r3, r3, #4
 80077e6:	4413      	add	r3, r2
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d01d      	beq.n	800782a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80077ee:	4a24      	ldr	r2, [pc, #144]	; (8007880 <chk_lock+0xb4>)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	4413      	add	r3, r2
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d116      	bne.n	800782e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007800:	4a1f      	ldr	r2, [pc, #124]	; (8007880 <chk_lock+0xb4>)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	011b      	lsls	r3, r3, #4
 8007806:	4413      	add	r3, r2
 8007808:	3304      	adds	r3, #4
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007810:	429a      	cmp	r2, r3
 8007812:	d10c      	bne.n	800782e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007814:	4a1a      	ldr	r2, [pc, #104]	; (8007880 <chk_lock+0xb4>)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	4413      	add	r3, r2
 800781c:	3308      	adds	r3, #8
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007824:	429a      	cmp	r2, r3
 8007826:	d102      	bne.n	800782e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007828:	e007      	b.n	800783a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800782a:	2301      	movs	r3, #1
 800782c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	3301      	adds	r3, #1
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d9d2      	bls.n	80077e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b02      	cmp	r3, #2
 800783e:	d109      	bne.n	8007854 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <chk_lock+0x80>
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	2b02      	cmp	r3, #2
 800784a:	d101      	bne.n	8007850 <chk_lock+0x84>
 800784c:	2300      	movs	r3, #0
 800784e:	e010      	b.n	8007872 <chk_lock+0xa6>
 8007850:	2312      	movs	r3, #18
 8007852:	e00e      	b.n	8007872 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d108      	bne.n	800786c <chk_lock+0xa0>
 800785a:	4a09      	ldr	r2, [pc, #36]	; (8007880 <chk_lock+0xb4>)
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	011b      	lsls	r3, r3, #4
 8007860:	4413      	add	r3, r2
 8007862:	330c      	adds	r3, #12
 8007864:	881b      	ldrh	r3, [r3, #0]
 8007866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786a:	d101      	bne.n	8007870 <chk_lock+0xa4>
 800786c:	2310      	movs	r3, #16
 800786e:	e000      	b.n	8007872 <chk_lock+0xa6>
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	200024d0 	.word	0x200024d0

08007884 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800788a:	2300      	movs	r3, #0
 800788c:	607b      	str	r3, [r7, #4]
 800788e:	e002      	b.n	8007896 <enq_lock+0x12>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	3301      	adds	r3, #1
 8007894:	607b      	str	r3, [r7, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d806      	bhi.n	80078aa <enq_lock+0x26>
 800789c:	4a09      	ldr	r2, [pc, #36]	; (80078c4 <enq_lock+0x40>)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	011b      	lsls	r3, r3, #4
 80078a2:	4413      	add	r3, r2
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1f2      	bne.n	8007890 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	bf14      	ite	ne
 80078b0:	2301      	movne	r3, #1
 80078b2:	2300      	moveq	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop
 80078c4:	200024d0 	.word	0x200024d0

080078c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
 80078d6:	e01f      	b.n	8007918 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80078d8:	4a41      	ldr	r2, [pc, #260]	; (80079e0 <inc_lock+0x118>)
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	011b      	lsls	r3, r3, #4
 80078de:	4413      	add	r3, r2
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d113      	bne.n	8007912 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80078ea:	4a3d      	ldr	r2, [pc, #244]	; (80079e0 <inc_lock+0x118>)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	4413      	add	r3, r2
 80078f2:	3304      	adds	r3, #4
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d109      	bne.n	8007912 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80078fe:	4a38      	ldr	r2, [pc, #224]	; (80079e0 <inc_lock+0x118>)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	011b      	lsls	r3, r3, #4
 8007904:	4413      	add	r3, r2
 8007906:	3308      	adds	r3, #8
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800790e:	429a      	cmp	r2, r3
 8007910:	d006      	beq.n	8007920 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d9dc      	bls.n	80078d8 <inc_lock+0x10>
 800791e:	e000      	b.n	8007922 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007920:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d132      	bne.n	800798e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007928:	2300      	movs	r3, #0
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	e002      	b.n	8007934 <inc_lock+0x6c>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	3301      	adds	r3, #1
 8007932:	60fb      	str	r3, [r7, #12]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b01      	cmp	r3, #1
 8007938:	d806      	bhi.n	8007948 <inc_lock+0x80>
 800793a:	4a29      	ldr	r2, [pc, #164]	; (80079e0 <inc_lock+0x118>)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	4413      	add	r3, r2
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f2      	bne.n	800792e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2b02      	cmp	r3, #2
 800794c:	d101      	bne.n	8007952 <inc_lock+0x8a>
 800794e:	2300      	movs	r3, #0
 8007950:	e040      	b.n	80079d4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	4922      	ldr	r1, [pc, #136]	; (80079e0 <inc_lock+0x118>)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	440b      	add	r3, r1
 800795e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	689a      	ldr	r2, [r3, #8]
 8007964:	491e      	ldr	r1, [pc, #120]	; (80079e0 <inc_lock+0x118>)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	011b      	lsls	r3, r3, #4
 800796a:	440b      	add	r3, r1
 800796c:	3304      	adds	r3, #4
 800796e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	695a      	ldr	r2, [r3, #20]
 8007974:	491a      	ldr	r1, [pc, #104]	; (80079e0 <inc_lock+0x118>)
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	011b      	lsls	r3, r3, #4
 800797a:	440b      	add	r3, r1
 800797c:	3308      	adds	r3, #8
 800797e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007980:	4a17      	ldr	r2, [pc, #92]	; (80079e0 <inc_lock+0x118>)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	4413      	add	r3, r2
 8007988:	330c      	adds	r3, #12
 800798a:	2200      	movs	r2, #0
 800798c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d009      	beq.n	80079a8 <inc_lock+0xe0>
 8007994:	4a12      	ldr	r2, [pc, #72]	; (80079e0 <inc_lock+0x118>)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	4413      	add	r3, r2
 800799c:	330c      	adds	r3, #12
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <inc_lock+0xe0>
 80079a4:	2300      	movs	r3, #0
 80079a6:	e015      	b.n	80079d4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d108      	bne.n	80079c0 <inc_lock+0xf8>
 80079ae:	4a0c      	ldr	r2, [pc, #48]	; (80079e0 <inc_lock+0x118>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	011b      	lsls	r3, r3, #4
 80079b4:	4413      	add	r3, r2
 80079b6:	330c      	adds	r3, #12
 80079b8:	881b      	ldrh	r3, [r3, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	b29a      	uxth	r2, r3
 80079be:	e001      	b.n	80079c4 <inc_lock+0xfc>
 80079c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079c4:	4906      	ldr	r1, [pc, #24]	; (80079e0 <inc_lock+0x118>)
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	011b      	lsls	r3, r3, #4
 80079ca:	440b      	add	r3, r1
 80079cc:	330c      	adds	r3, #12
 80079ce:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	200024d0 	.word	0x200024d0

080079e4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	3b01      	subs	r3, #1
 80079f0:	607b      	str	r3, [r7, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d825      	bhi.n	8007a44 <dec_lock+0x60>
		n = Files[i].ctr;
 80079f8:	4a17      	ldr	r2, [pc, #92]	; (8007a58 <dec_lock+0x74>)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	011b      	lsls	r3, r3, #4
 80079fe:	4413      	add	r3, r2
 8007a00:	330c      	adds	r3, #12
 8007a02:	881b      	ldrh	r3, [r3, #0]
 8007a04:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007a06:	89fb      	ldrh	r3, [r7, #14]
 8007a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a0c:	d101      	bne.n	8007a12 <dec_lock+0x2e>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007a12:	89fb      	ldrh	r3, [r7, #14]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <dec_lock+0x3a>
 8007a18:	89fb      	ldrh	r3, [r7, #14]
 8007a1a:	3b01      	subs	r3, #1
 8007a1c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007a1e:	4a0e      	ldr	r2, [pc, #56]	; (8007a58 <dec_lock+0x74>)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	011b      	lsls	r3, r3, #4
 8007a24:	4413      	add	r3, r2
 8007a26:	330c      	adds	r3, #12
 8007a28:	89fa      	ldrh	r2, [r7, #14]
 8007a2a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007a2c:	89fb      	ldrh	r3, [r7, #14]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d105      	bne.n	8007a3e <dec_lock+0x5a>
 8007a32:	4a09      	ldr	r2, [pc, #36]	; (8007a58 <dec_lock+0x74>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	011b      	lsls	r3, r3, #4
 8007a38:	4413      	add	r3, r2
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	737b      	strb	r3, [r7, #13]
 8007a42:	e001      	b.n	8007a48 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007a44:	2302      	movs	r3, #2
 8007a46:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007a48:	7b7b      	ldrb	r3, [r7, #13]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	200024d0 	.word	0x200024d0

08007a5c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8007a64:	2300      	movs	r3, #0
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	e010      	b.n	8007a8c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007a6a:	4a0d      	ldr	r2, [pc, #52]	; (8007aa0 <clear_lock+0x44>)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	4413      	add	r3, r2
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d105      	bne.n	8007a86 <clear_lock+0x2a>
 8007a7a:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <clear_lock+0x44>)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	011b      	lsls	r3, r3, #4
 8007a80:	4413      	add	r3, r2
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3301      	adds	r3, #1
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d9eb      	bls.n	8007a6a <clear_lock+0xe>
	}
}
 8007a92:	bf00      	nop
 8007a94:	3714      	adds	r7, #20
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	200024d0 	.word	0x200024d0

08007aa4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	78db      	ldrb	r3, [r3, #3]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d034      	beq.n	8007b22 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007abc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	7858      	ldrb	r0, [r3, #1]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007ac8:	2301      	movs	r3, #1
 8007aca:	697a      	ldr	r2, [r7, #20]
 8007acc:	f7ff fd10 	bl	80074f0 <disk_write>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <sync_window+0x38>
			res = FR_DISK_ERR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
 8007ada:	e022      	b.n	8007b22 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	1ad2      	subs	r2, r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d217      	bcs.n	8007b22 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	789b      	ldrb	r3, [r3, #2]
 8007af6:	613b      	str	r3, [r7, #16]
 8007af8:	e010      	b.n	8007b1c <sync_window+0x78>
					wsect += fs->fsize;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	697a      	ldr	r2, [r7, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	7858      	ldrb	r0, [r3, #1]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b0e:	2301      	movs	r3, #1
 8007b10:	697a      	ldr	r2, [r7, #20]
 8007b12:	f7ff fced 	bl	80074f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3b01      	subs	r3, #1
 8007b1a:	613b      	str	r3, [r7, #16]
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d8eb      	bhi.n	8007afa <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b3e:	683a      	ldr	r2, [r7, #0]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d01b      	beq.n	8007b7c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff ffad 	bl	8007aa4 <sync_window>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d113      	bne.n	8007b7c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7858      	ldrb	r0, [r3, #1]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007b5e:	2301      	movs	r3, #1
 8007b60:	683a      	ldr	r2, [r7, #0]
 8007b62:	f7ff fca5 	bl	80074b0 <disk_read>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d004      	beq.n	8007b76 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007b70:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	683a      	ldr	r2, [r7, #0]
 8007b7a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8007b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7ff ff87 	bl	8007aa4 <sync_window>
 8007b96:	4603      	mov	r3, r0
 8007b98:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d159      	bne.n	8007c54 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b03      	cmp	r3, #3
 8007ba6:	d149      	bne.n	8007c3c <sync_fs+0xb4>
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	791b      	ldrb	r3, [r3, #4]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d145      	bne.n	8007c3c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	899b      	ldrh	r3, [r3, #12]
 8007bba:	461a      	mov	r2, r3
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	f7ff fd78 	bl	80076b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	3338      	adds	r3, #56	; 0x38
 8007bc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007bca:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff fd07 	bl	80075e2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	3338      	adds	r3, #56	; 0x38
 8007bd8:	4921      	ldr	r1, [pc, #132]	; (8007c60 <sync_fs+0xd8>)
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff fd1c 	bl	8007618 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	3338      	adds	r3, #56	; 0x38
 8007be4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007be8:	491e      	ldr	r1, [pc, #120]	; (8007c64 <sync_fs+0xdc>)
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7ff fd14 	bl	8007618 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3338      	adds	r3, #56	; 0x38
 8007bf4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	4610      	mov	r0, r2
 8007c00:	f7ff fd0a 	bl	8007618 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	3338      	adds	r3, #56	; 0x38
 8007c08:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	4619      	mov	r1, r3
 8007c12:	4610      	mov	r0, r2
 8007c14:	f7ff fd00 	bl	8007618 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	7858      	ldrb	r0, [r3, #1]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c30:	2301      	movs	r3, #1
 8007c32:	f7ff fc5d 	bl	80074f0 <disk_write>
			fs->fsi_flag = 0;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	785b      	ldrb	r3, [r3, #1]
 8007c40:	2200      	movs	r2, #0
 8007c42:	2100      	movs	r1, #0
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7ff fc73 	bl	8007530 <disk_ioctl>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <sync_fs+0xcc>
 8007c50:	2301      	movs	r3, #1
 8007c52:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	41615252 	.word	0x41615252
 8007c64:	61417272 	.word	0x61417272

08007c68 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	3b02      	subs	r3, #2
 8007c76:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	3b02      	subs	r3, #2
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d301      	bcc.n	8007c88 <clust2sect+0x20>
 8007c84:	2300      	movs	r3, #0
 8007c86:	e008      	b.n	8007c9a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	895b      	ldrh	r3, [r3, #10]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	fb03 f202 	mul.w	r2, r3, r2
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	4413      	add	r3, r2
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b086      	sub	sp, #24
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d904      	bls.n	8007cc6 <get_fat+0x20>
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	683a      	ldr	r2, [r7, #0]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d302      	bcc.n	8007ccc <get_fat+0x26>
		val = 1;	/* Internal error */
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	617b      	str	r3, [r7, #20]
 8007cca:	e0b7      	b.n	8007e3c <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d05a      	beq.n	8007d90 <get_fat+0xea>
 8007cda:	2b03      	cmp	r3, #3
 8007cdc:	d07d      	beq.n	8007dda <get_fat+0x134>
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	f040 80a2 	bne.w	8007e28 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	60fb      	str	r3, [r7, #12]
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	085b      	lsrs	r3, r3, #1
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	4413      	add	r3, r2
 8007cf0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	899b      	ldrh	r3, [r3, #12]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d02:	4413      	add	r3, r2
 8007d04:	4619      	mov	r1, r3
 8007d06:	6938      	ldr	r0, [r7, #16]
 8007d08:	f7ff ff10 	bl	8007b2c <move_window>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f040 808d 	bne.w	8007e2e <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	60fa      	str	r2, [r7, #12]
 8007d1a:	693a      	ldr	r2, [r7, #16]
 8007d1c:	8992      	ldrh	r2, [r2, #12]
 8007d1e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d22:	fb02 f201 	mul.w	r2, r2, r1
 8007d26:	1a9b      	subs	r3, r3, r2
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d30:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	899b      	ldrh	r3, [r3, #12]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007d42:	4413      	add	r3, r2
 8007d44:	4619      	mov	r1, r3
 8007d46:	6938      	ldr	r0, [r7, #16]
 8007d48:	f7ff fef0 	bl	8007b2c <move_window>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d16f      	bne.n	8007e32 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	899b      	ldrh	r3, [r3, #12]
 8007d56:	461a      	mov	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d5e:	fb02 f201 	mul.w	r2, r2, r1
 8007d62:	1a9b      	subs	r3, r3, r2
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4413      	add	r3, r2
 8007d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d6c:	021b      	lsls	r3, r3, #8
 8007d6e:	461a      	mov	r2, r3
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <get_fat+0xe0>
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	091b      	lsrs	r3, r3, #4
 8007d84:	e002      	b.n	8007d8c <get_fat+0xe6>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d8c:	617b      	str	r3, [r7, #20]
			break;
 8007d8e:	e055      	b.n	8007e3c <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	899b      	ldrh	r3, [r3, #12]
 8007d98:	085b      	lsrs	r3, r3, #1
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	fbb3 f3f1 	udiv	r3, r3, r1
 8007da4:	4413      	add	r3, r2
 8007da6:	4619      	mov	r1, r3
 8007da8:	6938      	ldr	r0, [r7, #16]
 8007daa:	f7ff febf 	bl	8007b2c <move_window>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d140      	bne.n	8007e36 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	693a      	ldr	r2, [r7, #16]
 8007dc0:	8992      	ldrh	r2, [r2, #12]
 8007dc2:	fbb3 f0f2 	udiv	r0, r3, r2
 8007dc6:	fb02 f200 	mul.w	r2, r2, r0
 8007dca:	1a9b      	subs	r3, r3, r2
 8007dcc:	440b      	add	r3, r1
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff fbcc 	bl	800756c <ld_word>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	617b      	str	r3, [r7, #20]
			break;
 8007dd8:	e030      	b.n	8007e3c <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	899b      	ldrh	r3, [r3, #12]
 8007de2:	089b      	lsrs	r3, r3, #2
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	4619      	mov	r1, r3
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	fbb3 f3f1 	udiv	r3, r3, r1
 8007dee:	4413      	add	r3, r2
 8007df0:	4619      	mov	r1, r3
 8007df2:	6938      	ldr	r0, [r7, #16]
 8007df4:	f7ff fe9a 	bl	8007b2c <move_window>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d11d      	bne.n	8007e3a <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	8992      	ldrh	r2, [r2, #12]
 8007e0c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e10:	fb02 f200 	mul.w	r2, r2, r0
 8007e14:	1a9b      	subs	r3, r3, r2
 8007e16:	440b      	add	r3, r1
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7ff fbbf 	bl	800759c <ld_dword>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007e24:	617b      	str	r3, [r7, #20]
			break;
 8007e26:	e009      	b.n	8007e3c <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007e28:	2301      	movs	r3, #1
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e006      	b.n	8007e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e2e:	bf00      	nop
 8007e30:	e004      	b.n	8007e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007e32:	bf00      	nop
 8007e34:	e002      	b.n	8007e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007e36:	bf00      	nop
 8007e38:	e000      	b.n	8007e3c <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007e3a:	bf00      	nop
		}
	}

	return val;
 8007e3c:	697b      	ldr	r3, [r7, #20]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007e46:	b590      	push	{r4, r7, lr}
 8007e48:	b089      	sub	sp, #36	; 0x24
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007e52:	2302      	movs	r3, #2
 8007e54:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	f240 8106 	bls.w	800806a <put_fat+0x224>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	69db      	ldr	r3, [r3, #28]
 8007e62:	68ba      	ldr	r2, [r7, #8]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	f080 8100 	bcs.w	800806a <put_fat+0x224>
		switch (fs->fs_type) {
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	f000 8088 	beq.w	8007f84 <put_fat+0x13e>
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	f000 80b0 	beq.w	8007fda <put_fat+0x194>
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	f040 80f5 	bne.w	800806a <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	61bb      	str	r3, [r7, #24]
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	085b      	lsrs	r3, r3, #1
 8007e88:	69ba      	ldr	r2, [r7, #24]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	899b      	ldrh	r3, [r3, #12]
 8007e96:	4619      	mov	r1, r3
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e9e:	4413      	add	r3, r2
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f7ff fe42 	bl	8007b2c <move_window>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007eac:	7ffb      	ldrb	r3, [r7, #31]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f040 80d4 	bne.w	800805c <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	61ba      	str	r2, [r7, #24]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	8992      	ldrh	r2, [r2, #12]
 8007ec4:	fbb3 f0f2 	udiv	r0, r3, r2
 8007ec8:	fb02 f200 	mul.w	r2, r2, r0
 8007ecc:	1a9b      	subs	r3, r3, r2
 8007ece:	440b      	add	r3, r1
 8007ed0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00d      	beq.n	8007ef8 <put_fat+0xb2>
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	781b      	ldrb	r3, [r3, #0]
 8007ee0:	b25b      	sxtb	r3, r3
 8007ee2:	f003 030f 	and.w	r3, r3, #15
 8007ee6:	b25a      	sxtb	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	011b      	lsls	r3, r3, #4
 8007eee:	b25b      	sxtb	r3, r3
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	b25b      	sxtb	r3, r3
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	e001      	b.n	8007efc <put_fat+0xb6>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2201      	movs	r2, #1
 8007f04:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	899b      	ldrh	r3, [r3, #12]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f16:	4413      	add	r3, r2
 8007f18:	4619      	mov	r1, r3
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f7ff fe06 	bl	8007b2c <move_window>
 8007f20:	4603      	mov	r3, r0
 8007f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007f24:	7ffb      	ldrb	r3, [r7, #31]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f040 809a 	bne.w	8008060 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	899b      	ldrh	r3, [r3, #12]
 8007f36:	461a      	mov	r2, r3
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007f3e:	fb02 f200 	mul.w	r2, r2, r0
 8007f42:	1a9b      	subs	r3, r3, r2
 8007f44:	440b      	add	r3, r1
 8007f46:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <put_fat+0x114>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	091b      	lsrs	r3, r3, #4
 8007f56:	b2db      	uxtb	r3, r3
 8007f58:	e00e      	b.n	8007f78 <put_fat+0x132>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	b25b      	sxtb	r3, r3
 8007f60:	f023 030f 	bic.w	r3, r3, #15
 8007f64:	b25a      	sxtb	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	0a1b      	lsrs	r3, r3, #8
 8007f6a:	b25b      	sxtb	r3, r3
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	b25b      	sxtb	r3, r3
 8007f72:	4313      	orrs	r3, r2
 8007f74:	b25b      	sxtb	r3, r3
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	697a      	ldr	r2, [r7, #20]
 8007f7a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	70da      	strb	r2, [r3, #3]
			break;
 8007f82:	e072      	b.n	800806a <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	899b      	ldrh	r3, [r3, #12]
 8007f8c:	085b      	lsrs	r3, r3, #1
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	4619      	mov	r1, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f98:	4413      	add	r3, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fdc5 	bl	8007b2c <move_window>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007fa6:	7ffb      	ldrb	r3, [r7, #31]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d15b      	bne.n	8008064 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	8992      	ldrh	r2, [r2, #12]
 8007fba:	fbb3 f0f2 	udiv	r0, r3, r2
 8007fbe:	fb02 f200 	mul.w	r2, r2, r0
 8007fc2:	1a9b      	subs	r3, r3, r2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	b292      	uxth	r2, r2
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fb08 	bl	80075e2 <st_word>
			fs->wflag = 1;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2201      	movs	r2, #1
 8007fd6:	70da      	strb	r2, [r3, #3]
			break;
 8007fd8:	e047      	b.n	800806a <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	899b      	ldrh	r3, [r3, #12]
 8007fe2:	089b      	lsrs	r3, r3, #2
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fee:	4413      	add	r3, r2
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	f7ff fd9a 	bl	8007b2c <move_window>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007ffc:	7ffb      	ldrb	r3, [r7, #31]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d132      	bne.n	8008068 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	8992      	ldrh	r2, [r2, #12]
 8008016:	fbb3 f0f2 	udiv	r0, r3, r2
 800801a:	fb02 f200 	mul.w	r2, r2, r0
 800801e:	1a9b      	subs	r3, r3, r2
 8008020:	440b      	add	r3, r1
 8008022:	4618      	mov	r0, r3
 8008024:	f7ff faba 	bl	800759c <ld_dword>
 8008028:	4603      	mov	r3, r0
 800802a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800802e:	4323      	orrs	r3, r4
 8008030:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	009b      	lsls	r3, r3, #2
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	8992      	ldrh	r2, [r2, #12]
 8008040:	fbb3 f0f2 	udiv	r0, r3, r2
 8008044:	fb02 f200 	mul.w	r2, r2, r0
 8008048:	1a9b      	subs	r3, r3, r2
 800804a:	440b      	add	r3, r1
 800804c:	6879      	ldr	r1, [r7, #4]
 800804e:	4618      	mov	r0, r3
 8008050:	f7ff fae2 	bl	8007618 <st_dword>
			fs->wflag = 1;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2201      	movs	r2, #1
 8008058:	70da      	strb	r2, [r3, #3]
			break;
 800805a:	e006      	b.n	800806a <put_fat+0x224>
			if (res != FR_OK) break;
 800805c:	bf00      	nop
 800805e:	e004      	b.n	800806a <put_fat+0x224>
			if (res != FR_OK) break;
 8008060:	bf00      	nop
 8008062:	e002      	b.n	800806a <put_fat+0x224>
			if (res != FR_OK) break;
 8008064:	bf00      	nop
 8008066:	e000      	b.n	800806a <put_fat+0x224>
			if (res != FR_OK) break;
 8008068:	bf00      	nop
		}
	}
	return res;
 800806a:	7ffb      	ldrb	r3, [r7, #31]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3724      	adds	r7, #36	; 0x24
 8008070:	46bd      	mov	sp, r7
 8008072:	bd90      	pop	{r4, r7, pc}

08008074 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	2b01      	cmp	r3, #1
 800808e:	d904      	bls.n	800809a <remove_chain+0x26>
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	69db      	ldr	r3, [r3, #28]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	429a      	cmp	r2, r3
 8008098:	d301      	bcc.n	800809e <remove_chain+0x2a>
 800809a:	2302      	movs	r3, #2
 800809c:	e04b      	b.n	8008136 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d00c      	beq.n	80080be <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	6879      	ldr	r1, [r7, #4]
 80080aa:	69b8      	ldr	r0, [r7, #24]
 80080ac:	f7ff fecb 	bl	8007e46 <put_fat>
 80080b0:	4603      	mov	r3, r0
 80080b2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80080b4:	7ffb      	ldrb	r3, [r7, #31]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d001      	beq.n	80080be <remove_chain+0x4a>
 80080ba:	7ffb      	ldrb	r3, [r7, #31]
 80080bc:	e03b      	b.n	8008136 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80080be:	68b9      	ldr	r1, [r7, #8]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f7ff fdf0 	bl	8007ca6 <get_fat>
 80080c6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d031      	beq.n	8008132 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <remove_chain+0x64>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e02e      	b.n	8008136 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080de:	d101      	bne.n	80080e4 <remove_chain+0x70>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e028      	b.n	8008136 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80080e4:	2200      	movs	r2, #0
 80080e6:	68b9      	ldr	r1, [r7, #8]
 80080e8:	69b8      	ldr	r0, [r7, #24]
 80080ea:	f7ff feac 	bl	8007e46 <put_fat>
 80080ee:	4603      	mov	r3, r0
 80080f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80080f2:	7ffb      	ldrb	r3, [r7, #31]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d001      	beq.n	80080fc <remove_chain+0x88>
 80080f8:	7ffb      	ldrb	r3, [r7, #31]
 80080fa:	e01c      	b.n	8008136 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	69db      	ldr	r3, [r3, #28]
 8008104:	3b02      	subs	r3, #2
 8008106:	429a      	cmp	r2, r3
 8008108:	d20b      	bcs.n	8008122 <remove_chain+0xae>
			fs->free_clst++;
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	1c5a      	adds	r2, r3, #1
 8008110:	69bb      	ldr	r3, [r7, #24]
 8008112:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	791b      	ldrb	r3, [r3, #4]
 8008118:	f043 0301 	orr.w	r3, r3, #1
 800811c:	b2da      	uxtb	r2, r3
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	429a      	cmp	r2, r3
 800812e:	d3c6      	bcc.n	80080be <remove_chain+0x4a>
 8008130:	e000      	b.n	8008134 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8008132:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8008134:	2300      	movs	r3, #0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3720      	adds	r7, #32
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}

0800813e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800813e:	b580      	push	{r7, lr}
 8008140:	b088      	sub	sp, #32
 8008142:	af00      	add	r7, sp, #0
 8008144:	6078      	str	r0, [r7, #4]
 8008146:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10d      	bne.n	8008170 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	695b      	ldr	r3, [r3, #20]
 8008158:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d004      	beq.n	800816a <create_chain+0x2c>
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	429a      	cmp	r2, r3
 8008168:	d31b      	bcc.n	80081a2 <create_chain+0x64>
 800816a:	2301      	movs	r3, #1
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	e018      	b.n	80081a2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8008170:	6839      	ldr	r1, [r7, #0]
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f7ff fd97 	bl	8007ca6 <get_fat>
 8008178:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b01      	cmp	r3, #1
 800817e:	d801      	bhi.n	8008184 <create_chain+0x46>
 8008180:	2301      	movs	r3, #1
 8008182:	e070      	b.n	8008266 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800818a:	d101      	bne.n	8008190 <create_chain+0x52>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	e06a      	b.n	8008266 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	429a      	cmp	r2, r3
 8008198:	d201      	bcs.n	800819e <create_chain+0x60>
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	e063      	b.n	8008266 <create_chain+0x128>
		scl = clst;
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	3301      	adds	r3, #1
 80081aa:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	69fa      	ldr	r2, [r7, #28]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d307      	bcc.n	80081c6 <create_chain+0x88>
				ncl = 2;
 80081b6:	2302      	movs	r3, #2
 80081b8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d901      	bls.n	80081c6 <create_chain+0x88>
 80081c2:	2300      	movs	r3, #0
 80081c4:	e04f      	b.n	8008266 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80081c6:	69f9      	ldr	r1, [r7, #28]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff fd6c 	bl	8007ca6 <get_fat>
 80081ce:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00e      	beq.n	80081f4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d003      	beq.n	80081e4 <create_chain+0xa6>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e2:	d101      	bne.n	80081e8 <create_chain+0xaa>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	e03e      	b.n	8008266 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80081e8:	69fa      	ldr	r2, [r7, #28]
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d1da      	bne.n	80081a6 <create_chain+0x68>
 80081f0:	2300      	movs	r3, #0
 80081f2:	e038      	b.n	8008266 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80081f4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80081f6:	f04f 32ff 	mov.w	r2, #4294967295
 80081fa:	69f9      	ldr	r1, [r7, #28]
 80081fc:	6938      	ldr	r0, [r7, #16]
 80081fe:	f7ff fe22 	bl	8007e46 <put_fat>
 8008202:	4603      	mov	r3, r0
 8008204:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008206:	7dfb      	ldrb	r3, [r7, #23]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d109      	bne.n	8008220 <create_chain+0xe2>
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d006      	beq.n	8008220 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6938      	ldr	r0, [r7, #16]
 8008218:	f7ff fe15 	bl	8007e46 <put_fat>
 800821c:	4603      	mov	r3, r0
 800821e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d116      	bne.n	8008254 <create_chain+0x116>
		fs->last_clst = ncl;
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	69fa      	ldr	r2, [r7, #28]
 800822a:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	699a      	ldr	r2, [r3, #24]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	69db      	ldr	r3, [r3, #28]
 8008234:	3b02      	subs	r3, #2
 8008236:	429a      	cmp	r2, r3
 8008238:	d804      	bhi.n	8008244 <create_chain+0x106>
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	699b      	ldr	r3, [r3, #24]
 800823e:	1e5a      	subs	r2, r3, #1
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	791b      	ldrb	r3, [r3, #4]
 8008248:	f043 0301 	orr.w	r3, r3, #1
 800824c:	b2da      	uxtb	r2, r3
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	711a      	strb	r2, [r3, #4]
 8008252:	e007      	b.n	8008264 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008254:	7dfb      	ldrb	r3, [r7, #23]
 8008256:	2b01      	cmp	r3, #1
 8008258:	d102      	bne.n	8008260 <create_chain+0x122>
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	e000      	b.n	8008262 <create_chain+0x124>
 8008260:	2301      	movs	r3, #1
 8008262:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008264:	69fb      	ldr	r3, [r7, #28]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3720      	adds	r7, #32
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800826e:	b480      	push	{r7}
 8008270:	b087      	sub	sp, #28
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008282:	3304      	adds	r3, #4
 8008284:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	899b      	ldrh	r3, [r3, #12]
 800828a:	461a      	mov	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	8952      	ldrh	r2, [r2, #10]
 8008296:	fbb3 f3f2 	udiv	r3, r3, r2
 800829a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	1d1a      	adds	r2, r3, #4
 80082a0:	613a      	str	r2, [r7, #16]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <clmt_clust+0x42>
 80082ac:	2300      	movs	r3, #0
 80082ae:	e010      	b.n	80082d2 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d307      	bcc.n	80082c8 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	617b      	str	r3, [r7, #20]
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3304      	adds	r3, #4
 80082c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80082c6:	e7e9      	b.n	800829c <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80082c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	4413      	add	r3, r2
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80082f4:	d204      	bcs.n	8008300 <dir_sdi+0x22>
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f003 031f 	and.w	r3, r3, #31
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008300:	2302      	movs	r3, #2
 8008302:	e071      	b.n	80083e8 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d106      	bne.n	8008324 <dir_sdi+0x46>
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b02      	cmp	r3, #2
 800831c:	d902      	bls.n	8008324 <dir_sdi+0x46>
		clst = fs->dirbase;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008322:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10c      	bne.n	8008344 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	095b      	lsrs	r3, r3, #5
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	8912      	ldrh	r2, [r2, #8]
 8008332:	4293      	cmp	r3, r2
 8008334:	d301      	bcc.n	800833a <dir_sdi+0x5c>
 8008336:	2302      	movs	r3, #2
 8008338:	e056      	b.n	80083e8 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	61da      	str	r2, [r3, #28]
 8008342:	e02d      	b.n	80083a0 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	895b      	ldrh	r3, [r3, #10]
 8008348:	461a      	mov	r2, r3
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	899b      	ldrh	r3, [r3, #12]
 800834e:	fb03 f302 	mul.w	r3, r3, r2
 8008352:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008354:	e019      	b.n	800838a <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	4618      	mov	r0, r3
 800835c:	f7ff fca3 	bl	8007ca6 <get_fat>
 8008360:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008362:	697b      	ldr	r3, [r7, #20]
 8008364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008368:	d101      	bne.n	800836e <dir_sdi+0x90>
 800836a:	2301      	movs	r3, #1
 800836c:	e03c      	b.n	80083e8 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d904      	bls.n	800837e <dir_sdi+0xa0>
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	429a      	cmp	r2, r3
 800837c:	d301      	bcc.n	8008382 <dir_sdi+0xa4>
 800837e:	2302      	movs	r3, #2
 8008380:	e032      	b.n	80083e8 <dir_sdi+0x10a>
			ofs -= csz;
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800838a:	683a      	ldr	r2, [r7, #0]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	429a      	cmp	r2, r3
 8008390:	d2e1      	bcs.n	8008356 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008392:	6979      	ldr	r1, [r7, #20]
 8008394:	6938      	ldr	r0, [r7, #16]
 8008396:	f7ff fc67 	bl	8007c68 <clust2sect>
 800839a:	4602      	mov	r2, r0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <dir_sdi+0xd4>
 80083ae:	2302      	movs	r3, #2
 80083b0:	e01a      	b.n	80083e8 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	69da      	ldr	r2, [r3, #28]
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	899b      	ldrh	r3, [r3, #12]
 80083ba:	4619      	mov	r1, r3
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	fbb3 f3f1 	udiv	r3, r3, r1
 80083c2:	441a      	add	r2, r3
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	899b      	ldrh	r3, [r3, #12]
 80083d2:	461a      	mov	r2, r3
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80083da:	fb02 f200 	mul.w	r2, r2, r0
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	18ca      	adds	r2, r1, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	695b      	ldr	r3, [r3, #20]
 8008404:	3320      	adds	r3, #32
 8008406:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <dir_next+0x28>
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008416:	d301      	bcc.n	800841c <dir_next+0x2c>
 8008418:	2304      	movs	r3, #4
 800841a:	e0bb      	b.n	8008594 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	899b      	ldrh	r3, [r3, #12]
 8008420:	461a      	mov	r2, r3
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	fbb3 f1f2 	udiv	r1, r3, r2
 8008428:	fb02 f201 	mul.w	r2, r2, r1
 800842c:	1a9b      	subs	r3, r3, r2
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 809d 	bne.w	800856e <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	69db      	ldr	r3, [r3, #28]
 8008438:	1c5a      	adds	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d10b      	bne.n	800845e <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	095b      	lsrs	r3, r3, #5
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	8912      	ldrh	r2, [r2, #8]
 800844e:	4293      	cmp	r3, r2
 8008450:	f0c0 808d 	bcc.w	800856e <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	61da      	str	r2, [r3, #28]
 800845a:	2304      	movs	r3, #4
 800845c:	e09a      	b.n	8008594 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	899b      	ldrh	r3, [r3, #12]
 8008462:	461a      	mov	r2, r3
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	fbb3 f3f2 	udiv	r3, r3, r2
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	8952      	ldrh	r2, [r2, #10]
 800846e:	3a01      	subs	r2, #1
 8008470:	4013      	ands	r3, r2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d17b      	bne.n	800856e <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	4619      	mov	r1, r3
 800847e:	4610      	mov	r0, r2
 8008480:	f7ff fc11 	bl	8007ca6 <get_fat>
 8008484:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b01      	cmp	r3, #1
 800848a:	d801      	bhi.n	8008490 <dir_next+0xa0>
 800848c:	2302      	movs	r3, #2
 800848e:	e081      	b.n	8008594 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008496:	d101      	bne.n	800849c <dir_next+0xac>
 8008498:	2301      	movs	r3, #1
 800849a:	e07b      	b.n	8008594 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	697a      	ldr	r2, [r7, #20]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d359      	bcc.n	800855a <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d104      	bne.n	80084b6 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	61da      	str	r2, [r3, #28]
 80084b2:	2304      	movs	r3, #4
 80084b4:	e06e      	b.n	8008594 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	4619      	mov	r1, r3
 80084be:	4610      	mov	r0, r2
 80084c0:	f7ff fe3d 	bl	800813e <create_chain>
 80084c4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <dir_next+0xe0>
 80084cc:	2307      	movs	r3, #7
 80084ce:	e061      	b.n	8008594 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d101      	bne.n	80084da <dir_next+0xea>
 80084d6:	2302      	movs	r3, #2
 80084d8:	e05c      	b.n	8008594 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e0:	d101      	bne.n	80084e6 <dir_next+0xf6>
 80084e2:	2301      	movs	r3, #1
 80084e4:	e056      	b.n	8008594 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fadc 	bl	8007aa4 <sync_window>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <dir_next+0x106>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e04e      	b.n	8008594 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	899b      	ldrh	r3, [r3, #12]
 8008500:	461a      	mov	r2, r3
 8008502:	2100      	movs	r1, #0
 8008504:	f7ff f8d5 	bl	80076b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008508:	2300      	movs	r3, #0
 800850a:	613b      	str	r3, [r7, #16]
 800850c:	6979      	ldr	r1, [r7, #20]
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f7ff fbaa 	bl	8007c68 <clust2sect>
 8008514:	4602      	mov	r2, r0
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	635a      	str	r2, [r3, #52]	; 0x34
 800851a:	e012      	b.n	8008542 <dir_next+0x152>
						fs->wflag = 1;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2201      	movs	r2, #1
 8008520:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff fabe 	bl	8007aa4 <sync_window>
 8008528:	4603      	mov	r3, r0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <dir_next+0x142>
 800852e:	2301      	movs	r3, #1
 8008530:	e030      	b.n	8008594 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	3301      	adds	r3, #1
 8008536:	613b      	str	r3, [r7, #16]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853c:	1c5a      	adds	r2, r3, #1
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	635a      	str	r2, [r3, #52]	; 0x34
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	895b      	ldrh	r3, [r3, #10]
 8008546:	461a      	mov	r2, r3
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	4293      	cmp	r3, r2
 800854c:	d3e6      	bcc.n	800851c <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	1ad2      	subs	r2, r2, r3
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	697a      	ldr	r2, [r7, #20]
 800855e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008560:	6979      	ldr	r1, [r7, #20]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff fb80 	bl	8007c68 <clust2sect>
 8008568:	4602      	mov	r2, r0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	899b      	ldrh	r3, [r3, #12]
 800857e:	461a      	mov	r2, r3
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	fbb3 f0f2 	udiv	r0, r3, r2
 8008586:	fb02 f200 	mul.w	r2, r2, r0
 800858a:	1a9b      	subs	r3, r3, r2
 800858c:	18ca      	adds	r2, r1, r3
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b086      	sub	sp, #24
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80085ac:	2100      	movs	r1, #0
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7ff fe95 	bl	80082de <dir_sdi>
 80085b4:	4603      	mov	r3, r0
 80085b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d12b      	bne.n	8008616 <dir_alloc+0x7a>
		n = 0;
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	4619      	mov	r1, r3
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f7ff faaf 	bl	8007b2c <move_window>
 80085ce:	4603      	mov	r3, r0
 80085d0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d11d      	bne.n	8008614 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6a1b      	ldr	r3, [r3, #32]
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2be5      	cmp	r3, #229	; 0xe5
 80085e0:	d004      	beq.n	80085ec <dir_alloc+0x50>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a1b      	ldr	r3, [r3, #32]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d107      	bne.n	80085fc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	3301      	adds	r3, #1
 80085f0:	613b      	str	r3, [r7, #16]
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d102      	bne.n	8008600 <dir_alloc+0x64>
 80085fa:	e00c      	b.n	8008616 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80085fc:	2300      	movs	r3, #0
 80085fe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008600:	2101      	movs	r1, #1
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f7ff fef4 	bl	80083f0 <dir_next>
 8008608:	4603      	mov	r3, r0
 800860a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800860c:	7dfb      	ldrb	r3, [r7, #23]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0d7      	beq.n	80085c2 <dir_alloc+0x26>
 8008612:	e000      	b.n	8008616 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008614:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008616:	7dfb      	ldrb	r3, [r7, #23]
 8008618:	2b04      	cmp	r3, #4
 800861a:	d101      	bne.n	8008620 <dir_alloc+0x84>
 800861c:	2307      	movs	r3, #7
 800861e:	75fb      	strb	r3, [r7, #23]
	return res;
 8008620:	7dfb      	ldrb	r3, [r7, #23]
}
 8008622:	4618      	mov	r0, r3
 8008624:	3718      	adds	r7, #24
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b084      	sub	sp, #16
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	331a      	adds	r3, #26
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe ff97 	bl	800756c <ld_word>
 800863e:	4603      	mov	r3, r0
 8008640:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	781b      	ldrb	r3, [r3, #0]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d109      	bne.n	800865e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	3314      	adds	r3, #20
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe ff8c 	bl	800756c <ld_word>
 8008654:	4603      	mov	r3, r0
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	4313      	orrs	r3, r2
 800865c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800865e:	68fb      	ldr	r3, [r7, #12]
}
 8008660:	4618      	mov	r0, r3
 8008662:	3710      	adds	r7, #16
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}

08008668 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	331a      	adds	r3, #26
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	b292      	uxth	r2, r2
 800867c:	4611      	mov	r1, r2
 800867e:	4618      	mov	r0, r3
 8008680:	f7fe ffaf 	bl	80075e2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b03      	cmp	r3, #3
 800868a:	d109      	bne.n	80086a0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f103 0214 	add.w	r2, r3, #20
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	0c1b      	lsrs	r3, r3, #16
 8008696:	b29b      	uxth	r3, r3
 8008698:	4619      	mov	r1, r3
 800869a:	4610      	mov	r0, r2
 800869c:	f7fe ffa1 	bl	80075e2 <st_word>
	}
}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80086b6:	2100      	movs	r1, #0
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f7ff fe10 	bl	80082de <dir_sdi>
 80086be:	4603      	mov	r3, r0
 80086c0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80086c2:	7dfb      	ldrb	r3, [r7, #23]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <dir_find+0x24>
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	e03e      	b.n	800874a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	4619      	mov	r1, r3
 80086d2:	6938      	ldr	r0, [r7, #16]
 80086d4:	f7ff fa2a 	bl	8007b2c <move_window>
 80086d8:	4603      	mov	r3, r0
 80086da:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80086dc:	7dfb      	ldrb	r3, [r7, #23]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d12f      	bne.n	8008742 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80086ea:	7bfb      	ldrb	r3, [r7, #15]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d102      	bne.n	80086f6 <dir_find+0x4e>
 80086f0:	2304      	movs	r3, #4
 80086f2:	75fb      	strb	r3, [r7, #23]
 80086f4:	e028      	b.n	8008748 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	330b      	adds	r3, #11
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008702:	b2da      	uxtb	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6a1b      	ldr	r3, [r3, #32]
 800870c:	330b      	adds	r3, #11
 800870e:	781b      	ldrb	r3, [r3, #0]
 8008710:	f003 0308 	and.w	r3, r3, #8
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <dir_find+0x86>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6a18      	ldr	r0, [r3, #32]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3324      	adds	r3, #36	; 0x24
 8008720:	220b      	movs	r2, #11
 8008722:	4619      	mov	r1, r3
 8008724:	f7fe ffdf 	bl	80076e6 <mem_cmp>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00b      	beq.n	8008746 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800872e:	2100      	movs	r1, #0
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f7ff fe5d 	bl	80083f0 <dir_next>
 8008736:	4603      	mov	r3, r0
 8008738:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800873a:	7dfb      	ldrb	r3, [r7, #23]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d0c5      	beq.n	80086cc <dir_find+0x24>
 8008740:	e002      	b.n	8008748 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008742:	bf00      	nop
 8008744:	e000      	b.n	8008748 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008746:	bf00      	nop

	return res;
 8008748:	7dfb      	ldrb	r3, [r7, #23]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b084      	sub	sp, #16
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008760:	2101      	movs	r1, #1
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff ff1a 	bl	800859c <dir_alloc>
 8008768:	4603      	mov	r3, r0
 800876a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d11c      	bne.n	80087ac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	4619      	mov	r1, r3
 8008778:	68b8      	ldr	r0, [r7, #8]
 800877a:	f7ff f9d7 	bl	8007b2c <move_window>
 800877e:	4603      	mov	r3, r0
 8008780:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d111      	bne.n	80087ac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a1b      	ldr	r3, [r3, #32]
 800878c:	2220      	movs	r2, #32
 800878e:	2100      	movs	r1, #0
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe ff8e 	bl	80076b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6a18      	ldr	r0, [r3, #32]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	3324      	adds	r3, #36	; 0x24
 800879e:	220b      	movs	r2, #11
 80087a0:	4619      	mov	r1, r3
 80087a2:	f7fe ff65 	bl	8007670 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2201      	movs	r2, #1
 80087aa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3324      	adds	r3, #36	; 0x24
 80087cc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80087ce:	220b      	movs	r2, #11
 80087d0:	2120      	movs	r1, #32
 80087d2:	68b8      	ldr	r0, [r7, #8]
 80087d4:	f7fe ff6d 	bl	80076b2 <mem_set>
	si = i = 0; ni = 8;
 80087d8:	2300      	movs	r3, #0
 80087da:	613b      	str	r3, [r7, #16]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	617b      	str	r3, [r7, #20]
 80087e0:	2308      	movs	r3, #8
 80087e2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	617a      	str	r2, [r7, #20]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	4413      	add	r3, r2
 80087ee:	781b      	ldrb	r3, [r3, #0]
 80087f0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80087f2:	7ffb      	ldrb	r3, [r7, #31]
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	d94e      	bls.n	8008896 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80087f8:	7ffb      	ldrb	r3, [r7, #31]
 80087fa:	2b2f      	cmp	r3, #47	; 0x2f
 80087fc:	d006      	beq.n	800880c <create_name+0x54>
 80087fe:	7ffb      	ldrb	r3, [r7, #31]
 8008800:	2b5c      	cmp	r3, #92	; 0x5c
 8008802:	d110      	bne.n	8008826 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008804:	e002      	b.n	800880c <create_name+0x54>
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	3301      	adds	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
 800880c:	68fa      	ldr	r2, [r7, #12]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	4413      	add	r3, r2
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	2b2f      	cmp	r3, #47	; 0x2f
 8008816:	d0f6      	beq.n	8008806 <create_name+0x4e>
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	4413      	add	r3, r2
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	2b5c      	cmp	r3, #92	; 0x5c
 8008822:	d0f0      	beq.n	8008806 <create_name+0x4e>
			break;
 8008824:	e038      	b.n	8008898 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008826:	7ffb      	ldrb	r3, [r7, #31]
 8008828:	2b2e      	cmp	r3, #46	; 0x2e
 800882a:	d003      	beq.n	8008834 <create_name+0x7c>
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	429a      	cmp	r2, r3
 8008832:	d30c      	bcc.n	800884e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	2b0b      	cmp	r3, #11
 8008838:	d002      	beq.n	8008840 <create_name+0x88>
 800883a:	7ffb      	ldrb	r3, [r7, #31]
 800883c:	2b2e      	cmp	r3, #46	; 0x2e
 800883e:	d001      	beq.n	8008844 <create_name+0x8c>
 8008840:	2306      	movs	r3, #6
 8008842:	e044      	b.n	80088ce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008844:	2308      	movs	r3, #8
 8008846:	613b      	str	r3, [r7, #16]
 8008848:	230b      	movs	r3, #11
 800884a:	61bb      	str	r3, [r7, #24]
			continue;
 800884c:	e022      	b.n	8008894 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800884e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008852:	2b00      	cmp	r3, #0
 8008854:	da04      	bge.n	8008860 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008856:	7ffb      	ldrb	r3, [r7, #31]
 8008858:	3b80      	subs	r3, #128	; 0x80
 800885a:	4a1f      	ldr	r2, [pc, #124]	; (80088d8 <create_name+0x120>)
 800885c:	5cd3      	ldrb	r3, [r2, r3]
 800885e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008860:	7ffb      	ldrb	r3, [r7, #31]
 8008862:	4619      	mov	r1, r3
 8008864:	481d      	ldr	r0, [pc, #116]	; (80088dc <create_name+0x124>)
 8008866:	f7fe ff65 	bl	8007734 <chk_chr>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <create_name+0xbc>
 8008870:	2306      	movs	r3, #6
 8008872:	e02c      	b.n	80088ce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008874:	7ffb      	ldrb	r3, [r7, #31]
 8008876:	2b60      	cmp	r3, #96	; 0x60
 8008878:	d905      	bls.n	8008886 <create_name+0xce>
 800887a:	7ffb      	ldrb	r3, [r7, #31]
 800887c:	2b7a      	cmp	r3, #122	; 0x7a
 800887e:	d802      	bhi.n	8008886 <create_name+0xce>
 8008880:	7ffb      	ldrb	r3, [r7, #31]
 8008882:	3b20      	subs	r3, #32
 8008884:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	1c5a      	adds	r2, r3, #1
 800888a:	613a      	str	r2, [r7, #16]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	4413      	add	r3, r2
 8008890:	7ffa      	ldrb	r2, [r7, #31]
 8008892:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8008894:	e7a6      	b.n	80087e4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008896:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	441a      	add	r2, r3
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <create_name+0xf4>
 80088a8:	2306      	movs	r3, #6
 80088aa:	e010      	b.n	80088ce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	2be5      	cmp	r3, #229	; 0xe5
 80088b2:	d102      	bne.n	80088ba <create_name+0x102>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2205      	movs	r2, #5
 80088b8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80088ba:	7ffb      	ldrb	r3, [r7, #31]
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d801      	bhi.n	80088c4 <create_name+0x10c>
 80088c0:	2204      	movs	r2, #4
 80088c2:	e000      	b.n	80088c6 <create_name+0x10e>
 80088c4:	2200      	movs	r2, #0
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	330b      	adds	r3, #11
 80088ca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80088cc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3720      	adds	r7, #32
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	0800ce1c 	.word	0x0800ce1c
 80088dc:	0800cd9c 	.word	0x0800cd9c

080088e0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80088f4:	e002      	b.n	80088fc <follow_path+0x1c>
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	3301      	adds	r3, #1
 80088fa:	603b      	str	r3, [r7, #0]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	2b2f      	cmp	r3, #47	; 0x2f
 8008902:	d0f8      	beq.n	80088f6 <follow_path+0x16>
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b5c      	cmp	r3, #92	; 0x5c
 800890a:	d0f4      	beq.n	80088f6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	2200      	movs	r2, #0
 8008910:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b1f      	cmp	r3, #31
 8008918:	d80a      	bhi.n	8008930 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2280      	movs	r2, #128	; 0x80
 800891e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008922:	2100      	movs	r1, #0
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f7ff fcda 	bl	80082de <dir_sdi>
 800892a:	4603      	mov	r3, r0
 800892c:	75fb      	strb	r3, [r7, #23]
 800892e:	e048      	b.n	80089c2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008930:	463b      	mov	r3, r7
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff ff3f 	bl	80087b8 <create_name>
 800893a:	4603      	mov	r3, r0
 800893c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800893e:	7dfb      	ldrb	r3, [r7, #23]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d139      	bne.n	80089b8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff feaf 	bl	80086a8 <dir_find>
 800894a:	4603      	mov	r3, r0
 800894c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008954:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008956:	7dfb      	ldrb	r3, [r7, #23]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d00a      	beq.n	8008972 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800895c:	7dfb      	ldrb	r3, [r7, #23]
 800895e:	2b04      	cmp	r3, #4
 8008960:	d12c      	bne.n	80089bc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008962:	7afb      	ldrb	r3, [r7, #11]
 8008964:	f003 0304 	and.w	r3, r3, #4
 8008968:	2b00      	cmp	r3, #0
 800896a:	d127      	bne.n	80089bc <follow_path+0xdc>
 800896c:	2305      	movs	r3, #5
 800896e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008970:	e024      	b.n	80089bc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008972:	7afb      	ldrb	r3, [r7, #11]
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d121      	bne.n	80089c0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	799b      	ldrb	r3, [r3, #6]
 8008980:	f003 0310 	and.w	r3, r3, #16
 8008984:	2b00      	cmp	r3, #0
 8008986:	d102      	bne.n	800898e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008988:	2305      	movs	r3, #5
 800898a:	75fb      	strb	r3, [r7, #23]
 800898c:	e019      	b.n	80089c2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	695b      	ldr	r3, [r3, #20]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	8992      	ldrh	r2, [r2, #12]
 800899c:	fbb3 f0f2 	udiv	r0, r3, r2
 80089a0:	fb02 f200 	mul.w	r2, r2, r0
 80089a4:	1a9b      	subs	r3, r3, r2
 80089a6:	440b      	add	r3, r1
 80089a8:	4619      	mov	r1, r3
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f7ff fe3d 	bl	800862a <ld_clust>
 80089b0:	4602      	mov	r2, r0
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80089b6:	e7bb      	b.n	8008930 <follow_path+0x50>
			if (res != FR_OK) break;
 80089b8:	bf00      	nop
 80089ba:	e002      	b.n	80089c2 <follow_path+0xe2>
				break;
 80089bc:	bf00      	nop
 80089be:	e000      	b.n	80089c2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80089c0:	bf00      	nop
			}
		}
	}

	return res;
 80089c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b087      	sub	sp, #28
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80089d4:	f04f 33ff 	mov.w	r3, #4294967295
 80089d8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d031      	beq.n	8008a46 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	617b      	str	r3, [r7, #20]
 80089e8:	e002      	b.n	80089f0 <get_ldnumber+0x24>
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	3301      	adds	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	781b      	ldrb	r3, [r3, #0]
 80089f4:	2b20      	cmp	r3, #32
 80089f6:	d903      	bls.n	8008a00 <get_ldnumber+0x34>
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b3a      	cmp	r3, #58	; 0x3a
 80089fe:	d1f4      	bne.n	80089ea <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	2b3a      	cmp	r3, #58	; 0x3a
 8008a06:	d11c      	bne.n	8008a42 <get_ldnumber+0x76>
			tp = *path;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	1c5a      	adds	r2, r3, #1
 8008a12:	60fa      	str	r2, [r7, #12]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	3b30      	subs	r3, #48	; 0x30
 8008a18:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	2b09      	cmp	r3, #9
 8008a1e:	d80e      	bhi.n	8008a3e <get_ldnumber+0x72>
 8008a20:	68fa      	ldr	r2, [r7, #12]
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d10a      	bne.n	8008a3e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d107      	bne.n	8008a3e <get_ldnumber+0x72>
					vol = (int)i;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	3301      	adds	r3, #1
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	e002      	b.n	8008a48 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008a42:	2300      	movs	r3, #0
 8008a44:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008a46:	693b      	ldr	r3, [r7, #16]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	371c      	adds	r7, #28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b082      	sub	sp, #8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	70da      	strb	r2, [r3, #3]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f04f 32ff 	mov.w	r2, #4294967295
 8008a6a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008a6c:	6839      	ldr	r1, [r7, #0]
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff f85c 	bl	8007b2c <move_window>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <check_fs+0x2a>
 8008a7a:	2304      	movs	r3, #4
 8008a7c:	e038      	b.n	8008af0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3338      	adds	r3, #56	; 0x38
 8008a82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7fe fd70 	bl	800756c <ld_word>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d001      	beq.n	8008a9c <check_fs+0x48>
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e029      	b.n	8008af0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aa2:	2be9      	cmp	r3, #233	; 0xe9
 8008aa4:	d009      	beq.n	8008aba <check_fs+0x66>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aac:	2beb      	cmp	r3, #235	; 0xeb
 8008aae:	d11e      	bne.n	8008aee <check_fs+0x9a>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ab6:	2b90      	cmp	r3, #144	; 0x90
 8008ab8:	d119      	bne.n	8008aee <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	3338      	adds	r3, #56	; 0x38
 8008abe:	3336      	adds	r3, #54	; 0x36
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fe fd6b 	bl	800759c <ld_dword>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008acc:	4a0a      	ldr	r2, [pc, #40]	; (8008af8 <check_fs+0xa4>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d101      	bne.n	8008ad6 <check_fs+0x82>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	e00c      	b.n	8008af0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3338      	adds	r3, #56	; 0x38
 8008ada:	3352      	adds	r3, #82	; 0x52
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fe fd5d 	bl	800759c <ld_dword>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	4b05      	ldr	r3, [pc, #20]	; (8008afc <check_fs+0xa8>)
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d101      	bne.n	8008aee <check_fs+0x9a>
 8008aea:	2300      	movs	r3, #0
 8008aec:	e000      	b.n	8008af0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008aee:	2302      	movs	r3, #2
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3708      	adds	r7, #8
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	00544146 	.word	0x00544146
 8008afc:	33544146 	.word	0x33544146

08008b00 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b096      	sub	sp, #88	; 0x58
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	2200      	movs	r2, #0
 8008b12:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008b14:	68f8      	ldr	r0, [r7, #12]
 8008b16:	f7ff ff59 	bl	80089cc <get_ldnumber>
 8008b1a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	da01      	bge.n	8008b26 <find_volume+0x26>
 8008b22:	230b      	movs	r3, #11
 8008b24:	e26c      	b.n	8009000 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008b26:	4aa4      	ldr	r2, [pc, #656]	; (8008db8 <find_volume+0x2b8>)
 8008b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b2e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <find_volume+0x3a>
 8008b36:	230c      	movs	r3, #12
 8008b38:	e262      	b.n	8009000 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8008b3a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008b3c:	f7fe fe15 	bl	800776a <lock_fs>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d101      	bne.n	8008b4a <find_volume+0x4a>
 8008b46:	230f      	movs	r3, #15
 8008b48:	e25a      	b.n	8009000 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	f023 0301 	bic.w	r3, r3, #1
 8008b56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d01a      	beq.n	8008b96 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	785b      	ldrb	r3, [r3, #1]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fc63 	bl	8007430 <disk_status>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008b70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d10c      	bne.n	8008b96 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008b7c:	79fb      	ldrb	r3, [r7, #7]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d007      	beq.n	8008b92 <find_volume+0x92>
 8008b82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008b86:	f003 0304 	and.w	r3, r3, #4
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008b8e:	230a      	movs	r3, #10
 8008b90:	e236      	b.n	8009000 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8008b92:	2300      	movs	r3, #0
 8008b94:	e234      	b.n	8009000 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b98:	2200      	movs	r2, #0
 8008b9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b9e:	b2da      	uxtb	r2, r3
 8008ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ba6:	785b      	ldrb	r3, [r3, #1]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f7fe fc5b 	bl	8007464 <disk_initialize>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008bb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e21d      	b.n	8009000 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008bc4:	79fb      	ldrb	r3, [r7, #7]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d007      	beq.n	8008bda <find_volume+0xda>
 8008bca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bce:	f003 0304 	and.w	r3, r3, #4
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d001      	beq.n	8008bda <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008bd6:	230a      	movs	r3, #10
 8008bd8:	e212      	b.n	8009000 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bdc:	7858      	ldrb	r0, [r3, #1]
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	330c      	adds	r3, #12
 8008be2:	461a      	mov	r2, r3
 8008be4:	2102      	movs	r1, #2
 8008be6:	f7fe fca3 	bl	8007530 <disk_ioctl>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <find_volume+0xf4>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e205      	b.n	8009000 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bf6:	899b      	ldrh	r3, [r3, #12]
 8008bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bfc:	d80d      	bhi.n	8008c1a <find_volume+0x11a>
 8008bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c00:	899b      	ldrh	r3, [r3, #12]
 8008c02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c06:	d308      	bcc.n	8008c1a <find_volume+0x11a>
 8008c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0a:	899b      	ldrh	r3, [r3, #12]
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c10:	899b      	ldrh	r3, [r3, #12]
 8008c12:	3b01      	subs	r3, #1
 8008c14:	4013      	ands	r3, r2
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d001      	beq.n	8008c1e <find_volume+0x11e>
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	e1f0      	b.n	8009000 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008c22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008c26:	f7ff ff15 	bl	8008a54 <check_fs>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008c30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d14b      	bne.n	8008cd0 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c38:	2300      	movs	r3, #0
 8008c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c3c:	e01f      	b.n	8008c7e <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8008c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c46:	011b      	lsls	r3, r3, #4
 8008c48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008c4c:	4413      	add	r3, r2
 8008c4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c52:	3304      	adds	r3, #4
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d006      	beq.n	8008c68 <find_volume+0x168>
 8008c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c5c:	3308      	adds	r3, #8
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe fc9c 	bl	800759c <ld_dword>
 8008c64:	4602      	mov	r2, r0
 8008c66:	e000      	b.n	8008c6a <find_volume+0x16a>
 8008c68:	2200      	movs	r2, #0
 8008c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8008c72:	440b      	add	r3, r1
 8008c74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c80:	2b03      	cmp	r3, #3
 8008c82:	d9dc      	bls.n	8008c3e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008c84:	2300      	movs	r3, #0
 8008c86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008c88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d002      	beq.n	8008c94 <find_volume+0x194>
 8008c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c90:	3b01      	subs	r3, #1
 8008c92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008c9c:	4413      	add	r3, r2
 8008c9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008ca2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <find_volume+0x1b6>
 8008caa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008cac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cae:	f7ff fed1 	bl	8008a54 <check_fs>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	e000      	b.n	8008cb8 <find_volume+0x1b8>
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d905      	bls.n	8008cd0 <find_volume+0x1d0>
 8008cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	643b      	str	r3, [r7, #64]	; 0x40
 8008cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d9e1      	bls.n	8008c94 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008cd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008cd4:	2b04      	cmp	r3, #4
 8008cd6:	d101      	bne.n	8008cdc <find_volume+0x1dc>
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e191      	b.n	8009000 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d901      	bls.n	8008ce8 <find_volume+0x1e8>
 8008ce4:	230d      	movs	r3, #13
 8008ce6:	e18b      	b.n	8009000 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cea:	3338      	adds	r3, #56	; 0x38
 8008cec:	330b      	adds	r3, #11
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7fe fc3c 	bl	800756c <ld_word>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cfa:	899b      	ldrh	r3, [r3, #12]
 8008cfc:	429a      	cmp	r2, r3
 8008cfe:	d001      	beq.n	8008d04 <find_volume+0x204>
 8008d00:	230d      	movs	r3, #13
 8008d02:	e17d      	b.n	8009000 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d06:	3338      	adds	r3, #56	; 0x38
 8008d08:	3316      	adds	r3, #22
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fe fc2e 	bl	800756c <ld_word>
 8008d10:	4603      	mov	r3, r0
 8008d12:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <find_volume+0x228>
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	3338      	adds	r3, #56	; 0x38
 8008d1e:	3324      	adds	r3, #36	; 0x24
 8008d20:	4618      	mov	r0, r3
 8008d22:	f7fe fc3b 	bl	800759c <ld_dword>
 8008d26:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d2c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8008d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d36:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d3a:	789b      	ldrb	r3, [r3, #2]
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d005      	beq.n	8008d4c <find_volume+0x24c>
 8008d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d42:	789b      	ldrb	r3, [r3, #2]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d001      	beq.n	8008d4c <find_volume+0x24c>
 8008d48:	230d      	movs	r3, #13
 8008d4a:	e159      	b.n	8009000 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d4e:	789b      	ldrb	r3, [r3, #2]
 8008d50:	461a      	mov	r2, r3
 8008d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d54:	fb02 f303 	mul.w	r3, r2, r3
 8008d58:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d64:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d68:	895b      	ldrh	r3, [r3, #10]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d008      	beq.n	8008d80 <find_volume+0x280>
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d70:	895b      	ldrh	r3, [r3, #10]
 8008d72:	461a      	mov	r2, r3
 8008d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d76:	895b      	ldrh	r3, [r3, #10]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	4013      	ands	r3, r2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <find_volume+0x284>
 8008d80:	230d      	movs	r3, #13
 8008d82:	e13d      	b.n	8009000 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d86:	3338      	adds	r3, #56	; 0x38
 8008d88:	3311      	adds	r3, #17
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fbee 	bl	800756c <ld_word>
 8008d90:	4603      	mov	r3, r0
 8008d92:	461a      	mov	r2, r3
 8008d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d96:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d9a:	891b      	ldrh	r3, [r3, #8]
 8008d9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d9e:	8992      	ldrh	r2, [r2, #12]
 8008da0:	0952      	lsrs	r2, r2, #5
 8008da2:	b292      	uxth	r2, r2
 8008da4:	fbb3 f1f2 	udiv	r1, r3, r2
 8008da8:	fb02 f201 	mul.w	r2, r2, r1
 8008dac:	1a9b      	subs	r3, r3, r2
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <find_volume+0x2bc>
 8008db4:	230d      	movs	r3, #13
 8008db6:	e123      	b.n	8009000 <find_volume+0x500>
 8008db8:	200024c8 	.word	0x200024c8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dbe:	3338      	adds	r3, #56	; 0x38
 8008dc0:	3313      	adds	r3, #19
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7fe fbd2 	bl	800756c <ld_word>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d106      	bne.n	8008de0 <find_volume+0x2e0>
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	3338      	adds	r3, #56	; 0x38
 8008dd6:	3320      	adds	r3, #32
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7fe fbdf 	bl	800759c <ld_dword>
 8008dde:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008de2:	3338      	adds	r3, #56	; 0x38
 8008de4:	330e      	adds	r3, #14
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7fe fbc0 	bl	800756c <ld_word>
 8008dec:	4603      	mov	r3, r0
 8008dee:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008df0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <find_volume+0x2fa>
 8008df6:	230d      	movs	r3, #13
 8008df8:	e102      	b.n	8009000 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008dfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dfe:	4413      	add	r3, r2
 8008e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e02:	8911      	ldrh	r1, [r2, #8]
 8008e04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e06:	8992      	ldrh	r2, [r2, #12]
 8008e08:	0952      	lsrs	r2, r2, #5
 8008e0a:	b292      	uxth	r2, r2
 8008e0c:	fbb1 f2f2 	udiv	r2, r1, r2
 8008e10:	b292      	uxth	r2, r2
 8008e12:	4413      	add	r3, r2
 8008e14:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008e16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1a:	429a      	cmp	r2, r3
 8008e1c:	d201      	bcs.n	8008e22 <find_volume+0x322>
 8008e1e:	230d      	movs	r3, #13
 8008e20:	e0ee      	b.n	8009000 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008e22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e2a:	8952      	ldrh	r2, [r2, #10]
 8008e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <find_volume+0x33c>
 8008e38:	230d      	movs	r3, #13
 8008e3a:	e0e1      	b.n	8009000 <find_volume+0x500>
		fmt = FS_FAT32;
 8008e3c:	2303      	movs	r3, #3
 8008e3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e44:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d802      	bhi.n	8008e52 <find_volume+0x352>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e54:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d802      	bhi.n	8008e62 <find_volume+0x362>
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e64:	1c9a      	adds	r2, r3, #2
 8008e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e68:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8008e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e6e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008e70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008e72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e74:	441a      	add	r2, r3
 8008e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e78:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8008e7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e7e:	441a      	add	r2, r3
 8008e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e82:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8008e84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d11e      	bne.n	8008eca <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e8e:	3338      	adds	r3, #56	; 0x38
 8008e90:	332a      	adds	r3, #42	; 0x2a
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7fe fb6a 	bl	800756c <ld_word>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <find_volume+0x3a2>
 8008e9e:	230d      	movs	r3, #13
 8008ea0:	e0ae      	b.n	8009000 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	891b      	ldrh	r3, [r3, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <find_volume+0x3ae>
 8008eaa:	230d      	movs	r3, #13
 8008eac:	e0a8      	b.n	8009000 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb0:	3338      	adds	r3, #56	; 0x38
 8008eb2:	332c      	adds	r3, #44	; 0x2c
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fb71 	bl	800759c <ld_dword>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ebe:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec2:	69db      	ldr	r3, [r3, #28]
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	647b      	str	r3, [r7, #68]	; 0x44
 8008ec8:	e01f      	b.n	8008f0a <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ecc:	891b      	ldrh	r3, [r3, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d101      	bne.n	8008ed6 <find_volume+0x3d6>
 8008ed2:	230d      	movs	r3, #13
 8008ed4:	e094      	b.n	8009000 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008edc:	441a      	add	r2, r3
 8008ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008ee2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d103      	bne.n	8008ef2 <find_volume+0x3f2>
 8008eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eec:	69db      	ldr	r3, [r3, #28]
 8008eee:	005b      	lsls	r3, r3, #1
 8008ef0:	e00a      	b.n	8008f08 <find_volume+0x408>
 8008ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ef4:	69da      	ldr	r2, [r3, #28]
 8008ef6:	4613      	mov	r3, r2
 8008ef8:	005b      	lsls	r3, r3, #1
 8008efa:	4413      	add	r3, r2
 8008efc:	085a      	lsrs	r2, r3, #1
 8008efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	f003 0301 	and.w	r3, r3, #1
 8008f06:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008f08:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0c:	6a1a      	ldr	r2, [r3, #32]
 8008f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f10:	899b      	ldrh	r3, [r3, #12]
 8008f12:	4619      	mov	r1, r3
 8008f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f16:	440b      	add	r3, r1
 8008f18:	3b01      	subs	r3, #1
 8008f1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008f1c:	8989      	ldrh	r1, [r1, #12]
 8008f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d201      	bcs.n	8008f2a <find_volume+0x42a>
 8008f26:	230d      	movs	r3, #13
 8008f28:	e06a      	b.n	8009000 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f30:	619a      	str	r2, [r3, #24]
 8008f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f34:	699a      	ldr	r2, [r3, #24]
 8008f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f38:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	2280      	movs	r2, #128	; 0x80
 8008f3e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d149      	bne.n	8008fdc <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4a:	3338      	adds	r3, #56	; 0x38
 8008f4c:	3330      	adds	r3, #48	; 0x30
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7fe fb0c 	bl	800756c <ld_word>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d140      	bne.n	8008fdc <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008f62:	f7fe fde3 	bl	8007b2c <move_window>
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d137      	bne.n	8008fdc <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f6e:	2200      	movs	r2, #0
 8008f70:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f74:	3338      	adds	r3, #56	; 0x38
 8008f76:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe faf6 	bl	800756c <ld_word>
 8008f80:	4603      	mov	r3, r0
 8008f82:	461a      	mov	r2, r3
 8008f84:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d127      	bne.n	8008fdc <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	3338      	adds	r3, #56	; 0x38
 8008f90:	4618      	mov	r0, r3
 8008f92:	f7fe fb03 	bl	800759c <ld_dword>
 8008f96:	4602      	mov	r2, r0
 8008f98:	4b1b      	ldr	r3, [pc, #108]	; (8009008 <find_volume+0x508>)
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d11e      	bne.n	8008fdc <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa0:	3338      	adds	r3, #56	; 0x38
 8008fa2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7fe faf8 	bl	800759c <ld_dword>
 8008fac:	4602      	mov	r2, r0
 8008fae:	4b17      	ldr	r3, [pc, #92]	; (800900c <find_volume+0x50c>)
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d113      	bne.n	8008fdc <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fb6:	3338      	adds	r3, #56	; 0x38
 8008fb8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f7fe faed 	bl	800759c <ld_dword>
 8008fc2:	4602      	mov	r2, r0
 8008fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fca:	3338      	adds	r3, #56	; 0x38
 8008fcc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fe fae3 	bl	800759c <ld_dword>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fda:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fde:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008fe2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <find_volume+0x510>)
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	b29a      	uxth	r2, r3
 8008fec:	4b08      	ldr	r3, [pc, #32]	; (8009010 <find_volume+0x510>)
 8008fee:	801a      	strh	r2, [r3, #0]
 8008ff0:	4b07      	ldr	r3, [pc, #28]	; (8009010 <find_volume+0x510>)
 8008ff2:	881a      	ldrh	r2, [r3, #0]
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008ff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008ffa:	f7fe fd2f 	bl	8007a5c <clear_lock>
#endif
	return FR_OK;
 8008ffe:	2300      	movs	r3, #0
}
 8009000:	4618      	mov	r0, r3
 8009002:	3758      	adds	r7, #88	; 0x58
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	41615252 	.word	0x41615252
 800900c:	61417272 	.word	0x61417272
 8009010:	200024cc 	.word	0x200024cc

08009014 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800901e:	2309      	movs	r3, #9
 8009020:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d02e      	beq.n	8009086 <validate+0x72>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d02a      	beq.n	8009086 <validate+0x72>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d025      	beq.n	8009086 <validate+0x72>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	889a      	ldrh	r2, [r3, #4]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	88db      	ldrh	r3, [r3, #6]
 8009044:	429a      	cmp	r2, r3
 8009046:	d11e      	bne.n	8009086 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe fb8c 	bl	800776a <lock_fs>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d014      	beq.n	8009082 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	4618      	mov	r0, r3
 8009060:	f7fe f9e6 	bl	8007430 <disk_status>
 8009064:	4603      	mov	r3, r0
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <validate+0x60>
				res = FR_OK;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
 8009072:	e008      	b.n	8009086 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f7fe fb8b 	bl	8007796 <unlock_fs>
 8009080:	e001      	b.n	8009086 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8009082:	230f      	movs	r3, #15
 8009084:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009086:	7bfb      	ldrb	r3, [r7, #15]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <validate+0x7e>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	e000      	b.n	8009094 <validate+0x80>
 8009092:	2300      	movs	r3, #0
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	6013      	str	r3, [r2, #0]
	return res;
 8009098:	7bfb      	ldrb	r3, [r7, #15]
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b088      	sub	sp, #32
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	4613      	mov	r3, r2
 80090b0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80090b6:	f107 0310 	add.w	r3, r7, #16
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7ff fc86 	bl	80089cc <get_ldnumber>
 80090c0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80090c2:	69fb      	ldr	r3, [r7, #28]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	da01      	bge.n	80090cc <f_mount+0x28>
 80090c8:	230b      	movs	r3, #11
 80090ca:	e048      	b.n	800915e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80090cc:	4a26      	ldr	r2, [pc, #152]	; (8009168 <f_mount+0xc4>)
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80090d6:	69bb      	ldr	r3, [r7, #24]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00f      	beq.n	80090fc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80090dc:	69b8      	ldr	r0, [r7, #24]
 80090de:	f7fe fcbd 	bl	8007a5c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80090e2:	69bb      	ldr	r3, [r7, #24]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fd09 	bl	8009afe <ff_del_syncobj>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <f_mount+0x52>
 80090f2:	2302      	movs	r3, #2
 80090f4:	e033      	b.n	800915e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	2200      	movs	r2, #0
 80090fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00f      	beq.n	8009122 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009108:	69fb      	ldr	r3, [r7, #28]
 800910a:	b2da      	uxtb	r2, r3
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	3310      	adds	r3, #16
 8009110:	4619      	mov	r1, r3
 8009112:	4610      	mov	r0, r2
 8009114:	f000 fcd3 	bl	8009abe <ff_cre_syncobj>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <f_mount+0x7e>
 800911e:	2302      	movs	r3, #2
 8009120:	e01d      	b.n	800915e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	4910      	ldr	r1, [pc, #64]	; (8009168 <f_mount+0xc4>)
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d002      	beq.n	8009138 <f_mount+0x94>
 8009132:	79fb      	ldrb	r3, [r7, #7]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d001      	beq.n	800913c <f_mount+0x98>
 8009138:	2300      	movs	r3, #0
 800913a:	e010      	b.n	800915e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800913c:	f107 010c 	add.w	r1, r7, #12
 8009140:	f107 0308 	add.w	r3, r7, #8
 8009144:	2200      	movs	r2, #0
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fcda 	bl	8008b00 <find_volume>
 800914c:	4603      	mov	r3, r0
 800914e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	7dfa      	ldrb	r2, [r7, #23]
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7fe fb1d 	bl	8007796 <unlock_fs>
 800915c:	7dfb      	ldrb	r3, [r7, #23]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3720      	adds	r7, #32
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	200024c8 	.word	0x200024c8

0800916c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b098      	sub	sp, #96	; 0x60
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <f_open+0x18>
 8009180:	2309      	movs	r3, #9
 8009182:	e1c2      	b.n	800950a <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800918a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800918c:	79fa      	ldrb	r2, [r7, #7]
 800918e:	f107 0110 	add.w	r1, r7, #16
 8009192:	f107 0308 	add.w	r3, r7, #8
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff fcb2 	bl	8008b00 <find_volume>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80091a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f040 819f 	bne.w	80094ea <f_open+0x37e>
		dj.obj.fs = fs;
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80091b0:	68ba      	ldr	r2, [r7, #8]
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	4611      	mov	r1, r2
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fb91 	bl	80088e0 <follow_path>
 80091be:	4603      	mov	r3, r0
 80091c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80091c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d11a      	bne.n	8009202 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80091cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091d0:	b25b      	sxtb	r3, r3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	da03      	bge.n	80091de <f_open+0x72>
				res = FR_INVALID_NAME;
 80091d6:	2306      	movs	r3, #6
 80091d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80091dc:	e011      	b.n	8009202 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80091de:	79fb      	ldrb	r3, [r7, #7]
 80091e0:	f023 0301 	bic.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	461a      	mov	r2, r3
 80091f0:	f107 0314 	add.w	r3, r7, #20
 80091f4:	4611      	mov	r1, r2
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7fe fae8 	bl	80077cc <chk_lock>
 80091fc:	4603      	mov	r3, r0
 80091fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	f003 031c 	and.w	r3, r3, #28
 8009208:	2b00      	cmp	r3, #0
 800920a:	d07f      	beq.n	800930c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800920c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009210:	2b00      	cmp	r3, #0
 8009212:	d017      	beq.n	8009244 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009214:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009218:	2b04      	cmp	r3, #4
 800921a:	d10e      	bne.n	800923a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800921c:	f7fe fb32 	bl	8007884 <enq_lock>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d006      	beq.n	8009234 <f_open+0xc8>
 8009226:	f107 0314 	add.w	r3, r7, #20
 800922a:	4618      	mov	r0, r3
 800922c:	f7ff fa91 	bl	8008752 <dir_register>
 8009230:	4603      	mov	r3, r0
 8009232:	e000      	b.n	8009236 <f_open+0xca>
 8009234:	2312      	movs	r3, #18
 8009236:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	f043 0308 	orr.w	r3, r3, #8
 8009240:	71fb      	strb	r3, [r7, #7]
 8009242:	e010      	b.n	8009266 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8009244:	7ebb      	ldrb	r3, [r7, #26]
 8009246:	f003 0311 	and.w	r3, r3, #17
 800924a:	2b00      	cmp	r3, #0
 800924c:	d003      	beq.n	8009256 <f_open+0xea>
					res = FR_DENIED;
 800924e:	2307      	movs	r3, #7
 8009250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009254:	e007      	b.n	8009266 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d002      	beq.n	8009266 <f_open+0xfa>
 8009260:	2308      	movs	r3, #8
 8009262:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8009266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800926a:	2b00      	cmp	r3, #0
 800926c:	d168      	bne.n	8009340 <f_open+0x1d4>
 800926e:	79fb      	ldrb	r3, [r7, #7]
 8009270:	f003 0308 	and.w	r3, r3, #8
 8009274:	2b00      	cmp	r3, #0
 8009276:	d063      	beq.n	8009340 <f_open+0x1d4>
				dw = GET_FATTIME();
 8009278:	f7fd fe86 	bl	8006f88 <get_fattime>
 800927c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800927e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009280:	330e      	adds	r3, #14
 8009282:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009284:	4618      	mov	r0, r3
 8009286:	f7fe f9c7 	bl	8007618 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800928a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928c:	3316      	adds	r3, #22
 800928e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe f9c1 	bl	8007618 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009298:	330b      	adds	r3, #11
 800929a:	2220      	movs	r2, #32
 800929c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff f9c0 	bl	800862a <ld_clust>
 80092aa:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80092b0:	2200      	movs	r2, #0
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff f9d8 	bl	8008668 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80092b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ba:	331c      	adds	r3, #28
 80092bc:	2100      	movs	r1, #0
 80092be:	4618      	mov	r0, r3
 80092c0:	f7fe f9aa 	bl	8007618 <st_dword>
					fs->wflag = 1;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	2201      	movs	r2, #1
 80092c8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80092ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d037      	beq.n	8009340 <f_open+0x1d4>
						dw = fs->winsect;
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092d4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80092d6:	f107 0314 	add.w	r3, r7, #20
 80092da:	2200      	movs	r2, #0
 80092dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fec8 	bl	8008074 <remove_chain>
 80092e4:	4603      	mov	r3, r0
 80092e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80092ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d126      	bne.n	8009340 <f_open+0x1d4>
							res = move_window(fs, dw);
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fe fc18 	bl	8007b2c <move_window>
 80092fc:	4603      	mov	r3, r0
 80092fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009306:	3a01      	subs	r2, #1
 8009308:	615a      	str	r2, [r3, #20]
 800930a:	e019      	b.n	8009340 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800930c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009310:	2b00      	cmp	r3, #0
 8009312:	d115      	bne.n	8009340 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009314:	7ebb      	ldrb	r3, [r7, #26]
 8009316:	f003 0310 	and.w	r3, r3, #16
 800931a:	2b00      	cmp	r3, #0
 800931c:	d003      	beq.n	8009326 <f_open+0x1ba>
					res = FR_NO_FILE;
 800931e:	2304      	movs	r3, #4
 8009320:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009324:	e00c      	b.n	8009340 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009326:	79fb      	ldrb	r3, [r7, #7]
 8009328:	f003 0302 	and.w	r3, r3, #2
 800932c:	2b00      	cmp	r3, #0
 800932e:	d007      	beq.n	8009340 <f_open+0x1d4>
 8009330:	7ebb      	ldrb	r3, [r7, #26]
 8009332:	f003 0301 	and.w	r3, r3, #1
 8009336:	2b00      	cmp	r3, #0
 8009338:	d002      	beq.n	8009340 <f_open+0x1d4>
						res = FR_DENIED;
 800933a:	2307      	movs	r3, #7
 800933c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009340:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009344:	2b00      	cmp	r3, #0
 8009346:	d128      	bne.n	800939a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	f003 0308 	and.w	r3, r3, #8
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009352:	79fb      	ldrb	r3, [r7, #7]
 8009354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009358:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009368:	79fb      	ldrb	r3, [r7, #7]
 800936a:	f023 0301 	bic.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	bf14      	ite	ne
 8009372:	2301      	movne	r3, #1
 8009374:	2300      	moveq	r3, #0
 8009376:	b2db      	uxtb	r3, r3
 8009378:	461a      	mov	r2, r3
 800937a:	f107 0314 	add.w	r3, r7, #20
 800937e:	4611      	mov	r1, r2
 8009380:	4618      	mov	r0, r3
 8009382:	f7fe faa1 	bl	80078c8 <inc_lock>
 8009386:	4602      	mov	r2, r0
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d102      	bne.n	800939a <f_open+0x22e>
 8009394:	2302      	movs	r3, #2
 8009396:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800939a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f040 80a3 	bne.w	80094ea <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80093a8:	4611      	mov	r1, r2
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff f93d 	bl	800862a <ld_clust>
 80093b0:	4602      	mov	r2, r0
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80093b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093b8:	331c      	adds	r3, #28
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fe f8ee 	bl	800759c <ld_dword>
 80093c0:	4602      	mov	r2, r0
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80093cc:	693a      	ldr	r2, [r7, #16]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80093d2:	693b      	ldr	r3, [r7, #16]
 80093d4:	88da      	ldrh	r2, [r3, #6]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	79fa      	ldrb	r2, [r7, #7]
 80093de:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3330      	adds	r3, #48	; 0x30
 80093f6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80093fa:	2100      	movs	r1, #0
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fe f958 	bl	80076b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009402:	79fb      	ldrb	r3, [r7, #7]
 8009404:	f003 0320 	and.w	r3, r3, #32
 8009408:	2b00      	cmp	r3, #0
 800940a:	d06e      	beq.n	80094ea <f_open+0x37e>
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d06a      	beq.n	80094ea <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	68da      	ldr	r2, [r3, #12]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	895b      	ldrh	r3, [r3, #10]
 8009420:	461a      	mov	r2, r3
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	899b      	ldrh	r3, [r3, #12]
 8009426:	fb03 f302 	mul.w	r3, r3, r2
 800942a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	657b      	str	r3, [r7, #84]	; 0x54
 8009438:	e016      	b.n	8009468 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800943e:	4618      	mov	r0, r3
 8009440:	f7fe fc31 	bl	8007ca6 <get_fat>
 8009444:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009448:	2b01      	cmp	r3, #1
 800944a:	d802      	bhi.n	8009452 <f_open+0x2e6>
 800944c:	2302      	movs	r3, #2
 800944e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009458:	d102      	bne.n	8009460 <f_open+0x2f4>
 800945a:	2301      	movs	r3, #1
 800945c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009460:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	657b      	str	r3, [r7, #84]	; 0x54
 8009468:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800946c:	2b00      	cmp	r3, #0
 800946e:	d103      	bne.n	8009478 <f_open+0x30c>
 8009470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009474:	429a      	cmp	r2, r3
 8009476:	d8e0      	bhi.n	800943a <f_open+0x2ce>
				}
				fp->clust = clst;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800947c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800947e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009482:	2b00      	cmp	r3, #0
 8009484:	d131      	bne.n	80094ea <f_open+0x37e>
 8009486:	693b      	ldr	r3, [r7, #16]
 8009488:	899b      	ldrh	r3, [r3, #12]
 800948a:	461a      	mov	r2, r3
 800948c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800948e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009492:	fb02 f201 	mul.w	r2, r2, r1
 8009496:	1a9b      	subs	r3, r3, r2
 8009498:	2b00      	cmp	r3, #0
 800949a:	d026      	beq.n	80094ea <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7fe fbe1 	bl	8007c68 <clust2sect>
 80094a6:	6478      	str	r0, [r7, #68]	; 0x44
 80094a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d103      	bne.n	80094b6 <f_open+0x34a>
						res = FR_INT_ERR;
 80094ae:	2302      	movs	r3, #2
 80094b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80094b4:	e019      	b.n	80094ea <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	899b      	ldrh	r3, [r3, #12]
 80094ba:	461a      	mov	r2, r3
 80094bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094be:	fbb3 f2f2 	udiv	r2, r3, r2
 80094c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094c4:	441a      	add	r2, r3
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	7858      	ldrb	r0, [r3, #1]
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6a1a      	ldr	r2, [r3, #32]
 80094d8:	2301      	movs	r3, #1
 80094da:	f7fd ffe9 	bl	80074b0 <disk_read>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d002      	beq.n	80094ea <f_open+0x37e>
 80094e4:	2301      	movs	r3, #1
 80094e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80094ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d002      	beq.n	80094f8 <f_open+0x38c>
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80094fe:	4611      	mov	r1, r2
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe f948 	bl	8007796 <unlock_fs>
 8009506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800950a:	4618      	mov	r0, r3
 800950c:	3760      	adds	r7, #96	; 0x60
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}

08009512 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009512:	b580      	push	{r7, lr}
 8009514:	b08c      	sub	sp, #48	; 0x30
 8009516:	af00      	add	r7, sp, #0
 8009518:	60f8      	str	r0, [r7, #12]
 800951a:	60b9      	str	r1, [r7, #8]
 800951c:	607a      	str	r2, [r7, #4]
 800951e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	2200      	movs	r2, #0
 8009528:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f107 0210 	add.w	r2, r7, #16
 8009530:	4611      	mov	r1, r2
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fd6e 	bl	8009014 <validate>
 8009538:	4603      	mov	r3, r0
 800953a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800953e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009542:	2b00      	cmp	r3, #0
 8009544:	d107      	bne.n	8009556 <f_write+0x44>
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	7d5b      	ldrb	r3, [r3, #21]
 800954a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800954e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009552:	2b00      	cmp	r3, #0
 8009554:	d009      	beq.n	800956a <f_write+0x58>
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800955c:	4611      	mov	r1, r2
 800955e:	4618      	mov	r0, r3
 8009560:	f7fe f919 	bl	8007796 <unlock_fs>
 8009564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009568:	e192      	b.n	8009890 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	7d1b      	ldrb	r3, [r3, #20]
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d106      	bne.n	8009584 <f_write+0x72>
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	2107      	movs	r1, #7
 800957a:	4618      	mov	r0, r3
 800957c:	f7fe f90b 	bl	8007796 <unlock_fs>
 8009580:	2307      	movs	r3, #7
 8009582:	e185      	b.n	8009890 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	699a      	ldr	r2, [r3, #24]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	441a      	add	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	429a      	cmp	r2, r3
 8009592:	f080 816a 	bcs.w	800986a <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	43db      	mvns	r3, r3
 800959c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800959e:	e164      	b.n	800986a <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	693a      	ldr	r2, [r7, #16]
 80095a6:	8992      	ldrh	r2, [r2, #12]
 80095a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80095ac:	fb02 f201 	mul.w	r2, r2, r1
 80095b0:	1a9b      	subs	r3, r3, r2
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f040 810f 	bne.w	80097d6 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	693a      	ldr	r2, [r7, #16]
 80095be:	8992      	ldrh	r2, [r2, #12]
 80095c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80095c4:	693a      	ldr	r2, [r7, #16]
 80095c6:	8952      	ldrh	r2, [r2, #10]
 80095c8:	3a01      	subs	r2, #1
 80095ca:	4013      	ands	r3, r2
 80095cc:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d14d      	bne.n	8009670 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d10c      	bne.n	80095f6 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80095e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d11a      	bne.n	800961e <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	2100      	movs	r1, #0
 80095ec:	4618      	mov	r0, r3
 80095ee:	f7fe fda6 	bl	800813e <create_chain>
 80095f2:	62b8      	str	r0, [r7, #40]	; 0x28
 80095f4:	e013      	b.n	800961e <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d007      	beq.n	800960e <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	4619      	mov	r1, r3
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f7fe fe32 	bl	800826e <clmt_clust>
 800960a:	62b8      	str	r0, [r7, #40]	; 0x28
 800960c:	e007      	b.n	800961e <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	4619      	mov	r1, r3
 8009616:	4610      	mov	r0, r2
 8009618:	f7fe fd91 	bl	800813e <create_chain>
 800961c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800961e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 8127 	beq.w	8009874 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009628:	2b01      	cmp	r3, #1
 800962a:	d109      	bne.n	8009640 <f_write+0x12e>
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	2202      	movs	r2, #2
 8009630:	755a      	strb	r2, [r3, #21]
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2102      	movs	r1, #2
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe f8ad 	bl	8007796 <unlock_fs>
 800963c:	2302      	movs	r3, #2
 800963e:	e127      	b.n	8009890 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009646:	d109      	bne.n	800965c <f_write+0x14a>
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	2201      	movs	r2, #1
 800964c:	755a      	strb	r2, [r3, #21]
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2101      	movs	r1, #1
 8009652:	4618      	mov	r0, r3
 8009654:	f7fe f89f 	bl	8007796 <unlock_fs>
 8009658:	2301      	movs	r3, #1
 800965a:	e119      	b.n	8009890 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009660:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d102      	bne.n	8009670 <f_write+0x15e>
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800966e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	7d1b      	ldrb	r3, [r3, #20]
 8009674:	b25b      	sxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	da1d      	bge.n	80096b6 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	7858      	ldrb	r0, [r3, #1]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6a1a      	ldr	r2, [r3, #32]
 8009688:	2301      	movs	r3, #1
 800968a:	f7fd ff31 	bl	80074f0 <disk_write>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d009      	beq.n	80096a8 <f_write+0x196>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	755a      	strb	r2, [r3, #21]
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	2101      	movs	r1, #1
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe f879 	bl	8007796 <unlock_fs>
 80096a4:	2301      	movs	r3, #1
 80096a6:	e0f3      	b.n	8009890 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	7d1b      	ldrb	r3, [r3, #20]
 80096ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096b0:	b2da      	uxtb	r2, r3
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	69db      	ldr	r3, [r3, #28]
 80096bc:	4619      	mov	r1, r3
 80096be:	4610      	mov	r0, r2
 80096c0:	f7fe fad2 	bl	8007c68 <clust2sect>
 80096c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d109      	bne.n	80096e0 <f_write+0x1ce>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2202      	movs	r2, #2
 80096d0:	755a      	strb	r2, [r3, #21]
 80096d2:	693b      	ldr	r3, [r7, #16]
 80096d4:	2102      	movs	r1, #2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe f85d 	bl	8007796 <unlock_fs>
 80096dc:	2302      	movs	r3, #2
 80096de:	e0d7      	b.n	8009890 <f_write+0x37e>
			sect += csect;
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	69bb      	ldr	r3, [r7, #24]
 80096e4:	4413      	add	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	899b      	ldrh	r3, [r3, #12]
 80096ec:	461a      	mov	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80096f4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d048      	beq.n	800978e <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	4413      	add	r3, r2
 8009702:	693a      	ldr	r2, [r7, #16]
 8009704:	8952      	ldrh	r2, [r2, #10]
 8009706:	4293      	cmp	r3, r2
 8009708:	d905      	bls.n	8009716 <f_write+0x204>
					cc = fs->csize - csect;
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	895b      	ldrh	r3, [r3, #10]
 800970e:	461a      	mov	r2, r3
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009716:	693b      	ldr	r3, [r7, #16]
 8009718:	7858      	ldrb	r0, [r3, #1]
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	697a      	ldr	r2, [r7, #20]
 800971e:	69f9      	ldr	r1, [r7, #28]
 8009720:	f7fd fee6 	bl	80074f0 <disk_write>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d009      	beq.n	800973e <f_write+0x22c>
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2201      	movs	r2, #1
 800972e:	755a      	strb	r2, [r3, #21]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2101      	movs	r1, #1
 8009734:	4618      	mov	r0, r3
 8009736:	f7fe f82e 	bl	8007796 <unlock_fs>
 800973a:	2301      	movs	r3, #1
 800973c:	e0a8      	b.n	8009890 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	6a1a      	ldr	r2, [r3, #32]
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	1ad3      	subs	r3, r2, r3
 8009746:	6a3a      	ldr	r2, [r7, #32]
 8009748:	429a      	cmp	r2, r3
 800974a:	d918      	bls.n	800977e <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	6a1a      	ldr	r2, [r3, #32]
 8009756:	697b      	ldr	r3, [r7, #20]
 8009758:	1ad3      	subs	r3, r2, r3
 800975a:	693a      	ldr	r2, [r7, #16]
 800975c:	8992      	ldrh	r2, [r2, #12]
 800975e:	fb02 f303 	mul.w	r3, r2, r3
 8009762:	69fa      	ldr	r2, [r7, #28]
 8009764:	18d1      	adds	r1, r2, r3
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	899b      	ldrh	r3, [r3, #12]
 800976a:	461a      	mov	r2, r3
 800976c:	f7fd ff80 	bl	8007670 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	7d1b      	ldrb	r3, [r3, #20]
 8009774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009778:	b2da      	uxtb	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	899b      	ldrh	r3, [r3, #12]
 8009782:	461a      	mov	r2, r3
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800978c:	e050      	b.n	8009830 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	429a      	cmp	r2, r3
 8009796:	d01b      	beq.n	80097d0 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	699a      	ldr	r2, [r3, #24]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d215      	bcs.n	80097d0 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	7858      	ldrb	r0, [r3, #1]
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80097ae:	2301      	movs	r3, #1
 80097b0:	697a      	ldr	r2, [r7, #20]
 80097b2:	f7fd fe7d 	bl	80074b0 <disk_read>
 80097b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d009      	beq.n	80097d0 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	2201      	movs	r2, #1
 80097c0:	755a      	strb	r2, [r3, #21]
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	2101      	movs	r1, #1
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fd ffe5 	bl	8007796 <unlock_fs>
 80097cc:	2301      	movs	r3, #1
 80097ce:	e05f      	b.n	8009890 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	899b      	ldrh	r3, [r3, #12]
 80097da:	4618      	mov	r0, r3
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	699b      	ldr	r3, [r3, #24]
 80097e0:	693a      	ldr	r2, [r7, #16]
 80097e2:	8992      	ldrh	r2, [r2, #12]
 80097e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80097e8:	fb02 f201 	mul.w	r2, r2, r1
 80097ec:	1a9b      	subs	r3, r3, r2
 80097ee:	1ac3      	subs	r3, r0, r3
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80097f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d901      	bls.n	80097fe <f_write+0x2ec>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	699b      	ldr	r3, [r3, #24]
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	8992      	ldrh	r2, [r2, #12]
 800980c:	fbb3 f0f2 	udiv	r0, r3, r2
 8009810:	fb02 f200 	mul.w	r2, r2, r0
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	440b      	add	r3, r1
 8009818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981a:	69f9      	ldr	r1, [r7, #28]
 800981c:	4618      	mov	r0, r3
 800981e:	f7fd ff27 	bl	8007670 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	7d1b      	ldrb	r3, [r3, #20]
 8009826:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800982a:	b2da      	uxtb	r2, r3
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009830:	69fa      	ldr	r2, [r7, #28]
 8009832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009834:	4413      	add	r3, r2
 8009836:	61fb      	str	r3, [r7, #28]
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	699a      	ldr	r2, [r3, #24]
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	441a      	add	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	619a      	str	r2, [r3, #24]
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	429a      	cmp	r2, r3
 800984e:	bf38      	it	cc
 8009850:	461a      	movcc	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	60da      	str	r2, [r3, #12]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	441a      	add	r2, r3
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	601a      	str	r2, [r3, #0]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009866:	1ad3      	subs	r3, r2, r3
 8009868:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f47f ae97 	bne.w	80095a0 <f_write+0x8e>
 8009872:	e000      	b.n	8009876 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009874:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	7d1b      	ldrb	r3, [r3, #20]
 800987a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800987e:	b2da      	uxtb	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2100      	movs	r1, #0
 8009888:	4618      	mov	r0, r3
 800988a:	f7fd ff84 	bl	8007796 <unlock_fs>
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3730      	adds	r7, #48	; 0x30
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b086      	sub	sp, #24
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f107 0208 	add.w	r2, r7, #8
 80098a6:	4611      	mov	r1, r2
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7ff fbb3 	bl	8009014 <validate>
 80098ae:	4603      	mov	r3, r0
 80098b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d16d      	bne.n	8009994 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	7d1b      	ldrb	r3, [r3, #20]
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d067      	beq.n	8009994 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	7d1b      	ldrb	r3, [r3, #20]
 80098c8:	b25b      	sxtb	r3, r3
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	da1a      	bge.n	8009904 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	7858      	ldrb	r0, [r3, #1]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6a1a      	ldr	r2, [r3, #32]
 80098dc:	2301      	movs	r3, #1
 80098de:	f7fd fe07 	bl	80074f0 <disk_write>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d006      	beq.n	80098f6 <f_sync+0x5e>
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	2101      	movs	r1, #1
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fd ff52 	bl	8007796 <unlock_fs>
 80098f2:	2301      	movs	r3, #1
 80098f4:	e055      	b.n	80099a2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	7d1b      	ldrb	r3, [r3, #20]
 80098fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009904:	f7fd fb40 	bl	8006f88 <get_fattime>
 8009908:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800990a:	68ba      	ldr	r2, [r7, #8]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009910:	4619      	mov	r1, r3
 8009912:	4610      	mov	r0, r2
 8009914:	f7fe f90a 	bl	8007b2c <move_window>
 8009918:	4603      	mov	r3, r0
 800991a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d138      	bne.n	8009994 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009926:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	330b      	adds	r3, #11
 800992c:	781a      	ldrb	r2, [r3, #0]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	330b      	adds	r3, #11
 8009932:	f042 0220 	orr.w	r2, r2, #32
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6818      	ldr	r0, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	461a      	mov	r2, r3
 8009944:	68f9      	ldr	r1, [r7, #12]
 8009946:	f7fe fe8f 	bl	8008668 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f103 021c 	add.w	r2, r3, #28
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	4619      	mov	r1, r3
 8009956:	4610      	mov	r0, r2
 8009958:	f7fd fe5e 	bl	8007618 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3316      	adds	r3, #22
 8009960:	6939      	ldr	r1, [r7, #16]
 8009962:	4618      	mov	r0, r3
 8009964:	f7fd fe58 	bl	8007618 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	3312      	adds	r3, #18
 800996c:	2100      	movs	r1, #0
 800996e:	4618      	mov	r0, r3
 8009970:	f7fd fe37 	bl	80075e2 <st_word>
					fs->wflag = 1;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2201      	movs	r2, #1
 8009978:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	4618      	mov	r0, r3
 800997e:	f7fe f903 	bl	8007b88 <sync_fs>
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7d1b      	ldrb	r3, [r3, #20]
 800998a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800998e:	b2da      	uxtb	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	7dfa      	ldrb	r2, [r7, #23]
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f7fd fefb 	bl	8007796 <unlock_fs>
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3718      	adds	r7, #24
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f7ff ff70 	bl	8009898 <f_sync>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d11d      	bne.n	80099fe <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f107 0208 	add.w	r2, r7, #8
 80099c8:	4611      	mov	r1, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7ff fb22 	bl	8009014 <validate>
 80099d0:	4603      	mov	r3, r0
 80099d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80099d4:	7bfb      	ldrb	r3, [r7, #15]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d111      	bne.n	80099fe <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe f800 	bl	80079e4 <dec_lock>
 80099e4:	4603      	mov	r3, r0
 80099e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2200      	movs	r2, #0
 80099f2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f7fd fecc 	bl	8007796 <unlock_fs>
#endif
		}
	}
	return res;
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3710      	adds	r7, #16
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	4613      	mov	r3, r2
 8009a14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a16:	2301      	movs	r3, #1
 8009a18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a1e:	4b1f      	ldr	r3, [pc, #124]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a20:	7a5b      	ldrb	r3, [r3, #9]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d131      	bne.n	8009a8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a28:	4b1c      	ldr	r3, [pc, #112]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a2a:	7a5b      	ldrb	r3, [r3, #9]
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	461a      	mov	r2, r3
 8009a30:	4b1a      	ldr	r3, [pc, #104]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a32:	2100      	movs	r1, #0
 8009a34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009a36:	4b19      	ldr	r3, [pc, #100]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a38:	7a5b      	ldrb	r3, [r3, #9]
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	4a17      	ldr	r2, [pc, #92]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	68fa      	ldr	r2, [r7, #12]
 8009a44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009a46:	4b15      	ldr	r3, [pc, #84]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a48:	7a5b      	ldrb	r3, [r3, #9]
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a50:	4413      	add	r3, r2
 8009a52:	79fa      	ldrb	r2, [r7, #7]
 8009a54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a56:	4b11      	ldr	r3, [pc, #68]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a58:	7a5b      	ldrb	r3, [r3, #9]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	1c5a      	adds	r2, r3, #1
 8009a5e:	b2d1      	uxtb	r1, r2
 8009a60:	4a0e      	ldr	r2, [pc, #56]	; (8009a9c <FATFS_LinkDriverEx+0x94>)
 8009a62:	7251      	strb	r1, [r2, #9]
 8009a64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a66:	7dbb      	ldrb	r3, [r7, #22]
 8009a68:	3330      	adds	r3, #48	; 0x30
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a70:	68bb      	ldr	r3, [r7, #8]
 8009a72:	3301      	adds	r3, #1
 8009a74:	223a      	movs	r2, #58	; 0x3a
 8009a76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	3302      	adds	r3, #2
 8009a7c:	222f      	movs	r2, #47	; 0x2f
 8009a7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	3303      	adds	r3, #3
 8009a84:	2200      	movs	r2, #0
 8009a86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	371c      	adds	r7, #28
 8009a92:	46bd      	mov	sp, r7
 8009a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a98:	4770      	bx	lr
 8009a9a:	bf00      	nop
 8009a9c:	200024f0 	.word	0x200024f0

08009aa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009aaa:	2200      	movs	r2, #0
 8009aac:	6839      	ldr	r1, [r7, #0]
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f7ff ffaa 	bl	8009a08 <FATFS_LinkDriverEx>
 8009ab4:	4603      	mov	r3, r0
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3708      	adds	r7, #8
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}

08009abe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009abe:	b580      	push	{r7, lr}
 8009ac0:	b086      	sub	sp, #24
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	6039      	str	r1, [r7, #0]
 8009ac8:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009aca:	2300      	movs	r3, #0
 8009acc:	60fb      	str	r3, [r7, #12]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009ad2:	f107 030c 	add.w	r3, r7, #12
 8009ad6:	2101      	movs	r1, #1
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f000 f985 	bl	8009de8 <osSemaphoreCreate>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bf14      	ite	ne
 8009aec:	2301      	movne	r3, #1
 8009aee:	2300      	moveq	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	617b      	str	r3, [r7, #20]

    return ret;
 8009af4:	697b      	ldr	r3, [r7, #20]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b082      	sub	sp, #8
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f000 fa26 	bl	8009f58 <osSemaphoreDelete>
#endif
    return 1;
 8009b0c:	2301      	movs	r3, #1
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	3708      	adds	r7, #8
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bd80      	pop	{r7, pc}

08009b16 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009b16:	b580      	push	{r7, lr}
 8009b18:	b084      	sub	sp, #16
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009b22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f000 f992 	bl	8009e50 <osSemaphoreWait>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009b32:	2301      	movs	r3, #1
 8009b34:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009b36:	68fb      	ldr	r3, [r7, #12]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b082      	sub	sp, #8
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 f9cf 	bl	8009eec <osSemaphoreRelease>
#endif
}
 8009b4e:	bf00      	nop
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b085      	sub	sp, #20
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b60:	2300      	movs	r3, #0
 8009b62:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009b64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009b68:	2b84      	cmp	r3, #132	; 0x84
 8009b6a:	d005      	beq.n	8009b78 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009b6c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	4413      	add	r3, r2
 8009b74:	3303      	adds	r3, #3
 8009b76:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009b78:	68fb      	ldr	r3, [r7, #12]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3714      	adds	r7, #20
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009b86:	b480      	push	{r7}
 8009b88:	b083      	sub	sp, #12
 8009b8a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b8c:	f3ef 8305 	mrs	r3, IPSR
 8009b90:	607b      	str	r3, [r7, #4]
  return(result);
 8009b92:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	bf14      	ite	ne
 8009b98:	2301      	movne	r3, #1
 8009b9a:	2300      	moveq	r3, #0
 8009b9c:	b2db      	uxtb	r3, r3
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	370c      	adds	r7, #12
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009bae:	f001 fcaf 	bl	800b510 <vTaskStartScheduler>
  
  return osOK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8009bbc:	f002 f8be 	bl	800bd3c <xTaskGetSchedulerState>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d101      	bne.n	8009bca <osKernelRunning+0x12>
    return 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	e000      	b.n	8009bcc <osKernelRunning+0x14>
  else
    return 1;
 8009bca:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009bd4:	f7ff ffd7 	bl	8009b86 <inHandlerMode>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009bde:	f001 fdaf 	bl	800b740 <xTaskGetTickCountFromISR>
 8009be2:	4603      	mov	r3, r0
 8009be4:	e002      	b.n	8009bec <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009be6:	f001 fd9b 	bl	800b720 <xTaskGetTickCount>
 8009bea:	4603      	mov	r3, r0
  }
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bf2:	b089      	sub	sp, #36	; 0x24
 8009bf4:	af04      	add	r7, sp, #16
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	695b      	ldr	r3, [r3, #20]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d020      	beq.n	8009c44 <osThreadCreate+0x54>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01c      	beq.n	8009c44 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	685c      	ldr	r4, [r3, #4]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681d      	ldr	r5, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	691e      	ldr	r6, [r3, #16]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7ff ff9a 	bl	8009b56 <makeFreeRtosPriority>
 8009c22:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c2c:	9202      	str	r2, [sp, #8]
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	9100      	str	r1, [sp, #0]
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	4632      	mov	r2, r6
 8009c36:	4629      	mov	r1, r5
 8009c38:	4620      	mov	r0, r4
 8009c3a:	f001 faa5 	bl	800b188 <xTaskCreateStatic>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	60fb      	str	r3, [r7, #12]
 8009c42:	e01c      	b.n	8009c7e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685c      	ldr	r4, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009c50:	b29e      	uxth	r6, r3
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff ff7c 	bl	8009b56 <makeFreeRtosPriority>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	f107 030c 	add.w	r3, r7, #12
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	9200      	str	r2, [sp, #0]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	4632      	mov	r2, r6
 8009c6c:	4629      	mov	r1, r5
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f001 fae4 	bl	800b23c <xTaskCreate>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d001      	beq.n	8009c7e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e000      	b.n	8009c80 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c88 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d001      	beq.n	8009c9e <osDelay+0x16>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	e000      	b.n	8009ca0 <osDelay+0x18>
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f001 fc01 	bl	800b4a8 <vTaskDelay>
  
  return osOK;
 8009ca6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	685b      	ldr	r3, [r3, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	2001      	movs	r0, #1
 8009cc8:	f000 fc55 	bl	800a576 <xQueueCreateMutexStatic>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	e003      	b.n	8009cd8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	f000 fc38 	bl	800a546 <xQueueCreateMutex>
 8009cd6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3708      	adds	r7, #8
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009cea:	2300      	movs	r3, #0
 8009cec:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d101      	bne.n	8009cf8 <osMutexWait+0x18>
    return osErrorParameter;
 8009cf4:	2380      	movs	r3, #128	; 0x80
 8009cf6:	e03a      	b.n	8009d6e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d02:	d103      	bne.n	8009d0c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009d04:	f04f 33ff 	mov.w	r3, #4294967295
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e009      	b.n	8009d20 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d006      	beq.n	8009d20 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d101      	bne.n	8009d20 <osMutexWait+0x40>
      ticks = 1;
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009d20:	f7ff ff31 	bl	8009b86 <inHandlerMode>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d017      	beq.n	8009d5a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009d2a:	f107 0308 	add.w	r3, r7, #8
 8009d2e:	461a      	mov	r2, r3
 8009d30:	2100      	movs	r1, #0
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f001 f836 	bl	800ada4 <xQueueReceiveFromISR>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d001      	beq.n	8009d42 <osMutexWait+0x62>
      return osErrorOS;
 8009d3e:	23ff      	movs	r3, #255	; 0xff
 8009d40:	e015      	b.n	8009d6e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d011      	beq.n	8009d6c <osMutexWait+0x8c>
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <osMutexWait+0x98>)
 8009d4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d4e:	601a      	str	r2, [r3, #0]
 8009d50:	f3bf 8f4f 	dsb	sy
 8009d54:	f3bf 8f6f 	isb	sy
 8009d58:	e008      	b.n	8009d6c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009d5a:	68f9      	ldr	r1, [r7, #12]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 ff19 	bl	800ab94 <xQueueSemaphoreTake>
 8009d62:	4603      	mov	r3, r0
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d001      	beq.n	8009d6c <osMutexWait+0x8c>
    return osErrorOS;
 8009d68:	23ff      	movs	r3, #255	; 0xff
 8009d6a:	e000      	b.n	8009d6e <osMutexWait+0x8e>
  }
  
  return osOK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	e000ed04 	.word	0xe000ed04

08009d7c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009d8c:	f7ff fefb 	bl	8009b86 <inHandlerMode>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d016      	beq.n	8009dc4 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009d96:	f107 0308 	add.w	r3, r7, #8
 8009d9a:	4619      	mov	r1, r3
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f000 fd93 	bl	800a8c8 <xQueueGiveFromISR>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d001      	beq.n	8009dac <osMutexRelease+0x30>
      return osErrorOS;
 8009da8:	23ff      	movs	r3, #255	; 0xff
 8009daa:	e017      	b.n	8009ddc <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d013      	beq.n	8009dda <osMutexRelease+0x5e>
 8009db2:	4b0c      	ldr	r3, [pc, #48]	; (8009de4 <osMutexRelease+0x68>)
 8009db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db8:	601a      	str	r2, [r3, #0]
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	e00a      	b.n	8009dda <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	2100      	movs	r1, #0
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fbee 	bl	800a5ac <xQueueGenericSend>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d001      	beq.n	8009dda <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009dd6:	23ff      	movs	r3, #255	; 0xff
 8009dd8:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009dda:	68fb      	ldr	r3, [r7, #12]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}
 8009de4:	e000ed04 	.word	0xe000ed04

08009de8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af02      	add	r7, sp, #8
 8009dee:	6078      	str	r0, [r7, #4]
 8009df0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d010      	beq.n	8009e1c <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b01      	cmp	r3, #1
 8009dfe:	d10b      	bne.n	8009e18 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	2303      	movs	r3, #3
 8009e06:	9300      	str	r3, [sp, #0]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	2001      	movs	r0, #1
 8009e10:	f000 faae 	bl	800a370 <xQueueGenericCreateStatic>
 8009e14:	4603      	mov	r3, r0
 8009e16:	e016      	b.n	8009e46 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e014      	b.n	8009e46 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d110      	bne.n	8009e44 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8009e22:	2203      	movs	r2, #3
 8009e24:	2100      	movs	r1, #0
 8009e26:	2001      	movs	r0, #1
 8009e28:	f000 fb15 	bl	800a456 <xQueueGenericCreate>
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d005      	beq.n	8009e40 <osSemaphoreCreate+0x58>
 8009e34:	2300      	movs	r3, #0
 8009e36:	2200      	movs	r2, #0
 8009e38:	2100      	movs	r1, #0
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f000 fbb6 	bl	800a5ac <xQueueGenericSend>
      return sema;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	e000      	b.n	8009e46 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009e44:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3710      	adds	r7, #16
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	bd80      	pop	{r7, pc}
	...

08009e50 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d101      	bne.n	8009e68 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009e64:	2380      	movs	r3, #128	; 0x80
 8009e66:	e03a      	b.n	8009ede <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009e68:	2300      	movs	r3, #0
 8009e6a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e72:	d103      	bne.n	8009e7c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009e74:	f04f 33ff 	mov.w	r3, #4294967295
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e009      	b.n	8009e90 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d006      	beq.n	8009e90 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <osSemaphoreWait+0x40>
      ticks = 1;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009e90:	f7ff fe79 	bl	8009b86 <inHandlerMode>
 8009e94:	4603      	mov	r3, r0
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d017      	beq.n	8009eca <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009e9a:	f107 0308 	add.w	r3, r7, #8
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 ff7e 	bl	800ada4 <xQueueReceiveFromISR>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d001      	beq.n	8009eb2 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009eae:	23ff      	movs	r3, #255	; 0xff
 8009eb0:	e015      	b.n	8009ede <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d011      	beq.n	8009edc <osSemaphoreWait+0x8c>
 8009eb8:	4b0b      	ldr	r3, [pc, #44]	; (8009ee8 <osSemaphoreWait+0x98>)
 8009eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	f3bf 8f4f 	dsb	sy
 8009ec4:	f3bf 8f6f 	isb	sy
 8009ec8:	e008      	b.n	8009edc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009eca:	68f9      	ldr	r1, [r7, #12]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fe61 	bl	800ab94 <xQueueSemaphoreTake>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d001      	beq.n	8009edc <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009ed8:	23ff      	movs	r3, #255	; 0xff
 8009eda:	e000      	b.n	8009ede <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	e000ed04 	.word	0xe000ed04

08009eec <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b084      	sub	sp, #16
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009efc:	f7ff fe43 	bl	8009b86 <inHandlerMode>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d016      	beq.n	8009f34 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009f06:	f107 0308 	add.w	r3, r7, #8
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 fcdb 	bl	800a8c8 <xQueueGiveFromISR>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	d001      	beq.n	8009f1c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009f18:	23ff      	movs	r3, #255	; 0xff
 8009f1a:	e017      	b.n	8009f4c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d013      	beq.n	8009f4a <osSemaphoreRelease+0x5e>
 8009f22:	4b0c      	ldr	r3, [pc, #48]	; (8009f54 <osSemaphoreRelease+0x68>)
 8009f24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f28:	601a      	str	r2, [r3, #0]
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	f3bf 8f6f 	isb	sy
 8009f32:	e00a      	b.n	8009f4a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009f34:	2300      	movs	r3, #0
 8009f36:	2200      	movs	r2, #0
 8009f38:	2100      	movs	r1, #0
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 fb36 	bl	800a5ac <xQueueGenericSend>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d001      	beq.n	8009f4a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009f46:	23ff      	movs	r3, #255	; 0xff
 8009f48:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3710      	adds	r7, #16
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	e000ed04 	.word	0xe000ed04

08009f58 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b082      	sub	sp, #8
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009f60:	f7ff fe11 	bl	8009b86 <inHandlerMode>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d001      	beq.n	8009f6e <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009f6a:	2382      	movs	r3, #130	; 0x82
 8009f6c:	e003      	b.n	8009f76 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 ff95 	bl	800ae9e <vQueueDelete>

  return osOK; 
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3708      	adds	r7, #8
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009f7e:	b590      	push	{r4, r7, lr}
 8009f80:	b085      	sub	sp, #20
 8009f82:	af02      	add	r7, sp, #8
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	689b      	ldr	r3, [r3, #8]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d012      	beq.n	8009fb6 <osMessageCreate+0x38>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00e      	beq.n	8009fb6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6818      	ldr	r0, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6859      	ldr	r1, [r3, #4]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	68dc      	ldr	r4, [r3, #12]
 8009fa8:	2300      	movs	r3, #0
 8009faa:	9300      	str	r3, [sp, #0]
 8009fac:	4623      	mov	r3, r4
 8009fae:	f000 f9df 	bl	800a370 <xQueueGenericCreateStatic>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	e008      	b.n	8009fc8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6818      	ldr	r0, [r3, #0]
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	4619      	mov	r1, r3
 8009fc2:	f000 fa48 	bl	800a456 <xQueueGenericCreate>
 8009fc6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	370c      	adds	r7, #12
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd90      	pop	{r4, r7, pc}

08009fd0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b086      	sub	sp, #24
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <osMessagePut+0x1e>
    ticks = 1;
 8009fea:	2301      	movs	r3, #1
 8009fec:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009fee:	f7ff fdca 	bl	8009b86 <inHandlerMode>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d018      	beq.n	800a02a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009ff8:	f107 0210 	add.w	r2, r7, #16
 8009ffc:	f107 0108 	add.w	r1, r7, #8
 800a000:	2300      	movs	r3, #0
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f000 fbcc 	bl	800a7a0 <xQueueGenericSendFromISR>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d001      	beq.n	800a012 <osMessagePut+0x42>
      return osErrorOS;
 800a00e:	23ff      	movs	r3, #255	; 0xff
 800a010:	e018      	b.n	800a044 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d014      	beq.n	800a042 <osMessagePut+0x72>
 800a018:	4b0c      	ldr	r3, [pc, #48]	; (800a04c <osMessagePut+0x7c>)
 800a01a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a01e:	601a      	str	r2, [r3, #0]
 800a020:	f3bf 8f4f 	dsb	sy
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	e00b      	b.n	800a042 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a02a:	f107 0108 	add.w	r1, r7, #8
 800a02e:	2300      	movs	r3, #0
 800a030:	697a      	ldr	r2, [r7, #20]
 800a032:	68f8      	ldr	r0, [r7, #12]
 800a034:	f000 faba 	bl	800a5ac <xQueueGenericSend>
 800a038:	4603      	mov	r3, r0
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d001      	beq.n	800a042 <osMessagePut+0x72>
      return osErrorOS;
 800a03e:	23ff      	movs	r3, #255	; 0xff
 800a040:	e000      	b.n	800a044 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3718      	adds	r7, #24
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}
 800a04c:	e000ed04 	.word	0xe000ed04

0800a050 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a050:	b590      	push	{r4, r7, lr}
 800a052:	b08b      	sub	sp, #44	; 0x2c
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d10a      	bne.n	800a080 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a06a:	2380      	movs	r3, #128	; 0x80
 800a06c:	617b      	str	r3, [r7, #20]
    return event;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	461c      	mov	r4, r3
 800a072:	f107 0314 	add.w	r3, r7, #20
 800a076:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a07a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a07e:	e054      	b.n	800a12a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a080:	2300      	movs	r3, #0
 800a082:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a08e:	d103      	bne.n	800a098 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a090:	f04f 33ff 	mov.w	r3, #4294967295
 800a094:	627b      	str	r3, [r7, #36]	; 0x24
 800a096:	e009      	b.n	800a0ac <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d006      	beq.n	800a0ac <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d101      	bne.n	800a0ac <osMessageGet+0x5c>
      ticks = 1;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a0ac:	f7ff fd6b 	bl	8009b86 <inHandlerMode>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d01c      	beq.n	800a0f0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a0b6:	f107 0220 	add.w	r2, r7, #32
 800a0ba:	f107 0314 	add.w	r3, r7, #20
 800a0be:	3304      	adds	r3, #4
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	68b8      	ldr	r0, [r7, #8]
 800a0c4:	f000 fe6e 	bl	800ada4 <xQueueReceiveFromISR>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d102      	bne.n	800a0d4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a0ce:	2310      	movs	r3, #16
 800a0d0:	617b      	str	r3, [r7, #20]
 800a0d2:	e001      	b.n	800a0d8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a0d8:	6a3b      	ldr	r3, [r7, #32]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d01d      	beq.n	800a11a <osMessageGet+0xca>
 800a0de:	4b15      	ldr	r3, [pc, #84]	; (800a134 <osMessageGet+0xe4>)
 800a0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0e4:	601a      	str	r2, [r3, #0]
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	e014      	b.n	800a11a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a0f0:	f107 0314 	add.w	r3, r7, #20
 800a0f4:	3304      	adds	r3, #4
 800a0f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	68b8      	ldr	r0, [r7, #8]
 800a0fc:	f000 fc6e 	bl	800a9dc <xQueueReceive>
 800a100:	4603      	mov	r3, r0
 800a102:	2b01      	cmp	r3, #1
 800a104:	d102      	bne.n	800a10c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a106:	2310      	movs	r3, #16
 800a108:	617b      	str	r3, [r7, #20]
 800a10a:	e006      	b.n	800a11a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d101      	bne.n	800a116 <osMessageGet+0xc6>
 800a112:	2300      	movs	r3, #0
 800a114:	e000      	b.n	800a118 <osMessageGet+0xc8>
 800a116:	2340      	movs	r3, #64	; 0x40
 800a118:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	461c      	mov	r4, r3
 800a11e:	f107 0314 	add.w	r3, r7, #20
 800a122:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a126:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	372c      	adds	r7, #44	; 0x2c
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd90      	pop	{r4, r7, pc}
 800a132:	bf00      	nop
 800a134:	e000ed04 	.word	0xe000ed04

0800a138 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f103 0208 	add.w	r2, r3, #8
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f04f 32ff 	mov.w	r2, #4294967295
 800a150:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f103 0208 	add.w	r2, r3, #8
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f103 0208 	add.w	r2, r3, #8
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a186:	bf00      	nop
 800a188:	370c      	adds	r7, #12
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a192:	b480      	push	{r7}
 800a194:	b085      	sub	sp, #20
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	689a      	ldr	r2, [r3, #8]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	683a      	ldr	r2, [r7, #0]
 800a1b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	1c5a      	adds	r2, r3, #1
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	601a      	str	r2, [r3, #0]
}
 800a1ce:	bf00      	nop
 800a1d0:	3714      	adds	r7, #20
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d8:	4770      	bx	lr

0800a1da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1da:	b480      	push	{r7}
 800a1dc:	b085      	sub	sp, #20
 800a1de:	af00      	add	r7, sp, #0
 800a1e0:	6078      	str	r0, [r7, #4]
 800a1e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f0:	d103      	bne.n	800a1fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	e00c      	b.n	800a214 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	3308      	adds	r3, #8
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e002      	b.n	800a208 <vListInsert+0x2e>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	60fb      	str	r3, [r7, #12]
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	429a      	cmp	r2, r3
 800a212:	d2f6      	bcs.n	800a202 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	683a      	ldr	r2, [r7, #0]
 800a222:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	68fa      	ldr	r2, [r7, #12]
 800a228:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	1c5a      	adds	r2, r3, #1
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	601a      	str	r2, [r3, #0]
}
 800a240:	bf00      	nop
 800a242:	3714      	adds	r7, #20
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	691b      	ldr	r3, [r3, #16]
 800a258:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	687a      	ldr	r2, [r7, #4]
 800a260:	6892      	ldr	r2, [r2, #8]
 800a262:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	6852      	ldr	r2, [r2, #4]
 800a26c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d103      	bne.n	800a280 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	689a      	ldr	r2, [r3, #8]
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	1e5a      	subs	r2, r3, #1
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b084      	sub	sp, #16
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d109      	bne.n	800a2c8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b8:	f383 8811 	msr	BASEPRI, r3
 800a2bc:	f3bf 8f6f 	isb	sy
 800a2c0:	f3bf 8f4f 	dsb	sy
 800a2c4:	60bb      	str	r3, [r7, #8]
 800a2c6:	e7fe      	b.n	800a2c6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800a2c8:	f002 f968 	bl	800c59c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681a      	ldr	r2, [r3, #0]
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d4:	68f9      	ldr	r1, [r7, #12]
 800a2d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2d8:	fb01 f303 	mul.w	r3, r1, r3
 800a2dc:	441a      	add	r2, r3
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2f8:	3b01      	subs	r3, #1
 800a2fa:	68f9      	ldr	r1, [r7, #12]
 800a2fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a2fe:	fb01 f303 	mul.w	r3, r1, r3
 800a302:	441a      	add	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	22ff      	movs	r2, #255	; 0xff
 800a30c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	22ff      	movs	r2, #255	; 0xff
 800a314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d114      	bne.n	800a348 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	691b      	ldr	r3, [r3, #16]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d01a      	beq.n	800a35c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	3310      	adds	r3, #16
 800a32a:	4618      	mov	r0, r3
 800a32c:	f001 fb50 	bl	800b9d0 <xTaskRemoveFromEventList>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d012      	beq.n	800a35c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a336:	4b0d      	ldr	r3, [pc, #52]	; (800a36c <xQueueGenericReset+0xcc>)
 800a338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a33c:	601a      	str	r2, [r3, #0]
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	e009      	b.n	800a35c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	3310      	adds	r3, #16
 800a34c:	4618      	mov	r0, r3
 800a34e:	f7ff fef3 	bl	800a138 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	3324      	adds	r3, #36	; 0x24
 800a356:	4618      	mov	r0, r3
 800a358:	f7ff feee 	bl	800a138 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a35c:	f002 f94c 	bl	800c5f8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a360:	2301      	movs	r3, #1
}
 800a362:	4618      	mov	r0, r3
 800a364:	3710      	adds	r7, #16
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08e      	sub	sp, #56	; 0x38
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d109      	bne.n	800a398 <xQueueGenericCreateStatic+0x28>
 800a384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	62bb      	str	r3, [r7, #40]	; 0x28
 800a396:	e7fe      	b.n	800a396 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d109      	bne.n	800a3b2 <xQueueGenericCreateStatic+0x42>
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <xQueueGenericCreateStatic+0x4e>
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d001      	beq.n	800a3c2 <xQueueGenericCreateStatic+0x52>
 800a3be:	2301      	movs	r3, #1
 800a3c0:	e000      	b.n	800a3c4 <xQueueGenericCreateStatic+0x54>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d109      	bne.n	800a3dc <xQueueGenericCreateStatic+0x6c>
 800a3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3cc:	f383 8811 	msr	BASEPRI, r3
 800a3d0:	f3bf 8f6f 	isb	sy
 800a3d4:	f3bf 8f4f 	dsb	sy
 800a3d8:	623b      	str	r3, [r7, #32]
 800a3da:	e7fe      	b.n	800a3da <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d102      	bne.n	800a3e8 <xQueueGenericCreateStatic+0x78>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d101      	bne.n	800a3ec <xQueueGenericCreateStatic+0x7c>
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e000      	b.n	800a3ee <xQueueGenericCreateStatic+0x7e>
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d109      	bne.n	800a406 <xQueueGenericCreateStatic+0x96>
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	61fb      	str	r3, [r7, #28]
 800a404:	e7fe      	b.n	800a404 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a406:	2348      	movs	r3, #72	; 0x48
 800a408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	2b48      	cmp	r3, #72	; 0x48
 800a40e:	d009      	beq.n	800a424 <xQueueGenericCreateStatic+0xb4>
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	61bb      	str	r3, [r7, #24]
 800a422:	e7fe      	b.n	800a422 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a424:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00d      	beq.n	800a44c <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a438:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	9300      	str	r3, [sp, #0]
 800a440:	4613      	mov	r3, r2
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	68b9      	ldr	r1, [r7, #8]
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f000 f844 	bl	800a4d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a44e:	4618      	mov	r0, r3
 800a450:	3730      	adds	r7, #48	; 0x30
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a456:	b580      	push	{r7, lr}
 800a458:	b08a      	sub	sp, #40	; 0x28
 800a45a:	af02      	add	r7, sp, #8
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	4613      	mov	r3, r2
 800a462:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d109      	bne.n	800a47e <xQueueGenericCreate+0x28>
 800a46a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a46e:	f383 8811 	msr	BASEPRI, r3
 800a472:	f3bf 8f6f 	isb	sy
 800a476:	f3bf 8f4f 	dsb	sy
 800a47a:	613b      	str	r3, [r7, #16]
 800a47c:	e7fe      	b.n	800a47c <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d102      	bne.n	800a48a <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a484:	2300      	movs	r3, #0
 800a486:	61fb      	str	r3, [r7, #28]
 800a488:	e004      	b.n	800a494 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	68ba      	ldr	r2, [r7, #8]
 800a48e:	fb02 f303 	mul.w	r3, r2, r3
 800a492:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	3348      	adds	r3, #72	; 0x48
 800a498:	4618      	mov	r0, r3
 800a49a:	f002 f999 	bl	800c7d0 <pvPortMalloc>
 800a49e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a4a0:	69bb      	ldr	r3, [r7, #24]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d011      	beq.n	800a4ca <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	3348      	adds	r3, #72	; 0x48
 800a4ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4b8:	79fa      	ldrb	r2, [r7, #7]
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	9300      	str	r3, [sp, #0]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	68b9      	ldr	r1, [r7, #8]
 800a4c4:	68f8      	ldr	r0, [r7, #12]
 800a4c6:	f000 f805 	bl	800a4d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
	}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3720      	adds	r7, #32
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}

0800a4d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	60f8      	str	r0, [r7, #12]
 800a4dc:	60b9      	str	r1, [r7, #8]
 800a4de:	607a      	str	r2, [r7, #4]
 800a4e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a4e2:	68bb      	ldr	r3, [r7, #8]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d103      	bne.n	800a4f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	69ba      	ldr	r2, [r7, #24]
 800a4ec:	601a      	str	r2, [r3, #0]
 800a4ee:	e002      	b.n	800a4f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a4f0:	69bb      	ldr	r3, [r7, #24]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a4f6:	69bb      	ldr	r3, [r7, #24]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a4fc:	69bb      	ldr	r3, [r7, #24]
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a502:	2101      	movs	r1, #1
 800a504:	69b8      	ldr	r0, [r7, #24]
 800a506:	f7ff fecb 	bl	800a2a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a50a:	bf00      	nop
 800a50c:	3710      	adds	r7, #16
 800a50e:	46bd      	mov	sp, r7
 800a510:	bd80      	pop	{r7, pc}

0800a512 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a512:	b580      	push	{r7, lr}
 800a514:	b082      	sub	sp, #8
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a532:	2300      	movs	r3, #0
 800a534:	2200      	movs	r2, #0
 800a536:	2100      	movs	r1, #0
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f837 	bl	800a5ac <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	4603      	mov	r3, r0
 800a54e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a550:	2301      	movs	r3, #1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	2300      	movs	r3, #0
 800a556:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a558:	79fb      	ldrb	r3, [r7, #7]
 800a55a:	461a      	mov	r2, r3
 800a55c:	6939      	ldr	r1, [r7, #16]
 800a55e:	6978      	ldr	r0, [r7, #20]
 800a560:	f7ff ff79 	bl	800a456 <xQueueGenericCreate>
 800a564:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a566:	68f8      	ldr	r0, [r7, #12]
 800a568:	f7ff ffd3 	bl	800a512 <prvInitialiseMutex>

		return xNewQueue;
 800a56c:	68fb      	ldr	r3, [r7, #12]
	}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a576:	b580      	push	{r7, lr}
 800a578:	b088      	sub	sp, #32
 800a57a:	af02      	add	r7, sp, #8
 800a57c:	4603      	mov	r3, r0
 800a57e:	6039      	str	r1, [r7, #0]
 800a580:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a582:	2301      	movs	r3, #1
 800a584:	617b      	str	r3, [r7, #20]
 800a586:	2300      	movs	r3, #0
 800a588:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a58a:	79fb      	ldrb	r3, [r7, #7]
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	2200      	movs	r2, #0
 800a592:	6939      	ldr	r1, [r7, #16]
 800a594:	6978      	ldr	r0, [r7, #20]
 800a596:	f7ff feeb 	bl	800a370 <xQueueGenericCreateStatic>
 800a59a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a59c:	68f8      	ldr	r0, [r7, #12]
 800a59e:	f7ff ffb8 	bl	800a512 <prvInitialiseMutex>

		return xNewQueue;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
	}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3718      	adds	r7, #24
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08e      	sub	sp, #56	; 0x38
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
 800a5b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d109      	bne.n	800a5dc <xQueueGenericSend+0x30>
 800a5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5cc:	f383 8811 	msr	BASEPRI, r3
 800a5d0:	f3bf 8f6f 	isb	sy
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5da:	e7fe      	b.n	800a5da <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d103      	bne.n	800a5ea <xQueueGenericSend+0x3e>
 800a5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <xQueueGenericSend+0x42>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <xQueueGenericSend+0x44>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <xQueueGenericSend+0x5c>
 800a5f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5f8:	f383 8811 	msr	BASEPRI, r3
 800a5fc:	f3bf 8f6f 	isb	sy
 800a600:	f3bf 8f4f 	dsb	sy
 800a604:	627b      	str	r3, [r7, #36]	; 0x24
 800a606:	e7fe      	b.n	800a606 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b02      	cmp	r3, #2
 800a60c:	d103      	bne.n	800a616 <xQueueGenericSend+0x6a>
 800a60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a612:	2b01      	cmp	r3, #1
 800a614:	d101      	bne.n	800a61a <xQueueGenericSend+0x6e>
 800a616:	2301      	movs	r3, #1
 800a618:	e000      	b.n	800a61c <xQueueGenericSend+0x70>
 800a61a:	2300      	movs	r3, #0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d109      	bne.n	800a634 <xQueueGenericSend+0x88>
 800a620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	623b      	str	r3, [r7, #32]
 800a632:	e7fe      	b.n	800a632 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a634:	f001 fb82 	bl	800bd3c <xTaskGetSchedulerState>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d102      	bne.n	800a644 <xQueueGenericSend+0x98>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d101      	bne.n	800a648 <xQueueGenericSend+0x9c>
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <xQueueGenericSend+0x9e>
 800a648:	2300      	movs	r3, #0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d109      	bne.n	800a662 <xQueueGenericSend+0xb6>
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	61fb      	str	r3, [r7, #28]
 800a660:	e7fe      	b.n	800a660 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a662:	f001 ff9b 	bl	800c59c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a66c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a66e:	429a      	cmp	r2, r3
 800a670:	d302      	bcc.n	800a678 <xQueueGenericSend+0xcc>
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d129      	bne.n	800a6cc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a678:	683a      	ldr	r2, [r7, #0]
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a67e:	f000 fc48 	bl	800af12 <prvCopyDataToQueue>
 800a682:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d010      	beq.n	800a6ae <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a68e:	3324      	adds	r3, #36	; 0x24
 800a690:	4618      	mov	r0, r3
 800a692:	f001 f99d 	bl	800b9d0 <xTaskRemoveFromEventList>
 800a696:	4603      	mov	r3, r0
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d013      	beq.n	800a6c4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a69c:	4b3f      	ldr	r3, [pc, #252]	; (800a79c <xQueueGenericSend+0x1f0>)
 800a69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	e00a      	b.n	800a6c4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d007      	beq.n	800a6c4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6b4:	4b39      	ldr	r3, [pc, #228]	; (800a79c <xQueueGenericSend+0x1f0>)
 800a6b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6ba:	601a      	str	r2, [r3, #0]
 800a6bc:	f3bf 8f4f 	dsb	sy
 800a6c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6c4:	f001 ff98 	bl	800c5f8 <vPortExitCritical>
				return pdPASS;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e063      	b.n	800a794 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d103      	bne.n	800a6da <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6d2:	f001 ff91 	bl	800c5f8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	e05c      	b.n	800a794 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d106      	bne.n	800a6ee <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6e0:	f107 0314 	add.w	r3, r7, #20
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f001 f9d5 	bl	800ba94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6ee:	f001 ff83 	bl	800c5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6f2:	f000 ff6b 	bl	800b5cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6f6:	f001 ff51 	bl	800c59c <vPortEnterCritical>
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a700:	b25b      	sxtb	r3, r3
 800a702:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a706:	d103      	bne.n	800a710 <xQueueGenericSend+0x164>
 800a708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a716:	b25b      	sxtb	r3, r3
 800a718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71c:	d103      	bne.n	800a726 <xQueueGenericSend+0x17a>
 800a71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a720:	2200      	movs	r2, #0
 800a722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a726:	f001 ff67 	bl	800c5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a72a:	1d3a      	adds	r2, r7, #4
 800a72c:	f107 0314 	add.w	r3, r7, #20
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f001 f9c4 	bl	800bac0 <xTaskCheckForTimeOut>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d124      	bne.n	800a788 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a73e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a740:	f000 fcdf 	bl	800b102 <prvIsQueueFull>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d018      	beq.n	800a77c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a74c:	3310      	adds	r3, #16
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	4611      	mov	r1, r2
 800a752:	4618      	mov	r0, r3
 800a754:	f001 f918 	bl	800b988 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a75a:	f000 fc6a 	bl	800b032 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a75e:	f000 ff43 	bl	800b5e8 <xTaskResumeAll>
 800a762:	4603      	mov	r3, r0
 800a764:	2b00      	cmp	r3, #0
 800a766:	f47f af7c 	bne.w	800a662 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800a76a:	4b0c      	ldr	r3, [pc, #48]	; (800a79c <xQueueGenericSend+0x1f0>)
 800a76c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a770:	601a      	str	r2, [r3, #0]
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	f3bf 8f6f 	isb	sy
 800a77a:	e772      	b.n	800a662 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a77c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a77e:	f000 fc58 	bl	800b032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a782:	f000 ff31 	bl	800b5e8 <xTaskResumeAll>
 800a786:	e76c      	b.n	800a662 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a78a:	f000 fc52 	bl	800b032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a78e:	f000 ff2b 	bl	800b5e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a792:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a794:	4618      	mov	r0, r3
 800a796:	3738      	adds	r7, #56	; 0x38
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	e000ed04 	.word	0xe000ed04

0800a7a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08e      	sub	sp, #56	; 0x38
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
 800a7ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d109      	bne.n	800a7cc <xQueueGenericSendFromISR+0x2c>
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7ca:	e7fe      	b.n	800a7ca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d103      	bne.n	800a7da <xQueueGenericSendFromISR+0x3a>
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d101      	bne.n	800a7de <xQueueGenericSendFromISR+0x3e>
 800a7da:	2301      	movs	r3, #1
 800a7dc:	e000      	b.n	800a7e0 <xQueueGenericSendFromISR+0x40>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d109      	bne.n	800a7f8 <xQueueGenericSendFromISR+0x58>
 800a7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e8:	f383 8811 	msr	BASEPRI, r3
 800a7ec:	f3bf 8f6f 	isb	sy
 800a7f0:	f3bf 8f4f 	dsb	sy
 800a7f4:	623b      	str	r3, [r7, #32]
 800a7f6:	e7fe      	b.n	800a7f6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	2b02      	cmp	r3, #2
 800a7fc:	d103      	bne.n	800a806 <xQueueGenericSendFromISR+0x66>
 800a7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	2b01      	cmp	r3, #1
 800a804:	d101      	bne.n	800a80a <xQueueGenericSendFromISR+0x6a>
 800a806:	2301      	movs	r3, #1
 800a808:	e000      	b.n	800a80c <xQueueGenericSendFromISR+0x6c>
 800a80a:	2300      	movs	r3, #0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d109      	bne.n	800a824 <xQueueGenericSendFromISR+0x84>
 800a810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	61fb      	str	r3, [r7, #28]
 800a822:	e7fe      	b.n	800a822 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a824:	f001 ff96 	bl	800c754 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a828:	f3ef 8211 	mrs	r2, BASEPRI
 800a82c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	61ba      	str	r2, [r7, #24]
 800a83e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a840:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a842:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a84a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a84c:	429a      	cmp	r2, r3
 800a84e:	d302      	bcc.n	800a856 <xQueueGenericSendFromISR+0xb6>
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b02      	cmp	r3, #2
 800a854:	d12c      	bne.n	800a8b0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a858:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a85c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a860:	683a      	ldr	r2, [r7, #0]
 800a862:	68b9      	ldr	r1, [r7, #8]
 800a864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a866:	f000 fb54 	bl	800af12 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a86a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a872:	d112      	bne.n	800a89a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d016      	beq.n	800a8aa <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a87e:	3324      	adds	r3, #36	; 0x24
 800a880:	4618      	mov	r0, r3
 800a882:	f001 f8a5 	bl	800b9d0 <xTaskRemoveFromEventList>
 800a886:	4603      	mov	r3, r0
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00e      	beq.n	800a8aa <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00b      	beq.n	800a8aa <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	e007      	b.n	800a8aa <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a89a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a89e:	3301      	adds	r3, #1
 800a8a0:	b2db      	uxtb	r3, r3
 800a8a2:	b25a      	sxtb	r2, r3
 800a8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a8ae:	e001      	b.n	800a8b4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8b6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3738      	adds	r7, #56	; 0x38
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b08e      	sub	sp, #56	; 0x38
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d109      	bne.n	800a8f0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	623b      	str	r3, [r7, #32]
 800a8ee:	e7fe      	b.n	800a8ee <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d009      	beq.n	800a90c <xQueueGiveFromISR+0x44>
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	61fb      	str	r3, [r7, #28]
 800a90a:	e7fe      	b.n	800a90a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d103      	bne.n	800a91c <xQueueGiveFromISR+0x54>
 800a914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <xQueueGiveFromISR+0x58>
 800a91c:	2301      	movs	r3, #1
 800a91e:	e000      	b.n	800a922 <xQueueGiveFromISR+0x5a>
 800a920:	2300      	movs	r3, #0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d109      	bne.n	800a93a <xQueueGiveFromISR+0x72>
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	61bb      	str	r3, [r7, #24]
 800a938:	e7fe      	b.n	800a938 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a93a:	f001 ff0b 	bl	800c754 <vPortValidateInterruptPriority>
	__asm volatile
 800a93e:	f3ef 8211 	mrs	r2, BASEPRI
 800a942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	617a      	str	r2, [r7, #20]
 800a954:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a956:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a958:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a95e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a966:	429a      	cmp	r2, r3
 800a968:	d22b      	bcs.n	800a9c2 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a96a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a97a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a97c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a984:	d112      	bne.n	800a9ac <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d016      	beq.n	800a9bc <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a990:	3324      	adds	r3, #36	; 0x24
 800a992:	4618      	mov	r0, r3
 800a994:	f001 f81c 	bl	800b9d0 <xTaskRemoveFromEventList>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00e      	beq.n	800a9bc <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00b      	beq.n	800a9bc <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	e007      	b.n	800a9bc <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a9ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a9b0:	3301      	adds	r3, #1
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	b25a      	sxtb	r2, r3
 800a9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c0:	e001      	b.n	800a9c6 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a9d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3738      	adds	r7, #56	; 0x38
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
	...

0800a9dc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b08c      	sub	sp, #48	; 0x30
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	60f8      	str	r0, [r7, #12]
 800a9e4:	60b9      	str	r1, [r7, #8]
 800a9e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a9e8:	2300      	movs	r3, #0
 800a9ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d109      	bne.n	800aa0a <xQueueReceive+0x2e>
	__asm volatile
 800a9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fa:	f383 8811 	msr	BASEPRI, r3
 800a9fe:	f3bf 8f6f 	isb	sy
 800aa02:	f3bf 8f4f 	dsb	sy
 800aa06:	623b      	str	r3, [r7, #32]
 800aa08:	e7fe      	b.n	800aa08 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d103      	bne.n	800aa18 <xQueueReceive+0x3c>
 800aa10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d101      	bne.n	800aa1c <xQueueReceive+0x40>
 800aa18:	2301      	movs	r3, #1
 800aa1a:	e000      	b.n	800aa1e <xQueueReceive+0x42>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d109      	bne.n	800aa36 <xQueueReceive+0x5a>
 800aa22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa26:	f383 8811 	msr	BASEPRI, r3
 800aa2a:	f3bf 8f6f 	isb	sy
 800aa2e:	f3bf 8f4f 	dsb	sy
 800aa32:	61fb      	str	r3, [r7, #28]
 800aa34:	e7fe      	b.n	800aa34 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa36:	f001 f981 	bl	800bd3c <xTaskGetSchedulerState>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d102      	bne.n	800aa46 <xQueueReceive+0x6a>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <xQueueReceive+0x6e>
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <xQueueReceive+0x70>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d109      	bne.n	800aa64 <xQueueReceive+0x88>
 800aa50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa54:	f383 8811 	msr	BASEPRI, r3
 800aa58:	f3bf 8f6f 	isb	sy
 800aa5c:	f3bf 8f4f 	dsb	sy
 800aa60:	61bb      	str	r3, [r7, #24]
 800aa62:	e7fe      	b.n	800aa62 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa64:	f001 fd9a 	bl	800c59c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d01f      	beq.n	800aab4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa74:	68b9      	ldr	r1, [r7, #8]
 800aa76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa78:	f000 fab5 	bl	800afe6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa7e:	1e5a      	subs	r2, r3, #1
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa82:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00f      	beq.n	800aaac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	3310      	adds	r3, #16
 800aa90:	4618      	mov	r0, r3
 800aa92:	f000 ff9d 	bl	800b9d0 <xTaskRemoveFromEventList>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d007      	beq.n	800aaac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa9c:	4b3c      	ldr	r3, [pc, #240]	; (800ab90 <xQueueReceive+0x1b4>)
 800aa9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaa2:	601a      	str	r2, [r3, #0]
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aaac:	f001 fda4 	bl	800c5f8 <vPortExitCritical>
				return pdPASS;
 800aab0:	2301      	movs	r3, #1
 800aab2:	e069      	b.n	800ab88 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d103      	bne.n	800aac2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aaba:	f001 fd9d 	bl	800c5f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aabe:	2300      	movs	r3, #0
 800aac0:	e062      	b.n	800ab88 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d106      	bne.n	800aad6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aac8:	f107 0310 	add.w	r3, r7, #16
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 ffe1 	bl	800ba94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aad2:	2301      	movs	r3, #1
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aad6:	f001 fd8f 	bl	800c5f8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aada:	f000 fd77 	bl	800b5cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aade:	f001 fd5d 	bl	800c59c <vPortEnterCritical>
 800aae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aae8:	b25b      	sxtb	r3, r3
 800aaea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaee:	d103      	bne.n	800aaf8 <xQueueReceive+0x11c>
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aafe:	b25b      	sxtb	r3, r3
 800ab00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab04:	d103      	bne.n	800ab0e <xQueueReceive+0x132>
 800ab06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab0e:	f001 fd73 	bl	800c5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab12:	1d3a      	adds	r2, r7, #4
 800ab14:	f107 0310 	add.w	r3, r7, #16
 800ab18:	4611      	mov	r1, r2
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f000 ffd0 	bl	800bac0 <xTaskCheckForTimeOut>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d123      	bne.n	800ab6e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab28:	f000 fad5 	bl	800b0d6 <prvIsQueueEmpty>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d017      	beq.n	800ab62 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	3324      	adds	r3, #36	; 0x24
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	4611      	mov	r1, r2
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 ff24 	bl	800b988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ab40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab42:	f000 fa76 	bl	800b032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab46:	f000 fd4f 	bl	800b5e8 <xTaskResumeAll>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d189      	bne.n	800aa64 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800ab50:	4b0f      	ldr	r3, [pc, #60]	; (800ab90 <xQueueReceive+0x1b4>)
 800ab52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab56:	601a      	str	r2, [r3, #0]
 800ab58:	f3bf 8f4f 	dsb	sy
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	e780      	b.n	800aa64 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab64:	f000 fa65 	bl	800b032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab68:	f000 fd3e 	bl	800b5e8 <xTaskResumeAll>
 800ab6c:	e77a      	b.n	800aa64 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab70:	f000 fa5f 	bl	800b032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab74:	f000 fd38 	bl	800b5e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab7a:	f000 faac 	bl	800b0d6 <prvIsQueueEmpty>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f43f af6f 	beq.w	800aa64 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3730      	adds	r7, #48	; 0x30
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b08e      	sub	sp, #56	; 0x38
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aba6:	2300      	movs	r3, #0
 800aba8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	2b00      	cmp	r3, #0
 800abae:	d109      	bne.n	800abc4 <xQueueSemaphoreTake+0x30>
 800abb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abb4:	f383 8811 	msr	BASEPRI, r3
 800abb8:	f3bf 8f6f 	isb	sy
 800abbc:	f3bf 8f4f 	dsb	sy
 800abc0:	623b      	str	r3, [r7, #32]
 800abc2:	e7fe      	b.n	800abc2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d009      	beq.n	800abe0 <xQueueSemaphoreTake+0x4c>
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	61fb      	str	r3, [r7, #28]
 800abde:	e7fe      	b.n	800abde <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abe0:	f001 f8ac 	bl	800bd3c <xTaskGetSchedulerState>
 800abe4:	4603      	mov	r3, r0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d102      	bne.n	800abf0 <xQueueSemaphoreTake+0x5c>
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d101      	bne.n	800abf4 <xQueueSemaphoreTake+0x60>
 800abf0:	2301      	movs	r3, #1
 800abf2:	e000      	b.n	800abf6 <xQueueSemaphoreTake+0x62>
 800abf4:	2300      	movs	r3, #0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d109      	bne.n	800ac0e <xQueueSemaphoreTake+0x7a>
 800abfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	61bb      	str	r3, [r7, #24]
 800ac0c:	e7fe      	b.n	800ac0c <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac0e:	f001 fcc5 	bl	800c59c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d024      	beq.n	800ac68 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac20:	1e5a      	subs	r2, r3, #1
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d104      	bne.n	800ac38 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac2e:	f001 fa3f 	bl	800c0b0 <pvTaskIncrementMutexHeldCount>
 800ac32:	4602      	mov	r2, r0
 800ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac36:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00f      	beq.n	800ac60 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	3310      	adds	r3, #16
 800ac44:	4618      	mov	r0, r3
 800ac46:	f000 fec3 	bl	800b9d0 <xTaskRemoveFromEventList>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac50:	4b53      	ldr	r3, [pc, #332]	; (800ada0 <xQueueSemaphoreTake+0x20c>)
 800ac52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac56:	601a      	str	r2, [r3, #0]
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac60:	f001 fcca 	bl	800c5f8 <vPortExitCritical>
				return pdPASS;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e096      	b.n	800ad96 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d110      	bne.n	800ac90 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d009      	beq.n	800ac88 <xQueueSemaphoreTake+0xf4>
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	617b      	str	r3, [r7, #20]
 800ac86:	e7fe      	b.n	800ac86 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ac88:	f001 fcb6 	bl	800c5f8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	e082      	b.n	800ad96 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac96:	f107 030c 	add.w	r3, r7, #12
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fefa 	bl	800ba94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aca0:	2301      	movs	r3, #1
 800aca2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aca4:	f001 fca8 	bl	800c5f8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aca8:	f000 fc90 	bl	800b5cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acac:	f001 fc76 	bl	800c59c <vPortEnterCritical>
 800acb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb6:	b25b      	sxtb	r3, r3
 800acb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbc:	d103      	bne.n	800acc6 <xQueueSemaphoreTake+0x132>
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	2200      	movs	r2, #0
 800acc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800accc:	b25b      	sxtb	r3, r3
 800acce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd2:	d103      	bne.n	800acdc <xQueueSemaphoreTake+0x148>
 800acd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd6:	2200      	movs	r2, #0
 800acd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acdc:	f001 fc8c 	bl	800c5f8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ace0:	463a      	mov	r2, r7
 800ace2:	f107 030c 	add.w	r3, r7, #12
 800ace6:	4611      	mov	r1, r2
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 fee9 	bl	800bac0 <xTaskCheckForTimeOut>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d132      	bne.n	800ad5a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acf6:	f000 f9ee 	bl	800b0d6 <prvIsQueueEmpty>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d026      	beq.n	800ad4e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d109      	bne.n	800ad1c <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800ad08:	f001 fc48 	bl	800c59c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	4618      	mov	r0, r3
 800ad12:	f001 f831 	bl	800bd78 <xTaskPriorityInherit>
 800ad16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ad18:	f001 fc6e 	bl	800c5f8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1e:	3324      	adds	r3, #36	; 0x24
 800ad20:	683a      	ldr	r2, [r7, #0]
 800ad22:	4611      	mov	r1, r2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 fe2f 	bl	800b988 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad2c:	f000 f981 	bl	800b032 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad30:	f000 fc5a 	bl	800b5e8 <xTaskResumeAll>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	f47f af69 	bne.w	800ac0e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800ad3c:	4b18      	ldr	r3, [pc, #96]	; (800ada0 <xQueueSemaphoreTake+0x20c>)
 800ad3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad42:	601a      	str	r2, [r3, #0]
 800ad44:	f3bf 8f4f 	dsb	sy
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	e75f      	b.n	800ac0e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad50:	f000 f96f 	bl	800b032 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad54:	f000 fc48 	bl	800b5e8 <xTaskResumeAll>
 800ad58:	e759      	b.n	800ac0e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad5c:	f000 f969 	bl	800b032 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad60:	f000 fc42 	bl	800b5e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad66:	f000 f9b6 	bl	800b0d6 <prvIsQueueEmpty>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f43f af4e 	beq.w	800ac0e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d00d      	beq.n	800ad94 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800ad78:	f001 fc10 	bl	800c59c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ad7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ad7e:	f000 f8b0 	bl	800aee2 <prvGetDisinheritPriorityAfterTimeout>
 800ad82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ad84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f001 f8f8 	bl	800bf80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ad90:	f001 fc32 	bl	800c5f8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad96:	4618      	mov	r0, r3
 800ad98:	3738      	adds	r7, #56	; 0x38
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	e000ed04 	.word	0xe000ed04

0800ada4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08e      	sub	sp, #56	; 0x38
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	60f8      	str	r0, [r7, #12]
 800adac:	60b9      	str	r1, [r7, #8]
 800adae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800adb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d109      	bne.n	800adce <xQueueReceiveFromISR+0x2a>
 800adba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	623b      	str	r3, [r7, #32]
 800adcc:	e7fe      	b.n	800adcc <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d103      	bne.n	800addc <xQueueReceiveFromISR+0x38>
 800add4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d101      	bne.n	800ade0 <xQueueReceiveFromISR+0x3c>
 800addc:	2301      	movs	r3, #1
 800adde:	e000      	b.n	800ade2 <xQueueReceiveFromISR+0x3e>
 800ade0:	2300      	movs	r3, #0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d109      	bne.n	800adfa <xQueueReceiveFromISR+0x56>
 800ade6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	61fb      	str	r3, [r7, #28]
 800adf8:	e7fe      	b.n	800adf8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adfa:	f001 fcab 	bl	800c754 <vPortValidateInterruptPriority>
	__asm volatile
 800adfe:	f3ef 8211 	mrs	r2, BASEPRI
 800ae02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae06:	f383 8811 	msr	BASEPRI, r3
 800ae0a:	f3bf 8f6f 	isb	sy
 800ae0e:	f3bf 8f4f 	dsb	sy
 800ae12:	61ba      	str	r2, [r7, #24]
 800ae14:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae16:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae18:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d02f      	beq.n	800ae86 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae30:	68b9      	ldr	r1, [r7, #8]
 800ae32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae34:	f000 f8d7 	bl	800afe6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae3a:	1e5a      	subs	r2, r3, #1
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d112      	bne.n	800ae70 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d016      	beq.n	800ae80 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	3310      	adds	r3, #16
 800ae56:	4618      	mov	r0, r3
 800ae58:	f000 fdba 	bl	800b9d0 <xTaskRemoveFromEventList>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00e      	beq.n	800ae80 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00b      	beq.n	800ae80 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	601a      	str	r2, [r3, #0]
 800ae6e:	e007      	b.n	800ae80 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ae70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ae74:	3301      	adds	r3, #1
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	b25a      	sxtb	r2, r3
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ae80:	2301      	movs	r3, #1
 800ae82:	637b      	str	r3, [r7, #52]	; 0x34
 800ae84:	e001      	b.n	800ae8a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	637b      	str	r3, [r7, #52]	; 0x34
 800ae8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ae96:	4618      	mov	r0, r3
 800ae98:	3738      	adds	r7, #56	; 0x38
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	bd80      	pop	{r7, pc}

0800ae9e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ae9e:	b580      	push	{r7, lr}
 800aea0:	b084      	sub	sp, #16
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d109      	bne.n	800aec4 <vQueueDelete+0x26>
	__asm volatile
 800aeb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb4:	f383 8811 	msr	BASEPRI, r3
 800aeb8:	f3bf 8f6f 	isb	sy
 800aebc:	f3bf 8f4f 	dsb	sy
 800aec0:	60bb      	str	r3, [r7, #8]
 800aec2:	e7fe      	b.n	800aec2 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f000 f935 	bl	800b134 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d102      	bne.n	800aeda <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800aed4:	68f8      	ldr	r0, [r7, #12]
 800aed6:	f001 fd3d 	bl	800c954 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aeda:	bf00      	nop
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}

0800aee2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aee2:	b480      	push	{r7}
 800aee4:	b085      	sub	sp, #20
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d006      	beq.n	800af00 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f1c3 0307 	rsb	r3, r3, #7
 800aefc:	60fb      	str	r3, [r7, #12]
 800aefe:	e001      	b.n	800af04 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af00:	2300      	movs	r3, #0
 800af02:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af04:	68fb      	ldr	r3, [r7, #12]
	}
 800af06:	4618      	mov	r0, r3
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr

0800af12 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b086      	sub	sp, #24
 800af16:	af00      	add	r7, sp, #0
 800af18:	60f8      	str	r0, [r7, #12]
 800af1a:	60b9      	str	r1, [r7, #8]
 800af1c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af26:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10d      	bne.n	800af4c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d14d      	bne.n	800afd4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	4618      	mov	r0, r3
 800af3e:	f000 ff9b 	bl	800be78 <xTaskPriorityDisinherit>
 800af42:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2200      	movs	r2, #0
 800af48:	609a      	str	r2, [r3, #8]
 800af4a:	e043      	b.n	800afd4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d119      	bne.n	800af86 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	6858      	ldr	r0, [r3, #4]
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5a:	461a      	mov	r2, r3
 800af5c:	68b9      	ldr	r1, [r7, #8]
 800af5e:	f001 fe31 	bl	800cbc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	685a      	ldr	r2, [r3, #4]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af6a:	441a      	add	r2, r3
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	685a      	ldr	r2, [r3, #4]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d32b      	bcc.n	800afd4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	605a      	str	r2, [r3, #4]
 800af84:	e026      	b.n	800afd4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	68d8      	ldr	r0, [r3, #12]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	461a      	mov	r2, r3
 800af90:	68b9      	ldr	r1, [r7, #8]
 800af92:	f001 fe17 	bl	800cbc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	68da      	ldr	r2, [r3, #12]
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9e:	425b      	negs	r3, r3
 800afa0:	441a      	add	r2, r3
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	68da      	ldr	r2, [r3, #12]
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d207      	bcs.n	800afc2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afba:	425b      	negs	r3, r3
 800afbc:	441a      	add	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d105      	bne.n	800afd4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d002      	beq.n	800afd4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3b01      	subs	r3, #1
 800afd2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800afdc:	697b      	ldr	r3, [r7, #20]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3718      	adds	r7, #24
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}

0800afe6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800afe6:	b580      	push	{r7, lr}
 800afe8:	b082      	sub	sp, #8
 800afea:	af00      	add	r7, sp, #0
 800afec:	6078      	str	r0, [r7, #4]
 800afee:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d018      	beq.n	800b02a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68da      	ldr	r2, [r3, #12]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b000:	441a      	add	r2, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	68da      	ldr	r2, [r3, #12]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	689b      	ldr	r3, [r3, #8]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d303      	bcc.n	800b01a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	68d9      	ldr	r1, [r3, #12]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	461a      	mov	r2, r3
 800b024:	6838      	ldr	r0, [r7, #0]
 800b026:	f001 fdcd 	bl	800cbc4 <memcpy>
	}
}
 800b02a:	bf00      	nop
 800b02c:	3708      	adds	r7, #8
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}

0800b032 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b032:	b580      	push	{r7, lr}
 800b034:	b084      	sub	sp, #16
 800b036:	af00      	add	r7, sp, #0
 800b038:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b03a:	f001 faaf 	bl	800c59c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b044:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b046:	e011      	b.n	800b06c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d012      	beq.n	800b076 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3324      	adds	r3, #36	; 0x24
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fcbb 	bl	800b9d0 <xTaskRemoveFromEventList>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b060:	f000 fd8e 	bl	800bb80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b064:	7bfb      	ldrb	r3, [r7, #15]
 800b066:	3b01      	subs	r3, #1
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b070:	2b00      	cmp	r3, #0
 800b072:	dce9      	bgt.n	800b048 <prvUnlockQueue+0x16>
 800b074:	e000      	b.n	800b078 <prvUnlockQueue+0x46>
					break;
 800b076:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	22ff      	movs	r2, #255	; 0xff
 800b07c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b080:	f001 faba 	bl	800c5f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b084:	f001 fa8a 	bl	800c59c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b08e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b090:	e011      	b.n	800b0b6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	691b      	ldr	r3, [r3, #16]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d012      	beq.n	800b0c0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	3310      	adds	r3, #16
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f000 fc96 	bl	800b9d0 <xTaskRemoveFromEventList>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d001      	beq.n	800b0ae <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0aa:	f000 fd69 	bl	800bb80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0ae:	7bbb      	ldrb	r3, [r7, #14]
 800b0b0:	3b01      	subs	r3, #1
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	dce9      	bgt.n	800b092 <prvUnlockQueue+0x60>
 800b0be:	e000      	b.n	800b0c2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0c0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	22ff      	movs	r2, #255	; 0xff
 800b0c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b0ca:	f001 fa95 	bl	800c5f8 <vPortExitCritical>
}
 800b0ce:	bf00      	nop
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b084      	sub	sp, #16
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0de:	f001 fa5d 	bl	800c59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d102      	bne.n	800b0f0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	60fb      	str	r3, [r7, #12]
 800b0ee:	e001      	b.n	800b0f4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b0f0:	2300      	movs	r3, #0
 800b0f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b0f4:	f001 fa80 	bl	800c5f8 <vPortExitCritical>

	return xReturn;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b10a:	f001 fa47 	bl	800c59c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b116:	429a      	cmp	r2, r3
 800b118:	d102      	bne.n	800b120 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b11a:	2301      	movs	r3, #1
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	e001      	b.n	800b124 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b120:	2300      	movs	r3, #0
 800b122:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b124:	f001 fa68 	bl	800c5f8 <vPortExitCritical>

	return xReturn;
 800b128:	68fb      	ldr	r3, [r7, #12]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b13c:	2300      	movs	r3, #0
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	e016      	b.n	800b170 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b142:	4a10      	ldr	r2, [pc, #64]	; (800b184 <vQueueUnregisterQueue+0x50>)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d10b      	bne.n	800b16a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b152:	4a0c      	ldr	r2, [pc, #48]	; (800b184 <vQueueUnregisterQueue+0x50>)
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2100      	movs	r1, #0
 800b158:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b15c:	4a09      	ldr	r2, [pc, #36]	; (800b184 <vQueueUnregisterQueue+0x50>)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	00db      	lsls	r3, r3, #3
 800b162:	4413      	add	r3, r2
 800b164:	2200      	movs	r2, #0
 800b166:	605a      	str	r2, [r3, #4]
				break;
 800b168:	e005      	b.n	800b176 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3301      	adds	r3, #1
 800b16e:	60fb      	str	r3, [r7, #12]
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b07      	cmp	r3, #7
 800b174:	d9e5      	bls.n	800b142 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b176:	bf00      	nop
 800b178:	3714      	adds	r7, #20
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	20008668 	.word	0x20008668

0800b188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b08e      	sub	sp, #56	; 0x38
 800b18c:	af04      	add	r7, sp, #16
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	607a      	str	r2, [r7, #4]
 800b194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d109      	bne.n	800b1b0 <xTaskCreateStatic+0x28>
 800b19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a0:	f383 8811 	msr	BASEPRI, r3
 800b1a4:	f3bf 8f6f 	isb	sy
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	623b      	str	r3, [r7, #32]
 800b1ae:	e7fe      	b.n	800b1ae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d109      	bne.n	800b1ca <xTaskCreateStatic+0x42>
 800b1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ba:	f383 8811 	msr	BASEPRI, r3
 800b1be:	f3bf 8f6f 	isb	sy
 800b1c2:	f3bf 8f4f 	dsb	sy
 800b1c6:	61fb      	str	r3, [r7, #28]
 800b1c8:	e7fe      	b.n	800b1c8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b1ca:	2354      	movs	r3, #84	; 0x54
 800b1cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2b54      	cmp	r3, #84	; 0x54
 800b1d2:	d009      	beq.n	800b1e8 <xTaskCreateStatic+0x60>
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	61bb      	str	r3, [r7, #24]
 800b1e6:	e7fe      	b.n	800b1e6 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b1e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d01e      	beq.n	800b22e <xTaskCreateStatic+0xa6>
 800b1f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01b      	beq.n	800b22e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	2202      	movs	r2, #2
 800b204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b208:	2300      	movs	r3, #0
 800b20a:	9303      	str	r3, [sp, #12]
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	9302      	str	r3, [sp, #8]
 800b210:	f107 0314 	add.w	r3, r7, #20
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	68f8      	ldr	r0, [r7, #12]
 800b222:	f000 f850 	bl	800b2c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b228:	f000 f8d4 	bl	800b3d4 <prvAddNewTaskToReadyList>
 800b22c:	e001      	b.n	800b232 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b232:	697b      	ldr	r3, [r7, #20]
	}
 800b234:	4618      	mov	r0, r3
 800b236:	3728      	adds	r7, #40	; 0x28
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}

0800b23c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b08c      	sub	sp, #48	; 0x30
 800b240:	af04      	add	r7, sp, #16
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	603b      	str	r3, [r7, #0]
 800b248:	4613      	mov	r3, r2
 800b24a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b24c:	88fb      	ldrh	r3, [r7, #6]
 800b24e:	009b      	lsls	r3, r3, #2
 800b250:	4618      	mov	r0, r3
 800b252:	f001 fabd 	bl	800c7d0 <pvPortMalloc>
 800b256:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00e      	beq.n	800b27c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b25e:	2054      	movs	r0, #84	; 0x54
 800b260:	f001 fab6 	bl	800c7d0 <pvPortMalloc>
 800b264:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d003      	beq.n	800b274 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	697a      	ldr	r2, [r7, #20]
 800b270:	631a      	str	r2, [r3, #48]	; 0x30
 800b272:	e005      	b.n	800b280 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b274:	6978      	ldr	r0, [r7, #20]
 800b276:	f001 fb6d 	bl	800c954 <vPortFree>
 800b27a:	e001      	b.n	800b280 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b27c:	2300      	movs	r3, #0
 800b27e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d017      	beq.n	800b2b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	2200      	movs	r2, #0
 800b28a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b28e:	88fa      	ldrh	r2, [r7, #6]
 800b290:	2300      	movs	r3, #0
 800b292:	9303      	str	r3, [sp, #12]
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	9302      	str	r3, [sp, #8]
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f80e 	bl	800b2c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2aa:	69f8      	ldr	r0, [r7, #28]
 800b2ac:	f000 f892 	bl	800b3d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	61bb      	str	r3, [r7, #24]
 800b2b4:	e002      	b.n	800b2bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2b6:	f04f 33ff 	mov.w	r3, #4294967295
 800b2ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b2bc:	69bb      	ldr	r3, [r7, #24]
	}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3720      	adds	r7, #32
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b088      	sub	sp, #32
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	60f8      	str	r0, [r7, #12]
 800b2ce:	60b9      	str	r1, [r7, #8]
 800b2d0:	607a      	str	r2, [r7, #4]
 800b2d2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b2de:	3b01      	subs	r3, #1
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b2e6:	69bb      	ldr	r3, [r7, #24]
 800b2e8:	f023 0307 	bic.w	r3, r3, #7
 800b2ec:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	f003 0307 	and.w	r3, r3, #7
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d009      	beq.n	800b30c <prvInitialiseNewTask+0x46>
 800b2f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fc:	f383 8811 	msr	BASEPRI, r3
 800b300:	f3bf 8f6f 	isb	sy
 800b304:	f3bf 8f4f 	dsb	sy
 800b308:	617b      	str	r3, [r7, #20]
 800b30a:	e7fe      	b.n	800b30a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d01f      	beq.n	800b352 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b312:	2300      	movs	r3, #0
 800b314:	61fb      	str	r3, [r7, #28]
 800b316:	e012      	b.n	800b33e <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b318:	68ba      	ldr	r2, [r7, #8]
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	4413      	add	r3, r2
 800b31e:	7819      	ldrb	r1, [r3, #0]
 800b320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	4413      	add	r3, r2
 800b326:	3334      	adds	r3, #52	; 0x34
 800b328:	460a      	mov	r2, r1
 800b32a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b32c:	68ba      	ldr	r2, [r7, #8]
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	4413      	add	r3, r2
 800b332:	781b      	ldrb	r3, [r3, #0]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d006      	beq.n	800b346 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b338:	69fb      	ldr	r3, [r7, #28]
 800b33a:	3301      	adds	r3, #1
 800b33c:	61fb      	str	r3, [r7, #28]
 800b33e:	69fb      	ldr	r3, [r7, #28]
 800b340:	2b0f      	cmp	r3, #15
 800b342:	d9e9      	bls.n	800b318 <prvInitialiseNewTask+0x52>
 800b344:	e000      	b.n	800b348 <prvInitialiseNewTask+0x82>
			{
				break;
 800b346:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34a:	2200      	movs	r2, #0
 800b34c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b350:	e003      	b.n	800b35a <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	2200      	movs	r2, #0
 800b356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b35c:	2b06      	cmp	r3, #6
 800b35e:	d901      	bls.n	800b364 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b360:	2306      	movs	r3, #6
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b368:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b36c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b36e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b372:	2200      	movs	r2, #0
 800b374:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	3304      	adds	r3, #4
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7fe fefc 	bl	800a178 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	3318      	adds	r3, #24
 800b384:	4618      	mov	r0, r3
 800b386:	f7fe fef7 	bl	800a178 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b38e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b392:	f1c3 0207 	rsb	r2, r3, #7
 800b396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b398:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b39e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	68f9      	ldr	r1, [r7, #12]
 800b3b2:	69b8      	ldr	r0, [r7, #24]
 800b3b4:	f000 ffcc 	bl	800c350 <pxPortInitialiseStack>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3ca:	bf00      	nop
 800b3cc:	3720      	adds	r7, #32
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
	...

0800b3d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b3dc:	f001 f8de 	bl	800c59c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b3e0:	4b2a      	ldr	r3, [pc, #168]	; (800b48c <prvAddNewTaskToReadyList+0xb8>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	4a29      	ldr	r2, [pc, #164]	; (800b48c <prvAddNewTaskToReadyList+0xb8>)
 800b3e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b3ea:	4b29      	ldr	r3, [pc, #164]	; (800b490 <prvAddNewTaskToReadyList+0xbc>)
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d109      	bne.n	800b406 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b3f2:	4a27      	ldr	r2, [pc, #156]	; (800b490 <prvAddNewTaskToReadyList+0xbc>)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b3f8:	4b24      	ldr	r3, [pc, #144]	; (800b48c <prvAddNewTaskToReadyList+0xb8>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d110      	bne.n	800b422 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b400:	f000 fbe2 	bl	800bbc8 <prvInitialiseTaskLists>
 800b404:	e00d      	b.n	800b422 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b406:	4b23      	ldr	r3, [pc, #140]	; (800b494 <prvAddNewTaskToReadyList+0xc0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d109      	bne.n	800b422 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b40e:	4b20      	ldr	r3, [pc, #128]	; (800b490 <prvAddNewTaskToReadyList+0xbc>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b418:	429a      	cmp	r2, r3
 800b41a:	d802      	bhi.n	800b422 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b41c:	4a1c      	ldr	r2, [pc, #112]	; (800b490 <prvAddNewTaskToReadyList+0xbc>)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b422:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <prvAddNewTaskToReadyList+0xc4>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	3301      	adds	r3, #1
 800b428:	4a1b      	ldr	r2, [pc, #108]	; (800b498 <prvAddNewTaskToReadyList+0xc4>)
 800b42a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	2201      	movs	r2, #1
 800b432:	409a      	lsls	r2, r3
 800b434:	4b19      	ldr	r3, [pc, #100]	; (800b49c <prvAddNewTaskToReadyList+0xc8>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4313      	orrs	r3, r2
 800b43a:	4a18      	ldr	r2, [pc, #96]	; (800b49c <prvAddNewTaskToReadyList+0xc8>)
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4a15      	ldr	r2, [pc, #84]	; (800b4a0 <prvAddNewTaskToReadyList+0xcc>)
 800b44c:	441a      	add	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	3304      	adds	r3, #4
 800b452:	4619      	mov	r1, r3
 800b454:	4610      	mov	r0, r2
 800b456:	f7fe fe9c 	bl	800a192 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b45a:	f001 f8cd 	bl	800c5f8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b45e:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <prvAddNewTaskToReadyList+0xc0>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00e      	beq.n	800b484 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b466:	4b0a      	ldr	r3, [pc, #40]	; (800b490 <prvAddNewTaskToReadyList+0xbc>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	429a      	cmp	r2, r3
 800b472:	d207      	bcs.n	800b484 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b474:	4b0b      	ldr	r3, [pc, #44]	; (800b4a4 <prvAddNewTaskToReadyList+0xd0>)
 800b476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47a:	601a      	str	r2, [r3, #0]
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b484:	bf00      	nop
 800b486:	3708      	adds	r7, #8
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}
 800b48c:	200025fc 	.word	0x200025fc
 800b490:	200024fc 	.word	0x200024fc
 800b494:	20002608 	.word	0x20002608
 800b498:	20002618 	.word	0x20002618
 800b49c:	20002604 	.word	0x20002604
 800b4a0:	20002500 	.word	0x20002500
 800b4a4:	e000ed04 	.word	0xe000ed04

0800b4a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d016      	beq.n	800b4e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b4ba:	4b13      	ldr	r3, [pc, #76]	; (800b508 <vTaskDelay+0x60>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d009      	beq.n	800b4d6 <vTaskDelay+0x2e>
 800b4c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c6:	f383 8811 	msr	BASEPRI, r3
 800b4ca:	f3bf 8f6f 	isb	sy
 800b4ce:	f3bf 8f4f 	dsb	sy
 800b4d2:	60bb      	str	r3, [r7, #8]
 800b4d4:	e7fe      	b.n	800b4d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800b4d6:	f000 f879 	bl	800b5cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b4da:	2100      	movs	r1, #0
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fed1 	bl	800c284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b4e2:	f000 f881 	bl	800b5e8 <xTaskResumeAll>
 800b4e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d107      	bne.n	800b4fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800b4ee:	4b07      	ldr	r3, [pc, #28]	; (800b50c <vTaskDelay+0x64>)
 800b4f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4f4:	601a      	str	r2, [r3, #0]
 800b4f6:	f3bf 8f4f 	dsb	sy
 800b4fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4fe:	bf00      	nop
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	20002624 	.word	0x20002624
 800b50c:	e000ed04 	.word	0xe000ed04

0800b510 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b08a      	sub	sp, #40	; 0x28
 800b514:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b516:	2300      	movs	r3, #0
 800b518:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b51a:	2300      	movs	r3, #0
 800b51c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b51e:	463a      	mov	r2, r7
 800b520:	1d39      	adds	r1, r7, #4
 800b522:	f107 0308 	add.w	r3, r7, #8
 800b526:	4618      	mov	r0, r3
 800b528:	f7f4 ffda 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b52c:	6839      	ldr	r1, [r7, #0]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68ba      	ldr	r2, [r7, #8]
 800b532:	9202      	str	r2, [sp, #8]
 800b534:	9301      	str	r3, [sp, #4]
 800b536:	2300      	movs	r3, #0
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	2300      	movs	r3, #0
 800b53c:	460a      	mov	r2, r1
 800b53e:	491d      	ldr	r1, [pc, #116]	; (800b5b4 <vTaskStartScheduler+0xa4>)
 800b540:	481d      	ldr	r0, [pc, #116]	; (800b5b8 <vTaskStartScheduler+0xa8>)
 800b542:	f7ff fe21 	bl	800b188 <xTaskCreateStatic>
 800b546:	4602      	mov	r2, r0
 800b548:	4b1c      	ldr	r3, [pc, #112]	; (800b5bc <vTaskStartScheduler+0xac>)
 800b54a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b54c:	4b1b      	ldr	r3, [pc, #108]	; (800b5bc <vTaskStartScheduler+0xac>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d002      	beq.n	800b55a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b554:	2301      	movs	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
 800b558:	e001      	b.n	800b55e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b55a:	2300      	movs	r3, #0
 800b55c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	2b01      	cmp	r3, #1
 800b562:	d115      	bne.n	800b590 <vTaskStartScheduler+0x80>
 800b564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b568:	f383 8811 	msr	BASEPRI, r3
 800b56c:	f3bf 8f6f 	isb	sy
 800b570:	f3bf 8f4f 	dsb	sy
 800b574:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b576:	4b12      	ldr	r3, [pc, #72]	; (800b5c0 <vTaskStartScheduler+0xb0>)
 800b578:	f04f 32ff 	mov.w	r2, #4294967295
 800b57c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b57e:	4b11      	ldr	r3, [pc, #68]	; (800b5c4 <vTaskStartScheduler+0xb4>)
 800b580:	2201      	movs	r2, #1
 800b582:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b584:	4b10      	ldr	r3, [pc, #64]	; (800b5c8 <vTaskStartScheduler+0xb8>)
 800b586:	2200      	movs	r2, #0
 800b588:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b58a:	f000 ff69 	bl	800c460 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b58e:	e00d      	b.n	800b5ac <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b596:	d109      	bne.n	800b5ac <vTaskStartScheduler+0x9c>
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	e7fe      	b.n	800b5aa <vTaskStartScheduler+0x9a>
}
 800b5ac:	bf00      	nop
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	0800cde0 	.word	0x0800cde0
 800b5b8:	0800bb99 	.word	0x0800bb99
 800b5bc:	20002620 	.word	0x20002620
 800b5c0:	2000261c 	.word	0x2000261c
 800b5c4:	20002608 	.word	0x20002608
 800b5c8:	20002600 	.word	0x20002600

0800b5cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b5d0:	4b04      	ldr	r3, [pc, #16]	; (800b5e4 <vTaskSuspendAll+0x18>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	4a03      	ldr	r2, [pc, #12]	; (800b5e4 <vTaskSuspendAll+0x18>)
 800b5d8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b5da:	bf00      	nop
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	20002624 	.word	0x20002624

0800b5e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5f6:	4b41      	ldr	r3, [pc, #260]	; (800b6fc <xTaskResumeAll+0x114>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <xTaskResumeAll+0x2a>
 800b5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	603b      	str	r3, [r7, #0]
 800b610:	e7fe      	b.n	800b610 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b612:	f000 ffc3 	bl	800c59c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b616:	4b39      	ldr	r3, [pc, #228]	; (800b6fc <xTaskResumeAll+0x114>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a37      	ldr	r2, [pc, #220]	; (800b6fc <xTaskResumeAll+0x114>)
 800b61e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b620:	4b36      	ldr	r3, [pc, #216]	; (800b6fc <xTaskResumeAll+0x114>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d161      	bne.n	800b6ec <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b628:	4b35      	ldr	r3, [pc, #212]	; (800b700 <xTaskResumeAll+0x118>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d05d      	beq.n	800b6ec <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b630:	e02e      	b.n	800b690 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b632:	4b34      	ldr	r3, [pc, #208]	; (800b704 <xTaskResumeAll+0x11c>)
 800b634:	68db      	ldr	r3, [r3, #12]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	3318      	adds	r3, #24
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe fe04 	bl	800a24c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	3304      	adds	r3, #4
 800b648:	4618      	mov	r0, r3
 800b64a:	f7fe fdff 	bl	800a24c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b652:	2201      	movs	r2, #1
 800b654:	409a      	lsls	r2, r3
 800b656:	4b2c      	ldr	r3, [pc, #176]	; (800b708 <xTaskResumeAll+0x120>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	4a2a      	ldr	r2, [pc, #168]	; (800b708 <xTaskResumeAll+0x120>)
 800b65e:	6013      	str	r3, [r2, #0]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b664:	4613      	mov	r3, r2
 800b666:	009b      	lsls	r3, r3, #2
 800b668:	4413      	add	r3, r2
 800b66a:	009b      	lsls	r3, r3, #2
 800b66c:	4a27      	ldr	r2, [pc, #156]	; (800b70c <xTaskResumeAll+0x124>)
 800b66e:	441a      	add	r2, r3
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	3304      	adds	r3, #4
 800b674:	4619      	mov	r1, r3
 800b676:	4610      	mov	r0, r2
 800b678:	f7fe fd8b 	bl	800a192 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b680:	4b23      	ldr	r3, [pc, #140]	; (800b710 <xTaskResumeAll+0x128>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b686:	429a      	cmp	r2, r3
 800b688:	d302      	bcc.n	800b690 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800b68a:	4b22      	ldr	r3, [pc, #136]	; (800b714 <xTaskResumeAll+0x12c>)
 800b68c:	2201      	movs	r2, #1
 800b68e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b690:	4b1c      	ldr	r3, [pc, #112]	; (800b704 <xTaskResumeAll+0x11c>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1cc      	bne.n	800b632 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d001      	beq.n	800b6a2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b69e:	f000 fb2d 	bl	800bcfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b6a2:	4b1d      	ldr	r3, [pc, #116]	; (800b718 <xTaskResumeAll+0x130>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d010      	beq.n	800b6d0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b6ae:	f000 f859 	bl	800b764 <xTaskIncrementTick>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d002      	beq.n	800b6be <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800b6b8:	4b16      	ldr	r3, [pc, #88]	; (800b714 <xTaskResumeAll+0x12c>)
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3b01      	subs	r3, #1
 800b6c2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1f1      	bne.n	800b6ae <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800b6ca:	4b13      	ldr	r3, [pc, #76]	; (800b718 <xTaskResumeAll+0x130>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6d0:	4b10      	ldr	r3, [pc, #64]	; (800b714 <xTaskResumeAll+0x12c>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d009      	beq.n	800b6ec <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6dc:	4b0f      	ldr	r3, [pc, #60]	; (800b71c <xTaskResumeAll+0x134>)
 800b6de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	f3bf 8f4f 	dsb	sy
 800b6e8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6ec:	f000 ff84 	bl	800c5f8 <vPortExitCritical>

	return xAlreadyYielded;
 800b6f0:	68bb      	ldr	r3, [r7, #8]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3710      	adds	r7, #16
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
 800b6fa:	bf00      	nop
 800b6fc:	20002624 	.word	0x20002624
 800b700:	200025fc 	.word	0x200025fc
 800b704:	200025bc 	.word	0x200025bc
 800b708:	20002604 	.word	0x20002604
 800b70c:	20002500 	.word	0x20002500
 800b710:	200024fc 	.word	0x200024fc
 800b714:	20002610 	.word	0x20002610
 800b718:	2000260c 	.word	0x2000260c
 800b71c:	e000ed04 	.word	0xe000ed04

0800b720 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b726:	4b05      	ldr	r3, [pc, #20]	; (800b73c <xTaskGetTickCount+0x1c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b72c:	687b      	ldr	r3, [r7, #4]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr
 800b73a:	bf00      	nop
 800b73c:	20002600 	.word	0x20002600

0800b740 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b746:	f001 f805 	bl	800c754 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b74a:	2300      	movs	r3, #0
 800b74c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b74e:	4b04      	ldr	r3, [pc, #16]	; (800b760 <xTaskGetTickCountFromISR+0x20>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b754:	683b      	ldr	r3, [r7, #0]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	20002600 	.word	0x20002600

0800b764 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b764:	b580      	push	{r7, lr}
 800b766:	b086      	sub	sp, #24
 800b768:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b76a:	2300      	movs	r3, #0
 800b76c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b76e:	4b4e      	ldr	r3, [pc, #312]	; (800b8a8 <xTaskIncrementTick+0x144>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2b00      	cmp	r3, #0
 800b774:	f040 8087 	bne.w	800b886 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b778:	4b4c      	ldr	r3, [pc, #304]	; (800b8ac <xTaskIncrementTick+0x148>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b780:	4a4a      	ldr	r2, [pc, #296]	; (800b8ac <xTaskIncrementTick+0x148>)
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d11f      	bne.n	800b7cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800b78c:	4b48      	ldr	r3, [pc, #288]	; (800b8b0 <xTaskIncrementTick+0x14c>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d009      	beq.n	800b7aa <xTaskIncrementTick+0x46>
 800b796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79a:	f383 8811 	msr	BASEPRI, r3
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	f3bf 8f4f 	dsb	sy
 800b7a6:	603b      	str	r3, [r7, #0]
 800b7a8:	e7fe      	b.n	800b7a8 <xTaskIncrementTick+0x44>
 800b7aa:	4b41      	ldr	r3, [pc, #260]	; (800b8b0 <xTaskIncrementTick+0x14c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60fb      	str	r3, [r7, #12]
 800b7b0:	4b40      	ldr	r3, [pc, #256]	; (800b8b4 <xTaskIncrementTick+0x150>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a3e      	ldr	r2, [pc, #248]	; (800b8b0 <xTaskIncrementTick+0x14c>)
 800b7b6:	6013      	str	r3, [r2, #0]
 800b7b8:	4a3e      	ldr	r2, [pc, #248]	; (800b8b4 <xTaskIncrementTick+0x150>)
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	6013      	str	r3, [r2, #0]
 800b7be:	4b3e      	ldr	r3, [pc, #248]	; (800b8b8 <xTaskIncrementTick+0x154>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	4a3c      	ldr	r2, [pc, #240]	; (800b8b8 <xTaskIncrementTick+0x154>)
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	f000 fa98 	bl	800bcfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b7cc:	4b3b      	ldr	r3, [pc, #236]	; (800b8bc <xTaskIncrementTick+0x158>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d348      	bcc.n	800b868 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b7d6:	4b36      	ldr	r3, [pc, #216]	; (800b8b0 <xTaskIncrementTick+0x14c>)
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d104      	bne.n	800b7ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b7e0:	4b36      	ldr	r3, [pc, #216]	; (800b8bc <xTaskIncrementTick+0x158>)
 800b7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b7e6:	601a      	str	r2, [r3, #0]
					break;
 800b7e8:	e03e      	b.n	800b868 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7ea:	4b31      	ldr	r3, [pc, #196]	; (800b8b0 <xTaskIncrementTick+0x14c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	68db      	ldr	r3, [r3, #12]
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7fa:	693a      	ldr	r2, [r7, #16]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d203      	bcs.n	800b80a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b802:	4a2e      	ldr	r2, [pc, #184]	; (800b8bc <xTaskIncrementTick+0x158>)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b808:	e02e      	b.n	800b868 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	3304      	adds	r3, #4
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fd1c 	bl	800a24c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d004      	beq.n	800b826 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	3318      	adds	r3, #24
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe fd13 	bl	800a24c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82a:	2201      	movs	r2, #1
 800b82c:	409a      	lsls	r2, r3
 800b82e:	4b24      	ldr	r3, [pc, #144]	; (800b8c0 <xTaskIncrementTick+0x15c>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	4313      	orrs	r3, r2
 800b834:	4a22      	ldr	r2, [pc, #136]	; (800b8c0 <xTaskIncrementTick+0x15c>)
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	68bb      	ldr	r3, [r7, #8]
 800b83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	4a1f      	ldr	r2, [pc, #124]	; (800b8c4 <xTaskIncrementTick+0x160>)
 800b846:	441a      	add	r2, r3
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	3304      	adds	r3, #4
 800b84c:	4619      	mov	r1, r3
 800b84e:	4610      	mov	r0, r2
 800b850:	f7fe fc9f 	bl	800a192 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b858:	4b1b      	ldr	r3, [pc, #108]	; (800b8c8 <xTaskIncrementTick+0x164>)
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85e:	429a      	cmp	r2, r3
 800b860:	d3b9      	bcc.n	800b7d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800b862:	2301      	movs	r3, #1
 800b864:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b866:	e7b6      	b.n	800b7d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b868:	4b17      	ldr	r3, [pc, #92]	; (800b8c8 <xTaskIncrementTick+0x164>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b86e:	4915      	ldr	r1, [pc, #84]	; (800b8c4 <xTaskIncrementTick+0x160>)
 800b870:	4613      	mov	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	009b      	lsls	r3, r3, #2
 800b878:	440b      	add	r3, r1
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d907      	bls.n	800b890 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800b880:	2301      	movs	r3, #1
 800b882:	617b      	str	r3, [r7, #20]
 800b884:	e004      	b.n	800b890 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b886:	4b11      	ldr	r3, [pc, #68]	; (800b8cc <xTaskIncrementTick+0x168>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3301      	adds	r3, #1
 800b88c:	4a0f      	ldr	r2, [pc, #60]	; (800b8cc <xTaskIncrementTick+0x168>)
 800b88e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <xTaskIncrementTick+0x16c>)
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d001      	beq.n	800b89c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800b898:	2301      	movs	r3, #1
 800b89a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b89c:	697b      	ldr	r3, [r7, #20]
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20002624 	.word	0x20002624
 800b8ac:	20002600 	.word	0x20002600
 800b8b0:	200025b4 	.word	0x200025b4
 800b8b4:	200025b8 	.word	0x200025b8
 800b8b8:	20002614 	.word	0x20002614
 800b8bc:	2000261c 	.word	0x2000261c
 800b8c0:	20002604 	.word	0x20002604
 800b8c4:	20002500 	.word	0x20002500
 800b8c8:	200024fc 	.word	0x200024fc
 800b8cc:	2000260c 	.word	0x2000260c
 800b8d0:	20002610 	.word	0x20002610

0800b8d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b087      	sub	sp, #28
 800b8d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b8da:	4b26      	ldr	r3, [pc, #152]	; (800b974 <vTaskSwitchContext+0xa0>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d003      	beq.n	800b8ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b8e2:	4b25      	ldr	r3, [pc, #148]	; (800b978 <vTaskSwitchContext+0xa4>)
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b8e8:	e03e      	b.n	800b968 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800b8ea:	4b23      	ldr	r3, [pc, #140]	; (800b978 <vTaskSwitchContext+0xa4>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8f0:	4b22      	ldr	r3, [pc, #136]	; (800b97c <vTaskSwitchContext+0xa8>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	fab3 f383 	clz	r3, r3
 800b8fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	f1c3 031f 	rsb	r3, r3, #31
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	491e      	ldr	r1, [pc, #120]	; (800b980 <vTaskSwitchContext+0xac>)
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	4613      	mov	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d109      	bne.n	800b92e <vTaskSwitchContext+0x5a>
	__asm volatile
 800b91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91e:	f383 8811 	msr	BASEPRI, r3
 800b922:	f3bf 8f6f 	isb	sy
 800b926:	f3bf 8f4f 	dsb	sy
 800b92a:	607b      	str	r3, [r7, #4]
 800b92c:	e7fe      	b.n	800b92c <vTaskSwitchContext+0x58>
 800b92e:	697a      	ldr	r2, [r7, #20]
 800b930:	4613      	mov	r3, r2
 800b932:	009b      	lsls	r3, r3, #2
 800b934:	4413      	add	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4a11      	ldr	r2, [pc, #68]	; (800b980 <vTaskSwitchContext+0xac>)
 800b93a:	4413      	add	r3, r2
 800b93c:	613b      	str	r3, [r7, #16]
 800b93e:	693b      	ldr	r3, [r7, #16]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	685a      	ldr	r2, [r3, #4]
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	605a      	str	r2, [r3, #4]
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	3308      	adds	r3, #8
 800b950:	429a      	cmp	r2, r3
 800b952:	d104      	bne.n	800b95e <vTaskSwitchContext+0x8a>
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	605a      	str	r2, [r3, #4]
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	68db      	ldr	r3, [r3, #12]
 800b964:	4a07      	ldr	r2, [pc, #28]	; (800b984 <vTaskSwitchContext+0xb0>)
 800b966:	6013      	str	r3, [r2, #0]
}
 800b968:	bf00      	nop
 800b96a:	371c      	adds	r7, #28
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	20002624 	.word	0x20002624
 800b978:	20002610 	.word	0x20002610
 800b97c:	20002604 	.word	0x20002604
 800b980:	20002500 	.word	0x20002500
 800b984:	200024fc 	.word	0x200024fc

0800b988 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d109      	bne.n	800b9ac <vTaskPlaceOnEventList+0x24>
 800b998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b99c:	f383 8811 	msr	BASEPRI, r3
 800b9a0:	f3bf 8f6f 	isb	sy
 800b9a4:	f3bf 8f4f 	dsb	sy
 800b9a8:	60fb      	str	r3, [r7, #12]
 800b9aa:	e7fe      	b.n	800b9aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9ac:	4b07      	ldr	r3, [pc, #28]	; (800b9cc <vTaskPlaceOnEventList+0x44>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3318      	adds	r3, #24
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7fe fc10 	bl	800a1da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	6838      	ldr	r0, [r7, #0]
 800b9be:	f000 fc61 	bl	800c284 <prvAddCurrentTaskToDelayedList>
}
 800b9c2:	bf00      	nop
 800b9c4:	3710      	adds	r7, #16
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	bd80      	pop	{r7, pc}
 800b9ca:	bf00      	nop
 800b9cc:	200024fc 	.word	0x200024fc

0800b9d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b086      	sub	sp, #24
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68db      	ldr	r3, [r3, #12]
 800b9dc:	68db      	ldr	r3, [r3, #12]
 800b9de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d109      	bne.n	800b9fa <xTaskRemoveFromEventList+0x2a>
 800b9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ea:	f383 8811 	msr	BASEPRI, r3
 800b9ee:	f3bf 8f6f 	isb	sy
 800b9f2:	f3bf 8f4f 	dsb	sy
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	e7fe      	b.n	800b9f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	3318      	adds	r3, #24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe fc24 	bl	800a24c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba04:	4b1d      	ldr	r3, [pc, #116]	; (800ba7c <xTaskRemoveFromEventList+0xac>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d11c      	bne.n	800ba46 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	3304      	adds	r3, #4
 800ba10:	4618      	mov	r0, r3
 800ba12:	f7fe fc1b 	bl	800a24c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	409a      	lsls	r2, r3
 800ba1e:	4b18      	ldr	r3, [pc, #96]	; (800ba80 <xTaskRemoveFromEventList+0xb0>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	4a16      	ldr	r2, [pc, #88]	; (800ba80 <xTaskRemoveFromEventList+0xb0>)
 800ba26:	6013      	str	r3, [r2, #0]
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4413      	add	r3, r2
 800ba32:	009b      	lsls	r3, r3, #2
 800ba34:	4a13      	ldr	r2, [pc, #76]	; (800ba84 <xTaskRemoveFromEventList+0xb4>)
 800ba36:	441a      	add	r2, r3
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	4619      	mov	r1, r3
 800ba3e:	4610      	mov	r0, r2
 800ba40:	f7fe fba7 	bl	800a192 <vListInsertEnd>
 800ba44:	e005      	b.n	800ba52 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba46:	693b      	ldr	r3, [r7, #16]
 800ba48:	3318      	adds	r3, #24
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	480e      	ldr	r0, [pc, #56]	; (800ba88 <xTaskRemoveFromEventList+0xb8>)
 800ba4e:	f7fe fba0 	bl	800a192 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba52:	693b      	ldr	r3, [r7, #16]
 800ba54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba56:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <xTaskRemoveFromEventList+0xbc>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d905      	bls.n	800ba6c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba60:	2301      	movs	r3, #1
 800ba62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba64:	4b0a      	ldr	r3, [pc, #40]	; (800ba90 <xTaskRemoveFromEventList+0xc0>)
 800ba66:	2201      	movs	r2, #1
 800ba68:	601a      	str	r2, [r3, #0]
 800ba6a:	e001      	b.n	800ba70 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba70:	697b      	ldr	r3, [r7, #20]
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}
 800ba7a:	bf00      	nop
 800ba7c:	20002624 	.word	0x20002624
 800ba80:	20002604 	.word	0x20002604
 800ba84:	20002500 	.word	0x20002500
 800ba88:	200025bc 	.word	0x200025bc
 800ba8c:	200024fc 	.word	0x200024fc
 800ba90:	20002610 	.word	0x20002610

0800ba94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba9c:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <vTaskInternalSetTimeOutState+0x24>)
 800ba9e:	681a      	ldr	r2, [r3, #0]
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800baa4:	4b05      	ldr	r3, [pc, #20]	; (800babc <vTaskInternalSetTimeOutState+0x28>)
 800baa6:	681a      	ldr	r2, [r3, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	605a      	str	r2, [r3, #4]
}
 800baac:	bf00      	nop
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab6:	4770      	bx	lr
 800bab8:	20002614 	.word	0x20002614
 800babc:	20002600 	.word	0x20002600

0800bac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b088      	sub	sp, #32
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d109      	bne.n	800bae4 <xTaskCheckForTimeOut+0x24>
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	613b      	str	r3, [r7, #16]
 800bae2:	e7fe      	b.n	800bae2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d109      	bne.n	800bafe <xTaskCheckForTimeOut+0x3e>
 800baea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	60fb      	str	r3, [r7, #12]
 800bafc:	e7fe      	b.n	800bafc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800bafe:	f000 fd4d 	bl	800c59c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb02:	4b1d      	ldr	r3, [pc, #116]	; (800bb78 <xTaskCheckForTimeOut+0xb8>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	685b      	ldr	r3, [r3, #4]
 800bb0c:	69ba      	ldr	r2, [r7, #24]
 800bb0e:	1ad3      	subs	r3, r2, r3
 800bb10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb1a:	d102      	bne.n	800bb22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	e023      	b.n	800bb6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b15      	ldr	r3, [pc, #84]	; (800bb7c <xTaskCheckForTimeOut+0xbc>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d007      	beq.n	800bb3e <xTaskCheckForTimeOut+0x7e>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	685b      	ldr	r3, [r3, #4]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d302      	bcc.n	800bb3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	61fb      	str	r3, [r7, #28]
 800bb3c:	e015      	b.n	800bb6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	697a      	ldr	r2, [r7, #20]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d20b      	bcs.n	800bb60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	1ad2      	subs	r2, r2, r3
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7ff ff9d 	bl	800ba94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	61fb      	str	r3, [r7, #28]
 800bb5e:	e004      	b.n	800bb6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb66:	2301      	movs	r3, #1
 800bb68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb6a:	f000 fd45 	bl	800c5f8 <vPortExitCritical>

	return xReturn;
 800bb6e:	69fb      	ldr	r3, [r7, #28]
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3720      	adds	r7, #32
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}
 800bb78:	20002600 	.word	0x20002600
 800bb7c:	20002614 	.word	0x20002614

0800bb80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb80:	b480      	push	{r7}
 800bb82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb84:	4b03      	ldr	r3, [pc, #12]	; (800bb94 <vTaskMissedYield+0x14>)
 800bb86:	2201      	movs	r2, #1
 800bb88:	601a      	str	r2, [r3, #0]
}
 800bb8a:	bf00      	nop
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr
 800bb94:	20002610 	.word	0x20002610

0800bb98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bba0:	f000 f852 	bl	800bc48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bba4:	4b06      	ldr	r3, [pc, #24]	; (800bbc0 <prvIdleTask+0x28>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d9f9      	bls.n	800bba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbac:	4b05      	ldr	r3, [pc, #20]	; (800bbc4 <prvIdleTask+0x2c>)
 800bbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbbc:	e7f0      	b.n	800bba0 <prvIdleTask+0x8>
 800bbbe:	bf00      	nop
 800bbc0:	20002500 	.word	0x20002500
 800bbc4:	e000ed04 	.word	0xe000ed04

0800bbc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbce:	2300      	movs	r3, #0
 800bbd0:	607b      	str	r3, [r7, #4]
 800bbd2:	e00c      	b.n	800bbee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	4613      	mov	r3, r2
 800bbd8:	009b      	lsls	r3, r3, #2
 800bbda:	4413      	add	r3, r2
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	4a12      	ldr	r2, [pc, #72]	; (800bc28 <prvInitialiseTaskLists+0x60>)
 800bbe0:	4413      	add	r3, r2
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe faa8 	bl	800a138 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3301      	adds	r3, #1
 800bbec:	607b      	str	r3, [r7, #4]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b06      	cmp	r3, #6
 800bbf2:	d9ef      	bls.n	800bbd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbf4:	480d      	ldr	r0, [pc, #52]	; (800bc2c <prvInitialiseTaskLists+0x64>)
 800bbf6:	f7fe fa9f 	bl	800a138 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbfa:	480d      	ldr	r0, [pc, #52]	; (800bc30 <prvInitialiseTaskLists+0x68>)
 800bbfc:	f7fe fa9c 	bl	800a138 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc00:	480c      	ldr	r0, [pc, #48]	; (800bc34 <prvInitialiseTaskLists+0x6c>)
 800bc02:	f7fe fa99 	bl	800a138 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc06:	480c      	ldr	r0, [pc, #48]	; (800bc38 <prvInitialiseTaskLists+0x70>)
 800bc08:	f7fe fa96 	bl	800a138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc0c:	480b      	ldr	r0, [pc, #44]	; (800bc3c <prvInitialiseTaskLists+0x74>)
 800bc0e:	f7fe fa93 	bl	800a138 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc12:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <prvInitialiseTaskLists+0x78>)
 800bc14:	4a05      	ldr	r2, [pc, #20]	; (800bc2c <prvInitialiseTaskLists+0x64>)
 800bc16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc18:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <prvInitialiseTaskLists+0x7c>)
 800bc1a:	4a05      	ldr	r2, [pc, #20]	; (800bc30 <prvInitialiseTaskLists+0x68>)
 800bc1c:	601a      	str	r2, [r3, #0]
}
 800bc1e:	bf00      	nop
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
 800bc26:	bf00      	nop
 800bc28:	20002500 	.word	0x20002500
 800bc2c:	2000258c 	.word	0x2000258c
 800bc30:	200025a0 	.word	0x200025a0
 800bc34:	200025bc 	.word	0x200025bc
 800bc38:	200025d0 	.word	0x200025d0
 800bc3c:	200025e8 	.word	0x200025e8
 800bc40:	200025b4 	.word	0x200025b4
 800bc44:	200025b8 	.word	0x200025b8

0800bc48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc4e:	e019      	b.n	800bc84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc50:	f000 fca4 	bl	800c59c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc54:	4b0f      	ldr	r3, [pc, #60]	; (800bc94 <prvCheckTasksWaitingTermination+0x4c>)
 800bc56:	68db      	ldr	r3, [r3, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	3304      	adds	r3, #4
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7fe faf3 	bl	800a24c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <prvCheckTasksWaitingTermination+0x50>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3b01      	subs	r3, #1
 800bc6c:	4a0a      	ldr	r2, [pc, #40]	; (800bc98 <prvCheckTasksWaitingTermination+0x50>)
 800bc6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc70:	4b0a      	ldr	r3, [pc, #40]	; (800bc9c <prvCheckTasksWaitingTermination+0x54>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	3b01      	subs	r3, #1
 800bc76:	4a09      	ldr	r2, [pc, #36]	; (800bc9c <prvCheckTasksWaitingTermination+0x54>)
 800bc78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc7a:	f000 fcbd 	bl	800c5f8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 f80e 	bl	800bca0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc84:	4b05      	ldr	r3, [pc, #20]	; (800bc9c <prvCheckTasksWaitingTermination+0x54>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d1e1      	bne.n	800bc50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	200025d0 	.word	0x200025d0
 800bc98:	200025fc 	.word	0x200025fc
 800bc9c:	200025e4 	.word	0x200025e4

0800bca0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d108      	bne.n	800bcc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 fe4c 	bl	800c954 <vPortFree>
				vPortFree( pxTCB );
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f000 fe49 	bl	800c954 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcc2:	e017      	b.n	800bcf4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcca:	2b01      	cmp	r3, #1
 800bccc:	d103      	bne.n	800bcd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f000 fe40 	bl	800c954 <vPortFree>
	}
 800bcd4:	e00e      	b.n	800bcf4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d009      	beq.n	800bcf4 <prvDeleteTCB+0x54>
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	60fb      	str	r3, [r7, #12]
 800bcf2:	e7fe      	b.n	800bcf2 <prvDeleteTCB+0x52>
	}
 800bcf4:	bf00      	nop
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd02:	4b0c      	ldr	r3, [pc, #48]	; (800bd34 <prvResetNextTaskUnblockTime+0x38>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd0c:	4b0a      	ldr	r3, [pc, #40]	; (800bd38 <prvResetNextTaskUnblockTime+0x3c>)
 800bd0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bd12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd14:	e008      	b.n	800bd28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd16:	4b07      	ldr	r3, [pc, #28]	; (800bd34 <prvResetNextTaskUnblockTime+0x38>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	68db      	ldr	r3, [r3, #12]
 800bd1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	685b      	ldr	r3, [r3, #4]
 800bd24:	4a04      	ldr	r2, [pc, #16]	; (800bd38 <prvResetNextTaskUnblockTime+0x3c>)
 800bd26:	6013      	str	r3, [r2, #0]
}
 800bd28:	bf00      	nop
 800bd2a:	370c      	adds	r7, #12
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr
 800bd34:	200025b4 	.word	0x200025b4
 800bd38:	2000261c 	.word	0x2000261c

0800bd3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd42:	4b0b      	ldr	r3, [pc, #44]	; (800bd70 <xTaskGetSchedulerState+0x34>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d102      	bne.n	800bd50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	607b      	str	r3, [r7, #4]
 800bd4e:	e008      	b.n	800bd62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd50:	4b08      	ldr	r3, [pc, #32]	; (800bd74 <xTaskGetSchedulerState+0x38>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d102      	bne.n	800bd5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd58:	2302      	movs	r3, #2
 800bd5a:	607b      	str	r3, [r7, #4]
 800bd5c:	e001      	b.n	800bd62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd62:	687b      	ldr	r3, [r7, #4]
	}
 800bd64:	4618      	mov	r0, r3
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	20002608 	.word	0x20002608
 800bd74:	20002624 	.word	0x20002624

0800bd78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b084      	sub	sp, #16
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd84:	2300      	movs	r3, #0
 800bd86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d069      	beq.n	800be62 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd92:	4b36      	ldr	r3, [pc, #216]	; (800be6c <xTaskPriorityInherit+0xf4>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd98:	429a      	cmp	r2, r3
 800bd9a:	d259      	bcs.n	800be50 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	699b      	ldr	r3, [r3, #24]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	db06      	blt.n	800bdb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bda4:	4b31      	ldr	r3, [pc, #196]	; (800be6c <xTaskPriorityInherit+0xf4>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	f1c3 0207 	rsb	r2, r3, #7
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	6959      	ldr	r1, [r3, #20]
 800bdb6:	68bb      	ldr	r3, [r7, #8]
 800bdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4a2b      	ldr	r2, [pc, #172]	; (800be70 <xTaskPriorityInherit+0xf8>)
 800bdc4:	4413      	add	r3, r2
 800bdc6:	4299      	cmp	r1, r3
 800bdc8:	d13a      	bne.n	800be40 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	3304      	adds	r3, #4
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f7fe fa3c 	bl	800a24c <uxListRemove>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d115      	bne.n	800be06 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdde:	4924      	ldr	r1, [pc, #144]	; (800be70 <xTaskPriorityInherit+0xf8>)
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	440b      	add	r3, r1
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10a      	bne.n	800be06 <xTaskPriorityInherit+0x8e>
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfa:	43da      	mvns	r2, r3
 800bdfc:	4b1d      	ldr	r3, [pc, #116]	; (800be74 <xTaskPriorityInherit+0xfc>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	4013      	ands	r3, r2
 800be02:	4a1c      	ldr	r2, [pc, #112]	; (800be74 <xTaskPriorityInherit+0xfc>)
 800be04:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be06:	4b19      	ldr	r3, [pc, #100]	; (800be6c <xTaskPriorityInherit+0xf4>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be14:	2201      	movs	r2, #1
 800be16:	409a      	lsls	r2, r3
 800be18:	4b16      	ldr	r3, [pc, #88]	; (800be74 <xTaskPriorityInherit+0xfc>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	4a15      	ldr	r2, [pc, #84]	; (800be74 <xTaskPriorityInherit+0xfc>)
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be26:	4613      	mov	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	009b      	lsls	r3, r3, #2
 800be2e:	4a10      	ldr	r2, [pc, #64]	; (800be70 <xTaskPriorityInherit+0xf8>)
 800be30:	441a      	add	r2, r3
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	3304      	adds	r3, #4
 800be36:	4619      	mov	r1, r3
 800be38:	4610      	mov	r0, r2
 800be3a:	f7fe f9aa 	bl	800a192 <vListInsertEnd>
 800be3e:	e004      	b.n	800be4a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be40:	4b0a      	ldr	r3, [pc, #40]	; (800be6c <xTaskPriorityInherit+0xf4>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be4a:	2301      	movs	r3, #1
 800be4c:	60fb      	str	r3, [r7, #12]
 800be4e:	e008      	b.n	800be62 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be54:	4b05      	ldr	r3, [pc, #20]	; (800be6c <xTaskPriorityInherit+0xf4>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d201      	bcs.n	800be62 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be5e:	2301      	movs	r3, #1
 800be60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be62:	68fb      	ldr	r3, [r7, #12]
	}
 800be64:	4618      	mov	r0, r3
 800be66:	3710      	adds	r7, #16
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	200024fc 	.word	0x200024fc
 800be70:	20002500 	.word	0x20002500
 800be74:	20002604 	.word	0x20002604

0800be78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be84:	2300      	movs	r3, #0
 800be86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d06c      	beq.n	800bf68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be8e:	4b39      	ldr	r3, [pc, #228]	; (800bf74 <xTaskPriorityDisinherit+0xfc>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	693a      	ldr	r2, [r7, #16]
 800be94:	429a      	cmp	r2, r3
 800be96:	d009      	beq.n	800beac <xTaskPriorityDisinherit+0x34>
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	60fb      	str	r3, [r7, #12]
 800beaa:	e7fe      	b.n	800beaa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d109      	bne.n	800bec8 <xTaskPriorityDisinherit+0x50>
 800beb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb8:	f383 8811 	msr	BASEPRI, r3
 800bebc:	f3bf 8f6f 	isb	sy
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	60bb      	str	r3, [r7, #8]
 800bec6:	e7fe      	b.n	800bec6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800becc:	1e5a      	subs	r2, r3, #1
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beda:	429a      	cmp	r2, r3
 800bedc:	d044      	beq.n	800bf68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d140      	bne.n	800bf68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	3304      	adds	r3, #4
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe f9ae 	bl	800a24c <uxListRemove>
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d115      	bne.n	800bf22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befa:	491f      	ldr	r1, [pc, #124]	; (800bf78 <xTaskPriorityDisinherit+0x100>)
 800befc:	4613      	mov	r3, r2
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	440b      	add	r3, r1
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <xTaskPriorityDisinherit+0xaa>
 800bf0c:	693b      	ldr	r3, [r7, #16]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	2201      	movs	r2, #1
 800bf12:	fa02 f303 	lsl.w	r3, r2, r3
 800bf16:	43da      	mvns	r2, r3
 800bf18:	4b18      	ldr	r3, [pc, #96]	; (800bf7c <xTaskPriorityDisinherit+0x104>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	4013      	ands	r3, r2
 800bf1e:	4a17      	ldr	r2, [pc, #92]	; (800bf7c <xTaskPriorityDisinherit+0x104>)
 800bf20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf2e:	f1c3 0207 	rsb	r2, r3, #7
 800bf32:	693b      	ldr	r3, [r7, #16]
 800bf34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	409a      	lsls	r2, r3
 800bf3e:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <xTaskPriorityDisinherit+0x104>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	4a0d      	ldr	r2, [pc, #52]	; (800bf7c <xTaskPriorityDisinherit+0x104>)
 800bf46:	6013      	str	r3, [r2, #0]
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	4413      	add	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4a08      	ldr	r2, [pc, #32]	; (800bf78 <xTaskPriorityDisinherit+0x100>)
 800bf56:	441a      	add	r2, r3
 800bf58:	693b      	ldr	r3, [r7, #16]
 800bf5a:	3304      	adds	r3, #4
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	4610      	mov	r0, r2
 800bf60:	f7fe f917 	bl	800a192 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf64:	2301      	movs	r3, #1
 800bf66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf68:	697b      	ldr	r3, [r7, #20]
	}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200024fc 	.word	0x200024fc
 800bf78:	20002500 	.word	0x20002500
 800bf7c:	20002604 	.word	0x20002604

0800bf80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b088      	sub	sp, #32
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf8e:	2301      	movs	r3, #1
 800bf90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 8081 	beq.w	800c09c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf9a:	69bb      	ldr	r3, [r7, #24]
 800bf9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d109      	bne.n	800bfb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e7fe      	b.n	800bfb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfba:	683a      	ldr	r2, [r7, #0]
 800bfbc:	429a      	cmp	r2, r3
 800bfbe:	d902      	bls.n	800bfc6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	61fb      	str	r3, [r7, #28]
 800bfc4:	e002      	b.n	800bfcc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd0:	69fa      	ldr	r2, [r7, #28]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d062      	beq.n	800c09c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfda:	697a      	ldr	r2, [r7, #20]
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d15d      	bne.n	800c09c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bfe0:	4b30      	ldr	r3, [pc, #192]	; (800c0a4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	69ba      	ldr	r2, [r7, #24]
 800bfe6:	429a      	cmp	r2, r3
 800bfe8:	d109      	bne.n	800bffe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800bfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	60bb      	str	r3, [r7, #8]
 800bffc:	e7fe      	b.n	800bffc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c002:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	69fa      	ldr	r2, [r7, #28]
 800c008:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	db04      	blt.n	800c01c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	f1c3 0207 	rsb	r2, r3, #7
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	6959      	ldr	r1, [r3, #20]
 800c020:	693a      	ldr	r2, [r7, #16]
 800c022:	4613      	mov	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4413      	add	r3, r2
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	4a1f      	ldr	r2, [pc, #124]	; (800c0a8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c02c:	4413      	add	r3, r2
 800c02e:	4299      	cmp	r1, r3
 800c030:	d134      	bne.n	800c09c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c032:	69bb      	ldr	r3, [r7, #24]
 800c034:	3304      	adds	r3, #4
 800c036:	4618      	mov	r0, r3
 800c038:	f7fe f908 	bl	800a24c <uxListRemove>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d115      	bne.n	800c06e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c046:	4918      	ldr	r1, [pc, #96]	; (800c0a8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c048:	4613      	mov	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10a      	bne.n	800c06e <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c058:	69bb      	ldr	r3, [r7, #24]
 800c05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05c:	2201      	movs	r2, #1
 800c05e:	fa02 f303 	lsl.w	r3, r2, r3
 800c062:	43da      	mvns	r2, r3
 800c064:	4b11      	ldr	r3, [pc, #68]	; (800c0ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	4013      	ands	r3, r2
 800c06a:	4a10      	ldr	r2, [pc, #64]	; (800c0ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c06c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c072:	2201      	movs	r2, #1
 800c074:	409a      	lsls	r2, r3
 800c076:	4b0d      	ldr	r3, [pc, #52]	; (800c0ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4313      	orrs	r3, r2
 800c07c:	4a0b      	ldr	r2, [pc, #44]	; (800c0ac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c07e:	6013      	str	r3, [r2, #0]
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c084:	4613      	mov	r3, r2
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	4413      	add	r3, r2
 800c08a:	009b      	lsls	r3, r3, #2
 800c08c:	4a06      	ldr	r2, [pc, #24]	; (800c0a8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c08e:	441a      	add	r2, r3
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	3304      	adds	r3, #4
 800c094:	4619      	mov	r1, r3
 800c096:	4610      	mov	r0, r2
 800c098:	f7fe f87b 	bl	800a192 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c09c:	bf00      	nop
 800c09e:	3720      	adds	r7, #32
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	200024fc 	.word	0x200024fc
 800c0a8:	20002500 	.word	0x20002500
 800c0ac:	20002604 	.word	0x20002604

0800c0b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c0b0:	b480      	push	{r7}
 800c0b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c0b4:	4b07      	ldr	r3, [pc, #28]	; (800c0d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d004      	beq.n	800c0c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c0bc:	4b05      	ldr	r3, [pc, #20]	; (800c0d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0c2:	3201      	adds	r2, #1
 800c0c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c0c6:	4b03      	ldr	r3, [pc, #12]	; (800c0d4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
	}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr
 800c0d4:	200024fc 	.word	0x200024fc

0800c0d8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c0e2:	f000 fa5b 	bl	800c59c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c0e6:	4b1e      	ldr	r3, [pc, #120]	; (800c160 <ulTaskNotifyTake+0x88>)
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d113      	bne.n	800c118 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c0f0:	4b1b      	ldr	r3, [pc, #108]	; (800c160 <ulTaskNotifyTake+0x88>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c100:	2101      	movs	r1, #1
 800c102:	6838      	ldr	r0, [r7, #0]
 800c104:	f000 f8be 	bl	800c284 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c108:	4b16      	ldr	r3, [pc, #88]	; (800c164 <ulTaskNotifyTake+0x8c>)
 800c10a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c10e:	601a      	str	r2, [r3, #0]
 800c110:	f3bf 8f4f 	dsb	sy
 800c114:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c118:	f000 fa6e 	bl	800c5f8 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c11c:	f000 fa3e 	bl	800c59c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c120:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <ulTaskNotifyTake+0x88>)
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c126:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d004      	beq.n	800c13e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c134:	4b0a      	ldr	r3, [pc, #40]	; (800c160 <ulTaskNotifyTake+0x88>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	2200      	movs	r2, #0
 800c13a:	64da      	str	r2, [r3, #76]	; 0x4c
 800c13c:	e004      	b.n	800c148 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c13e:	4b08      	ldr	r3, [pc, #32]	; (800c160 <ulTaskNotifyTake+0x88>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	3a01      	subs	r2, #1
 800c146:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c148:	4b05      	ldr	r3, [pc, #20]	; (800c160 <ulTaskNotifyTake+0x88>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800c152:	f000 fa51 	bl	800c5f8 <vPortExitCritical>

		return ulReturn;
 800c156:	68fb      	ldr	r3, [r7, #12]
	}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}
 800c160:	200024fc 	.word	0x200024fc
 800c164:	e000ed04 	.word	0xe000ed04

0800c168 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b08a      	sub	sp, #40	; 0x28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d109      	bne.n	800c18c <vTaskNotifyGiveFromISR+0x24>
 800c178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c17c:	f383 8811 	msr	BASEPRI, r3
 800c180:	f3bf 8f6f 	isb	sy
 800c184:	f3bf 8f4f 	dsb	sy
 800c188:	61bb      	str	r3, [r7, #24]
 800c18a:	e7fe      	b.n	800c18a <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c18c:	f000 fae2 	bl	800c754 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c194:	f3ef 8211 	mrs	r2, BASEPRI
 800c198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c19c:	f383 8811 	msr	BASEPRI, r3
 800c1a0:	f3bf 8f6f 	isb	sy
 800c1a4:	f3bf 8f4f 	dsb	sy
 800c1a8:	617a      	str	r2, [r7, #20]
 800c1aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c1ac:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c1ae:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c1b6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c4:	1c5a      	adds	r2, r3, #1
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c8:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c1ca:	7ffb      	ldrb	r3, [r7, #31]
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d144      	bne.n	800c25a <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d009      	beq.n	800c1ec <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 800c1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1dc:	f383 8811 	msr	BASEPRI, r3
 800c1e0:	f3bf 8f6f 	isb	sy
 800c1e4:	f3bf 8f4f 	dsb	sy
 800c1e8:	60fb      	str	r3, [r7, #12]
 800c1ea:	e7fe      	b.n	800c1ea <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1ec:	4b1f      	ldr	r3, [pc, #124]	; (800c26c <vTaskNotifyGiveFromISR+0x104>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d11c      	bne.n	800c22e <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f6:	3304      	adds	r3, #4
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7fe f827 	bl	800a24c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c202:	2201      	movs	r2, #1
 800c204:	409a      	lsls	r2, r3
 800c206:	4b1a      	ldr	r3, [pc, #104]	; (800c270 <vTaskNotifyGiveFromISR+0x108>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	4a18      	ldr	r2, [pc, #96]	; (800c270 <vTaskNotifyGiveFromISR+0x108>)
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c214:	4613      	mov	r3, r2
 800c216:	009b      	lsls	r3, r3, #2
 800c218:	4413      	add	r3, r2
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4a15      	ldr	r2, [pc, #84]	; (800c274 <vTaskNotifyGiveFromISR+0x10c>)
 800c21e:	441a      	add	r2, r3
 800c220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f7fd ffb3 	bl	800a192 <vListInsertEnd>
 800c22c:	e005      	b.n	800c23a <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c230:	3318      	adds	r3, #24
 800c232:	4619      	mov	r1, r3
 800c234:	4810      	ldr	r0, [pc, #64]	; (800c278 <vTaskNotifyGiveFromISR+0x110>)
 800c236:	f7fd ffac 	bl	800a192 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c23c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c23e:	4b0f      	ldr	r3, [pc, #60]	; (800c27c <vTaskNotifyGiveFromISR+0x114>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c244:	429a      	cmp	r2, r3
 800c246:	d908      	bls.n	800c25a <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	2201      	movs	r2, #1
 800c252:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c254:	4b0a      	ldr	r3, [pc, #40]	; (800c280 <vTaskNotifyGiveFromISR+0x118>)
 800c256:	2201      	movs	r2, #1
 800c258:	601a      	str	r2, [r3, #0]
 800c25a:	6a3b      	ldr	r3, [r7, #32]
 800c25c:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c264:	bf00      	nop
 800c266:	3728      	adds	r7, #40	; 0x28
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	20002624 	.word	0x20002624
 800c270:	20002604 	.word	0x20002604
 800c274:	20002500 	.word	0x20002500
 800c278:	200025bc 	.word	0x200025bc
 800c27c:	200024fc 	.word	0x200024fc
 800c280:	20002610 	.word	0x20002610

0800c284 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c28e:	4b29      	ldr	r3, [pc, #164]	; (800c334 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c294:	4b28      	ldr	r3, [pc, #160]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	3304      	adds	r3, #4
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7fd ffd6 	bl	800a24c <uxListRemove>
 800c2a0:	4603      	mov	r3, r0
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d10b      	bne.n	800c2be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c2a6:	4b24      	ldr	r3, [pc, #144]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2ac:	2201      	movs	r2, #1
 800c2ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c2b2:	43da      	mvns	r2, r3
 800c2b4:	4b21      	ldr	r3, [pc, #132]	; (800c33c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4013      	ands	r3, r2
 800c2ba:	4a20      	ldr	r2, [pc, #128]	; (800c33c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c2bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2c4:	d10a      	bne.n	800c2dc <prvAddCurrentTaskToDelayedList+0x58>
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d007      	beq.n	800c2dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2cc:	4b1a      	ldr	r3, [pc, #104]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	3304      	adds	r3, #4
 800c2d2:	4619      	mov	r1, r3
 800c2d4:	481a      	ldr	r0, [pc, #104]	; (800c340 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c2d6:	f7fd ff5c 	bl	800a192 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c2da:	e026      	b.n	800c32a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4413      	add	r3, r2
 800c2e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c2e4:	4b14      	ldr	r3, [pc, #80]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d209      	bcs.n	800c308 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c2f4:	4b13      	ldr	r3, [pc, #76]	; (800c344 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	4b0f      	ldr	r3, [pc, #60]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	3304      	adds	r3, #4
 800c2fe:	4619      	mov	r1, r3
 800c300:	4610      	mov	r0, r2
 800c302:	f7fd ff6a 	bl	800a1da <vListInsert>
}
 800c306:	e010      	b.n	800c32a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c308:	4b0f      	ldr	r3, [pc, #60]	; (800c348 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c30a:	681a      	ldr	r2, [r3, #0]
 800c30c:	4b0a      	ldr	r3, [pc, #40]	; (800c338 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	3304      	adds	r3, #4
 800c312:	4619      	mov	r1, r3
 800c314:	4610      	mov	r0, r2
 800c316:	f7fd ff60 	bl	800a1da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	429a      	cmp	r2, r3
 800c322:	d202      	bcs.n	800c32a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c324:	4a09      	ldr	r2, [pc, #36]	; (800c34c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	6013      	str	r3, [r2, #0]
}
 800c32a:	bf00      	nop
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	20002600 	.word	0x20002600
 800c338:	200024fc 	.word	0x200024fc
 800c33c:	20002604 	.word	0x20002604
 800c340:	200025e8 	.word	0x200025e8
 800c344:	200025b8 	.word	0x200025b8
 800c348:	200025b4 	.word	0x200025b4
 800c34c:	2000261c 	.word	0x2000261c

0800c350 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	3b04      	subs	r3, #4
 800c360:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c368:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	3b04      	subs	r3, #4
 800c36e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	f023 0201 	bic.w	r2, r3, #1
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	3b04      	subs	r3, #4
 800c37e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c380:	4a0c      	ldr	r2, [pc, #48]	; (800c3b4 <pxPortInitialiseStack+0x64>)
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	3b14      	subs	r3, #20
 800c38a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	3b04      	subs	r3, #4
 800c396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	f06f 0202 	mvn.w	r2, #2
 800c39e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3b20      	subs	r3, #32
 800c3a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3714      	adds	r7, #20
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr
 800c3b4:	0800c3b9 	.word	0x0800c3b9

0800c3b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3be:	2300      	movs	r3, #0
 800c3c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3c2:	4b11      	ldr	r3, [pc, #68]	; (800c408 <prvTaskExitError+0x50>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3ca:	d009      	beq.n	800c3e0 <prvTaskExitError+0x28>
	__asm volatile
 800c3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d0:	f383 8811 	msr	BASEPRI, r3
 800c3d4:	f3bf 8f6f 	isb	sy
 800c3d8:	f3bf 8f4f 	dsb	sy
 800c3dc:	60fb      	str	r3, [r7, #12]
 800c3de:	e7fe      	b.n	800c3de <prvTaskExitError+0x26>
 800c3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3f2:	bf00      	nop
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0fc      	beq.n	800c3f4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	2000000c 	.word	0x2000000c
 800c40c:	00000000 	.word	0x00000000

0800c410 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c410:	4b07      	ldr	r3, [pc, #28]	; (800c430 <pxCurrentTCBConst2>)
 800c412:	6819      	ldr	r1, [r3, #0]
 800c414:	6808      	ldr	r0, [r1, #0]
 800c416:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c41a:	f380 8809 	msr	PSP, r0
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f04f 0000 	mov.w	r0, #0
 800c426:	f380 8811 	msr	BASEPRI, r0
 800c42a:	4770      	bx	lr
 800c42c:	f3af 8000 	nop.w

0800c430 <pxCurrentTCBConst2>:
 800c430:	200024fc 	.word	0x200024fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop

0800c438 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c438:	4808      	ldr	r0, [pc, #32]	; (800c45c <prvPortStartFirstTask+0x24>)
 800c43a:	6800      	ldr	r0, [r0, #0]
 800c43c:	6800      	ldr	r0, [r0, #0]
 800c43e:	f380 8808 	msr	MSP, r0
 800c442:	f04f 0000 	mov.w	r0, #0
 800c446:	f380 8814 	msr	CONTROL, r0
 800c44a:	b662      	cpsie	i
 800c44c:	b661      	cpsie	f
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	df00      	svc	0
 800c458:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c45a:	bf00      	nop
 800c45c:	e000ed08 	.word	0xe000ed08

0800c460 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b086      	sub	sp, #24
 800c464:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c466:	4b44      	ldr	r3, [pc, #272]	; (800c578 <xPortStartScheduler+0x118>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a44      	ldr	r2, [pc, #272]	; (800c57c <xPortStartScheduler+0x11c>)
 800c46c:	4293      	cmp	r3, r2
 800c46e:	d109      	bne.n	800c484 <xPortStartScheduler+0x24>
 800c470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	613b      	str	r3, [r7, #16]
 800c482:	e7fe      	b.n	800c482 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c484:	4b3c      	ldr	r3, [pc, #240]	; (800c578 <xPortStartScheduler+0x118>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a3d      	ldr	r2, [pc, #244]	; (800c580 <xPortStartScheduler+0x120>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d109      	bne.n	800c4a2 <xPortStartScheduler+0x42>
 800c48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c492:	f383 8811 	msr	BASEPRI, r3
 800c496:	f3bf 8f6f 	isb	sy
 800c49a:	f3bf 8f4f 	dsb	sy
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	e7fe      	b.n	800c4a0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4a2:	4b38      	ldr	r3, [pc, #224]	; (800c584 <xPortStartScheduler+0x124>)
 800c4a4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	22ff      	movs	r2, #255	; 0xff
 800c4b2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4bc:	78fb      	ldrb	r3, [r7, #3]
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c4c4:	b2da      	uxtb	r2, r3
 800c4c6:	4b30      	ldr	r3, [pc, #192]	; (800c588 <xPortStartScheduler+0x128>)
 800c4c8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4ca:	4b30      	ldr	r3, [pc, #192]	; (800c58c <xPortStartScheduler+0x12c>)
 800c4cc:	2207      	movs	r2, #7
 800c4ce:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4d0:	e009      	b.n	800c4e6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800c4d2:	4b2e      	ldr	r3, [pc, #184]	; (800c58c <xPortStartScheduler+0x12c>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	4a2c      	ldr	r2, [pc, #176]	; (800c58c <xPortStartScheduler+0x12c>)
 800c4da:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4dc:	78fb      	ldrb	r3, [r7, #3]
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	005b      	lsls	r3, r3, #1
 800c4e2:	b2db      	uxtb	r3, r3
 800c4e4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4e6:	78fb      	ldrb	r3, [r7, #3]
 800c4e8:	b2db      	uxtb	r3, r3
 800c4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ee:	2b80      	cmp	r3, #128	; 0x80
 800c4f0:	d0ef      	beq.n	800c4d2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4f2:	4b26      	ldr	r3, [pc, #152]	; (800c58c <xPortStartScheduler+0x12c>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	f1c3 0307 	rsb	r3, r3, #7
 800c4fa:	2b04      	cmp	r3, #4
 800c4fc:	d009      	beq.n	800c512 <xPortStartScheduler+0xb2>
 800c4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c502:	f383 8811 	msr	BASEPRI, r3
 800c506:	f3bf 8f6f 	isb	sy
 800c50a:	f3bf 8f4f 	dsb	sy
 800c50e:	60bb      	str	r3, [r7, #8]
 800c510:	e7fe      	b.n	800c510 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c512:	4b1e      	ldr	r3, [pc, #120]	; (800c58c <xPortStartScheduler+0x12c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	021b      	lsls	r3, r3, #8
 800c518:	4a1c      	ldr	r2, [pc, #112]	; (800c58c <xPortStartScheduler+0x12c>)
 800c51a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c51c:	4b1b      	ldr	r3, [pc, #108]	; (800c58c <xPortStartScheduler+0x12c>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c524:	4a19      	ldr	r2, [pc, #100]	; (800c58c <xPortStartScheduler+0x12c>)
 800c526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	b2da      	uxtb	r2, r3
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c530:	4b17      	ldr	r3, [pc, #92]	; (800c590 <xPortStartScheduler+0x130>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4a16      	ldr	r2, [pc, #88]	; (800c590 <xPortStartScheduler+0x130>)
 800c536:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c53a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c53c:	4b14      	ldr	r3, [pc, #80]	; (800c590 <xPortStartScheduler+0x130>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a13      	ldr	r2, [pc, #76]	; (800c590 <xPortStartScheduler+0x130>)
 800c542:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c548:	f000 f8d6 	bl	800c6f8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c54c:	4b11      	ldr	r3, [pc, #68]	; (800c594 <xPortStartScheduler+0x134>)
 800c54e:	2200      	movs	r2, #0
 800c550:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c552:	f000 f8f5 	bl	800c740 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c556:	4b10      	ldr	r3, [pc, #64]	; (800c598 <xPortStartScheduler+0x138>)
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	4a0f      	ldr	r2, [pc, #60]	; (800c598 <xPortStartScheduler+0x138>)
 800c55c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c560:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c562:	f7ff ff69 	bl	800c438 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c566:	f7ff f9b5 	bl	800b8d4 <vTaskSwitchContext>
	prvTaskExitError();
 800c56a:	f7ff ff25 	bl	800c3b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c56e:	2300      	movs	r3, #0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3718      	adds	r7, #24
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}
 800c578:	e000ed00 	.word	0xe000ed00
 800c57c:	410fc271 	.word	0x410fc271
 800c580:	410fc270 	.word	0x410fc270
 800c584:	e000e400 	.word	0xe000e400
 800c588:	20002628 	.word	0x20002628
 800c58c:	2000262c 	.word	0x2000262c
 800c590:	e000ed20 	.word	0xe000ed20
 800c594:	2000000c 	.word	0x2000000c
 800c598:	e000ef34 	.word	0xe000ef34

0800c59c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5b4:	4b0e      	ldr	r3, [pc, #56]	; (800c5f0 <vPortEnterCritical+0x54>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	4a0d      	ldr	r2, [pc, #52]	; (800c5f0 <vPortEnterCritical+0x54>)
 800c5bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5be:	4b0c      	ldr	r3, [pc, #48]	; (800c5f0 <vPortEnterCritical+0x54>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d10e      	bne.n	800c5e4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5c6:	4b0b      	ldr	r3, [pc, #44]	; (800c5f4 <vPortEnterCritical+0x58>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d009      	beq.n	800c5e4 <vPortEnterCritical+0x48>
 800c5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d4:	f383 8811 	msr	BASEPRI, r3
 800c5d8:	f3bf 8f6f 	isb	sy
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	603b      	str	r3, [r7, #0]
 800c5e2:	e7fe      	b.n	800c5e2 <vPortEnterCritical+0x46>
	}
}
 800c5e4:	bf00      	nop
 800c5e6:	370c      	adds	r7, #12
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ee:	4770      	bx	lr
 800c5f0:	2000000c 	.word	0x2000000c
 800c5f4:	e000ed04 	.word	0xe000ed04

0800c5f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5fe:	4b11      	ldr	r3, [pc, #68]	; (800c644 <vPortExitCritical+0x4c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d109      	bne.n	800c61a <vPortExitCritical+0x22>
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	607b      	str	r3, [r7, #4]
 800c618:	e7fe      	b.n	800c618 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800c61a:	4b0a      	ldr	r3, [pc, #40]	; (800c644 <vPortExitCritical+0x4c>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	3b01      	subs	r3, #1
 800c620:	4a08      	ldr	r2, [pc, #32]	; (800c644 <vPortExitCritical+0x4c>)
 800c622:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c624:	4b07      	ldr	r3, [pc, #28]	; (800c644 <vPortExitCritical+0x4c>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d104      	bne.n	800c636 <vPortExitCritical+0x3e>
 800c62c:	2300      	movs	r3, #0
 800c62e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c636:	bf00      	nop
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr
 800c642:	bf00      	nop
 800c644:	2000000c 	.word	0x2000000c
	...

0800c650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c650:	f3ef 8009 	mrs	r0, PSP
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	4b15      	ldr	r3, [pc, #84]	; (800c6b0 <pxCurrentTCBConst>)
 800c65a:	681a      	ldr	r2, [r3, #0]
 800c65c:	f01e 0f10 	tst.w	lr, #16
 800c660:	bf08      	it	eq
 800c662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66a:	6010      	str	r0, [r2, #0]
 800c66c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c670:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c674:	f380 8811 	msr	BASEPRI, r0
 800c678:	f3bf 8f4f 	dsb	sy
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f7ff f928 	bl	800b8d4 <vTaskSwitchContext>
 800c684:	f04f 0000 	mov.w	r0, #0
 800c688:	f380 8811 	msr	BASEPRI, r0
 800c68c:	bc09      	pop	{r0, r3}
 800c68e:	6819      	ldr	r1, [r3, #0]
 800c690:	6808      	ldr	r0, [r1, #0]
 800c692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c696:	f01e 0f10 	tst.w	lr, #16
 800c69a:	bf08      	it	eq
 800c69c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6a0:	f380 8809 	msr	PSP, r0
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	f3af 8000 	nop.w

0800c6b0 <pxCurrentTCBConst>:
 800c6b0:	200024fc 	.word	0x200024fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6b4:	bf00      	nop
 800c6b6:	bf00      	nop

0800c6b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6d0:	f7ff f848 	bl	800b764 <xTaskIncrementTick>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d003      	beq.n	800c6e2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6da:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <SysTick_Handler+0x3c>)
 800c6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6e0:	601a      	str	r2, [r3, #0]
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	e000ed04 	.word	0xe000ed04

0800c6f8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6fc:	4b0b      	ldr	r3, [pc, #44]	; (800c72c <vPortSetupTimerInterrupt+0x34>)
 800c6fe:	2200      	movs	r2, #0
 800c700:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c702:	4b0b      	ldr	r3, [pc, #44]	; (800c730 <vPortSetupTimerInterrupt+0x38>)
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c708:	4b0a      	ldr	r3, [pc, #40]	; (800c734 <vPortSetupTimerInterrupt+0x3c>)
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	4a0a      	ldr	r2, [pc, #40]	; (800c738 <vPortSetupTimerInterrupt+0x40>)
 800c70e:	fba2 2303 	umull	r2, r3, r2, r3
 800c712:	099b      	lsrs	r3, r3, #6
 800c714:	4a09      	ldr	r2, [pc, #36]	; (800c73c <vPortSetupTimerInterrupt+0x44>)
 800c716:	3b01      	subs	r3, #1
 800c718:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c71a:	4b04      	ldr	r3, [pc, #16]	; (800c72c <vPortSetupTimerInterrupt+0x34>)
 800c71c:	2207      	movs	r2, #7
 800c71e:	601a      	str	r2, [r3, #0]
}
 800c720:	bf00      	nop
 800c722:	46bd      	mov	sp, r7
 800c724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	e000e010 	.word	0xe000e010
 800c730:	e000e018 	.word	0xe000e018
 800c734:	20000000 	.word	0x20000000
 800c738:	10624dd3 	.word	0x10624dd3
 800c73c:	e000e014 	.word	0xe000e014

0800c740 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c740:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c750 <vPortEnableVFP+0x10>
 800c744:	6801      	ldr	r1, [r0, #0]
 800c746:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c74a:	6001      	str	r1, [r0, #0]
 800c74c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c74e:	bf00      	nop
 800c750:	e000ed88 	.word	0xe000ed88

0800c754 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c754:	b480      	push	{r7}
 800c756:	b085      	sub	sp, #20
 800c758:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c75a:	f3ef 8305 	mrs	r3, IPSR
 800c75e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2b0f      	cmp	r3, #15
 800c764:	d913      	bls.n	800c78e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c766:	4a16      	ldr	r2, [pc, #88]	; (800c7c0 <vPortValidateInterruptPriority+0x6c>)
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	4413      	add	r3, r2
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c770:	4b14      	ldr	r3, [pc, #80]	; (800c7c4 <vPortValidateInterruptPriority+0x70>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	7afa      	ldrb	r2, [r7, #11]
 800c776:	429a      	cmp	r2, r3
 800c778:	d209      	bcs.n	800c78e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	607b      	str	r3, [r7, #4]
 800c78c:	e7fe      	b.n	800c78c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c78e:	4b0e      	ldr	r3, [pc, #56]	; (800c7c8 <vPortValidateInterruptPriority+0x74>)
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c796:	4b0d      	ldr	r3, [pc, #52]	; (800c7cc <vPortValidateInterruptPriority+0x78>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d909      	bls.n	800c7b2 <vPortValidateInterruptPriority+0x5e>
 800c79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	603b      	str	r3, [r7, #0]
 800c7b0:	e7fe      	b.n	800c7b0 <vPortValidateInterruptPriority+0x5c>
	}
 800c7b2:	bf00      	nop
 800c7b4:	3714      	adds	r7, #20
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr
 800c7be:	bf00      	nop
 800c7c0:	e000e3f0 	.word	0xe000e3f0
 800c7c4:	20002628 	.word	0x20002628
 800c7c8:	e000ed0c 	.word	0xe000ed0c
 800c7cc:	2000262c 	.word	0x2000262c

0800c7d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b08a      	sub	sp, #40	; 0x28
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c7dc:	f7fe fef6 	bl	800b5cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c7e0:	4b57      	ldr	r3, [pc, #348]	; (800c940 <pvPortMalloc+0x170>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d101      	bne.n	800c7ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7e8:	f000 f90c 	bl	800ca04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7ec:	4b55      	ldr	r3, [pc, #340]	; (800c944 <pvPortMalloc+0x174>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	f040 808c 	bne.w	800c912 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01c      	beq.n	800c83a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800c800:	2208      	movs	r2, #8
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	4413      	add	r3, r2
 800c806:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f003 0307 	and.w	r3, r3, #7
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d013      	beq.n	800c83a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f023 0307 	bic.w	r3, r3, #7
 800c818:	3308      	adds	r3, #8
 800c81a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f003 0307 	and.w	r3, r3, #7
 800c822:	2b00      	cmp	r3, #0
 800c824:	d009      	beq.n	800c83a <pvPortMalloc+0x6a>
 800c826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82a:	f383 8811 	msr	BASEPRI, r3
 800c82e:	f3bf 8f6f 	isb	sy
 800c832:	f3bf 8f4f 	dsb	sy
 800c836:	617b      	str	r3, [r7, #20]
 800c838:	e7fe      	b.n	800c838 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d068      	beq.n	800c912 <pvPortMalloc+0x142>
 800c840:	4b41      	ldr	r3, [pc, #260]	; (800c948 <pvPortMalloc+0x178>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	429a      	cmp	r2, r3
 800c848:	d863      	bhi.n	800c912 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c84a:	4b40      	ldr	r3, [pc, #256]	; (800c94c <pvPortMalloc+0x17c>)
 800c84c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c84e:	4b3f      	ldr	r3, [pc, #252]	; (800c94c <pvPortMalloc+0x17c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c854:	e004      	b.n	800c860 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800c856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c858:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	429a      	cmp	r2, r3
 800c868:	d903      	bls.n	800c872 <pvPortMalloc+0xa2>
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d1f1      	bne.n	800c856 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c872:	4b33      	ldr	r3, [pc, #204]	; (800c940 <pvPortMalloc+0x170>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c878:	429a      	cmp	r2, r3
 800c87a:	d04a      	beq.n	800c912 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c87c:	6a3b      	ldr	r3, [r7, #32]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	2208      	movs	r2, #8
 800c882:	4413      	add	r3, r2
 800c884:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c888:	681a      	ldr	r2, [r3, #0]
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c890:	685a      	ldr	r2, [r3, #4]
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	1ad2      	subs	r2, r2, r3
 800c896:	2308      	movs	r3, #8
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d91e      	bls.n	800c8dc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c89e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	f003 0307 	and.w	r3, r3, #7
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d009      	beq.n	800c8c4 <pvPortMalloc+0xf4>
 800c8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	613b      	str	r3, [r7, #16]
 800c8c2:	e7fe      	b.n	800c8c2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	1ad2      	subs	r2, r2, r3
 800c8cc:	69bb      	ldr	r3, [r7, #24]
 800c8ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	687a      	ldr	r2, [r7, #4]
 800c8d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c8d6:	69b8      	ldr	r0, [r7, #24]
 800c8d8:	f000 f8f6 	bl	800cac8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8dc:	4b1a      	ldr	r3, [pc, #104]	; (800c948 <pvPortMalloc+0x178>)
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	1ad3      	subs	r3, r2, r3
 800c8e6:	4a18      	ldr	r2, [pc, #96]	; (800c948 <pvPortMalloc+0x178>)
 800c8e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8ea:	4b17      	ldr	r3, [pc, #92]	; (800c948 <pvPortMalloc+0x178>)
 800c8ec:	681a      	ldr	r2, [r3, #0]
 800c8ee:	4b18      	ldr	r3, [pc, #96]	; (800c950 <pvPortMalloc+0x180>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d203      	bcs.n	800c8fe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8f6:	4b14      	ldr	r3, [pc, #80]	; (800c948 <pvPortMalloc+0x178>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	4a15      	ldr	r2, [pc, #84]	; (800c950 <pvPortMalloc+0x180>)
 800c8fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	4b10      	ldr	r3, [pc, #64]	; (800c944 <pvPortMalloc+0x174>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	431a      	orrs	r2, r3
 800c908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c90c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90e:	2200      	movs	r2, #0
 800c910:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c912:	f7fe fe69 	bl	800b5e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d009      	beq.n	800c934 <pvPortMalloc+0x164>
 800c920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	60fb      	str	r3, [r7, #12]
 800c932:	e7fe      	b.n	800c932 <pvPortMalloc+0x162>
	return pvReturn;
 800c934:	69fb      	ldr	r3, [r7, #28]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3728      	adds	r7, #40	; 0x28
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}
 800c93e:	bf00      	nop
 800c940:	20006238 	.word	0x20006238
 800c944:	20006244 	.word	0x20006244
 800c948:	2000623c 	.word	0x2000623c
 800c94c:	20006230 	.word	0x20006230
 800c950:	20006240 	.word	0x20006240

0800c954 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b086      	sub	sp, #24
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d046      	beq.n	800c9f4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c966:	2308      	movs	r3, #8
 800c968:	425b      	negs	r3, r3
 800c96a:	697a      	ldr	r2, [r7, #20]
 800c96c:	4413      	add	r3, r2
 800c96e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	4b20      	ldr	r3, [pc, #128]	; (800c9fc <vPortFree+0xa8>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	4013      	ands	r3, r2
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d109      	bne.n	800c996 <vPortFree+0x42>
 800c982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c986:	f383 8811 	msr	BASEPRI, r3
 800c98a:	f3bf 8f6f 	isb	sy
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	60fb      	str	r3, [r7, #12]
 800c994:	e7fe      	b.n	800c994 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d009      	beq.n	800c9b2 <vPortFree+0x5e>
 800c99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	60bb      	str	r3, [r7, #8]
 800c9b0:	e7fe      	b.n	800c9b0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	4b11      	ldr	r3, [pc, #68]	; (800c9fc <vPortFree+0xa8>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	4013      	ands	r3, r2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d019      	beq.n	800c9f4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d115      	bne.n	800c9f4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9c8:	693b      	ldr	r3, [r7, #16]
 800c9ca:	685a      	ldr	r2, [r3, #4]
 800c9cc:	4b0b      	ldr	r3, [pc, #44]	; (800c9fc <vPortFree+0xa8>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	43db      	mvns	r3, r3
 800c9d2:	401a      	ands	r2, r3
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9d8:	f7fe fdf8 	bl	800b5cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	685a      	ldr	r2, [r3, #4]
 800c9e0:	4b07      	ldr	r3, [pc, #28]	; (800ca00 <vPortFree+0xac>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	4a06      	ldr	r2, [pc, #24]	; (800ca00 <vPortFree+0xac>)
 800c9e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9ea:	6938      	ldr	r0, [r7, #16]
 800c9ec:	f000 f86c 	bl	800cac8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c9f0:	f7fe fdfa 	bl	800b5e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9f4:	bf00      	nop
 800c9f6:	3718      	adds	r7, #24
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	20006244 	.word	0x20006244
 800ca00:	2000623c 	.word	0x2000623c

0800ca04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b085      	sub	sp, #20
 800ca08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca0a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ca0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca10:	4b27      	ldr	r3, [pc, #156]	; (800cab0 <prvHeapInit+0xac>)
 800ca12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00c      	beq.n	800ca38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3307      	adds	r3, #7
 800ca22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f023 0307 	bic.w	r3, r3, #7
 800ca2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca2c:	68ba      	ldr	r2, [r7, #8]
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	4a1f      	ldr	r2, [pc, #124]	; (800cab0 <prvHeapInit+0xac>)
 800ca34:	4413      	add	r3, r2
 800ca36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca3c:	4a1d      	ldr	r2, [pc, #116]	; (800cab4 <prvHeapInit+0xb0>)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca42:	4b1c      	ldr	r3, [pc, #112]	; (800cab4 <prvHeapInit+0xb0>)
 800ca44:	2200      	movs	r2, #0
 800ca46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	68ba      	ldr	r2, [r7, #8]
 800ca4c:	4413      	add	r3, r2
 800ca4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca50:	2208      	movs	r2, #8
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	1a9b      	subs	r3, r3, r2
 800ca56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	f023 0307 	bic.w	r3, r3, #7
 800ca5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4a15      	ldr	r2, [pc, #84]	; (800cab8 <prvHeapInit+0xb4>)
 800ca64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca66:	4b14      	ldr	r3, [pc, #80]	; (800cab8 <prvHeapInit+0xb4>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca6e:	4b12      	ldr	r3, [pc, #72]	; (800cab8 <prvHeapInit+0xb4>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	2200      	movs	r2, #0
 800ca74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	1ad2      	subs	r2, r2, r3
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca84:	4b0c      	ldr	r3, [pc, #48]	; (800cab8 <prvHeapInit+0xb4>)
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	4a0a      	ldr	r2, [pc, #40]	; (800cabc <prvHeapInit+0xb8>)
 800ca92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	4a09      	ldr	r2, [pc, #36]	; (800cac0 <prvHeapInit+0xbc>)
 800ca9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca9c:	4b09      	ldr	r3, [pc, #36]	; (800cac4 <prvHeapInit+0xc0>)
 800ca9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800caa2:	601a      	str	r2, [r3, #0]
}
 800caa4:	bf00      	nop
 800caa6:	3714      	adds	r7, #20
 800caa8:	46bd      	mov	sp, r7
 800caaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caae:	4770      	bx	lr
 800cab0:	20002630 	.word	0x20002630
 800cab4:	20006230 	.word	0x20006230
 800cab8:	20006238 	.word	0x20006238
 800cabc:	20006240 	.word	0x20006240
 800cac0:	2000623c 	.word	0x2000623c
 800cac4:	20006244 	.word	0x20006244

0800cac8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cac8:	b480      	push	{r7}
 800caca:	b085      	sub	sp, #20
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cad0:	4b28      	ldr	r3, [pc, #160]	; (800cb74 <prvInsertBlockIntoFreeList+0xac>)
 800cad2:	60fb      	str	r3, [r7, #12]
 800cad4:	e002      	b.n	800cadc <prvInsertBlockIntoFreeList+0x14>
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d8f7      	bhi.n	800cad6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	68ba      	ldr	r2, [r7, #8]
 800caf0:	4413      	add	r3, r2
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d108      	bne.n	800cb0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	685a      	ldr	r2, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	441a      	add	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	685b      	ldr	r3, [r3, #4]
 800cb12:	68ba      	ldr	r2, [r7, #8]
 800cb14:	441a      	add	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	429a      	cmp	r2, r3
 800cb1c:	d118      	bne.n	800cb50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	4b15      	ldr	r3, [pc, #84]	; (800cb78 <prvInsertBlockIntoFreeList+0xb0>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d00d      	beq.n	800cb46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	685a      	ldr	r2, [r3, #4]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	441a      	add	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	601a      	str	r2, [r3, #0]
 800cb44:	e008      	b.n	800cb58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb46:	4b0c      	ldr	r3, [pc, #48]	; (800cb78 <prvInsertBlockIntoFreeList+0xb0>)
 800cb48:	681a      	ldr	r2, [r3, #0]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	601a      	str	r2, [r3, #0]
 800cb4e:	e003      	b.n	800cb58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681a      	ldr	r2, [r3, #0]
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d002      	beq.n	800cb66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	687a      	ldr	r2, [r7, #4]
 800cb64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb66:	bf00      	nop
 800cb68:	3714      	adds	r7, #20
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	20006230 	.word	0x20006230
 800cb78:	20006238 	.word	0x20006238

0800cb7c <__libc_init_array>:
 800cb7c:	b570      	push	{r4, r5, r6, lr}
 800cb7e:	4e0d      	ldr	r6, [pc, #52]	; (800cbb4 <__libc_init_array+0x38>)
 800cb80:	4c0d      	ldr	r4, [pc, #52]	; (800cbb8 <__libc_init_array+0x3c>)
 800cb82:	1ba4      	subs	r4, r4, r6
 800cb84:	10a4      	asrs	r4, r4, #2
 800cb86:	2500      	movs	r5, #0
 800cb88:	42a5      	cmp	r5, r4
 800cb8a:	d109      	bne.n	800cba0 <__libc_init_array+0x24>
 800cb8c:	4e0b      	ldr	r6, [pc, #44]	; (800cbbc <__libc_init_array+0x40>)
 800cb8e:	4c0c      	ldr	r4, [pc, #48]	; (800cbc0 <__libc_init_array+0x44>)
 800cb90:	f000 f82c 	bl	800cbec <_init>
 800cb94:	1ba4      	subs	r4, r4, r6
 800cb96:	10a4      	asrs	r4, r4, #2
 800cb98:	2500      	movs	r5, #0
 800cb9a:	42a5      	cmp	r5, r4
 800cb9c:	d105      	bne.n	800cbaa <__libc_init_array+0x2e>
 800cb9e:	bd70      	pop	{r4, r5, r6, pc}
 800cba0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cba4:	4798      	blx	r3
 800cba6:	3501      	adds	r5, #1
 800cba8:	e7ee      	b.n	800cb88 <__libc_init_array+0xc>
 800cbaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800cbae:	4798      	blx	r3
 800cbb0:	3501      	adds	r5, #1
 800cbb2:	e7f2      	b.n	800cb9a <__libc_init_array+0x1e>
 800cbb4:	0800cea4 	.word	0x0800cea4
 800cbb8:	0800cea4 	.word	0x0800cea4
 800cbbc:	0800cea4 	.word	0x0800cea4
 800cbc0:	0800cea8 	.word	0x0800cea8

0800cbc4 <memcpy>:
 800cbc4:	b510      	push	{r4, lr}
 800cbc6:	1e43      	subs	r3, r0, #1
 800cbc8:	440a      	add	r2, r1
 800cbca:	4291      	cmp	r1, r2
 800cbcc:	d100      	bne.n	800cbd0 <memcpy+0xc>
 800cbce:	bd10      	pop	{r4, pc}
 800cbd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cbd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cbd8:	e7f7      	b.n	800cbca <memcpy+0x6>

0800cbda <memset>:
 800cbda:	4402      	add	r2, r0
 800cbdc:	4603      	mov	r3, r0
 800cbde:	4293      	cmp	r3, r2
 800cbe0:	d100      	bne.n	800cbe4 <memset+0xa>
 800cbe2:	4770      	bx	lr
 800cbe4:	f803 1b01 	strb.w	r1, [r3], #1
 800cbe8:	e7f9      	b.n	800cbde <memset+0x4>
	...

0800cbec <_init>:
 800cbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbee:	bf00      	nop
 800cbf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf2:	bc08      	pop	{r3}
 800cbf4:	469e      	mov	lr, r3
 800cbf6:	4770      	bx	lr

0800cbf8 <_fini>:
 800cbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbfa:	bf00      	nop
 800cbfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbfe:	bc08      	pop	{r3}
 800cc00:	469e      	mov	lr, r3
 800cc02:	4770      	bx	lr
