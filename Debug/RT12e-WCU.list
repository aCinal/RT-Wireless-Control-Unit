
RT12e-WCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000574  0800d384  0800d384  0001d384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8f8  0800d8f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8f8  0800d8f8  0001d8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d900  0800d900  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d900  0800d900  0001d900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d904  0800d904  0001d904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800d908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008668  20000010  0800d918  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008678  0800d918  00028678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213e8  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000046cf  00000000  00000000  00041428  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001cb0  00000000  00000000  00045af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a88  00000000  00000000  000477a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000251e8  00000000  00000000  00049230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018e13  00000000  00000000  0006e418  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4afe  00000000  00000000  0008722b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015bd29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077c8  00000000  00000000  0015bda4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d36c 	.word	0x0800d36c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800d36c 	.word	0x0800d36c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	4a07      	ldr	r2, [pc, #28]	; (800050c <vApplicationGetIdleTaskMemory+0x2c>)
 80004f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	4a06      	ldr	r2, [pc, #24]	; (8000510 <vApplicationGetIdleTaskMemory+0x30>)
 80004f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2280      	movs	r2, #128	; 0x80
 80004fc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000080 	.word	0x20000080

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b0ca      	sub	sp, #296	; 0x128
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f001 ffa9 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f92b 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fb25 	bl	8000b70 <MX_GPIO_Init>
  MX_DMA_Init();
 8000526:	f000 faf3 	bl	8000b10 <MX_DMA_Init>
  MX_CAN1_Init();
 800052a:	f000 f98f 	bl	800084c <MX_CAN1_Init>
  MX_CRC_Init();
 800052e:	f000 f9c3 	bl	80008b8 <MX_CRC_Init>
  MX_IWDG_Init();
 8000532:	f000 f9d5 	bl	80008e0 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 8000536:	f000 f9ed 	bl	8000914 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 800053a:	f000 fa0b 	bl	8000954 <MX_SPI1_Init>
  MX_UART4_Init();
 800053e:	f000 fa3f 	bl	80009c0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000542:	f000 fa67 	bl	8000a14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000546:	f000 fa8f 	bl	8000a68 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800054a:	f000 fab7 	bl	8000abc <MX_USART3_UART_Init>
  MX_FATFS_Init();
 800054e:	f007 f8c7 	bl	80076e0 <MX_FATFS_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of crcMutex */
  osMutexDef(crcMutex);
 8000552:	2300      	movs	r3, #0
 8000554:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000558:	2300      	movs	r3, #0
 800055a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  crcMutexHandle = osMutexCreate(osMutex(crcMutex));
 800055e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000562:	4618      	mov	r0, r3
 8000564:	f009 ff62 	bl	800a42c <osMutexCreate>
 8000568:	4602      	mov	r2, r0
 800056a:	4b6c      	ldr	r3, [pc, #432]	; (800071c <main+0x208>)
 800056c:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of reportToWatchdogQueue */
  osMessageQDef(reportToWatchdogQueue, 16, osThreadId);
 800056e:	4b6c      	ldr	r3, [pc, #432]	; (8000720 <main+0x20c>)
 8000570:	f507 7488 	add.w	r4, r7, #272	; 0x110
 8000574:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000576:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  reportToWatchdogQueueHandle = osMessageCreate(osMessageQ(reportToWatchdogQueue), NULL);
 800057a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800057e:	2100      	movs	r1, #0
 8000580:	4618      	mov	r0, r3
 8000582:	f00a f8ba 	bl	800a6fa <osMessageCreate>
 8000586:	4602      	mov	r2, r0
 8000588:	4b66      	ldr	r3, [pc, #408]	; (8000724 <main+0x210>)
 800058a:	601a      	str	r2, [r3, #0]

  /* definition and creation of canTransmitQueue */
  osMessageQDef(canTransmitQueue, 16, CanFrameTypedef);
 800058c:	4b66      	ldr	r3, [pc, #408]	; (8000728 <main+0x214>)
 800058e:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8000592:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000594:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canTransmitQueueHandle = osMessageCreate(osMessageQ(canTransmitQueue), NULL);
 8000598:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f00a f8ab 	bl	800a6fa <osMessageCreate>
 80005a4:	4602      	mov	r2, r0
 80005a6:	4b61      	ldr	r3, [pc, #388]	; (800072c <main+0x218>)
 80005a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of canReceiveQueue */
  osMessageQDef(canReceiveQueue, 16, CanFrameTypedef);
 80005aa:	4b5f      	ldr	r3, [pc, #380]	; (8000728 <main+0x214>)
 80005ac:	f107 04f0 	add.w	r4, r7, #240	; 0xf0
 80005b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  canReceiveQueueHandle = osMessageCreate(osMessageQ(canReceiveQueue), NULL);
 80005b6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f00a f89c 	bl	800a6fa <osMessageCreate>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4b5a      	ldr	r3, [pc, #360]	; (8000730 <main+0x21c>)
 80005c6:	601a      	str	r2, [r3, #0]

  /* definition and creation of sdioLogErrorQueue */
  osMessageQDef(sdioLogErrorQueue, 16, const char*);
 80005c8:	4b55      	ldr	r3, [pc, #340]	; (8000720 <main+0x20c>)
 80005ca:	f107 04e0 	add.w	r4, r7, #224	; 0xe0
 80005ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sdioLogErrorQueueHandle = osMessageCreate(osMessageQ(sdioLogErrorQueue), NULL);
 80005d4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f00a f88d 	bl	800a6fa <osMessageCreate>
 80005e0:	4602      	mov	r2, r0
 80005e2:	4b54      	ldr	r3, [pc, #336]	; (8000734 <main+0x220>)
 80005e4:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of watchdog */
  osThreadDef(watchdog, StartWatchdogTask, osPriorityNormal, 0, 128);
 80005e6:	4b54      	ldr	r3, [pc, #336]	; (8000738 <main+0x224>)
 80005e8:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80005ec:	461d      	mov	r5, r3
 80005ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  watchdogHandle = osThreadCreate(osThread(watchdog), NULL);
 80005fa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f009 feb3 	bl	800a36c <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b4c      	ldr	r3, [pc, #304]	; (800073c <main+0x228>)
 800060a:	601a      	str	r2, [r3, #0]

  /* definition and creation of btReceive */
  osThreadDef(btReceive, StartBtReceiveTask, osPriorityNormal, 0, 128);
 800060c:	4b4c      	ldr	r3, [pc, #304]	; (8000740 <main+0x22c>)
 800060e:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000612:	461d      	mov	r5, r3
 8000614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000616:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000618:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800061c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  btReceiveHandle = osThreadCreate(osThread(btReceive), NULL);
 8000620:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f009 fea0 	bl	800a36c <osThreadCreate>
 800062c:	4602      	mov	r2, r0
 800062e:	4b45      	ldr	r3, [pc, #276]	; (8000744 <main+0x230>)
 8000630:	601a      	str	r2, [r3, #0]

  /* definition and creation of xbeeSend */
  osThreadDef(xbeeSend, StartXbeeSendTask, osPriorityNormal, 0, 128);
 8000632:	4b45      	ldr	r3, [pc, #276]	; (8000748 <main+0x234>)
 8000634:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000638:	461d      	mov	r5, r3
 800063a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800063c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800063e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000642:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeSendHandle = osThreadCreate(osThread(xbeeSend), NULL);
 8000646:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f009 fe8d 	bl	800a36c <osThreadCreate>
 8000652:	4602      	mov	r2, r0
 8000654:	4b3d      	ldr	r3, [pc, #244]	; (800074c <main+0x238>)
 8000656:	601a      	str	r2, [r3, #0]

  /* definition and creation of xbeeReceive */
  osThreadDef(xbeeReceive, StartXbeeReceiveTask, osPriorityNormal, 0, 128);
 8000658:	4b3d      	ldr	r3, [pc, #244]	; (8000750 <main+0x23c>)
 800065a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800065e:	461d      	mov	r5, r3
 8000660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000668:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  xbeeReceiveHandle = osThreadCreate(osThread(xbeeReceive), NULL);
 800066c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f009 fe7a 	bl	800a36c <osThreadCreate>
 8000678:	4602      	mov	r2, r0
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <main+0x240>)
 800067c:	601a      	str	r2, [r3, #0]

  /* definition and creation of gnssReceive */
  osThreadDef(gnssReceive, StartGnssReceiveTask, osPriorityNormal, 0, 128);
 800067e:	4b36      	ldr	r3, [pc, #216]	; (8000758 <main+0x244>)
 8000680:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000684:	461d      	mov	r5, r3
 8000686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800068a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gnssReceiveHandle = osThreadCreate(osThread(gnssReceive), NULL);
 8000692:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000696:	2100      	movs	r1, #0
 8000698:	4618      	mov	r0, r3
 800069a:	f009 fe67 	bl	800a36c <osThreadCreate>
 800069e:	4602      	mov	r2, r0
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <main+0x248>)
 80006a2:	601a      	str	r2, [r3, #0]

  /* definition and creation of rfReceive */
  osThreadDef(rfReceive, StartRfReceiveTask, osPriorityNormal, 0, 128);
 80006a4:	4b2e      	ldr	r3, [pc, #184]	; (8000760 <main+0x24c>)
 80006a6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006aa:	461d      	mov	r5, r3
 80006ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rfReceiveHandle = osThreadCreate(osThread(rfReceive), NULL);
 80006b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f009 fe54 	bl	800a36c <osThreadCreate>
 80006c4:	4602      	mov	r2, r0
 80006c6:	4b27      	ldr	r3, [pc, #156]	; (8000764 <main+0x250>)
 80006c8:	601a      	str	r2, [r3, #0]

  /* definition and creation of canGatekeeper */
  osThreadDef(canGatekeeper, StartCanGatekeeperTask, osPriorityNormal, 0, 128);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4a26      	ldr	r2, [pc, #152]	; (8000768 <main+0x254>)
 80006d0:	461c      	mov	r4, r3
 80006d2:	4615      	mov	r5, r2
 80006d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  canGatekeeperHandle = osThreadCreate(osThread(canGatekeeper), NULL);
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f009 fe40 	bl	800a36c <osThreadCreate>
 80006ec:	4602      	mov	r2, r0
 80006ee:	4b1f      	ldr	r3, [pc, #124]	; (800076c <main+0x258>)
 80006f0:	601a      	str	r2, [r3, #0]

  /* definition and creation of sdioGatekeeper */
  osThreadDef(sdioGatekeeper, StartSdioGatekeeperTask, osPriorityNormal, 0, 2048);
 80006f2:	463b      	mov	r3, r7
 80006f4:	4a1e      	ldr	r2, [pc, #120]	; (8000770 <main+0x25c>)
 80006f6:	461c      	mov	r4, r3
 80006f8:	4615      	mov	r5, r2
 80006fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000702:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sdioGatekeeperHandle = osThreadCreate(osThread(sdioGatekeeper), NULL);
 8000706:	463b      	mov	r3, r7
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f009 fe2e 	bl	800a36c <osThreadCreate>
 8000710:	4602      	mov	r2, r0
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <main+0x260>)
 8000714:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000716:	f009 fe06 	bl	800a326 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800071a:	e7fe      	b.n	800071a <main+0x206>
 800071c:	200063e4 	.word	0x200063e4
 8000720:	0800d384 	.word	0x0800d384
 8000724:	200062d8 	.word	0x200062d8
 8000728:	0800d394 	.word	0x0800d394
 800072c:	20006510 	.word	0x20006510
 8000730:	2000650c 	.word	0x2000650c
 8000734:	200062bc 	.word	0x200062bc
 8000738:	0800d3b0 	.word	0x0800d3b0
 800073c:	20006278 	.word	0x20006278
 8000740:	0800d3d8 	.word	0x0800d3d8
 8000744:	20006470 	.word	0x20006470
 8000748:	0800d400 	.word	0x0800d400
 800074c:	200062d4 	.word	0x200062d4
 8000750:	0800d428 	.word	0x0800d428
 8000754:	200062dc 	.word	0x200062dc
 8000758:	0800d450 	.word	0x0800d450
 800075c:	200063e8 	.word	0x200063e8
 8000760:	0800d478 	.word	0x0800d478
 8000764:	20006580 	.word	0x20006580
 8000768:	0800d4a4 	.word	0x0800d4a4
 800076c:	20006514 	.word	0x20006514
 8000770:	0800d4d0 	.word	0x0800d4d0
 8000774:	200063e0 	.word	0x200063e0

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f00c fde7 	bl	800d35a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b28      	ldr	r3, [pc, #160]	; (8000844 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a27      	ldr	r2, [pc, #156]	; (8000844 <SystemClock_Config+0xcc>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b25      	ldr	r3, [pc, #148]	; (8000844 <SystemClock_Config+0xcc>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b22      	ldr	r3, [pc, #136]	; (8000848 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a21      	ldr	r2, [pc, #132]	; (8000848 <SystemClock_Config+0xd0>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <SystemClock_Config+0xd0>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80007d4:	230a      	movs	r3, #10
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80007e0:	2301      	movs	r3, #1
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e4:	2302      	movs	r3, #2
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e8:	2300      	movs	r3, #0
 80007ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007ec:	2310      	movs	r3, #16
 80007ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80007f0:	23c0      	movs	r3, #192	; 0xc0
 80007f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007f8:	2304      	movs	r3, #4
 80007fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fc:	f107 0320 	add.w	r3, r7, #32
 8000800:	4618      	mov	r0, r3
 8000802:	f003 f955 	bl	8003ab0 <HAL_RCC_OscConfig>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800080c:	f001 f9d6 	bl	8001bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000814:	2300      	movs	r3, #0
 8000816:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	2100      	movs	r1, #0
 800082a:	4618      	mov	r0, r3
 800082c:	f003 fbb0 	bl	8003f90 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000836:	f001 f9c1 	bl	8001bbc <Error_Handler>
  }
}
 800083a:	bf00      	nop
 800083c:	3750      	adds	r7, #80	; 0x50
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800
 8000848:	40007000 	.word	0x40007000

0800084c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_CAN1_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000858:	2202      	movs	r2, #2
 800085a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_CAN1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_CAN1_Init+0x64>)
 800086a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800086e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000878:	2200      	movs	r2, #0
 800087a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_CAN1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_CAN1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_CAN1_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_CAN1_Init+0x64>)
 800089c:	f001 fe4c 	bl	8002538 <HAL_CAN_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80008a6:	f001 f989 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20006558 	.word	0x20006558
 80008b4:	40006400 	.word	0x40006400

080008b8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_CRC_Init+0x20>)
 80008be:	4a07      	ldr	r2, [pc, #28]	; (80008dc <MX_CRC_Init+0x24>)
 80008c0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_CRC_Init+0x20>)
 80008c4:	f002 fb0c 	bl	8002ee0 <HAL_CRC_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008ce:	f001 f975 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200062cc 	.word	0x200062cc
 80008dc:	40023000 	.word	0x40023000

080008e0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <MX_IWDG_Init+0x2c>)
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <MX_IWDG_Init+0x30>)
 80008e8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80008ea:	4b08      	ldr	r3, [pc, #32]	; (800090c <MX_IWDG_Init+0x2c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <MX_IWDG_Init+0x2c>)
 80008f2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80008f6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_IWDG_Init+0x2c>)
 80008fa:	f003 f890 	bl	8003a1e <HAL_IWDG_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000904:	f001 f95a 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200062c0 	.word	0x200062c0
 8000910:	40003000 	.word	0x40003000

08000914 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SDIO_SD_Init+0x38>)
 800091a:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <MX_SDIO_SD_Init+0x3c>)
 800091c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_SDIO_SD_Init+0x38>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <MX_SDIO_SD_Init+0x38>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	200063ec 	.word	0x200063ec
 8000950:	40012c00 	.word	0x40012c00

08000954 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_SPI1_Init+0x64>)
 800095a:	4a18      	ldr	r2, [pc, #96]	; (80009bc <MX_SPI1_Init+0x68>)
 800095c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800095e:	4b16      	ldr	r3, [pc, #88]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000964:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_SPI1_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000984:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_SPI1_Init+0x64>)
 8000994:	2200      	movs	r2, #0
 8000996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <MX_SPI1_Init+0x64>)
 800099a:	2200      	movs	r2, #0
 800099c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_SPI1_Init+0x64>)
 80009a0:	220a      	movs	r2, #10
 80009a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <MX_SPI1_Init+0x64>)
 80009a6:	f004 ffef 	bl	8005988 <HAL_SPI_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009b0:	f001 f904 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	200064b4 	.word	0x200064b4
 80009bc:	40013000 	.word	0x40013000

080009c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <MX_UART4_Init+0x50>)
 80009c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80009e4:	4b09      	ldr	r3, [pc, #36]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009e6:	220c      	movs	r2, #12
 80009e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ea:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_UART4_Init+0x4c>)
 80009f8:	f005 fa68 	bl	8005ecc <HAL_UART_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000a02:	f001 f8db 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20006474 	.word	0x20006474
 8000a10:	40004c00 	.word	0x40004c00

08000a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <MX_USART1_UART_Init+0x50>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4a:	4805      	ldr	r0, [pc, #20]	; (8000a60 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f005 fa3e 	bl	8005ecc <HAL_UART_Init>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a56:	f001 f8b1 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20006340 	.word	0x20006340
 8000a64:	40011000 	.word	0x40011000

08000a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART2_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f005 fa14 	bl	8005ecc <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f001 f887 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20006518 	.word	0x20006518
 8000ab8:	40004400 	.word	0x40004400

08000abc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ac0:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac2:	4a12      	ldr	r2, [pc, #72]	; (8000b0c <MX_USART3_UART_Init+0x50>)
 8000ac4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ac8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000acc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_USART3_UART_Init+0x4c>)
 8000af4:	f005 f9ea 	bl	8005ecc <HAL_UART_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000afe:	f001 f85d 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000627c 	.word	0x2000627c
 8000b0c:	40004800 	.word	0x40004800

08000b10 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b14      	ldr	r3, [pc, #80]	; (8000b6c <MX_DMA_Init+0x5c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <MX_DMA_Init+0x5c>)
 8000b20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <MX_DMA_Init+0x5c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2105      	movs	r1, #5
 8000b36:	203a      	movs	r0, #58	; 0x3a
 8000b38:	f002 f9a8 	bl	8002e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000b3c:	203a      	movs	r0, #58	; 0x3a
 8000b3e:	f002 f9c1 	bl	8002ec4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2105      	movs	r1, #5
 8000b46:	203b      	movs	r0, #59	; 0x3b
 8000b48:	f002 f9a0 	bl	8002e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000b4c:	203b      	movs	r0, #59	; 0x3b
 8000b4e:	f002 f9b9 	bl	8002ec4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2105      	movs	r1, #5
 8000b56:	2045      	movs	r0, #69	; 0x45
 8000b58:	f002 f998 	bl	8002e8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000b5c:	2045      	movs	r0, #69	; 0x45
 8000b5e:	f002 f9b1 	bl	8002ec4 <HAL_NVIC_EnableIRQ>

}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800

08000b70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 0314 	add.w	r3, r7, #20
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b46      	ldr	r3, [pc, #280]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a45      	ldr	r2, [pc, #276]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a3e      	ldr	r2, [pc, #248]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a37      	ldr	r2, [pc, #220]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b31      	ldr	r3, [pc, #196]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	4a30      	ldr	r2, [pc, #192]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000be4:	f043 0308 	orr.w	r3, r3, #8
 8000be8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bea:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <MX_GPIO_Init+0x134>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	f003 0308 	and.w	r3, r3, #8
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2108      	movs	r1, #8
 8000bfa:	482b      	ldr	r0, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0x138>)
 8000bfc:	f002 fef6 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI1_CSN_GPIO_Port, RF_SPI1_CSN_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2110      	movs	r1, #16
 8000c04:	4829      	ldr	r0, [pc, #164]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000c06:	f002 fef1 	bl	80039ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_PWR_UP_Pin|RF_TRX_CE_Pin|RF_TX_EN_Pin|GNSS_FORCE_ON_Pin 
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f243 0134 	movw	r1, #12340	; 0x3034
 8000c10:	4827      	ldr	r0, [pc, #156]	; (8000cb0 <MX_GPIO_Init+0x140>)
 8000c12:	f002 feeb 	bl	80039ec <HAL_GPIO_WritePin>
                          |GNSS_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : XBEE_RSSI_Pin RF_DR_Pin RF_AM_Pin */
  GPIO_InitStruct.Pin = XBEE_RSSI_Pin|RF_DR_Pin|RF_AM_Pin;
 8000c16:	2334      	movs	r3, #52	; 0x34
 8000c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4619      	mov	r1, r3
 8000c28:	481f      	ldr	r0, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0x138>)
 8000c2a:	f002 fd45 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : XBEE_RESET_Pin */
  GPIO_InitStruct.Pin = XBEE_RESET_Pin;
 8000c2e:	2308      	movs	r3, #8
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(XBEE_RESET_GPIO_Port, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4818      	ldr	r0, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0x138>)
 8000c46:	f002 fd37 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SPI1_CSN_Pin */
  GPIO_InitStruct.Pin = RF_SPI1_CSN_Pin;
 8000c4a:	2310      	movs	r3, #16
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI1_CSN_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0314 	add.w	r3, r7, #20
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_GPIO_Init+0x13c>)
 8000c62:	f002 fd29 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_CD_Pin RF_uPCLK_Pin GNSS_1PPS_Pin */
  GPIO_InitStruct.Pin = RF_CD_Pin|RF_uPCLK_Pin|GNSS_1PPS_Pin;
 8000c66:	230b      	movs	r3, #11
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <MX_GPIO_Init+0x140>)
 8000c7a:	f002 fd1d 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RF_PWR_UP_Pin RF_TRX_CE_Pin RF_TX_EN_Pin GNSS_FORCE_ON_Pin 
                           GNSS_RESET_Pin */
  GPIO_InitStruct.Pin = RF_PWR_UP_Pin|RF_TRX_CE_Pin|RF_TX_EN_Pin|GNSS_FORCE_ON_Pin 
 8000c7e:	f243 0334 	movw	r3, #12340	; 0x3034
 8000c82:	617b      	str	r3, [r7, #20]
                          |GNSS_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4806      	ldr	r0, [pc, #24]	; (8000cb0 <MX_GPIO_Init+0x140>)
 8000c98:	f002 fd0e 	bl	80036b8 <HAL_GPIO_Init>

}
 8000c9c:	bf00      	nop
 8000c9e:	3728      	adds	r7, #40	; 0x28
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020800 	.word	0x40020800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40020400 	.word	0x40020400

08000cb4 <HAL_UART_RxCpltCallback>:
 * @brief  Rx Transfer completed callbacks.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	static BaseType_t dummy; /* Buffer for pxHigherPriorityTaskWoken flag */
	switch ((uint32_t) huart->Instance) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <HAL_UART_RxCpltCallback+0x40>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d00a      	beq.n	8000cdc <HAL_UART_RxCpltCallback+0x28>
 8000cc6:	4a0c      	ldr	r2, [pc, #48]	; (8000cf8 <HAL_UART_RxCpltCallback+0x44>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d000      	beq.n	8000cce <HAL_UART_RxCpltCallback+0x1a>
	case (uint32_t) GNSS_UART_INSTANCE:
		/* Notify gnssReceive task */
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
		break;
	}
}
 8000ccc:	e00d      	b.n	8000cea <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) btReceiveHandle, &dummy);
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_UART_RxCpltCallback+0x48>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	490b      	ldr	r1, [pc, #44]	; (8000d00 <HAL_UART_RxCpltCallback+0x4c>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f00b fe05 	bl	800c8e4 <vTaskNotifyGiveFromISR>
		break;
 8000cda:	e006      	b.n	8000cea <HAL_UART_RxCpltCallback+0x36>
		vTaskNotifyGiveFromISR((TaskHandle_t) gnssReceiveHandle, &dummy);
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <HAL_UART_RxCpltCallback+0x50>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <HAL_UART_RxCpltCallback+0x4c>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f00b fdfe 	bl	800c8e4 <vTaskNotifyGiveFromISR>
		break;
 8000ce8:	bf00      	nop
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40004800 	.word	0x40004800
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	20006470 	.word	0x20006470
 8000d00:	20000280 	.word	0x20000280
 8000d04:	200063e8 	.word	0x200063e8

08000d08 <StartWatchdogTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartWatchdogTask */
void StartWatchdogTask(void const * argument)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08e      	sub	sp, #56	; 0x38
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Initialize the watchdog */
	HAL_IWDG_Init(&hiwdg);
 8000d10:	4847      	ldr	r0, [pc, #284]	; (8000e30 <StartWatchdogTask+0x128>)
 8000d12:	f002 fe84 	bl	8003a1e <HAL_IWDG_Init>

	/* Define key-value pair array for testing threads activity */
	struct {
		osThreadId Id;
		bool Reported;
	} reportSheet[WCU_NUMBER_OF_WATCHED_THREADS ] = { { .Id = btReceiveHandle,
 8000d16:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <StartWatchdogTask+0x12c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	743b      	strb	r3, [r7, #16]
 8000d20:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <StartWatchdogTask+0x130>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	617b      	str	r3, [r7, #20]
 8000d26:	2300      	movs	r3, #0
 8000d28:	763b      	strb	r3, [r7, #24]
 8000d2a:	4b44      	ldr	r3, [pc, #272]	; (8000e3c <StartWatchdogTask+0x134>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	61fb      	str	r3, [r7, #28]
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3020 	strb.w	r3, [r7, #32]
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <StartWatchdogTask+0x138>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8000d42:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <StartWatchdogTask+0x13c>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	bool allReported; /* Flag raised when all watched threads have reported to the watchdog */

	/* Infinite loop */
	for (;;) {
		/* Test for all threads' activity */
		if (pdTRUE == xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000d4e:	4b3e      	ldr	r3, [pc, #248]	; (8000e48 <StartWatchdogTask+0x140>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f107 0108 	add.w	r1, r7, #8
 8000d56:	2200      	movs	r2, #0
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f00a f9fd 	bl	800b158 <xQueueReceive>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d161      	bne.n	8000e28 <StartWatchdogTask+0x120>
		WCU_REPORTTOWATCHDOGQUEUE_RECEIVE_TIMEOUT)) {
			/* Identify the thread that just reported and set the appropriate flag in the report sheet */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d64:	2300      	movs	r3, #0
 8000d66:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d6a:	e018      	b.n	8000d9e <StartWatchdogTask+0x96>
				if (buff == reportSheet[i].Id) {
 8000d6c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d76:	4413      	add	r3, r2
 8000d78:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d108      	bne.n	8000d94 <StartWatchdogTask+0x8c>
					reportSheet[i].Reported = true;
 8000d82:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000d8c:	4413      	add	r3, r2
 8000d8e:	2201      	movs	r2, #1
 8000d90:	f803 2c28 	strb.w	r2, [r3, #-40]
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000d94:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000d98:	3301      	adds	r3, #1
 8000d9a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000d9e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d9e2      	bls.n	8000d6c <StartWatchdogTask+0x64>
				}
			}

			/* Assume all threads reported to the watchdog */
			allReported = true;
 8000da6:	2301      	movs	r3, #1
 8000da8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			/* Test for threads that did not report */
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000dac:	2300      	movs	r3, #0
 8000dae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000db2:	e015      	b.n	8000de0 <StartWatchdogTask+0xd8>
				if (reportSheet[i].Reported == false) {
 8000db4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000dbe:	4413      	add	r3, r2
 8000dc0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000dc4:	f083 0301 	eor.w	r3, r3, #1
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <StartWatchdogTask+0xce>
					/* If a thread did not report to the watchdog, reset the flag and break */
					allReported = false;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					break;
 8000dd4:	e008      	b.n	8000de8 <StartWatchdogTask+0xe0>
			for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i += 1U) {
 8000dd6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000dda:	3301      	adds	r3, #1
 8000ddc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000de0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000de4:	2b04      	cmp	r3, #4
 8000de6:	d9e5      	bls.n	8000db4 <StartWatchdogTask+0xac>
				}
			}

			if (true == allReported) {
 8000de8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d01b      	beq.n	8000e28 <StartWatchdogTask+0x120>
				/* If all threads have reported to the watchdog, refresh the timer */
				HAL_IWDG_Refresh(&hiwdg);
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <StartWatchdogTask+0x128>)
 8000df2:	f002 fe4d 	bl	8003a90 <HAL_IWDG_Refresh>

				/* Reset the report sheet */
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000df6:	2300      	movs	r3, #0
 8000df8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000dfc:	e00d      	b.n	8000e1a <StartWatchdogTask+0x112>
						1U) {
					reportSheet[i].Reported = false;
 8000dfe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e02:	00db      	lsls	r3, r3, #3
 8000e04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e08:	4413      	add	r3, r2
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f803 2c28 	strb.w	r2, [r3, #-40]
				for (uint8_t i = 0U; i < WCU_NUMBER_OF_WATCHED_THREADS ; i +=
 8000e10:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e14:	3301      	adds	r3, #1
 8000e16:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8000e1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000e1e:	2b04      	cmp	r3, #4
 8000e20:	d9ed      	bls.n	8000dfe <StartWatchdogTask+0xf6>
				}

				/* Reset the flag */
				allReported = false;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			}
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f009 faeb 	bl	800a404 <osDelay>
		if (pdTRUE == xQueueReceive(reportToWatchdogQueueHandle, &buff,
 8000e2e:	e78e      	b.n	8000d4e <StartWatchdogTask+0x46>
 8000e30:	200062c0 	.word	0x200062c0
 8000e34:	20006470 	.word	0x20006470
 8000e38:	200062d4 	.word	0x200062d4
 8000e3c:	200063e8 	.word	0x200063e8
 8000e40:	20006580 	.word	0x20006580
 8000e44:	20006514 	.word	0x20006514
 8000e48:	200062d8 	.word	0x200062d8

08000e4c <StartBtReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartBtReceiveTask */
void StartBtReceiveTask(void const * argument)
{
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	static uint16_t readCrc; /* Buffer for the transmitted CRC */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */

	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 8000e54:	2214      	movs	r2, #20
 8000e56:	498e      	ldr	r1, [pc, #568]	; (8001090 <StartBtReceiveTask+0x244>)
 8000e58:	488e      	ldr	r0, [pc, #568]	; (8001094 <StartBtReceiveTask+0x248>)
 8000e5a:	f005 f9c3 	bl	80061e4 <HAL_UART_Receive_DMA>
		WCU_BT_UART_RX_BUFF_SIZE);

		/* Wait for notify from ISR/message received callback */
		if (0UL < ulTaskNotifyTake(pdTRUE,
 8000e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e62:	2001      	movs	r0, #1
 8000e64:	f00b fcf6 	bl	800c854 <ulTaskNotifyTake>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 8181 	beq.w	8001172 <StartBtReceiveTask+0x326>
		WCU_BT_UART_RX_NOTIFY_TAKE_TIMEOUT)) {
			/* Validate the VER and RES/SEQ field */
			if (R3TP_VER0_VER_RES_SEQ_BYTE != btUartRxBuff[0]) {
 8000e70:	4b87      	ldr	r3, [pc, #540]	; (8001090 <StartBtReceiveTask+0x244>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d032      	beq.n	8000ede <StartBtReceiveTask+0x92>
				LOGERROR("Invalid VER/RES/SEQ in btReceive\r\n");
 8000e78:	2022      	movs	r0, #34	; 0x22
 8000e7a:	f00c f869 	bl	800cf50 <pvPortMalloc>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	623b      	str	r3, [r7, #32]
 8000e82:	6a3b      	ldr	r3, [r7, #32]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 81b1 	beq.w	80011ec <StartBtReceiveTask+0x3a0>
 8000e8a:	6a3b      	ldr	r3, [r7, #32]
 8000e8c:	4a82      	ldr	r2, [pc, #520]	; (8001098 <StartBtReceiveTask+0x24c>)
 8000e8e:	4614      	mov	r4, r2
 8000e90:	469c      	mov	ip, r3
 8000e92:	f104 0e20 	add.w	lr, r4, #32
 8000e96:	4665      	mov	r5, ip
 8000e98:	4626      	mov	r6, r4
 8000e9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000e9c:	6028      	str	r0, [r5, #0]
 8000e9e:	6069      	str	r1, [r5, #4]
 8000ea0:	60aa      	str	r2, [r5, #8]
 8000ea2:	60eb      	str	r3, [r5, #12]
 8000ea4:	3410      	adds	r4, #16
 8000ea6:	f10c 0c10 	add.w	ip, ip, #16
 8000eaa:	4574      	cmp	r4, lr
 8000eac:	d1f3      	bne.n	8000e96 <StartBtReceiveTask+0x4a>
 8000eae:	4663      	mov	r3, ip
 8000eb0:	4622      	mov	r2, r4
 8000eb2:	8811      	ldrh	r1, [r2, #0]
 8000eb4:	7892      	ldrb	r2, [r2, #2]
 8000eb6:	8019      	strh	r1, [r3, #0]
 8000eb8:	709a      	strb	r2, [r3, #2]
 8000eba:	4b78      	ldr	r3, [pc, #480]	; (800109c <StartBtReceiveTask+0x250>)
 8000ebc:	6818      	ldr	r0, [r3, #0]
 8000ebe:	f107 0120 	add.w	r1, r7, #32
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	f009 ff2e 	bl	800ad28 <xQueueGenericSend>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	f000 818c 	beq.w	80011ec <StartBtReceiveTask+0x3a0>
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00c f8fc 	bl	800d0d4 <vPortFree>
				continue;
 8000edc:	e186      	b.n	80011ec <StartBtReceiveTask+0x3a0>
			}

			/* Validate the END SEQ field */
			if ((R3TP_END_SEQ_LOW_BYTE
					!= btUartRxBuff[R3TP_VER0_FRAME_SIZE - 2U])
 8000ede:	4b6c      	ldr	r3, [pc, #432]	; (8001090 <StartBtReceiveTask+0x244>)
 8000ee0:	7c9b      	ldrb	r3, [r3, #18]
			if ((R3TP_END_SEQ_LOW_BYTE
 8000ee2:	2bde      	cmp	r3, #222	; 0xde
 8000ee4:	d103      	bne.n	8000eee <StartBtReceiveTask+0xa2>
					|| (R3TP_END_SEQ_HIGH_BYTE
							!= btUartRxBuff[R3TP_VER0_FRAME_SIZE - 1U])) {
 8000ee6:	4b6a      	ldr	r3, [pc, #424]	; (8001090 <StartBtReceiveTask+0x244>)
 8000ee8:	7cdb      	ldrb	r3, [r3, #19]
					|| (R3TP_END_SEQ_HIGH_BYTE
 8000eea:	2bed      	cmp	r3, #237	; 0xed
 8000eec:	d02c      	beq.n	8000f48 <StartBtReceiveTask+0xfc>
				LOGERROR("Invalid END SEQ in btReceive\r\n");
 8000eee:	201e      	movs	r0, #30
 8000ef0:	f00c f82e 	bl	800cf50 <pvPortMalloc>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	61fb      	str	r3, [r7, #28]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8178 	beq.w	80011f0 <StartBtReceiveTask+0x3a4>
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	4a67      	ldr	r2, [pc, #412]	; (80010a0 <StartBtReceiveTask+0x254>)
 8000f04:	461d      	mov	r5, r3
 8000f06:	4614      	mov	r4, r2
 8000f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f0a:	6028      	str	r0, [r5, #0]
 8000f0c:	6069      	str	r1, [r5, #4]
 8000f0e:	60aa      	str	r2, [r5, #8]
 8000f10:	60eb      	str	r3, [r5, #12]
 8000f12:	cc07      	ldmia	r4!, {r0, r1, r2}
 8000f14:	6128      	str	r0, [r5, #16]
 8000f16:	6169      	str	r1, [r5, #20]
 8000f18:	61aa      	str	r2, [r5, #24]
 8000f1a:	8823      	ldrh	r3, [r4, #0]
 8000f1c:	78a2      	ldrb	r2, [r4, #2]
 8000f1e:	83ab      	strh	r3, [r5, #28]
 8000f20:	4613      	mov	r3, r2
 8000f22:	77ab      	strb	r3, [r5, #30]
 8000f24:	4b5d      	ldr	r3, [pc, #372]	; (800109c <StartBtReceiveTask+0x250>)
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	f107 011c 	add.w	r1, r7, #28
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f32:	f009 fef9 	bl	800ad28 <xQueueGenericSend>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f000 8159 	beq.w	80011f0 <StartBtReceiveTask+0x3a4>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f00c f8c7 	bl	800d0d4 <vPortFree>
				continue;
 8000f46:	e153      	b.n	80011f0 <StartBtReceiveTask+0x3a4>
			}

			/* Read CRC - note that the CRC is transmitted as little endian */
			readCrc = READAS16BIT(btUartRxBuff[3], btUartRxBuff[2]);
 8000f48:	4b51      	ldr	r3, [pc, #324]	; (8001090 <StartBtReceiveTask+0x244>)
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b21a      	sxth	r2, r3
 8000f50:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <StartBtReceiveTask+0x244>)
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	b21b      	sxth	r3, r3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <StartBtReceiveTask+0x258>)
 8000f5e:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(btUartRxBuff + 2U, 0x00, 2U);
 8000f60:	4b51      	ldr	r3, [pc, #324]	; (80010a8 <StartBtReceiveTask+0x25c>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f00c f9f7 	bl	800d35a <memset>

			/* Calculate the CRC */
			if (osOK == osMutexWait(crcMutexHandle, WCU_CRCMUTEX_TIMEOUT)) {
 8000f6c:	4b4f      	ldr	r3, [pc, #316]	; (80010ac <StartBtReceiveTask+0x260>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	4618      	mov	r0, r3
 8000f76:	f009 fa71 	bl	800a45c <osMutexWait>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d114      	bne.n	8000faa <StartBtReceiveTask+0x15e>
				calculatedCrc =
						GET16LSBITS(
 8000f80:	2205      	movs	r2, #5
 8000f82:	4943      	ldr	r1, [pc, #268]	; (8001090 <StartBtReceiveTask+0x244>)
 8000f84:	484a      	ldr	r0, [pc, #296]	; (80010b0 <StartBtReceiveTask+0x264>)
 8000f86:	f001 ffc7 	bl	8002f18 <HAL_CRC_Calculate>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	b29a      	uxth	r2, r3
				calculatedCrc =
 8000f8e:	4b49      	ldr	r3, [pc, #292]	; (80010b4 <StartBtReceiveTask+0x268>)
 8000f90:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t*)btUartRxBuff, WCU_BT_UART_RX_BUFF_SIZE / 4U));
				osMutexRelease(crcMutexHandle);
 8000f92:	4b46      	ldr	r3, [pc, #280]	; (80010ac <StartBtReceiveTask+0x260>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f009 faae 	bl	800a4f8 <osMutexRelease>
				LOGERROR("crcMutex timeout in btReceive\r\n");
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 8000f9c:	4b41      	ldr	r3, [pc, #260]	; (80010a4 <StartBtReceiveTask+0x258>)
 8000f9e:	881a      	ldrh	r2, [r3, #0]
 8000fa0:	4b44      	ldr	r3, [pc, #272]	; (80010b4 <StartBtReceiveTask+0x268>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d055      	beq.n	8001054 <StartBtReceiveTask+0x208>
 8000fa8:	e028      	b.n	8000ffc <StartBtReceiveTask+0x1b0>
				LOGERROR("crcMutex timeout in btReceive\r\n");
 8000faa:	201f      	movs	r0, #31
 8000fac:	f00b ffd0 	bl	800cf50 <pvPortMalloc>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	f000 811c 	beq.w	80011f4 <StartBtReceiveTask+0x3a8>
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	4a3e      	ldr	r2, [pc, #248]	; (80010b8 <StartBtReceiveTask+0x26c>)
 8000fc0:	461c      	mov	r4, r3
 8000fc2:	4615      	mov	r5, r2
 8000fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc6:	6020      	str	r0, [r4, #0]
 8000fc8:	6061      	str	r1, [r4, #4]
 8000fca:	60a2      	str	r2, [r4, #8]
 8000fcc:	60e3      	str	r3, [r4, #12]
 8000fce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd0:	6120      	str	r0, [r4, #16]
 8000fd2:	6161      	str	r1, [r4, #20]
 8000fd4:	61a2      	str	r2, [r4, #24]
 8000fd6:	61e3      	str	r3, [r4, #28]
 8000fd8:	4b30      	ldr	r3, [pc, #192]	; (800109c <StartBtReceiveTask+0x250>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	f107 0118 	add.w	r1, r7, #24
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe6:	f009 fe9f 	bl	800ad28 <xQueueGenericSend>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	f000 8101 	beq.w	80011f4 <StartBtReceiveTask+0x3a8>
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f00c f86d 	bl	800d0d4 <vPortFree>
				continue;
 8000ffa:	e0fb      	b.n	80011f4 <StartBtReceiveTask+0x3a8>
				LOGERROR("Invalid CRC in btReceive\r\n");
 8000ffc:	201a      	movs	r0, #26
 8000ffe:	f00b ffa7 	bl	800cf50 <pvPortMalloc>
 8001002:	4603      	mov	r3, r0
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80f5 	beq.w	80011f8 <StartBtReceiveTask+0x3ac>
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	4a2a      	ldr	r2, [pc, #168]	; (80010bc <StartBtReceiveTask+0x270>)
 8001012:	461d      	mov	r5, r3
 8001014:	4614      	mov	r4, r2
 8001016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001018:	6028      	str	r0, [r5, #0]
 800101a:	6069      	str	r1, [r5, #4]
 800101c:	60aa      	str	r2, [r5, #8]
 800101e:	60eb      	str	r3, [r5, #12]
 8001020:	cc03      	ldmia	r4!, {r0, r1}
 8001022:	6128      	str	r0, [r5, #16]
 8001024:	6169      	str	r1, [r5, #20]
 8001026:	8823      	ldrh	r3, [r4, #0]
 8001028:	78a2      	ldrb	r2, [r4, #2]
 800102a:	832b      	strh	r3, [r5, #24]
 800102c:	4613      	mov	r3, r2
 800102e:	76ab      	strb	r3, [r5, #26]
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <StartBtReceiveTask+0x250>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f107 0114 	add.w	r1, r7, #20
 8001038:	2300      	movs	r3, #0
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	f009 fe73 	bl	800ad28 <xQueueGenericSend>
 8001042:	4603      	mov	r3, r0
 8001044:	2b01      	cmp	r3, #1
 8001046:	f000 80d7 	beq.w	80011f8 <StartBtReceiveTask+0x3ac>
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	4618      	mov	r0, r3
 800104e:	f00c f841 	bl	800d0d4 <vPortFree>
				continue;
 8001052:	e0d1      	b.n	80011f8 <StartBtReceiveTask+0x3ac>
			}

			/* Read the CAN ID - note that the CAN ID is transmitted as little endian */
			canFrame.Header.Tx.StdId = READAS32BIT(btUartRxBuff[7],
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <StartBtReceiveTask+0x244>)
 8001056:	79db      	ldrb	r3, [r3, #7]
 8001058:	061a      	lsls	r2, r3, #24
 800105a:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <StartBtReceiveTask+0x244>)
 800105c:	799b      	ldrb	r3, [r3, #6]
 800105e:	041b      	lsls	r3, r3, #16
 8001060:	431a      	orrs	r2, r3
 8001062:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <StartBtReceiveTask+0x244>)
 8001064:	795b      	ldrb	r3, [r3, #5]
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	4313      	orrs	r3, r2
 800106a:	4a09      	ldr	r2, [pc, #36]	; (8001090 <StartBtReceiveTask+0x244>)
 800106c:	7912      	ldrb	r2, [r2, #4]
 800106e:	4313      	orrs	r3, r2
 8001070:	461a      	mov	r2, r3
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <StartBtReceiveTask+0x274>)
 8001074:	605a      	str	r2, [r3, #4]
					btUartRxBuff[6], btUartRxBuff[5], btUartRxBuff[4]);
			/* Read the Data Length Code */
			canFrame.Header.Tx.DLC = (uint32_t) (
					btUartRxBuff[8] < WCU_CAN_PAYLOAD_SIZE ?
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <StartBtReceiveTask+0x244>)
 8001078:	7a1b      	ldrb	r3, [r3, #8]
			canFrame.Header.Tx.DLC = (uint32_t) (
 800107a:	2b08      	cmp	r3, #8
 800107c:	bf28      	it	cs
 800107e:	2308      	movcs	r3, #8
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <StartBtReceiveTask+0x274>)
 8001086:	615a      	str	r2, [r3, #20]
							btUartRxBuff[8] : WCU_CAN_PAYLOAD_SIZE);

			/* Read the payload */
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 8001088:	2300      	movs	r3, #0
 800108a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800108e:	e02b      	b.n	80010e8 <StartBtReceiveTask+0x29c>
 8001090:	20000284 	.word	0x20000284
 8001094:	20006340 	.word	0x20006340
 8001098:	0800d4ec 	.word	0x0800d4ec
 800109c:	200062bc 	.word	0x200062bc
 80010a0:	0800d510 	.word	0x0800d510
 80010a4:	20000298 	.word	0x20000298
 80010a8:	20000286 	.word	0x20000286
 80010ac:	200063e4 	.word	0x200063e4
 80010b0:	200062cc 	.word	0x200062cc
 80010b4:	2000029a 	.word	0x2000029a
 80010b8:	0800d530 	.word	0x0800d530
 80010bc:	0800d550 	.word	0x0800d550
 80010c0:	2000029c 	.word	0x2000029c
				canFrame.Payload[i] = btUartRxBuff[9 + i];
 80010c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010c8:	f103 0209 	add.w	r2, r3, #9
 80010cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d0:	494a      	ldr	r1, [pc, #296]	; (80011fc <StartBtReceiveTask+0x3b0>)
 80010d2:	5c89      	ldrb	r1, [r1, r2]
 80010d4:	4a4a      	ldr	r2, [pc, #296]	; (8001200 <StartBtReceiveTask+0x3b4>)
 80010d6:	4413      	add	r3, r2
 80010d8:	460a      	mov	r2, r1
 80010da:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < canFrame.Header.Tx.DLC; i += 1) {
 80010de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e2:	3301      	adds	r3, #1
 80010e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010ec:	4b44      	ldr	r3, [pc, #272]	; (8001200 <StartBtReceiveTask+0x3b4>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d3e7      	bcc.n	80010c4 <StartBtReceiveTask+0x278>
			}

			/* Push CAN frame to queue */
			if (pdTRUE
					!= xQueueSend(canTransmitQueueHandle, &canFrame,
 80010f4:	4b43      	ldr	r3, [pc, #268]	; (8001204 <StartBtReceiveTask+0x3b8>)
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	f04f 32ff 	mov.w	r2, #4294967295
 80010fe:	4940      	ldr	r1, [pc, #256]	; (8001200 <StartBtReceiveTask+0x3b4>)
 8001100:	f009 fe12 	bl	800ad28 <xQueueGenericSend>
 8001104:	4603      	mov	r3, r0
			if (pdTRUE
 8001106:	2b01      	cmp	r3, #1
 8001108:	d033      	beq.n	8001172 <StartBtReceiveTask+0x326>
							WCU_CANTRANSMITQUEUE_SEND_TIMEOUT)) {
				LOGERROR("btReceive failed to send to canTransmitQueue\r\n");
 800110a:	202e      	movs	r0, #46	; 0x2e
 800110c:	f00b ff20 	bl	800cf50 <pvPortMalloc>
 8001110:	4603      	mov	r3, r0
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d02b      	beq.n	8001172 <StartBtReceiveTask+0x326>
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4a3a      	ldr	r2, [pc, #232]	; (8001208 <StartBtReceiveTask+0x3bc>)
 800111e:	4615      	mov	r5, r2
 8001120:	469c      	mov	ip, r3
 8001122:	f105 0e20 	add.w	lr, r5, #32
 8001126:	4664      	mov	r4, ip
 8001128:	462e      	mov	r6, r5
 800112a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800112c:	6020      	str	r0, [r4, #0]
 800112e:	6061      	str	r1, [r4, #4]
 8001130:	60a2      	str	r2, [r4, #8]
 8001132:	60e3      	str	r3, [r4, #12]
 8001134:	3510      	adds	r5, #16
 8001136:	f10c 0c10 	add.w	ip, ip, #16
 800113a:	4575      	cmp	r5, lr
 800113c:	d1f3      	bne.n	8001126 <StartBtReceiveTask+0x2da>
 800113e:	4664      	mov	r4, ip
 8001140:	462b      	mov	r3, r5
 8001142:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001144:	6020      	str	r0, [r4, #0]
 8001146:	6061      	str	r1, [r4, #4]
 8001148:	60a2      	str	r2, [r4, #8]
 800114a:	881a      	ldrh	r2, [r3, #0]
 800114c:	789b      	ldrb	r3, [r3, #2]
 800114e:	81a2      	strh	r2, [r4, #12]
 8001150:	73a3      	strb	r3, [r4, #14]
 8001152:	4b2e      	ldr	r3, [pc, #184]	; (800120c <StartBtReceiveTask+0x3c0>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	f107 0110 	add.w	r1, r7, #16
 800115a:	2300      	movs	r3, #0
 800115c:	f04f 32ff 	mov.w	r2, #4294967295
 8001160:	f009 fde2 	bl	800ad28 <xQueueGenericSend>
 8001164:	4603      	mov	r3, r0
 8001166:	2b01      	cmp	r3, #1
 8001168:	d003      	beq.n	8001172 <StartBtReceiveTask+0x326>
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4618      	mov	r0, r3
 800116e:	f00b ffb1 	bl	800d0d4 <vPortFree>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &btReceiveHandle,
 8001172:	4b27      	ldr	r3, [pc, #156]	; (8001210 <StartBtReceiveTask+0x3c4>)
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	2300      	movs	r3, #0
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	4925      	ldr	r1, [pc, #148]	; (8001214 <StartBtReceiveTask+0x3c8>)
 800117e:	f009 fdd3 	bl	800ad28 <xQueueGenericSend>
 8001182:	4603      	mov	r3, r0
		if (pdTRUE
 8001184:	2b01      	cmp	r3, #1
 8001186:	d02d      	beq.n	80011e4 <StartBtReceiveTask+0x398>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			LOGERROR("btReceive failed to send to reportToWatchdogQueue\r\n");
 8001188:	2033      	movs	r0, #51	; 0x33
 800118a:	f00b fee1 	bl	800cf50 <pvPortMalloc>
 800118e:	4603      	mov	r3, r0
 8001190:	60fb      	str	r3, [r7, #12]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d025      	beq.n	80011e4 <StartBtReceiveTask+0x398>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4a1f      	ldr	r2, [pc, #124]	; (8001218 <StartBtReceiveTask+0x3cc>)
 800119c:	4614      	mov	r4, r2
 800119e:	469c      	mov	ip, r3
 80011a0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80011a4:	4665      	mov	r5, ip
 80011a6:	4626      	mov	r6, r4
 80011a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80011aa:	6028      	str	r0, [r5, #0]
 80011ac:	6069      	str	r1, [r5, #4]
 80011ae:	60aa      	str	r2, [r5, #8]
 80011b0:	60eb      	str	r3, [r5, #12]
 80011b2:	3410      	adds	r4, #16
 80011b4:	f10c 0c10 	add.w	ip, ip, #16
 80011b8:	4574      	cmp	r4, lr
 80011ba:	d1f3      	bne.n	80011a4 <StartBtReceiveTask+0x358>
 80011bc:	4663      	mov	r3, ip
 80011be:	4622      	mov	r2, r4
 80011c0:	6810      	ldr	r0, [r2, #0]
 80011c2:	6018      	str	r0, [r3, #0]
 80011c4:	4b11      	ldr	r3, [pc, #68]	; (800120c <StartBtReceiveTask+0x3c0>)
 80011c6:	6818      	ldr	r0, [r3, #0]
 80011c8:	f107 010c 	add.w	r1, r7, #12
 80011cc:	2300      	movs	r3, #0
 80011ce:	f04f 32ff 	mov.w	r2, #4294967295
 80011d2:	f009 fda9 	bl	800ad28 <xQueueGenericSend>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d003      	beq.n	80011e4 <StartBtReceiveTask+0x398>
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4618      	mov	r0, r3
 80011e0:	f00b ff78 	bl	800d0d4 <vPortFree>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 80011e4:	2001      	movs	r0, #1
 80011e6:	f009 f90d 	bl	800a404 <osDelay>
 80011ea:	e633      	b.n	8000e54 <StartBtReceiveTask+0x8>
				continue;
 80011ec:	bf00      	nop
 80011ee:	e631      	b.n	8000e54 <StartBtReceiveTask+0x8>
				continue;
 80011f0:	bf00      	nop
 80011f2:	e62f      	b.n	8000e54 <StartBtReceiveTask+0x8>
				continue;
 80011f4:	bf00      	nop
 80011f6:	e62d      	b.n	8000e54 <StartBtReceiveTask+0x8>
				continue;
 80011f8:	bf00      	nop
		HAL_UART_Receive_DMA(&BT_UART_HANDLE, btUartRxBuff,
 80011fa:	e62b      	b.n	8000e54 <StartBtReceiveTask+0x8>
 80011fc:	20000284 	.word	0x20000284
 8001200:	2000029c 	.word	0x2000029c
 8001204:	20006510 	.word	0x20006510
 8001208:	0800d56c 	.word	0x0800d56c
 800120c:	200062bc 	.word	0x200062bc
 8001210:	200062d8 	.word	0x200062d8
 8001214:	20006470 	.word	0x20006470
 8001218:	0800d59c 	.word	0x0800d59c

0800121c <StartXbeeSendTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeSendTask */
void StartXbeeSendTask(void const * argument)
{
 800121c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	static uint8_t xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE]; /* UART Tx buffer */
	static uint16_t calculatedCrc; /* Buffer for the calculated CRC */
	static uint8_t seqNum = 0U; /* Sequence number */

	/* Activate XBEE Pro by driving the XBEE_RESET pin high */
	HAL_GPIO_WritePin(XBEE_RESET_GPIO_Port, XBEE_RESET_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2108      	movs	r1, #8
 8001228:	488e      	ldr	r0, [pc, #568]	; (8001464 <StartXbeeSendTask+0x248>)
 800122a:	f002 fbdf 	bl	80039ec <HAL_GPIO_WritePin>

	/* Infinite loop */
	for (;;) {
		if (pdTRUE == xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 800122e:	4b8e      	ldr	r3, [pc, #568]	; (8001468 <StartXbeeSendTask+0x24c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2200      	movs	r2, #0
 8001234:	498d      	ldr	r1, [pc, #564]	; (800146c <StartXbeeSendTask+0x250>)
 8001236:	4618      	mov	r0, r3
 8001238:	f009 ff8e 	bl	800b158 <xQueueReceive>
 800123c:	4603      	mov	r3, r0
 800123e:	2b01      	cmp	r3, #1
 8001240:	f040 80cf 	bne.w	80013e2 <StartXbeeSendTask+0x1c6>
		WCU_CANRECEIVEQUEUE_RECEIVE_TIMEOUT)) {
			if (RX == frameBuff.DataDirection) {
 8001244:	4b8a      	ldr	r3, [pc, #552]	; (8001470 <StartXbeeSendTask+0x254>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	f040 809c 	bne.w	8001386 <StartXbeeSendTask+0x16a>
				/* Clear the buffer */
				memset(xbeeUartTxBuff, 0x00, R3TP_VER0_FRAME_SIZE);
 800124e:	2214      	movs	r2, #20
 8001250:	2100      	movs	r1, #0
 8001252:	4886      	ldr	r0, [pc, #536]	; (800146c <StartXbeeSendTask+0x250>)
 8001254:	f00c f881 	bl	800d35a <memset>

				/* Set VER and RES/SEQ field */
				xbeeUartTxBuff[0] = R3TP_VER0_VER_RES_SEQ_BYTE;
 8001258:	4b84      	ldr	r3, [pc, #528]	; (800146c <StartXbeeSendTask+0x250>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]

				/* Set the SEQ NUM field */
				xbeeUartTxBuff[1] = seqNum;
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <StartXbeeSendTask+0x258>)
 8001260:	781a      	ldrb	r2, [r3, #0]
 8001262:	4b82      	ldr	r3, [pc, #520]	; (800146c <StartXbeeSendTask+0x250>)
 8001264:	705a      	strb	r2, [r3, #1]
				/* Increment the sequence number */
				seqNum = (seqNum < 255U) ? seqNum + 1 : 0U;
 8001266:	4b83      	ldr	r3, [pc, #524]	; (8001474 <StartXbeeSendTask+0x258>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2bff      	cmp	r3, #255	; 0xff
 800126c:	d004      	beq.n	8001278 <StartXbeeSendTask+0x5c>
 800126e:	4b81      	ldr	r3, [pc, #516]	; (8001474 <StartXbeeSendTask+0x258>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	b2db      	uxtb	r3, r3
 8001276:	e000      	b.n	800127a <StartXbeeSendTask+0x5e>
 8001278:	2300      	movs	r3, #0
 800127a:	4a7e      	ldr	r2, [pc, #504]	; (8001474 <StartXbeeSendTask+0x258>)
 800127c:	7013      	strb	r3, [r2, #0]

				/* Set the END SEQ field */
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 2U] =
 800127e:	4b7b      	ldr	r3, [pc, #492]	; (800146c <StartXbeeSendTask+0x250>)
 8001280:	22de      	movs	r2, #222	; 0xde
 8001282:	749a      	strb	r2, [r3, #18]
				R3TP_END_SEQ_LOW_BYTE;
				xbeeUartTxBuff[R3TP_VER0_FRAME_SIZE - 1U] =
 8001284:	4b79      	ldr	r3, [pc, #484]	; (800146c <StartXbeeSendTask+0x250>)
 8001286:	22ed      	movs	r2, #237	; 0xed
 8001288:	74da      	strb	r2, [r3, #19]
				R3TP_END_SEQ_HIGH_BYTE;

				/* Set CAN ID field - note that the CAN ID is transmitted as little endian */
				xbeeUartTxBuff[4] = GETLSBOF16(frameBuff.Header.Rx.StdId);
 800128a:	4b79      	ldr	r3, [pc, #484]	; (8001470 <StartXbeeSendTask+0x254>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b76      	ldr	r3, [pc, #472]	; (800146c <StartXbeeSendTask+0x250>)
 8001292:	711a      	strb	r2, [r3, #4]
				xbeeUartTxBuff[5] = GETMSBOF16(frameBuff.Header.Rx.StdId);
 8001294:	4b76      	ldr	r3, [pc, #472]	; (8001470 <StartXbeeSendTask+0x254>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	b29b      	uxth	r3, r3
 800129a:	0a1b      	lsrs	r3, r3, #8
 800129c:	b29b      	uxth	r3, r3
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b72      	ldr	r3, [pc, #456]	; (800146c <StartXbeeSendTask+0x250>)
 80012a2:	715a      	strb	r2, [r3, #5]

				/* Set the DLC field */
				xbeeUartTxBuff[8] = (uint8_t) frameBuff.Header.Rx.DLC;
 80012a4:	4b72      	ldr	r3, [pc, #456]	; (8001470 <StartXbeeSendTask+0x254>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	4b70      	ldr	r3, [pc, #448]	; (800146c <StartXbeeSendTask+0x250>)
 80012ac:	721a      	strb	r2, [r3, #8]

				/* Set the DATA field */
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e00b      	b.n	80012cc <StartXbeeSendTask+0xb0>
					xbeeUartTxBuff[9 + i] = frameBuff.Payload[i];
 80012b4:	7dfa      	ldrb	r2, [r7, #23]
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	3309      	adds	r3, #9
 80012ba:	496d      	ldr	r1, [pc, #436]	; (8001470 <StartXbeeSendTask+0x254>)
 80012bc:	440a      	add	r2, r1
 80012be:	f892 1020 	ldrb.w	r1, [r2, #32]
 80012c2:	4a6a      	ldr	r2, [pc, #424]	; (800146c <StartXbeeSendTask+0x250>)
 80012c4:	54d1      	strb	r1, [r2, r3]
				for (uint8_t i = 0; i < frameBuff.Header.Rx.DLC; i += 1) {
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
 80012c8:	3301      	adds	r3, #1
 80012ca:	75fb      	strb	r3, [r7, #23]
 80012cc:	7dfa      	ldrb	r2, [r7, #23]
 80012ce:	4b68      	ldr	r3, [pc, #416]	; (8001470 <StartXbeeSendTask+0x254>)
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3ee      	bcc.n	80012b4 <StartXbeeSendTask+0x98>
				}

				/* Calculate the CRC */
				if (osOK
						== osMutexWait(crcMutexHandle, WCU_CRCMUTEX_TIMEOUT)) {
 80012d6:	4b68      	ldr	r3, [pc, #416]	; (8001478 <StartXbeeSendTask+0x25c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f04f 31ff 	mov.w	r1, #4294967295
 80012de:	4618      	mov	r0, r3
 80012e0:	f009 f8bc 	bl	800a45c <osMutexWait>
 80012e4:	4603      	mov	r3, r0
				if (osOK
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d121      	bne.n	800132e <StartXbeeSendTask+0x112>
					calculatedCrc =
							GET16LSBITS(
 80012ea:	2205      	movs	r2, #5
 80012ec:	495f      	ldr	r1, [pc, #380]	; (800146c <StartXbeeSendTask+0x250>)
 80012ee:	4863      	ldr	r0, [pc, #396]	; (800147c <StartXbeeSendTask+0x260>)
 80012f0:	f001 fe12 	bl	8002f18 <HAL_CRC_Calculate>
 80012f4:	4603      	mov	r3, r0
 80012f6:	b29a      	uxth	r2, r3
					calculatedCrc =
 80012f8:	4b61      	ldr	r3, [pc, #388]	; (8001480 <StartXbeeSendTask+0x264>)
 80012fa:	801a      	strh	r2, [r3, #0]
									HAL_CRC_Calculate(&hcrc, (uint32_t*)xbeeUartTxBuff, R3TP_VER0_FRAME_SIZE / 4));
					osMutexRelease(crcMutexHandle);
 80012fc:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <StartXbeeSendTask+0x25c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f009 f8f9 	bl	800a4f8 <osMutexRelease>

					/* Set the CRC field - note that the CRC is transmitted as little endian */
					xbeeUartTxBuff[2] = GETLSBOF16(calculatedCrc);
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <StartXbeeSendTask+0x264>)
 8001308:	881b      	ldrh	r3, [r3, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	4b57      	ldr	r3, [pc, #348]	; (800146c <StartXbeeSendTask+0x250>)
 800130e:	709a      	strb	r2, [r3, #2]
					xbeeUartTxBuff[3] = GETMSBOF16(calculatedCrc);
 8001310:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <StartXbeeSendTask+0x264>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	b29b      	uxth	r3, r3
 8001318:	b2da      	uxtb	r2, r3
 800131a:	4b54      	ldr	r3, [pc, #336]	; (800146c <StartXbeeSendTask+0x250>)
 800131c:	70da      	strb	r2, [r3, #3]
					LOGERROR("crcMutex timeout in xbeeSend\r\n");
					continue;
				}

				/* Transmit frame */
				HAL_UART_Transmit(&XBEE_UART_HANDLE, xbeeUartTxBuff,
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	2214      	movs	r2, #20
 8001324:	4951      	ldr	r1, [pc, #324]	; (800146c <StartXbeeSendTask+0x250>)
 8001326:	4857      	ldr	r0, [pc, #348]	; (8001484 <StartXbeeSendTask+0x268>)
 8001328:	f004 fe1d 	bl	8005f66 <HAL_UART_Transmit>
 800132c:	e059      	b.n	80013e2 <StartXbeeSendTask+0x1c6>
					LOGERROR("crcMutex timeout in xbeeSend\r\n");
 800132e:	201e      	movs	r0, #30
 8001330:	f00b fe0e 	bl	800cf50 <pvPortMalloc>
 8001334:	4603      	mov	r3, r0
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	2b00      	cmp	r3, #0
 800133c:	f000 8090 	beq.w	8001460 <StartXbeeSendTask+0x244>
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4a51      	ldr	r2, [pc, #324]	; (8001488 <StartXbeeSendTask+0x26c>)
 8001344:	461d      	mov	r5, r3
 8001346:	4614      	mov	r4, r2
 8001348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134a:	6028      	str	r0, [r5, #0]
 800134c:	6069      	str	r1, [r5, #4]
 800134e:	60aa      	str	r2, [r5, #8]
 8001350:	60eb      	str	r3, [r5, #12]
 8001352:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001354:	6128      	str	r0, [r5, #16]
 8001356:	6169      	str	r1, [r5, #20]
 8001358:	61aa      	str	r2, [r5, #24]
 800135a:	8823      	ldrh	r3, [r4, #0]
 800135c:	78a2      	ldrb	r2, [r4, #2]
 800135e:	83ab      	strh	r3, [r5, #28]
 8001360:	4613      	mov	r3, r2
 8001362:	77ab      	strb	r3, [r5, #30]
 8001364:	4b49      	ldr	r3, [pc, #292]	; (800148c <StartXbeeSendTask+0x270>)
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	f107 0110 	add.w	r1, r7, #16
 800136c:	2300      	movs	r3, #0
 800136e:	f04f 32ff 	mov.w	r2, #4294967295
 8001372:	f009 fcd9 	bl	800ad28 <xQueueGenericSend>
 8001376:	4603      	mov	r3, r0
 8001378:	2b01      	cmp	r3, #1
 800137a:	d071      	beq.n	8001460 <StartXbeeSendTask+0x244>
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4618      	mov	r0, r3
 8001380:	f00b fea8 	bl	800d0d4 <vPortFree>
					continue;
 8001384:	e06c      	b.n	8001460 <StartXbeeSendTask+0x244>
				R3TP_VER0_FRAME_SIZE, WCU_XBEE_UART_TX_TIMEOUT);

			} else {
				/* Log error */
				LOGERROR("Invalid DataDirection in xbeeSend\r\n");
 8001386:	2023      	movs	r0, #35	; 0x23
 8001388:	f00b fde2 	bl	800cf50 <pvPortMalloc>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d025      	beq.n	80013e2 <StartXbeeSendTask+0x1c6>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4a3d      	ldr	r2, [pc, #244]	; (8001490 <StartXbeeSendTask+0x274>)
 800139a:	4614      	mov	r4, r2
 800139c:	469c      	mov	ip, r3
 800139e:	f104 0e20 	add.w	lr, r4, #32
 80013a2:	4665      	mov	r5, ip
 80013a4:	4626      	mov	r6, r4
 80013a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a8:	6028      	str	r0, [r5, #0]
 80013aa:	6069      	str	r1, [r5, #4]
 80013ac:	60aa      	str	r2, [r5, #8]
 80013ae:	60eb      	str	r3, [r5, #12]
 80013b0:	3410      	adds	r4, #16
 80013b2:	f10c 0c10 	add.w	ip, ip, #16
 80013b6:	4574      	cmp	r4, lr
 80013b8:	d1f3      	bne.n	80013a2 <StartXbeeSendTask+0x186>
 80013ba:	4663      	mov	r3, ip
 80013bc:	4622      	mov	r2, r4
 80013be:	6810      	ldr	r0, [r2, #0]
 80013c0:	6018      	str	r0, [r3, #0]
 80013c2:	4b32      	ldr	r3, [pc, #200]	; (800148c <StartXbeeSendTask+0x270>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	f107 010c 	add.w	r1, r7, #12
 80013ca:	2300      	movs	r3, #0
 80013cc:	f04f 32ff 	mov.w	r2, #4294967295
 80013d0:	f009 fcaa 	bl	800ad28 <xQueueGenericSend>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d003      	beq.n	80013e2 <StartXbeeSendTask+0x1c6>
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4618      	mov	r0, r3
 80013de:	f00b fe79 	bl	800d0d4 <vPortFree>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &xbeeSendHandle,
 80013e2:	4b2c      	ldr	r3, [pc, #176]	; (8001494 <StartXbeeSendTask+0x278>)
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ec:	492a      	ldr	r1, [pc, #168]	; (8001498 <StartXbeeSendTask+0x27c>)
 80013ee:	f009 fc9b 	bl	800ad28 <xQueueGenericSend>
 80013f2:	4603      	mov	r3, r0
		if (pdTRUE
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d02f      	beq.n	8001458 <StartXbeeSendTask+0x23c>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("xbeeSend failed to send to reportToWatchdogQueue\r\n");
 80013f8:	2032      	movs	r0, #50	; 0x32
 80013fa:	f00b fda9 	bl	800cf50 <pvPortMalloc>
 80013fe:	4603      	mov	r3, r0
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d027      	beq.n	8001458 <StartXbeeSendTask+0x23c>
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4a24      	ldr	r2, [pc, #144]	; (800149c <StartXbeeSendTask+0x280>)
 800140c:	4614      	mov	r4, r2
 800140e:	469c      	mov	ip, r3
 8001410:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001414:	4665      	mov	r5, ip
 8001416:	4626      	mov	r6, r4
 8001418:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800141a:	6028      	str	r0, [r5, #0]
 800141c:	6069      	str	r1, [r5, #4]
 800141e:	60aa      	str	r2, [r5, #8]
 8001420:	60eb      	str	r3, [r5, #12]
 8001422:	3410      	adds	r4, #16
 8001424:	f10c 0c10 	add.w	ip, ip, #16
 8001428:	4574      	cmp	r4, lr
 800142a:	d1f3      	bne.n	8001414 <StartXbeeSendTask+0x1f8>
 800142c:	4663      	mov	r3, ip
 800142e:	4622      	mov	r2, r4
 8001430:	8811      	ldrh	r1, [r2, #0]
 8001432:	7892      	ldrb	r2, [r2, #2]
 8001434:	8019      	strh	r1, [r3, #0]
 8001436:	709a      	strb	r2, [r3, #2]
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <StartXbeeSendTask+0x270>)
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	f107 0108 	add.w	r1, r7, #8
 8001440:	2300      	movs	r3, #0
 8001442:	f04f 32ff 	mov.w	r2, #4294967295
 8001446:	f009 fc6f 	bl	800ad28 <xQueueGenericSend>
 800144a:	4603      	mov	r3, r0
 800144c:	2b01      	cmp	r3, #1
 800144e:	d003      	beq.n	8001458 <StartXbeeSendTask+0x23c>
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	4618      	mov	r0, r3
 8001454:	f00b fe3e 	bl	800d0d4 <vPortFree>
		}

		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001458:	2001      	movs	r0, #1
 800145a:	f008 ffd3 	bl	800a404 <osDelay>
 800145e:	e6e6      	b.n	800122e <StartXbeeSendTask+0x12>
					continue;
 8001460:	bf00      	nop
		if (pdTRUE == xQueueReceive(canReceiveQueueHandle, xbeeUartTxBuff,
 8001462:	e6e4      	b.n	800122e <StartXbeeSendTask+0x12>
 8001464:	40020800 	.word	0x40020800
 8001468:	2000650c 	.word	0x2000650c
 800146c:	200002c4 	.word	0x200002c4
 8001470:	200002d8 	.word	0x200002d8
 8001474:	20000300 	.word	0x20000300
 8001478:	200063e4 	.word	0x200063e4
 800147c:	200062cc 	.word	0x200062cc
 8001480:	20000302 	.word	0x20000302
 8001484:	20006474 	.word	0x20006474
 8001488:	0800d5d0 	.word	0x0800d5d0
 800148c:	200062bc 	.word	0x200062bc
 8001490:	0800d5f0 	.word	0x0800d5f0
 8001494:	200062d8 	.word	0x200062d8
 8001498:	200062d4 	.word	0x200062d4
 800149c:	0800d614 	.word	0x0800d614

080014a0 <StartXbeeReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartXbeeReceiveTask */
void StartXbeeReceiveTask(void const * argument)
{
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	static uint32_t subscription[R3TP_VER1_MAX_FRAME_NUM]; /* Buffer for telemetry subscription CAN IDs */

	/* Infinite loop */
	for (;;) {
		/* Listen for the subscription (VER1) frame */
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	2201      	movs	r2, #1
 80014ae:	49a2      	ldr	r1, [pc, #648]	; (8001738 <StartXbeeReceiveTask+0x298>)
 80014b0:	48a2      	ldr	r0, [pc, #648]	; (800173c <StartXbeeReceiveTask+0x29c>)
 80014b2:	f004 fdf1 	bl	8006098 <HAL_UART_Receive>
		WCU_XBEE_UART_RX_TIMEOUT);
		/* Validate the VER and RES/SEQ field */
		if (R3TP_VER1_VER_RES_SEQ_BYTE == xbeeUartRxBuff[0]) {
 80014b6:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <StartXbeeReceiveTask+0x298>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b20      	cmp	r3, #32
 80014bc:	f040 818c 	bne.w	80017d8 <StartXbeeReceiveTask+0x338>
			/* On valid version byte, receive SEQ NUM, CHECKSUM and FRAME NUM */
			HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff + 1, 7,
 80014c0:	499f      	ldr	r1, [pc, #636]	; (8001740 <StartXbeeReceiveTask+0x2a0>)
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	2207      	movs	r2, #7
 80014c8:	489c      	ldr	r0, [pc, #624]	; (800173c <StartXbeeReceiveTask+0x29c>)
 80014ca:	f004 fde5 	bl	8006098 <HAL_UART_Receive>
			WCU_XBEE_UART_RX_TIMEOUT);

			/* Read the FRAME NUM field */
			frameNum = READAS32BIT(xbeeUartRxBuff[7], xbeeUartRxBuff[6],
 80014ce:	4b9a      	ldr	r3, [pc, #616]	; (8001738 <StartXbeeReceiveTask+0x298>)
 80014d0:	79db      	ldrb	r3, [r3, #7]
 80014d2:	061a      	lsls	r2, r3, #24
 80014d4:	4b98      	ldr	r3, [pc, #608]	; (8001738 <StartXbeeReceiveTask+0x298>)
 80014d6:	799b      	ldrb	r3, [r3, #6]
 80014d8:	041b      	lsls	r3, r3, #16
 80014da:	431a      	orrs	r2, r3
 80014dc:	4b96      	ldr	r3, [pc, #600]	; (8001738 <StartXbeeReceiveTask+0x298>)
 80014de:	795b      	ldrb	r3, [r3, #5]
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	4313      	orrs	r3, r2
 80014e4:	4a94      	ldr	r2, [pc, #592]	; (8001738 <StartXbeeReceiveTask+0x298>)
 80014e6:	7912      	ldrb	r2, [r2, #4]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	461a      	mov	r2, r3
 80014ec:	4b95      	ldr	r3, [pc, #596]	; (8001744 <StartXbeeReceiveTask+0x2a4>)
 80014ee:	601a      	str	r2, [r3, #0]
					xbeeUartRxBuff[5], xbeeUartRxBuff[4]);

			/* Assert the payload won't overflow the buffer */
			if (frameNum > R3TP_VER1_MAX_FRAME_NUM) {
 80014f0:	4b94      	ldr	r3, [pc, #592]	; (8001744 <StartXbeeReceiveTask+0x2a4>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b1c      	cmp	r3, #28
 80014f6:	d932      	bls.n	800155e <StartXbeeReceiveTask+0xbe>
				/* Log error */
				LOGERROR("Invalid FRAME NUM in xbeeReceive\r\n");
 80014f8:	2022      	movs	r0, #34	; 0x22
 80014fa:	f00b fd29 	bl	800cf50 <pvPortMalloc>
 80014fe:	4603      	mov	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 816b 	beq.w	80017e0 <StartXbeeReceiveTask+0x340>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4a8e      	ldr	r2, [pc, #568]	; (8001748 <StartXbeeReceiveTask+0x2a8>)
 800150e:	4614      	mov	r4, r2
 8001510:	469c      	mov	ip, r3
 8001512:	f104 0e20 	add.w	lr, r4, #32
 8001516:	4665      	mov	r5, ip
 8001518:	4626      	mov	r6, r4
 800151a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800151c:	6028      	str	r0, [r5, #0]
 800151e:	6069      	str	r1, [r5, #4]
 8001520:	60aa      	str	r2, [r5, #8]
 8001522:	60eb      	str	r3, [r5, #12]
 8001524:	3410      	adds	r4, #16
 8001526:	f10c 0c10 	add.w	ip, ip, #16
 800152a:	4574      	cmp	r4, lr
 800152c:	d1f3      	bne.n	8001516 <StartXbeeReceiveTask+0x76>
 800152e:	4663      	mov	r3, ip
 8001530:	4622      	mov	r2, r4
 8001532:	8811      	ldrh	r1, [r2, #0]
 8001534:	7892      	ldrb	r2, [r2, #2]
 8001536:	8019      	strh	r1, [r3, #0]
 8001538:	709a      	strb	r2, [r3, #2]
 800153a:	4b84      	ldr	r3, [pc, #528]	; (800174c <StartXbeeReceiveTask+0x2ac>)
 800153c:	6818      	ldr	r0, [r3, #0]
 800153e:	f107 0118 	add.w	r1, r7, #24
 8001542:	2300      	movs	r3, #0
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	f009 fbee 	bl	800ad28 <xQueueGenericSend>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	f000 8146 	beq.w	80017e0 <StartXbeeReceiveTask+0x340>
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	4618      	mov	r0, r3
 8001558:	f00b fdbc 	bl	800d0d4 <vPortFree>
				continue;
 800155c:	e140      	b.n	80017e0 <StartXbeeReceiveTask+0x340>
			}

			/* Receive the payload */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 800155e:	497c      	ldr	r1, [pc, #496]	; (8001750 <StartXbeeReceiveTask+0x2b0>)
 8001560:	4b78      	ldr	r3, [pc, #480]	; (8001744 <StartXbeeReceiveTask+0x2a4>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	b29a      	uxth	r2, r3
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	4873      	ldr	r0, [pc, #460]	; (800173c <StartXbeeReceiveTask+0x29c>)
 8001570:	f004 fd92 	bl	8006098 <HAL_UART_Receive>
					R3TP_VER1_PAYLOAD_BEGIN(xbeeUartRxBuff), frameNum * 4,
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Receive the frame align bytes (two) and END SEQ (also two bytes) */
			HAL_UART_Receive(&XBEE_UART_HANDLE,
					R3TP_VER1_EPILOGUE_BEGIN(xbeeUartRxBuff, frameNum), 4,
 8001574:	4b73      	ldr	r3, [pc, #460]	; (8001744 <StartXbeeReceiveTask+0x2a4>)
 8001576:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Receive(&XBEE_UART_HANDLE,
 8001578:	3302      	adds	r3, #2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <StartXbeeReceiveTask+0x298>)
 800157e:	1899      	adds	r1, r3, r2
 8001580:	f04f 33ff 	mov.w	r3, #4294967295
 8001584:	2204      	movs	r2, #4
 8001586:	486d      	ldr	r0, [pc, #436]	; (800173c <StartXbeeReceiveTask+0x29c>)
 8001588:	f004 fd86 	bl	8006098 <HAL_UART_Receive>
					WCU_XBEE_UART_RX_TIMEOUT);

			/* Validate the END SEQ field */
			if ((R3TP_END_SEQ_LOW_BYTE
					!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum) - 2U])
 800158c:	4b6d      	ldr	r3, [pc, #436]	; (8001744 <StartXbeeReceiveTask+0x2a4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3303      	adds	r3, #3
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	3b02      	subs	r3, #2
 8001596:	4a68      	ldr	r2, [pc, #416]	; (8001738 <StartXbeeReceiveTask+0x298>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
			if ((R3TP_END_SEQ_LOW_BYTE
 800159a:	2bde      	cmp	r3, #222	; 0xde
 800159c:	d108      	bne.n	80015b0 <StartXbeeReceiveTask+0x110>
					|| (R3TP_END_SEQ_HIGH_BYTE
							!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum)
 800159e:	4b69      	ldr	r3, [pc, #420]	; (8001744 <StartXbeeReceiveTask+0x2a4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3303      	adds	r3, #3
 80015a4:	009b      	lsls	r3, r3, #2
									- 1U])) {
 80015a6:	3b01      	subs	r3, #1
							!= xbeeUartRxBuff[R3TP_VER1_MESSAGE_LENGTH(frameNum)
 80015a8:	4a63      	ldr	r2, [pc, #396]	; (8001738 <StartXbeeReceiveTask+0x298>)
 80015aa:	5cd3      	ldrb	r3, [r2, r3]
					|| (R3TP_END_SEQ_HIGH_BYTE
 80015ac:	2bed      	cmp	r3, #237	; 0xed
 80015ae:	d030      	beq.n	8001612 <StartXbeeReceiveTask+0x172>
				/* Log error */
				LOGERROR("Invalid END SEQ in xbeeReceive\r\n");
 80015b0:	2020      	movs	r0, #32
 80015b2:	f00b fccd 	bl	800cf50 <pvPortMalloc>
 80015b6:	4603      	mov	r3, r0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	f000 8111 	beq.w	80017e4 <StartXbeeReceiveTask+0x344>
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4a63      	ldr	r2, [pc, #396]	; (8001754 <StartXbeeReceiveTask+0x2b4>)
 80015c6:	4614      	mov	r4, r2
 80015c8:	469c      	mov	ip, r3
 80015ca:	f104 0e20 	add.w	lr, r4, #32
 80015ce:	4665      	mov	r5, ip
 80015d0:	4626      	mov	r6, r4
 80015d2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015d4:	6028      	str	r0, [r5, #0]
 80015d6:	6069      	str	r1, [r5, #4]
 80015d8:	60aa      	str	r2, [r5, #8]
 80015da:	60eb      	str	r3, [r5, #12]
 80015dc:	3410      	adds	r4, #16
 80015de:	f10c 0c10 	add.w	ip, ip, #16
 80015e2:	4574      	cmp	r4, lr
 80015e4:	d1f3      	bne.n	80015ce <StartXbeeReceiveTask+0x12e>
 80015e6:	4663      	mov	r3, ip
 80015e8:	4622      	mov	r2, r4
 80015ea:	7812      	ldrb	r2, [r2, #0]
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <StartXbeeReceiveTask+0x2ac>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	f107 0114 	add.w	r1, r7, #20
 80015f6:	2300      	movs	r3, #0
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	f009 fb94 	bl	800ad28 <xQueueGenericSend>
 8001600:	4603      	mov	r3, r0
 8001602:	2b01      	cmp	r3, #1
 8001604:	f000 80ee 	beq.w	80017e4 <StartXbeeReceiveTask+0x344>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4618      	mov	r0, r3
 800160c:	f00b fd62 	bl	800d0d4 <vPortFree>
				continue;
 8001610:	e0e8      	b.n	80017e4 <StartXbeeReceiveTask+0x344>
			}

			/* Read the CHECKSUM */
			readCrc = READAS16BIT(xbeeUartRxBuff[3], xbeeUartRxBuff[2]);
 8001612:	4b49      	ldr	r3, [pc, #292]	; (8001738 <StartXbeeReceiveTask+0x298>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	021b      	lsls	r3, r3, #8
 8001618:	b21a      	sxth	r2, r3
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <StartXbeeReceiveTask+0x298>)
 800161c:	789b      	ldrb	r3, [r3, #2]
 800161e:	b21b      	sxth	r3, r3
 8001620:	4313      	orrs	r3, r2
 8001622:	b21b      	sxth	r3, r3
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b4c      	ldr	r3, [pc, #304]	; (8001758 <StartXbeeReceiveTask+0x2b8>)
 8001628:	801a      	strh	r2, [r3, #0]

			/* Clear the CHECKSUM field */
			memset(xbeeUartRxBuff + 2U, 0x00, 2U);
 800162a:	4b4c      	ldr	r3, [pc, #304]	; (800175c <StartXbeeReceiveTask+0x2bc>)
 800162c:	2202      	movs	r2, #2
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f00b fe92 	bl	800d35a <memset>

			if (osOK == osMutexWait(crcMutexHandle, WCU_CRCMUTEX_TIMEOUT)) {
 8001636:	4b4a      	ldr	r3, [pc, #296]	; (8001760 <StartXbeeReceiveTask+0x2c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f04f 31ff 	mov.w	r1, #4294967295
 800163e:	4618      	mov	r0, r3
 8001640:	f008 ff0c 	bl	800a45c <osMutexWait>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d119      	bne.n	800167e <StartXbeeReceiveTask+0x1de>
				/* Calculate the CRC */
				calculatedCrc =
						GET16LSBITS(
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <StartXbeeReceiveTask+0x2a4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	3303      	adds	r3, #3
 8001650:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001654:	461a      	mov	r2, r3
 8001656:	4938      	ldr	r1, [pc, #224]	; (8001738 <StartXbeeReceiveTask+0x298>)
 8001658:	4842      	ldr	r0, [pc, #264]	; (8001764 <StartXbeeReceiveTask+0x2c4>)
 800165a:	f001 fc5d 	bl	8002f18 <HAL_CRC_Calculate>
 800165e:	4603      	mov	r3, r0
 8001660:	b29a      	uxth	r2, r3
				calculatedCrc =
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <StartXbeeReceiveTask+0x2c8>)
 8001664:	801a      	strh	r2, [r3, #0]
								HAL_CRC_Calculate(&hcrc, (uint32_t* )xbeeUartRxBuff, R3TP_VER1_MESSAGE_LENGTH(frameNum)/4));
				osMutexRelease(crcMutexHandle);
 8001666:	4b3e      	ldr	r3, [pc, #248]	; (8001760 <StartXbeeReceiveTask+0x2c0>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f008 ff44 	bl	800a4f8 <osMutexRelease>
				LOGERROR("crcMutex timeout in xbeeReceive\r\n");
				continue;
			}

			/* Validate the CRC */
			if (readCrc != calculatedCrc) {
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <StartXbeeReceiveTask+0x2b8>)
 8001672:	881a      	ldrh	r2, [r3, #0]
 8001674:	4b3c      	ldr	r3, [pc, #240]	; (8001768 <StartXbeeReceiveTask+0x2c8>)
 8001676:	881b      	ldrh	r3, [r3, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d059      	beq.n	8001730 <StartXbeeReceiveTask+0x290>
 800167c:	e030      	b.n	80016e0 <StartXbeeReceiveTask+0x240>
				LOGERROR("crcMutex timeout in xbeeReceive\r\n");
 800167e:	2021      	movs	r0, #33	; 0x21
 8001680:	f00b fc66 	bl	800cf50 <pvPortMalloc>
 8001684:	4603      	mov	r3, r0
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 80ac 	beq.w	80017e8 <StartXbeeReceiveTask+0x348>
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4a36      	ldr	r2, [pc, #216]	; (800176c <StartXbeeReceiveTask+0x2cc>)
 8001694:	4614      	mov	r4, r2
 8001696:	469c      	mov	ip, r3
 8001698:	f104 0e20 	add.w	lr, r4, #32
 800169c:	4665      	mov	r5, ip
 800169e:	4626      	mov	r6, r4
 80016a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80016a2:	6028      	str	r0, [r5, #0]
 80016a4:	6069      	str	r1, [r5, #4]
 80016a6:	60aa      	str	r2, [r5, #8]
 80016a8:	60eb      	str	r3, [r5, #12]
 80016aa:	3410      	adds	r4, #16
 80016ac:	f10c 0c10 	add.w	ip, ip, #16
 80016b0:	4574      	cmp	r4, lr
 80016b2:	d1f3      	bne.n	800169c <StartXbeeReceiveTask+0x1fc>
 80016b4:	4662      	mov	r2, ip
 80016b6:	4623      	mov	r3, r4
 80016b8:	881b      	ldrh	r3, [r3, #0]
 80016ba:	8013      	strh	r3, [r2, #0]
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <StartXbeeReceiveTask+0x2ac>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	f107 0110 	add.w	r1, r7, #16
 80016c4:	2300      	movs	r3, #0
 80016c6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ca:	f009 fb2d 	bl	800ad28 <xQueueGenericSend>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	f000 8089 	beq.w	80017e8 <StartXbeeReceiveTask+0x348>
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	4618      	mov	r0, r3
 80016da:	f00b fcfb 	bl	800d0d4 <vPortFree>
				continue;
 80016de:	e083      	b.n	80017e8 <StartXbeeReceiveTask+0x348>
				/* Log error */
				LOGERROR("Invalid CRC in xbeeReceive\r\n");
 80016e0:	201c      	movs	r0, #28
 80016e2:	f00b fc35 	bl	800cf50 <pvPortMalloc>
 80016e6:	4603      	mov	r3, r0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d07d      	beq.n	80017ec <StartXbeeReceiveTask+0x34c>
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <StartXbeeReceiveTask+0x2d0>)
 80016f4:	461d      	mov	r5, r3
 80016f6:	4614      	mov	r4, r2
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	6028      	str	r0, [r5, #0]
 80016fc:	6069      	str	r1, [r5, #4]
 80016fe:	60aa      	str	r2, [r5, #8]
 8001700:	60eb      	str	r3, [r5, #12]
 8001702:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001704:	6128      	str	r0, [r5, #16]
 8001706:	6169      	str	r1, [r5, #20]
 8001708:	61aa      	str	r2, [r5, #24]
 800170a:	7823      	ldrb	r3, [r4, #0]
 800170c:	772b      	strb	r3, [r5, #28]
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <StartXbeeReceiveTask+0x2ac>)
 8001710:	6818      	ldr	r0, [r3, #0]
 8001712:	f107 010c 	add.w	r1, r7, #12
 8001716:	2300      	movs	r3, #0
 8001718:	f04f 32ff 	mov.w	r2, #4294967295
 800171c:	f009 fb04 	bl	800ad28 <xQueueGenericSend>
 8001720:	4603      	mov	r3, r0
 8001722:	2b01      	cmp	r3, #1
 8001724:	d062      	beq.n	80017ec <StartXbeeReceiveTask+0x34c>
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	4618      	mov	r0, r3
 800172a:	f00b fcd3 	bl	800d0d4 <vPortFree>
				continue;
 800172e:	e05d      	b.n	80017ec <StartXbeeReceiveTask+0x34c>
			}

			/* Read the payload */
			for (uint32_t i = 0; i < frameNum; i += 1) {
 8001730:	2300      	movs	r3, #0
 8001732:	61fb      	str	r3, [r7, #28]
 8001734:	e044      	b.n	80017c0 <StartXbeeReceiveTask+0x320>
 8001736:	bf00      	nop
 8001738:	20000304 	.word	0x20000304
 800173c:	20006474 	.word	0x20006474
 8001740:	20000305 	.word	0x20000305
 8001744:	20000380 	.word	0x20000380
 8001748:	0800d648 	.word	0x0800d648
 800174c:	200062bc 	.word	0x200062bc
 8001750:	2000030c 	.word	0x2000030c
 8001754:	0800d66c 	.word	0x0800d66c
 8001758:	20000384 	.word	0x20000384
 800175c:	20000306 	.word	0x20000306
 8001760:	200063e4 	.word	0x200063e4
 8001764:	200062cc 	.word	0x200062cc
 8001768:	20000386 	.word	0x20000386
 800176c:	0800d690 	.word	0x0800d690
 8001770:	0800d6b4 	.word	0x0800d6b4
				subscription[i] =
						READAS32BIT(
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	330b      	adds	r3, #11
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <StartXbeeReceiveTask+0x350>)
 800177c:	4413      	add	r3, r2
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	061a      	lsls	r2, r3, #24
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	330a      	adds	r3, #10
 8001788:	4919      	ldr	r1, [pc, #100]	; (80017f0 <StartXbeeReceiveTask+0x350>)
 800178a:	440b      	add	r3, r1
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	041b      	lsls	r3, r3, #16
 8001790:	431a      	orrs	r2, r3
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	3309      	adds	r3, #9
 8001798:	4915      	ldr	r1, [pc, #84]	; (80017f0 <StartXbeeReceiveTask+0x350>)
 800179a:	440b      	add	r3, r1
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	4313      	orrs	r3, r2
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	3202      	adds	r2, #2
 80017a6:	0092      	lsls	r2, r2, #2
 80017a8:	4911      	ldr	r1, [pc, #68]	; (80017f0 <StartXbeeReceiveTask+0x350>)
 80017aa:	440a      	add	r2, r1
 80017ac:	7812      	ldrb	r2, [r2, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	4619      	mov	r1, r3
				subscription[i] =
 80017b2:	4a10      	ldr	r2, [pc, #64]	; (80017f4 <StartXbeeReceiveTask+0x354>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint32_t i = 0; i < frameNum; i += 1) {
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3301      	adds	r3, #1
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <StartXbeeReceiveTask+0x358>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3d4      	bcc.n	8001774 <StartXbeeReceiveTask+0x2d4>
			 * TODO:
			 * Write subscription to SD
			 */

			/* Set the CAN filters */
			setCanFilterList(&hcan1, subscription, frameNum);
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <StartXbeeReceiveTask+0x358>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	4908      	ldr	r1, [pc, #32]	; (80017f4 <StartXbeeReceiveTask+0x354>)
 80017d2:	480a      	ldr	r0, [pc, #40]	; (80017fc <StartXbeeReceiveTask+0x35c>)
 80017d4:	f000 f9fa 	bl	8001bcc <setCanFilterList>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 80017d8:	2001      	movs	r0, #1
 80017da:	f008 fe13 	bl	800a404 <osDelay>
 80017de:	e663      	b.n	80014a8 <StartXbeeReceiveTask+0x8>
				continue;
 80017e0:	bf00      	nop
 80017e2:	e661      	b.n	80014a8 <StartXbeeReceiveTask+0x8>
				continue;
 80017e4:	bf00      	nop
 80017e6:	e65f      	b.n	80014a8 <StartXbeeReceiveTask+0x8>
				continue;
 80017e8:	bf00      	nop
 80017ea:	e65d      	b.n	80014a8 <StartXbeeReceiveTask+0x8>
				continue;
 80017ec:	bf00      	nop
		HAL_UART_Receive(&XBEE_UART_HANDLE, xbeeUartRxBuff, 1,
 80017ee:	e65b      	b.n	80014a8 <StartXbeeReceiveTask+0x8>
 80017f0:	20000304 	.word	0x20000304
 80017f4:	20000388 	.word	0x20000388
 80017f8:	20000380 	.word	0x20000380
 80017fc:	20006558 	.word	0x20006558

08001800 <StartGnssReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartGnssReceiveTask */
void StartGnssReceiveTask(void const * argument)
{
 8001800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &gnssReceiveHandle,
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <StartGnssReceiveTask+0x88>)
 800180a:	6818      	ldr	r0, [r3, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	f04f 32ff 	mov.w	r2, #4294967295
 8001812:	491e      	ldr	r1, [pc, #120]	; (800188c <StartGnssReceiveTask+0x8c>)
 8001814:	f009 fa88 	bl	800ad28 <xQueueGenericSend>
 8001818:	4603      	mov	r3, r0
		if (pdTRUE
 800181a:	2b01      	cmp	r3, #1
 800181c:	d02f      	beq.n	800187e <StartGnssReceiveTask+0x7e>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("gnssReceive failed to send to reportToWatchdogQueue\r\n");
 800181e:	2035      	movs	r0, #53	; 0x35
 8001820:	f00b fb96 	bl	800cf50 <pvPortMalloc>
 8001824:	4603      	mov	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d027      	beq.n	800187e <StartGnssReceiveTask+0x7e>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4a17      	ldr	r2, [pc, #92]	; (8001890 <StartGnssReceiveTask+0x90>)
 8001832:	4614      	mov	r4, r2
 8001834:	469c      	mov	ip, r3
 8001836:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800183a:	4665      	mov	r5, ip
 800183c:	4626      	mov	r6, r4
 800183e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001840:	6028      	str	r0, [r5, #0]
 8001842:	6069      	str	r1, [r5, #4]
 8001844:	60aa      	str	r2, [r5, #8]
 8001846:	60eb      	str	r3, [r5, #12]
 8001848:	3410      	adds	r4, #16
 800184a:	f10c 0c10 	add.w	ip, ip, #16
 800184e:	4574      	cmp	r4, lr
 8001850:	d1f3      	bne.n	800183a <StartGnssReceiveTask+0x3a>
 8001852:	4663      	mov	r3, ip
 8001854:	4622      	mov	r2, r4
 8001856:	6810      	ldr	r0, [r2, #0]
 8001858:	6018      	str	r0, [r3, #0]
 800185a:	8892      	ldrh	r2, [r2, #4]
 800185c:	809a      	strh	r2, [r3, #4]
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <StartGnssReceiveTask+0x94>)
 8001860:	6818      	ldr	r0, [r3, #0]
 8001862:	f107 010c 	add.w	r1, r7, #12
 8001866:	2300      	movs	r3, #0
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	f009 fa5c 	bl	800ad28 <xQueueGenericSend>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d003      	beq.n	800187e <StartGnssReceiveTask+0x7e>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4618      	mov	r0, r3
 800187a:	f00b fc2b 	bl	800d0d4 <vPortFree>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 800187e:	2001      	movs	r0, #1
 8001880:	f008 fdc0 	bl	800a404 <osDelay>
		if (pdTRUE
 8001884:	e7c0      	b.n	8001808 <StartGnssReceiveTask+0x8>
 8001886:	bf00      	nop
 8001888:	200062d8 	.word	0x200062d8
 800188c:	200063e8 	.word	0x200063e8
 8001890:	0800d6d4 	.word	0x0800d6d4
 8001894:	200062bc 	.word	0x200062bc

08001898 <StartRfReceiveTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartRfReceiveTask */
void StartRfReceiveTask(void const * argument)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	/* Infinite loop */
	for (;;) {

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &rfReceiveHandle,
 80018a0:	4b1e      	ldr	r3, [pc, #120]	; (800191c <StartRfReceiveTask+0x84>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	f04f 32ff 	mov.w	r2, #4294967295
 80018aa:	491d      	ldr	r1, [pc, #116]	; (8001920 <StartRfReceiveTask+0x88>)
 80018ac:	f009 fa3c 	bl	800ad28 <xQueueGenericSend>
 80018b0:	4603      	mov	r3, r0
		if (pdTRUE
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d02d      	beq.n	8001912 <StartRfReceiveTask+0x7a>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR("rfReceive failed to send to reportToWatchdogQueue\r\n");
 80018b6:	2033      	movs	r0, #51	; 0x33
 80018b8:	f00b fb4a 	bl	800cf50 <pvPortMalloc>
 80018bc:	4603      	mov	r3, r0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d025      	beq.n	8001912 <StartRfReceiveTask+0x7a>
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4a16      	ldr	r2, [pc, #88]	; (8001924 <StartRfReceiveTask+0x8c>)
 80018ca:	4614      	mov	r4, r2
 80018cc:	469c      	mov	ip, r3
 80018ce:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80018d2:	4665      	mov	r5, ip
 80018d4:	4626      	mov	r6, r4
 80018d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80018d8:	6028      	str	r0, [r5, #0]
 80018da:	6069      	str	r1, [r5, #4]
 80018dc:	60aa      	str	r2, [r5, #8]
 80018de:	60eb      	str	r3, [r5, #12]
 80018e0:	3410      	adds	r4, #16
 80018e2:	f10c 0c10 	add.w	ip, ip, #16
 80018e6:	4574      	cmp	r4, lr
 80018e8:	d1f3      	bne.n	80018d2 <StartRfReceiveTask+0x3a>
 80018ea:	4663      	mov	r3, ip
 80018ec:	4622      	mov	r2, r4
 80018ee:	6810      	ldr	r0, [r2, #0]
 80018f0:	6018      	str	r0, [r3, #0]
 80018f2:	4b0d      	ldr	r3, [pc, #52]	; (8001928 <StartRfReceiveTask+0x90>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	f107 010c 	add.w	r1, r7, #12
 80018fa:	2300      	movs	r3, #0
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	f009 fa12 	bl	800ad28 <xQueueGenericSend>
 8001904:	4603      	mov	r3, r0
 8001906:	2b01      	cmp	r3, #1
 8001908:	d003      	beq.n	8001912 <StartRfReceiveTask+0x7a>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4618      	mov	r0, r3
 800190e:	f00b fbe1 	bl	800d0d4 <vPortFree>
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001912:	2001      	movs	r0, #1
 8001914:	f008 fd76 	bl	800a404 <osDelay>
		if (pdTRUE
 8001918:	e7c2      	b.n	80018a0 <StartRfReceiveTask+0x8>
 800191a:	bf00      	nop
 800191c:	200062d8 	.word	0x200062d8
 8001920:	20006580 	.word	0x20006580
 8001924:	0800d70c 	.word	0x0800d70c
 8001928:	200062bc 	.word	0x200062bc

0800192c <StartCanGatekeeperTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCanGatekeeperTask */
void StartCanGatekeeperTask(void const * argument)
{
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	static CanFrameTypedef frameBuff; /* CAN frame buffer */
	static uint32_t dummy; /* CAN Tx mailbox */
	/* Infinite loop */
	for (;;) {
		/* Check for outgoing messages */
		if (pdTRUE == xQueueReceive(canTransmitQueueHandle, &frameBuff,
 8001934:	4b66      	ldr	r3, [pc, #408]	; (8001ad0 <StartCanGatekeeperTask+0x1a4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2200      	movs	r2, #0
 800193a:	4966      	ldr	r1, [pc, #408]	; (8001ad4 <StartCanGatekeeperTask+0x1a8>)
 800193c:	4618      	mov	r0, r3
 800193e:	f009 fc0b 	bl	800b158 <xQueueReceive>
 8001942:	4603      	mov	r3, r0
 8001944:	2b01      	cmp	r3, #1
 8001946:	d13b      	bne.n	80019c0 <StartCanGatekeeperTask+0x94>
		WCU_CANTRANSMITQUEUE_RECEIVE_TIMEOUT)) {
			/* Validate the DataDirection member */
			if (TX == frameBuff.DataDirection) {
 8001948:	4b62      	ldr	r3, [pc, #392]	; (8001ad4 <StartCanGatekeeperTask+0x1a8>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d106      	bne.n	800195e <StartCanGatekeeperTask+0x32>
				/* Send the message */
				HAL_CAN_AddTxMessage(&hcan1, &frameBuff.Header.Tx,
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <StartCanGatekeeperTask+0x1ac>)
 8001952:	4a62      	ldr	r2, [pc, #392]	; (8001adc <StartCanGatekeeperTask+0x1b0>)
 8001954:	4962      	ldr	r1, [pc, #392]	; (8001ae0 <StartCanGatekeeperTask+0x1b4>)
 8001956:	4863      	ldr	r0, [pc, #396]	; (8001ae4 <StartCanGatekeeperTask+0x1b8>)
 8001958:	f000 ffca 	bl	80028f0 <HAL_CAN_AddTxMessage>
 800195c:	e030      	b.n	80019c0 <StartCanGatekeeperTask+0x94>
						frameBuff.Payload, &dummy);
			} else {
				/* Log error */
				LOGERROR("Invalid DataDirection in canGatekeeper\r\n");
 800195e:	2028      	movs	r0, #40	; 0x28
 8001960:	f00b faf6 	bl	800cf50 <pvPortMalloc>
 8001964:	4603      	mov	r3, r0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d028      	beq.n	80019c0 <StartCanGatekeeperTask+0x94>
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	4a5d      	ldr	r2, [pc, #372]	; (8001ae8 <StartCanGatekeeperTask+0x1bc>)
 8001972:	4614      	mov	r4, r2
 8001974:	469c      	mov	ip, r3
 8001976:	f104 0e20 	add.w	lr, r4, #32
 800197a:	4665      	mov	r5, ip
 800197c:	4626      	mov	r6, r4
 800197e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001980:	6028      	str	r0, [r5, #0]
 8001982:	6069      	str	r1, [r5, #4]
 8001984:	60aa      	str	r2, [r5, #8]
 8001986:	60eb      	str	r3, [r5, #12]
 8001988:	3410      	adds	r4, #16
 800198a:	f10c 0c10 	add.w	ip, ip, #16
 800198e:	4574      	cmp	r4, lr
 8001990:	d1f3      	bne.n	800197a <StartCanGatekeeperTask+0x4e>
 8001992:	4662      	mov	r2, ip
 8001994:	4623      	mov	r3, r4
 8001996:	cb03      	ldmia	r3!, {r0, r1}
 8001998:	6010      	str	r0, [r2, #0]
 800199a:	6051      	str	r1, [r2, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	7213      	strb	r3, [r2, #8]
 80019a0:	4b52      	ldr	r3, [pc, #328]	; (8001aec <StartCanGatekeeperTask+0x1c0>)
 80019a2:	6818      	ldr	r0, [r3, #0]
 80019a4:	f107 0114 	add.w	r1, r7, #20
 80019a8:	2300      	movs	r3, #0
 80019aa:	f04f 32ff 	mov.w	r2, #4294967295
 80019ae:	f009 f9bb 	bl	800ad28 <xQueueGenericSend>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d003      	beq.n	80019c0 <StartCanGatekeeperTask+0x94>
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00b fb8a 	bl	800d0d4 <vPortFree>
			}
		}

		/* Check for incoming messages */
		if (0U < HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0)) {
 80019c0:	2100      	movs	r1, #0
 80019c2:	4848      	ldr	r0, [pc, #288]	; (8001ae4 <StartCanGatekeeperTask+0x1b8>)
 80019c4:	f001 f981 	bl	8002cca <HAL_CAN_GetRxFifoFillLevel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d041      	beq.n	8001a52 <StartCanGatekeeperTask+0x126>
			/* Receive the message */
			HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &frameBuff.Header.Rx,
 80019ce:	4b43      	ldr	r3, [pc, #268]	; (8001adc <StartCanGatekeeperTask+0x1b0>)
 80019d0:	4a43      	ldr	r2, [pc, #268]	; (8001ae0 <StartCanGatekeeperTask+0x1b4>)
 80019d2:	2100      	movs	r1, #0
 80019d4:	4843      	ldr	r0, [pc, #268]	; (8001ae4 <StartCanGatekeeperTask+0x1b8>)
 80019d6:	f001 f866 	bl	8002aa6 <HAL_CAN_GetRxMessage>
					frameBuff.Payload);
			/* Set the DataDirection member in the CAN frame struct */
			frameBuff.DataDirection = RX;
 80019da:	4b3e      	ldr	r3, [pc, #248]	; (8001ad4 <StartCanGatekeeperTask+0x1a8>)
 80019dc:	2201      	movs	r2, #1
 80019de:	701a      	strb	r2, [r3, #0]
			/* Send the frame to the telemetry queue */
			if (pdTRUE
					!= xQueueSend(canReceiveQueueHandle, &frameBuff,
 80019e0:	4b43      	ldr	r3, [pc, #268]	; (8001af0 <StartCanGatekeeperTask+0x1c4>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	2300      	movs	r3, #0
 80019e6:	f04f 32ff 	mov.w	r2, #4294967295
 80019ea:	493a      	ldr	r1, [pc, #232]	; (8001ad4 <StartCanGatekeeperTask+0x1a8>)
 80019ec:	f009 f99c 	bl	800ad28 <xQueueGenericSend>
 80019f0:	4603      	mov	r3, r0
			if (pdTRUE
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d02d      	beq.n	8001a52 <StartCanGatekeeperTask+0x126>
							WCU_CANRECEIVEQUEUE_SEND_TIMEOUT)) {
				/* Log error */
				LOGERROR("canGatekeeper failed to send to canReceiveQueue\r\n");
 80019f6:	2031      	movs	r0, #49	; 0x31
 80019f8:	f00b faaa 	bl	800cf50 <pvPortMalloc>
 80019fc:	4603      	mov	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d025      	beq.n	8001a52 <StartCanGatekeeperTask+0x126>
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <StartCanGatekeeperTask+0x1c8>)
 8001a0a:	4614      	mov	r4, r2
 8001a0c:	469c      	mov	ip, r3
 8001a0e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001a12:	4665      	mov	r5, ip
 8001a14:	4626      	mov	r6, r4
 8001a16:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a18:	6028      	str	r0, [r5, #0]
 8001a1a:	6069      	str	r1, [r5, #4]
 8001a1c:	60aa      	str	r2, [r5, #8]
 8001a1e:	60eb      	str	r3, [r5, #12]
 8001a20:	3410      	adds	r4, #16
 8001a22:	f10c 0c10 	add.w	ip, ip, #16
 8001a26:	4574      	cmp	r4, lr
 8001a28:	d1f3      	bne.n	8001a12 <StartCanGatekeeperTask+0xe6>
 8001a2a:	4662      	mov	r2, ip
 8001a2c:	4623      	mov	r3, r4
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	8013      	strh	r3, [r2, #0]
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <StartCanGatekeeperTask+0x1c0>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f107 0110 	add.w	r1, r7, #16
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	f009 f972 	bl	800ad28 <xQueueGenericSend>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d003      	beq.n	8001a52 <StartCanGatekeeperTask+0x126>
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00b fb41 	bl	800d0d4 <vPortFree>
			}
		}

		/* Report to watchdog */
		if (pdTRUE
				!= xQueueSend(reportToWatchdogQueueHandle, &canGatekeeperHandle,
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <StartCanGatekeeperTask+0x1cc>)
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	f04f 32ff 	mov.w	r2, #4294967295
 8001a5c:	4927      	ldr	r1, [pc, #156]	; (8001afc <StartCanGatekeeperTask+0x1d0>)
 8001a5e:	f009 f963 	bl	800ad28 <xQueueGenericSend>
 8001a62:	4603      	mov	r3, r0
		if (pdTRUE
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d02e      	beq.n	8001ac6 <StartCanGatekeeperTask+0x19a>
						WCU_REPORTTOWATCHDOGQUEUE_SEND_TIMEOUT)) {
			/* Log error */
			LOGERROR(
 8001a68:	2037      	movs	r0, #55	; 0x37
 8001a6a:	f00b fa71 	bl	800cf50 <pvPortMalloc>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d026      	beq.n	8001ac6 <StartCanGatekeeperTask+0x19a>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <StartCanGatekeeperTask+0x1d4>)
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	469c      	mov	ip, r3
 8001a80:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001a84:	4665      	mov	r5, ip
 8001a86:	4626      	mov	r6, r4
 8001a88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a8a:	6028      	str	r0, [r5, #0]
 8001a8c:	6069      	str	r1, [r5, #4]
 8001a8e:	60aa      	str	r2, [r5, #8]
 8001a90:	60eb      	str	r3, [r5, #12]
 8001a92:	3410      	adds	r4, #16
 8001a94:	f10c 0c10 	add.w	ip, ip, #16
 8001a98:	4574      	cmp	r4, lr
 8001a9a:	d1f3      	bne.n	8001a84 <StartCanGatekeeperTask+0x158>
 8001a9c:	4662      	mov	r2, ip
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	cb03      	ldmia	r3!, {r0, r1}
 8001aa2:	6010      	str	r0, [r2, #0]
 8001aa4:	6051      	str	r1, [r2, #4]
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <StartCanGatekeeperTask+0x1c0>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f107 010c 	add.w	r1, r7, #12
 8001aae:	2300      	movs	r3, #0
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	f009 f938 	bl	800ad28 <xQueueGenericSend>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d003      	beq.n	8001ac6 <StartCanGatekeeperTask+0x19a>
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00b fb07 	bl	800d0d4 <vPortFree>
					"canGatekeeper failed to send to reportToWatchdogQueue\r\n");
		}
		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001ac6:	2001      	movs	r0, #1
 8001ac8:	f008 fc9c 	bl	800a404 <osDelay>
		if (pdTRUE == xQueueReceive(canTransmitQueueHandle, &frameBuff,
 8001acc:	e732      	b.n	8001934 <StartCanGatekeeperTask+0x8>
 8001ace:	bf00      	nop
 8001ad0:	20006510 	.word	0x20006510
 8001ad4:	200003f8 	.word	0x200003f8
 8001ad8:	20000420 	.word	0x20000420
 8001adc:	20000418 	.word	0x20000418
 8001ae0:	200003fc 	.word	0x200003fc
 8001ae4:	20006558 	.word	0x20006558
 8001ae8:	0800d740 	.word	0x0800d740
 8001aec:	200062bc 	.word	0x200062bc
 8001af0:	2000650c 	.word	0x2000650c
 8001af4:	0800d76c 	.word	0x0800d76c
 8001af8:	200062d8 	.word	0x200062d8
 8001afc:	20006514 	.word	0x20006514
 8001b00:	0800d7a0 	.word	0x0800d7a0

08001b04 <StartSdioGatekeeperTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSdioGatekeeperTask */
void StartSdioGatekeeperTask(void const * argument)
{
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	static FIL subscriptionFile; /* Telemetry subscription file object structure */
	static char* errorLogBuff; /* Buffer for the pointer to the error message */
	static UINT bytesWritten; /* Buffer for the number of bytes written */

	/* Mount a logical drive */
	while (FR_OK != f_mount(&fatFs, SDPath, 1)) {
 8001b0c:	e000      	b.n	8001b10 <StartSdioGatekeeperTask+0xc>
		__NOP();
 8001b0e:	bf00      	nop
	while (FR_OK != f_mount(&fatFs, SDPath, 1)) {
 8001b10:	2201      	movs	r2, #1
 8001b12:	491a      	ldr	r1, [pc, #104]	; (8001b7c <StartSdioGatekeeperTask+0x78>)
 8001b14:	481a      	ldr	r0, [pc, #104]	; (8001b80 <StartSdioGatekeeperTask+0x7c>)
 8001b16:	f007 fe83 	bl	8009820 <f_mount>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f6      	bne.n	8001b0e <StartSdioGatekeeperTask+0xa>
	 */

	/* Infinite loop */
	for (;;) {
		/* Wait for incoming error messages */
		if(pdPASS == xQueueReceive(sdioLogErrorQueueHandle, &errorLogBuff, WCU_SDIOLOGERRORQUEUE_RECEIVE_TIMEOUT)) {
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <StartSdioGatekeeperTask+0x80>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2200      	movs	r2, #0
 8001b26:	4918      	ldr	r1, [pc, #96]	; (8001b88 <StartSdioGatekeeperTask+0x84>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f009 fb15 	bl	800b158 <xQueueReceive>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d11f      	bne.n	8001b74 <StartSdioGatekeeperTask+0x70>
			if(FR_OK == f_open(&errorLogFile, WCU_ERROR_LOG_PATH, FA_WRITE | FA_OPEN_APPEND)) {
 8001b34:	2232      	movs	r2, #50	; 0x32
 8001b36:	4915      	ldr	r1, [pc, #84]	; (8001b8c <StartSdioGatekeeperTask+0x88>)
 8001b38:	4815      	ldr	r0, [pc, #84]	; (8001b90 <StartSdioGatekeeperTask+0x8c>)
 8001b3a:	f007 fed5 	bl	80098e8 <f_open>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d117      	bne.n	8001b74 <StartSdioGatekeeperTask+0x70>
				f_write(&errorLogFile, errorLogBuff, strlen(errorLogBuff), &bytesWritten);
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <StartSdioGatekeeperTask+0x84>)
 8001b46:	681c      	ldr	r4, [r3, #0]
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <StartSdioGatekeeperTask+0x84>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fb3f 	bl	80001d0 <strlen>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <StartSdioGatekeeperTask+0x90>)
 8001b56:	4621      	mov	r1, r4
 8001b58:	480d      	ldr	r0, [pc, #52]	; (8001b90 <StartSdioGatekeeperTask+0x8c>)
 8001b5a:	f008 f898 	bl	8009c8e <f_write>
				/* Close the file */
				f_close(&errorLogFile);
 8001b5e:	480c      	ldr	r0, [pc, #48]	; (8001b90 <StartSdioGatekeeperTask+0x8c>)
 8001b60:	f008 fae1 	bl	800a126 <f_close>
				/* Free the allocated memory */
				vPortFree(errorLogBuff);
 8001b64:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <StartSdioGatekeeperTask+0x84>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f00b fab3 	bl	800d0d4 <vPortFree>
				errorLogBuff = NULL;
 8001b6e:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <StartSdioGatekeeperTask+0x84>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]

		/*
		 * TODO: Wait for new telemetry subscription
		 */

		osDelay(WCU_DEFAULT_TASK_DELAY);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f008 fc45 	bl	800a404 <osDelay>
		if(pdPASS == xQueueReceive(sdioLogErrorQueueHandle, &errorLogBuff, WCU_SDIOLOGERRORQUEUE_RECEIVE_TIMEOUT)) {
 8001b7a:	e7d1      	b.n	8001b20 <StartSdioGatekeeperTask+0x1c>
 8001b7c:	200065cc 	.word	0x200065cc
 8001b80:	20000424 	.word	0x20000424
 8001b84:	200062bc 	.word	0x200062bc
 8001b88:	2000145c 	.word	0x2000145c
 8001b8c:	0800d7d8 	.word	0x0800d7d8
 8001b90:	20001460 	.word	0x20001460
 8001b94:	20002490 	.word	0x20002490

08001b98 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d101      	bne.n	8001bae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001baa:	f000 fc83 	bl	80024b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40001000 	.word	0x40001000

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bc0:	bf00      	nop
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <setCanFilterList>:
 * @param hcan pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @param ids Pointer to an array of 32-bit CAN IDs to filter for
 * @param count Length of the ids array
 */
void setCanFilterList(CAN_HandleTypeDef *hcan, uint32_t* ids, uint32_t count) {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b090      	sub	sp, #64	; 0x40
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
	/* Assert valid ids array length */
	if(count <= CAN_FILTERBANKS_COUNT * 4) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b70      	cmp	r3, #112	; 0x70
 8001bdc:	d878      	bhi.n	8001cd0 <setCanFilterList+0x104>
		/* Prepare the filter configuration structure */
		CAN_FilterTypeDef filterConfig;
		/* Select the CAN FIFO to filter */
		filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
		/* Select the filter mode as IDLIST - CAN IDs will be stored in the filter bank registers */
		filterConfig.FilterMode = CAN_FILTERMODE_IDLIST;
 8001be2:	2301      	movs	r3, #1
 8001be4:	62bb      	str	r3, [r7, #40]	; 0x28
		/* Set the filter scale as 16 bit, since only the standard 11-bit CAN IDs are used - this allows four IDs per bank */
		filterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Clear the previous filter config */
		filterConfig.FilterIdHigh = 0x00000000U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
		filterConfig.FilterIdLow = 0x00000000U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
		filterConfig.FilterMaskIdHigh = 0x00000000U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
		filterConfig.FilterMaskIdLow = 0x00000000U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
		filterConfig.FilterActivation = DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c02:	e00a      	b.n	8001c1a <setCanFilterList+0x4e>
			filterConfig.FilterBank = i;
 8001c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c06:	627b      	str	r3, [r7, #36]	; 0x24
			HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 fd8e 	bl	8002730 <HAL_CAN_ConfigFilter>
		for(uint32_t i = 0; i < CAN_FILTERBANKS_COUNT; i += 1) {
 8001c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c16:	3301      	adds	r3, #1
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c1c:	2b1b      	cmp	r3, #27
 8001c1e:	d9f1      	bls.n	8001c04 <setCanFilterList+0x38>
		}

		/* Set the new filter */
		filterConfig.FilterActivation = ENABLE;
 8001c20:	2301      	movs	r3, #1
 8001c22:	633b      	str	r3, [r7, #48]	; 0x30
		for(uint32_t i = 0; i < count; i += 1) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c28:	e04e      	b.n	8001cc8 <setCanFilterList+0xfc>
			switch(i % 4) {
 8001c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d82b      	bhi.n	8001c8c <setCanFilterList+0xc0>
 8001c34:	a201      	add	r2, pc, #4	; (adr r2, 8001c3c <setCanFilterList+0x70>)
 8001c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c3a:	bf00      	nop
 8001c3c:	08001c4d 	.word	0x08001c4d
 8001c40:	08001c5d 	.word	0x08001c5d
 8001c44:	08001c6d 	.word	0x08001c6d
 8001c48:	08001c7d 	.word	0x08001c7d
			case 0:
				filterConfig.FilterIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	613b      	str	r3, [r7, #16]
				break;
 8001c5a:	e017      	b.n	8001c8c <setCanFilterList+0xc0>
			case 1:
				filterConfig.FilterIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	4413      	add	r3, r2
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	015b      	lsls	r3, r3, #5
 8001c68:	617b      	str	r3, [r7, #20]
				break;
 8001c6a:	e00f      	b.n	8001c8c <setCanFilterList+0xc0>
			case 2:
				filterConfig.FilterMaskIdHigh = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4413      	add	r3, r2
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	015b      	lsls	r3, r3, #5
 8001c78:	61bb      	str	r3, [r7, #24]
				break;
 8001c7a:	e007      	b.n	8001c8c <setCanFilterList+0xc0>
			case 3:
				filterConfig.FilterMaskIdLow = ALIGN_CAN_ID_WITH_FILTER_FIELD_MAPPING(ids[i]);
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	68ba      	ldr	r2, [r7, #8]
 8001c82:	4413      	add	r3, r2
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	61fb      	str	r3, [r7, #28]
				break;
 8001c8a:	bf00      	nop
			}

			/* If the filter bank is fully configured or there are no more IDs, call HAL_CAN_ConfigFilter */
			if((i % 4 == 3) || (i + 1 == count)) {
 8001c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d004      	beq.n	8001ca0 <setCanFilterList+0xd4>
 8001c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c98:	3301      	adds	r3, #1
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d110      	bne.n	8001cc2 <setCanFilterList+0xf6>
				/* Configure the filter */
				HAL_CAN_ConfigFilter(hcan, &filterConfig);
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 fd42 	bl	8002730 <HAL_CAN_ConfigFilter>
				/* On fully configured filter bank, proceed to the next one */
				filterConfig.FilterBank += 1;
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	3301      	adds	r3, #1
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
				/* Clear the config structure ID members */
				filterConfig.FilterIdHigh = 0x00000000U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
				filterConfig.FilterIdLow = 0x00000000U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
				filterConfig.FilterMaskIdHigh = 0x00000000U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]
				filterConfig.FilterMaskIdLow = 0x00000000U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61fb      	str	r3, [r7, #28]
		for(uint32_t i = 0; i < count; i += 1) {
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d3ac      	bcc.n	8001c2a <setCanFilterList+0x5e>
			}
		}
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	3740      	adds	r7, #64	; 0x40
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_MspInit+0x54>)
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce6:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_MspInit+0x54>)
 8001ce8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cec:	6453      	str	r3, [r2, #68]	; 0x44
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_MspInit+0x54>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_MspInit+0x54>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_MspInit+0x54>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_MspInit+0x54>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	210f      	movs	r1, #15
 8001d1a:	f06f 0001 	mvn.w	r0, #1
 8001d1e:	f001 f8b5 	bl	8002e8c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a19      	ldr	r2, [pc, #100]	; (8001db4 <HAL_CAN_MspInit+0x84>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d12c      	bne.n	8001dac <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_CAN_MspInit+0x88>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a17      	ldr	r2, [pc, #92]	; (8001db8 <HAL_CAN_MspInit+0x88>)
 8001d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
 8001d62:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <HAL_CAN_MspInit+0x88>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_CAN_MspInit+0x88>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a10      	ldr	r2, [pc, #64]	; (8001db8 <HAL_CAN_MspInit+0x88>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <HAL_CAN_MspInit+0x88>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001d9c:	2309      	movs	r3, #9
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <HAL_CAN_MspInit+0x8c>)
 8001da8:	f001 fc86 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001dac:	bf00      	nop
 8001dae:	3728      	adds	r7, #40	; 0x28
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	40006400 	.word	0x40006400
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	40020400 	.word	0x40020400

08001dc0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a0b      	ldr	r2, [pc, #44]	; (8001dfc <HAL_CRC_MspInit+0x3c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10d      	bne.n	8001dee <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_CRC_MspInit+0x40>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_CRC_MspInit+0x40>)
 8001ddc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de0:	6313      	str	r3, [r2, #48]	; 0x30
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_CRC_MspInit+0x40>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40023000 	.word	0x40023000
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a68      	ldr	r2, [pc, #416]	; (8001fc4 <HAL_SD_MspInit+0x1c0>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	f040 80c9 	bne.w	8001fba <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001e28:	2300      	movs	r3, #0
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	4b66      	ldr	r3, [pc, #408]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	4a65      	ldr	r2, [pc, #404]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e36:	6453      	str	r3, [r2, #68]	; 0x44
 8001e38:	4b63      	ldr	r3, [pc, #396]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	4b5f      	ldr	r3, [pc, #380]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4c:	4a5e      	ldr	r2, [pc, #376]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6313      	str	r3, [r2, #48]	; 0x30
 8001e54:	4b5c      	ldr	r3, [pc, #368]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	4b58      	ldr	r3, [pc, #352]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e68:	4a57      	ldr	r2, [pc, #348]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e6a:	f043 0308 	orr.w	r3, r3, #8
 8001e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e70:	4b55      	ldr	r3, [pc, #340]	; (8001fc8 <HAL_SD_MspInit+0x1c4>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8001e7c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e80:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001e8e:	230c      	movs	r3, #12
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	484c      	ldr	r0, [pc, #304]	; (8001fcc <HAL_SD_MspInit+0x1c8>)
 8001e9a:	f001 fc0d 	bl	80036b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001eae:	230c      	movs	r3, #12
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eb2:	f107 0314 	add.w	r3, r7, #20
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4845      	ldr	r0, [pc, #276]	; (8001fd0 <HAL_SD_MspInit+0x1cc>)
 8001eba:	f001 fbfd 	bl	80036b8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001ebe:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001ec0:	4a45      	ldr	r2, [pc, #276]	; (8001fd8 <HAL_SD_MspInit+0x1d4>)
 8001ec2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001ec6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eca:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed8:	4b3e      	ldr	r3, [pc, #248]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001eda:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ede:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001ee0:	4b3c      	ldr	r3, [pc, #240]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001ee2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001eea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001eee:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001ef0:	4b38      	ldr	r3, [pc, #224]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef6:	4b37      	ldr	r3, [pc, #220]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001efc:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001efe:	2204      	movs	r2, #4
 8001f00:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f02:	4b34      	ldr	r3, [pc, #208]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001f04:	2203      	movs	r2, #3
 8001f06:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001f08:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001f0a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f0e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f10:	4b30      	ldr	r3, [pc, #192]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001f12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f16:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001f18:	482e      	ldr	r0, [pc, #184]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001f1a:	f001 f831 	bl	8002f80 <HAL_DMA_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8001f24:	f7ff fe4a 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4a2a      	ldr	r2, [pc, #168]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001f2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f2e:	4a29      	ldr	r2, [pc, #164]	; (8001fd4 <HAL_SD_MspInit+0x1d0>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f36:	4a2a      	ldr	r2, [pc, #168]	; (8001fe0 <HAL_SD_MspInit+0x1dc>)
 8001f38:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f40:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f42:	4b26      	ldr	r3, [pc, #152]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f44:	2240      	movs	r2, #64	; 0x40
 8001f46:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f48:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f4e:	4b23      	ldr	r3, [pc, #140]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f54:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f56:	4b21      	ldr	r3, [pc, #132]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f5c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f60:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f64:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f68:	2220      	movs	r2, #32
 8001f6a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f74:	2204      	movs	r2, #4
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001f78:	4b18      	ldr	r3, [pc, #96]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001f86:	4b15      	ldr	r3, [pc, #84]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f88:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f8c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001f8e:	4813      	ldr	r0, [pc, #76]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001f90:	f000 fff6 	bl	8002f80 <HAL_DMA_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8001f9a:	f7ff fe0f 	bl	8001bbc <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001fa2:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fa4:	4a0d      	ldr	r2, [pc, #52]	; (8001fdc <HAL_SD_MspInit+0x1d8>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2105      	movs	r1, #5
 8001fae:	2031      	movs	r0, #49	; 0x31
 8001fb0:	f000 ff6c 	bl	8002e8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001fb4:	2031      	movs	r0, #49	; 0x31
 8001fb6:	f000 ff85 	bl	8002ec4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001fba:	bf00      	nop
 8001fbc:	3728      	adds	r7, #40	; 0x28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40012c00 	.word	0x40012c00
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	20006218 	.word	0x20006218
 8001fd8:	40026458 	.word	0x40026458
 8001fdc:	20006380 	.word	0x20006380
 8001fe0:	400264a0 	.word	0x400264a0

08001fe4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a19      	ldr	r2, [pc, #100]	; (8002068 <HAL_SPI_MspInit+0x84>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d12b      	bne.n	800205e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <HAL_SPI_MspInit+0x88>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	4a17      	ldr	r2, [pc, #92]	; (800206c <HAL_SPI_MspInit+0x88>)
 8002010:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002014:	6453      	str	r3, [r2, #68]	; 0x44
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_SPI_MspInit+0x88>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800201e:	613b      	str	r3, [r7, #16]
 8002020:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	4b11      	ldr	r3, [pc, #68]	; (800206c <HAL_SPI_MspInit+0x88>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a10      	ldr	r2, [pc, #64]	; (800206c <HAL_SPI_MspInit+0x88>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b0e      	ldr	r3, [pc, #56]	; (800206c <HAL_SPI_MspInit+0x88>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = RF_SP1_SCK_Pin|RF_SPI1_MISO_Pin|RF_SPI1_MOSI_Pin;
 800203e:	23e0      	movs	r3, #224	; 0xe0
 8002040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800204e:	2305      	movs	r3, #5
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	4619      	mov	r1, r3
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_SPI_MspInit+0x8c>)
 800205a:	f001 fb2d 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40013000 	.word	0x40013000
 800206c:	40023800 	.word	0x40023800
 8002070:	40020000 	.word	0x40020000

08002074 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b090      	sub	sp, #64	; 0x40
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]
 800208a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a7c      	ldr	r2, [pc, #496]	; (8002284 <HAL_UART_MspInit+0x210>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d12c      	bne.n	80020f0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	; 0x28
 800209a:	4b7b      	ldr	r3, [pc, #492]	; (8002288 <HAL_UART_MspInit+0x214>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a7a      	ldr	r2, [pc, #488]	; (8002288 <HAL_UART_MspInit+0x214>)
 80020a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b78      	ldr	r3, [pc, #480]	; (8002288 <HAL_UART_MspInit+0x214>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
 80020b6:	4b74      	ldr	r3, [pc, #464]	; (8002288 <HAL_UART_MspInit+0x214>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	4a73      	ldr	r2, [pc, #460]	; (8002288 <HAL_UART_MspInit+0x214>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6313      	str	r3, [r2, #48]	; 0x30
 80020c2:	4b71      	ldr	r3, [pc, #452]	; (8002288 <HAL_UART_MspInit+0x214>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
 80020cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration    
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = XBEE_UART3_TX_Pin|XBEE_UART3_RX_Pin;
 80020ce:	2303      	movs	r3, #3
 80020d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d2:	2302      	movs	r3, #2
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d6:	2301      	movs	r3, #1
 80020d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020da:	2303      	movs	r3, #3
 80020dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020de:	2308      	movs	r3, #8
 80020e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e6:	4619      	mov	r1, r3
 80020e8:	4868      	ldr	r0, [pc, #416]	; (800228c <HAL_UART_MspInit+0x218>)
 80020ea:	f001 fae5 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ee:	e0c5      	b.n	800227c <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a66      	ldr	r2, [pc, #408]	; (8002290 <HAL_UART_MspInit+0x21c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d15c      	bne.n	80021b4 <HAL_UART_MspInit+0x140>
    __HAL_RCC_USART1_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	623b      	str	r3, [r7, #32]
 80020fe:	4b62      	ldr	r3, [pc, #392]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a61      	ldr	r2, [pc, #388]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002104:	f043 0310 	orr.w	r3, r3, #16
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b5f      	ldr	r3, [pc, #380]	; (8002288 <HAL_UART_MspInit+0x214>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f003 0310 	and.w	r3, r3, #16
 8002112:	623b      	str	r3, [r7, #32]
 8002114:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	4b5b      	ldr	r3, [pc, #364]	; (8002288 <HAL_UART_MspInit+0x214>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a5a      	ldr	r2, [pc, #360]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b58      	ldr	r3, [pc, #352]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = BT_UART1_TX_Pin|BT_UART1_RX_Pin;
 8002132:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002140:	2303      	movs	r3, #3
 8002142:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002144:	2307      	movs	r3, #7
 8002146:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800214c:	4619      	mov	r1, r3
 800214e:	484f      	ldr	r0, [pc, #316]	; (800228c <HAL_UART_MspInit+0x218>)
 8002150:	f001 fab2 	bl	80036b8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002154:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_UART_MspInit+0x220>)
 8002156:	4a50      	ldr	r2, [pc, #320]	; (8002298 <HAL_UART_MspInit+0x224>)
 8002158:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800215a:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_UART_MspInit+0x220>)
 800215c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002160:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002162:	4b4c      	ldr	r3, [pc, #304]	; (8002294 <HAL_UART_MspInit+0x220>)
 8002164:	2200      	movs	r2, #0
 8002166:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002168:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_UART_MspInit+0x220>)
 800216a:	2200      	movs	r2, #0
 800216c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800216e:	4b49      	ldr	r3, [pc, #292]	; (8002294 <HAL_UART_MspInit+0x220>)
 8002170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002174:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_UART_MspInit+0x220>)
 8002178:	2200      	movs	r2, #0
 800217a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800217c:	4b45      	ldr	r3, [pc, #276]	; (8002294 <HAL_UART_MspInit+0x220>)
 800217e:	2200      	movs	r2, #0
 8002180:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002182:	4b44      	ldr	r3, [pc, #272]	; (8002294 <HAL_UART_MspInit+0x220>)
 8002184:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002188:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <HAL_UART_MspInit+0x220>)
 800218c:	2200      	movs	r2, #0
 800218e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002190:	4b40      	ldr	r3, [pc, #256]	; (8002294 <HAL_UART_MspInit+0x220>)
 8002192:	2200      	movs	r2, #0
 8002194:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002196:	483f      	ldr	r0, [pc, #252]	; (8002294 <HAL_UART_MspInit+0x220>)
 8002198:	f000 fef2 	bl	8002f80 <HAL_DMA_Init>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80021a2:	f7ff fd0b 	bl	8001bbc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <HAL_UART_MspInit+0x220>)
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34
 80021ac:	4a39      	ldr	r2, [pc, #228]	; (8002294 <HAL_UART_MspInit+0x220>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021b2:	e063      	b.n	800227c <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a38      	ldr	r2, [pc, #224]	; (800229c <HAL_UART_MspInit+0x228>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d12c      	bne.n	8002218 <HAL_UART_MspInit+0x1a4>
    __HAL_RCC_USART2_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	4b31      	ldr	r3, [pc, #196]	; (8002288 <HAL_UART_MspInit+0x214>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a30      	ldr	r2, [pc, #192]	; (8002288 <HAL_UART_MspInit+0x214>)
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_UART_MspInit+0x214>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	4b2a      	ldr	r3, [pc, #168]	; (8002288 <HAL_UART_MspInit+0x214>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a29      	ldr	r2, [pc, #164]	; (8002288 <HAL_UART_MspInit+0x214>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b27      	ldr	r3, [pc, #156]	; (8002288 <HAL_UART_MspInit+0x214>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	617b      	str	r3, [r7, #20]
 80021f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021f6:	230c      	movs	r3, #12
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002202:	2303      	movs	r3, #3
 8002204:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002206:	2307      	movs	r3, #7
 8002208:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220e:	4619      	mov	r1, r3
 8002210:	481e      	ldr	r0, [pc, #120]	; (800228c <HAL_UART_MspInit+0x218>)
 8002212:	f001 fa51 	bl	80036b8 <HAL_GPIO_Init>
}
 8002216:	e031      	b.n	800227c <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_UART_MspInit+0x22c>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d12c      	bne.n	800227c <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	4b18      	ldr	r3, [pc, #96]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <HAL_UART_MspInit+0x214>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6413      	str	r3, [r2, #64]	; 0x40
 8002232:	4b15      	ldr	r3, [pc, #84]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6313      	str	r3, [r2, #48]	; 0x30
 800224e:	4b0e      	ldr	r3, [pc, #56]	; (8002288 <HAL_UART_MspInit+0x214>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GNSS_UART4_TX_Pin|GNSS_UART4_RX_Pin;
 800225a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800225e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800226c:	2307      	movs	r3, #7
 800226e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002274:	4619      	mov	r1, r3
 8002276:	480b      	ldr	r0, [pc, #44]	; (80022a4 <HAL_UART_MspInit+0x230>)
 8002278:	f001 fa1e 	bl	80036b8 <HAL_GPIO_Init>
}
 800227c:	bf00      	nop
 800227e:	3740      	adds	r7, #64	; 0x40
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40004c00 	.word	0x40004c00
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000
 8002290:	40011000 	.word	0x40011000
 8002294:	200062e0 	.word	0x200062e0
 8002298:	40026440 	.word	0x40026440
 800229c:	40004400 	.word	0x40004400
 80022a0:	40004800 	.word	0x40004800
 80022a4:	40020400 	.word	0x40020400

080022a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08c      	sub	sp, #48	; 0x30
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80022b0:	2300      	movs	r3, #0
 80022b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80022b8:	2200      	movs	r2, #0
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	2036      	movs	r0, #54	; 0x36
 80022be:	f000 fde5 	bl	8002e8c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80022c2:	2036      	movs	r0, #54	; 0x36
 80022c4:	f000 fdfe 	bl	8002ec4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	4b1e      	ldr	r3, [pc, #120]	; (8002348 <HAL_InitTick+0xa0>)
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_InitTick+0xa0>)
 80022d2:	f043 0310 	orr.w	r3, r3, #16
 80022d6:	6413      	str	r3, [r2, #64]	; 0x40
 80022d8:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_InitTick+0xa0>)
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f003 0310 	and.w	r3, r3, #16
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022e4:	f107 0210 	add.w	r2, r7, #16
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4611      	mov	r1, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f002 f81a 	bl	8004328 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80022f4:	f001 fff0 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 80022f8:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_InitTick+0xa4>)
 80022fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002302:	0c9b      	lsrs	r3, r3, #18
 8002304:	3b01      	subs	r3, #1
 8002306:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <HAL_InitTick+0xa8>)
 800230a:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_InitTick+0xac>)
 800230c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_InitTick+0xa8>)
 8002310:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002314:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002316:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <HAL_InitTick+0xa8>)
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800231c:	4b0c      	ldr	r3, [pc, #48]	; (8002350 <HAL_InitTick+0xa8>)
 800231e:	2200      	movs	r2, #0
 8002320:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <HAL_InitTick+0xa8>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002328:	4809      	ldr	r0, [pc, #36]	; (8002350 <HAL_InitTick+0xa8>)
 800232a:	f003 fb91 	bl	8005a50 <HAL_TIM_Base_Init>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d104      	bne.n	800233e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002334:	4806      	ldr	r0, [pc, #24]	; (8002350 <HAL_InitTick+0xa8>)
 8002336:	f003 fbc0 	bl	8005aba <HAL_TIM_Base_Start_IT>
 800233a:	4603      	mov	r3, r0
 800233c:	e000      	b.n	8002340 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
}
 8002340:	4618      	mov	r0, r3
 8002342:	3730      	adds	r7, #48	; 0x30
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	431bde83 	.word	0x431bde83
 8002350:	20006584 	.word	0x20006584
 8002354:	40001000 	.word	0x40001000

08002358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002366:	b480      	push	{r7}
 8002368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800236a:	e7fe      	b.n	800236a <HardFault_Handler+0x4>

0800236c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002370:	e7fe      	b.n	8002370 <MemManage_Handler+0x4>

08002372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002372:	b480      	push	{r7}
 8002374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002376:	e7fe      	b.n	8002376 <BusFault_Handler+0x4>

08002378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800237c:	e7fe      	b.n	800237c <UsageFault_Handler+0x4>

0800237e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002390:	4802      	ldr	r0, [pc, #8]	; (800239c <SDIO_IRQHandler+0x10>)
 8002392:	f002 fa65 	bl	8004860 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200063ec 	.word	0x200063ec

080023a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023a4:	4802      	ldr	r0, [pc, #8]	; (80023b0 <TIM6_DAC_IRQHandler+0x10>)
 80023a6:	f003 fbac 	bl	8005b02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20006584 	.word	0x20006584

080023b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80023b8:	4802      	ldr	r0, [pc, #8]	; (80023c4 <DMA2_Stream2_IRQHandler+0x10>)
 80023ba:	f000 ff09 	bl	80031d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80023be:	bf00      	nop
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	200062e0 	.word	0x200062e0

080023c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80023cc:	4802      	ldr	r0, [pc, #8]	; (80023d8 <DMA2_Stream3_IRQHandler+0x10>)
 80023ce:	f000 feff 	bl	80031d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20006218 	.word	0x20006218

080023dc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <DMA2_Stream6_IRQHandler+0x10>)
 80023e2:	f000 fef5 	bl	80031d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20006380 	.word	0x20006380

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b08      	ldr	r3, [pc, #32]	; (8002418 <SystemInit+0x28>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a07      	ldr	r2, [pc, #28]	; (8002418 <SystemInit+0x28>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <SystemInit+0x28>)
 8002406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800240a:	609a      	str	r2, [r3, #8]
#endif
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002422:	e003      	b.n	800242c <LoopCopyDataInit>

08002424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800242a:	3104      	adds	r1, #4

0800242c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800242c:	480b      	ldr	r0, [pc, #44]	; (800245c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800242e:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002434:	d3f6      	bcc.n	8002424 <CopyDataInit>
  ldr  r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002438:	e002      	b.n	8002440 <LoopFillZerobss>

0800243a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800243a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800243c:	f842 3b04 	str.w	r3, [r2], #4

08002440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002444:	d3f9      	bcc.n	800243a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002446:	f7ff ffd3 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f00a ff57 	bl	800d2fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7fe f861 	bl	8000514 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002454:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002458:	0800d908 	.word	0x0800d908
  ldr  r0, =_sdata
 800245c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002460:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8002464:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8002468:	20008678 	.word	0x20008678

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 fcec 	bl	8002e76 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff ff02 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fc18 	bl	8001cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x20>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <HAL_IncTick+0x24>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4413      	add	r3, r2
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_IncTick+0x24>)
 80024c6:	6013      	str	r3, [r2, #0]
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000008 	.word	0x20000008
 80024d8:	200065c4 	.word	0x200065c4

080024dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return uwTick;
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_GetTick+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	200065c4 	.word	0x200065c4

080024f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024fc:	f7ff ffee 	bl	80024dc <HAL_GetTick>
 8002500:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800250c:	d005      	beq.n	800251a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250e:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_Delay+0x40>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	461a      	mov	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4413      	add	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800251a:	bf00      	nop
 800251c:	f7ff ffde 	bl	80024dc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	429a      	cmp	r2, r3
 800252a:	d8f7      	bhi.n	800251c <HAL_Delay+0x28>
  {
  }
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20000008 	.word	0x20000008

08002538 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e0ed      	b.n	8002726 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f7ff fbea 	bl	8001d30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0202 	bic.w	r2, r2, #2
 800256a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800256c:	f7ff ffb6 	bl	80024dc <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002572:	e012      	b.n	800259a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002574:	f7ff ffb2 	bl	80024dc <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b0a      	cmp	r3, #10
 8002580:	d90b      	bls.n	800259a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2205      	movs	r2, #5
 8002592:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0c5      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1e5      	bne.n	8002574 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025b8:	f7ff ff90 	bl	80024dc <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025be:	e012      	b.n	80025e6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025c0:	f7ff ff8c 	bl	80024dc <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b0a      	cmp	r3, #10
 80025cc:	d90b      	bls.n	80025e6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2205      	movs	r2, #5
 80025de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e09f      	b.n	8002726 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0301 	and.w	r3, r3, #1
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0e5      	beq.n	80025c0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	7e1b      	ldrb	r3, [r3, #24]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	e007      	b.n	800261e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800261c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e5b      	ldrb	r3, [r3, #25]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d108      	bne.n	8002638 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e007      	b.n	8002648 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002646:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	7e9b      	ldrb	r3, [r3, #26]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d108      	bne.n	8002662 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0220 	orr.w	r2, r2, #32
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	e007      	b.n	8002672 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0220 	bic.w	r2, r2, #32
 8002670:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	7edb      	ldrb	r3, [r3, #27]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d108      	bne.n	800268c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 0210 	bic.w	r2, r2, #16
 8002688:	601a      	str	r2, [r3, #0]
 800268a:	e007      	b.n	800269c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0210 	orr.w	r2, r2, #16
 800269a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7f1b      	ldrb	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d108      	bne.n	80026b6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0208 	orr.w	r2, r2, #8
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	e007      	b.n	80026c6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0208 	bic.w	r2, r2, #8
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	7f5b      	ldrb	r3, [r3, #29]
 80026ca:	2b01      	cmp	r3, #1
 80026cc:	d108      	bne.n	80026e0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0204 	orr.w	r2, r2, #4
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	e007      	b.n	80026f0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0204 	bic.w	r2, r2, #4
 80026ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	ea42 0103 	orr.w	r1, r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
	...

08002730 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002730:	b480      	push	{r7}
 8002732:	b087      	sub	sp, #28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002746:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002748:	7cfb      	ldrb	r3, [r7, #19]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d003      	beq.n	8002756 <HAL_CAN_ConfigFilter+0x26>
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b02      	cmp	r3, #2
 8002752:	f040 80be 	bne.w	80028d2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002756:	4b65      	ldr	r3, [pc, #404]	; (80028ec <HAL_CAN_ConfigFilter+0x1bc>)
 8002758:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002760:	f043 0201 	orr.w	r2, r3, #1
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002770:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	431a      	orrs	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 031f 	and.w	r3, r3, #31
 8002796:	2201      	movs	r2, #1
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	43db      	mvns	r3, r3
 80027a8:	401a      	ands	r2, r3
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d123      	bne.n	8002800 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	401a      	ands	r2, r3
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80027da:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	3248      	adds	r2, #72	; 0x48
 80027e0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027f4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027f6:	6979      	ldr	r1, [r7, #20]
 80027f8:	3348      	adds	r3, #72	; 0x48
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d122      	bne.n	800284e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	431a      	orrs	r2, r3
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002828:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	3248      	adds	r2, #72	; 0x48
 800282e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002842:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002844:	6979      	ldr	r1, [r7, #20]
 8002846:	3348      	adds	r3, #72	; 0x48
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d109      	bne.n	800286a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	43db      	mvns	r3, r3
 8002860:	401a      	ands	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002868:	e007      	b.n	800287a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	431a      	orrs	r2, r3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	43db      	mvns	r3, r3
 800288c:	401a      	ands	r2, r3
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002894:	e007      	b.n	80028a6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	431a      	orrs	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d107      	bne.n	80028be <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	431a      	orrs	r2, r3
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80028c4:	f023 0201 	bic.w	r2, r3, #1
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e006      	b.n	80028e0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
  }
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	371c      	adds	r7, #28
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	40006400 	.word	0x40006400

080028f0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002904:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800290e:	7ffb      	ldrb	r3, [r7, #31]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d003      	beq.n	800291c <HAL_CAN_AddTxMessage+0x2c>
 8002914:	7ffb      	ldrb	r3, [r7, #31]
 8002916:	2b02      	cmp	r3, #2
 8002918:	f040 80b8 	bne.w	8002a8c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10a      	bne.n	800293c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002936:	2b00      	cmp	r3, #0
 8002938:	f000 80a0 	beq.w	8002a7c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	0e1b      	lsrs	r3, r3, #24
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d907      	bls.n	800295c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e09e      	b.n	8002a9a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800295c:	2201      	movs	r2, #1
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	409a      	lsls	r2, r3
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10d      	bne.n	800298a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002978:	68f9      	ldr	r1, [r7, #12]
 800297a:	6809      	ldr	r1, [r1, #0]
 800297c:	431a      	orrs	r2, r3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3318      	adds	r3, #24
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	440b      	add	r3, r1
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e00f      	b.n	80029aa <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002994:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800299a:	68f9      	ldr	r1, [r7, #12]
 800299c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800299e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3318      	adds	r3, #24
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	440b      	add	r3, r1
 80029a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	3318      	adds	r3, #24
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	440b      	add	r3, r1
 80029ba:	3304      	adds	r3, #4
 80029bc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	7d1b      	ldrb	r3, [r3, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d111      	bne.n	80029ea <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	3318      	adds	r3, #24
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	4413      	add	r3, r2
 80029d2:	3304      	adds	r3, #4
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	6811      	ldr	r1, [r2, #0]
 80029da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	3318      	adds	r3, #24
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	440b      	add	r3, r1
 80029e6:	3304      	adds	r3, #4
 80029e8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3307      	adds	r3, #7
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	061a      	lsls	r2, r3, #24
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	3306      	adds	r3, #6
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	041b      	lsls	r3, r3, #16
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3305      	adds	r3, #5
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	021b      	lsls	r3, r3, #8
 8002a04:	4313      	orrs	r3, r2
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	3204      	adds	r2, #4
 8002a0a:	7812      	ldrb	r2, [r2, #0]
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	6811      	ldr	r1, [r2, #0]
 8002a12:	ea43 0200 	orr.w	r2, r3, r0
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a20:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3303      	adds	r3, #3
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	061a      	lsls	r2, r3, #24
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	431a      	orrs	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3301      	adds	r3, #1
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	021b      	lsls	r3, r3, #8
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	7812      	ldrb	r2, [r2, #0]
 8002a42:	4610      	mov	r0, r2
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	6811      	ldr	r1, [r2, #0]
 8002a48:	ea43 0200 	orr.w	r2, r3, r0
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	440b      	add	r3, r1
 8002a52:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002a56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	3318      	adds	r3, #24
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4413      	add	r3, r2
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	f043 0201 	orr.w	r2, r3, #1
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3318      	adds	r3, #24
 8002a72:	011b      	lsls	r3, r3, #4
 8002a74:	440b      	add	r3, r1
 8002a76:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	e00e      	b.n	8002a9a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e006      	b.n	8002a9a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b087      	sub	sp, #28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	607a      	str	r2, [r7, #4]
 8002ab2:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002aba:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002abc:	7dfb      	ldrb	r3, [r7, #23]
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d003      	beq.n	8002aca <HAL_CAN_GetRxMessage+0x24>
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	f040 80f3 	bne.w	8002cb0 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10e      	bne.n	8002aee <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d116      	bne.n	8002b0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0e7      	b.n	8002cbe <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0d8      	b.n	8002cbe <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	331b      	adds	r3, #27
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4413      	add	r3, r2
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0204 	and.w	r2, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	331b      	adds	r3, #27
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0d5b      	lsrs	r3, r3, #21
 8002b3a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e00b      	b.n	8002b5c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	331b      	adds	r3, #27
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	4413      	add	r3, r2
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	331b      	adds	r3, #27
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	4413      	add	r3, r2
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0202 	and.w	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	331b      	adds	r3, #27
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4413      	add	r3, r2
 8002b7e:	3304      	adds	r3, #4
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 020f 	and.w	r2, r3, #15
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	331b      	adds	r3, #27
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	4413      	add	r3, r2
 8002b96:	3304      	adds	r3, #4
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	331b      	adds	r3, #27
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	4413      	add	r3, r2
 8002bae:	3304      	adds	r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	0c1b      	lsrs	r3, r3, #16
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	011b      	lsls	r3, r3, #4
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	0a1a      	lsrs	r2, r3, #8
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	b2d2      	uxtb	r2, r2
 8002be8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	0c1a      	lsrs	r2, r3, #16
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	3302      	adds	r3, #2
 8002c00:	b2d2      	uxtb	r2, r2
 8002c02:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e1a      	lsrs	r2, r3, #24
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	3303      	adds	r3, #3
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	3304      	adds	r3, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	0a1a      	lsrs	r2, r3, #8
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	3305      	adds	r3, #5
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	4413      	add	r3, r2
 8002c5a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0c1a      	lsrs	r2, r3, #16
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	3306      	adds	r3, #6
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e1a      	lsrs	r2, r3, #24
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	3307      	adds	r3, #7
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d108      	bne.n	8002c9c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f042 0220 	orr.w	r2, r2, #32
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	e007      	b.n	8002cac <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691a      	ldr	r2, [r3, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0220 	orr.w	r2, r2, #32
 8002caa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	e006      	b.n	8002cbe <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
  }
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr

08002cca <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	b085      	sub	sp, #20
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cde:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ce0:	7afb      	ldrb	r3, [r7, #11]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d002      	beq.n	8002cec <HAL_CAN_GetRxFifoFillLevel+0x22>
 8002ce6:	7afb      	ldrb	r3, [r7, #11]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d10f      	bne.n	8002d0c <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e005      	b.n	8002d0c <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 0307 	and.w	r3, r3, #7
 8002d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d2c:	4b0c      	ldr	r3, [pc, #48]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <__NVIC_SetPriorityGrouping+0x44>)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	60d3      	str	r3, [r2, #12]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d68:	4b04      	ldr	r3, [pc, #16]	; (8002d7c <__NVIC_GetPriorityGrouping+0x18>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	0a1b      	lsrs	r3, r3, #8
 8002d6e:	f003 0307 	and.w	r3, r3, #7
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr
 8002d7c:	e000ed00 	.word	0xe000ed00

08002d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	db0b      	blt.n	8002daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d92:	79fb      	ldrb	r3, [r7, #7]
 8002d94:	f003 021f 	and.w	r2, r3, #31
 8002d98:	4907      	ldr	r1, [pc, #28]	; (8002db8 <__NVIC_EnableIRQ+0x38>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	095b      	lsrs	r3, r3, #5
 8002da0:	2001      	movs	r0, #1
 8002da2:	fa00 f202 	lsl.w	r2, r0, r2
 8002da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002daa:	bf00      	nop
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	e000e100 	.word	0xe000e100

08002dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	6039      	str	r1, [r7, #0]
 8002dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	db0a      	blt.n	8002de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	490c      	ldr	r1, [pc, #48]	; (8002e08 <__NVIC_SetPriority+0x4c>)
 8002dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	440b      	add	r3, r1
 8002de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de4:	e00a      	b.n	8002dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4908      	ldr	r1, [pc, #32]	; (8002e0c <__NVIC_SetPriority+0x50>)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	3b04      	subs	r3, #4
 8002df4:	0112      	lsls	r2, r2, #4
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	440b      	add	r3, r1
 8002dfa:	761a      	strb	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	e000e100 	.word	0xe000e100
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b089      	sub	sp, #36	; 0x24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f1c3 0307 	rsb	r3, r3, #7
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	bf28      	it	cs
 8002e2e:	2304      	movcs	r3, #4
 8002e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2b06      	cmp	r3, #6
 8002e38:	d902      	bls.n	8002e40 <NVIC_EncodePriority+0x30>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3b03      	subs	r3, #3
 8002e3e:	e000      	b.n	8002e42 <NVIC_EncodePriority+0x32>
 8002e40:	2300      	movs	r3, #0
 8002e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	f04f 32ff 	mov.w	r2, #4294967295
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4e:	43da      	mvns	r2, r3
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	401a      	ands	r2, r3
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e58:	f04f 31ff 	mov.w	r1, #4294967295
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	43d9      	mvns	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e68:	4313      	orrs	r3, r2
         );
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3724      	adds	r7, #36	; 0x24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ff4c 	bl	8002d1c <__NVIC_SetPriorityGrouping>
}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9e:	f7ff ff61 	bl	8002d64 <__NVIC_GetPriorityGrouping>
 8002ea2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	68b9      	ldr	r1, [r7, #8]
 8002ea8:	6978      	ldr	r0, [r7, #20]
 8002eaa:	f7ff ffb1 	bl	8002e10 <NVIC_EncodePriority>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb4:	4611      	mov	r1, r2
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff ff80 	bl	8002dbc <__NVIC_SetPriority>
}
 8002ebc:	bf00      	nop
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	4603      	mov	r3, r0
 8002ecc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff ff54 	bl	8002d80 <__NVIC_EnableIRQ>
}
 8002ed8:	bf00      	nop
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e00e      	b.n	8002f10 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	795b      	ldrb	r3, [r3, #5]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7fe ff5c 	bl	8001dc0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b087      	sub	sp, #28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	e00a      	b.n	8002f5a <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	68ba      	ldr	r2, [r7, #8]
 8002f4a:	441a      	add	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d3f0      	bcc.n	8002f44 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 8002f70:	693b      	ldr	r3, [r7, #16]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	371c      	adds	r7, #28
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f8c:	f7ff faa6 	bl	80024dc <HAL_GetTick>
 8002f90:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e099      	b.n	80030d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2202      	movs	r2, #2
 8002fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fbc:	e00f      	b.n	8002fde <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fbe:	f7ff fa8d 	bl	80024dc <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d908      	bls.n	8002fde <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e078      	b.n	80030d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e8      	bne.n	8002fbe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <HAL_DMA_Init+0x158>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800300a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003016:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003022:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	2b04      	cmp	r3, #4
 8003036:	d107      	bne.n	8003048 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	4313      	orrs	r3, r2
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	4313      	orrs	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	2b04      	cmp	r3, #4
 8003070:	d117      	bne.n	80030a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 fa9d 	bl	80035c4 <DMA_CheckFifoParam>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2201      	movs	r2, #1
 800309a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800309e:	2301      	movs	r3, #1
 80030a0:	e016      	b.n	80030d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa54 	bl	8003558 <DMA_CalcBaseAndBitshift>
 80030b0:	4603      	mov	r3, r0
 80030b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	223f      	movs	r2, #63	; 0x3f
 80030ba:	409a      	lsls	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	f010803f 	.word	0xf010803f

080030dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_DMA_Start_IT+0x26>
 80030fe:	2302      	movs	r3, #2
 8003100:	e040      	b.n	8003184 <HAL_DMA_Start_IT+0xa8>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b01      	cmp	r3, #1
 8003114:	d12f      	bne.n	8003176 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2202      	movs	r2, #2
 800311a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	68b9      	ldr	r1, [r7, #8]
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 f9e6 	bl	80034fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	223f      	movs	r2, #63	; 0x3f
 8003136:	409a      	lsls	r2, r3
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0216 	orr.w	r2, r2, #22
 800314a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003150:	2b00      	cmp	r3, #0
 8003152:	d007      	beq.n	8003164 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f042 0208 	orr.w	r2, r2, #8
 8003162:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0201 	orr.w	r2, r2, #1
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	e005      	b.n	8003182 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800317e:	2302      	movs	r3, #2
 8003180:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003182:	7dfb      	ldrb	r3, [r7, #23]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800319a:	b2db      	uxtb	r3, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d004      	beq.n	80031aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00c      	b.n	80031c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2205      	movs	r2, #5
 80031ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f022 0201 	bic.w	r2, r2, #1
 80031c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b086      	sub	sp, #24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80031dc:	4b92      	ldr	r3, [pc, #584]	; (8003428 <HAL_DMA_IRQHandler+0x258>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a92      	ldr	r2, [pc, #584]	; (800342c <HAL_DMA_IRQHandler+0x25c>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	0a9b      	lsrs	r3, r3, #10
 80031e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2208      	movs	r2, #8
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01a      	beq.n	800323c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0304 	and.w	r3, r3, #4
 8003210:	2b00      	cmp	r3, #0
 8003212:	d013      	beq.n	800323c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f022 0204 	bic.w	r2, r2, #4
 8003222:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003228:	2208      	movs	r2, #8
 800322a:	409a      	lsls	r2, r3
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003240:	2201      	movs	r2, #1
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d012      	beq.n	8003272 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00b      	beq.n	8003272 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800325e:	2201      	movs	r2, #1
 8003260:	409a      	lsls	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f043 0202 	orr.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003276:	2204      	movs	r2, #4
 8003278:	409a      	lsls	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4013      	ands	r3, r2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0302 	and.w	r3, r3, #2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003294:	2204      	movs	r2, #4
 8003296:	409a      	lsls	r2, r3
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a0:	f043 0204 	orr.w	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ac:	2210      	movs	r2, #16
 80032ae:	409a      	lsls	r2, r3
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d043      	beq.n	8003340 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d03c      	beq.n	8003340 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ca:	2210      	movs	r2, #16
 80032cc:	409a      	lsls	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d018      	beq.n	8003312 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d108      	bne.n	8003300 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d024      	beq.n	8003340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	4798      	blx	r3
 80032fe:	e01f      	b.n	8003340 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003304:	2b00      	cmp	r3, #0
 8003306:	d01b      	beq.n	8003340 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	4798      	blx	r3
 8003310:	e016      	b.n	8003340 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0208 	bic.w	r2, r2, #8
 800332e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	2220      	movs	r2, #32
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 808e 	beq.w	800346e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8086 	beq.w	800346e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003366:	2220      	movs	r2, #32
 8003368:	409a      	lsls	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b05      	cmp	r3, #5
 8003378:	d136      	bne.n	80033e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0216 	bic.w	r2, r2, #22
 8003388:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003398:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d103      	bne.n	80033aa <HAL_DMA_IRQHandler+0x1da>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d007      	beq.n	80033ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0208 	bic.w	r2, r2, #8
 80033b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033be:	223f      	movs	r2, #63	; 0x3f
 80033c0:	409a      	lsls	r2, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d07d      	beq.n	80034da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
        }
        return;
 80033e6:	e078      	b.n	80034da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d01c      	beq.n	8003430 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d108      	bne.n	8003416 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003408:	2b00      	cmp	r3, #0
 800340a:	d030      	beq.n	800346e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	4798      	blx	r3
 8003414:	e02b      	b.n	800346e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800341a:	2b00      	cmp	r3, #0
 800341c:	d027      	beq.n	800346e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	4798      	blx	r3
 8003426:	e022      	b.n	800346e <HAL_DMA_IRQHandler+0x29e>
 8003428:	20000000 	.word	0x20000000
 800342c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10f      	bne.n	800345e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0210 	bic.w	r2, r2, #16
 800344c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	2b00      	cmp	r3, #0
 8003474:	d032      	beq.n	80034dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d022      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2205      	movs	r2, #5
 8003486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3301      	adds	r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d307      	bcc.n	80034b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f2      	bne.n	800349a <HAL_DMA_IRQHandler+0x2ca>
 80034b4:	e000      	b.n	80034b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80034b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
 80034d8:	e000      	b.n	80034dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80034da:	bf00      	nop
    }
  }
}
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop

080034e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003518:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	683a      	ldr	r2, [r7, #0]
 8003520:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	2b40      	cmp	r3, #64	; 0x40
 8003528:	d108      	bne.n	800353c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800353a:	e007      	b.n	800354c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]
}
 800354c:	bf00      	nop
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003558:	b480      	push	{r7}
 800355a:	b085      	sub	sp, #20
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	3b10      	subs	r3, #16
 8003568:	4a14      	ldr	r2, [pc, #80]	; (80035bc <DMA_CalcBaseAndBitshift+0x64>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	091b      	lsrs	r3, r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003572:	4a13      	ldr	r2, [pc, #76]	; (80035c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	461a      	mov	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b03      	cmp	r3, #3
 8003584:	d909      	bls.n	800359a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800358e:	f023 0303 	bic.w	r3, r3, #3
 8003592:	1d1a      	adds	r2, r3, #4
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	659a      	str	r2, [r3, #88]	; 0x58
 8003598:	e007      	b.n	80035aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	aaaaaaab 	.word	0xaaaaaaab
 80035c0:	0800d85c 	.word	0x0800d85c

080035c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035cc:	2300      	movs	r3, #0
 80035ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11f      	bne.n	800361e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d855      	bhi.n	8003690 <DMA_CheckFifoParam+0xcc>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <DMA_CheckFifoParam+0x28>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	0800360f 	.word	0x0800360f
 80035f4:	080035fd 	.word	0x080035fd
 80035f8:	08003691 	.word	0x08003691
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d045      	beq.n	8003694 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360c:	e042      	b.n	8003694 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003616:	d13f      	bne.n	8003698 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800361c:	e03c      	b.n	8003698 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003626:	d121      	bne.n	800366c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b03      	cmp	r3, #3
 800362c:	d836      	bhi.n	800369c <DMA_CheckFifoParam+0xd8>
 800362e:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <DMA_CheckFifoParam+0x70>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003645 	.word	0x08003645
 8003638:	0800364b 	.word	0x0800364b
 800363c:	08003645 	.word	0x08003645
 8003640:	0800365d 	.word	0x0800365d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      break;
 8003648:	e02f      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d024      	beq.n	80036a0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e021      	b.n	80036a0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003664:	d11e      	bne.n	80036a4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800366a:	e01b      	b.n	80036a4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2b02      	cmp	r3, #2
 8003670:	d902      	bls.n	8003678 <DMA_CheckFifoParam+0xb4>
 8003672:	2b03      	cmp	r3, #3
 8003674:	d003      	beq.n	800367e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003676:	e018      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	73fb      	strb	r3, [r7, #15]
      break;
 800367c:	e015      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00e      	beq.n	80036a8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	73fb      	strb	r3, [r7, #15]
      break;
 800368e:	e00b      	b.n	80036a8 <DMA_CheckFifoParam+0xe4>
      break;
 8003690:	bf00      	nop
 8003692:	e00a      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 8003694:	bf00      	nop
 8003696:	e008      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 8003698:	bf00      	nop
 800369a:	e006      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 800369c:	bf00      	nop
 800369e:	e004      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 80036a0:	bf00      	nop
 80036a2:	e002      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;   
 80036a4:	bf00      	nop
 80036a6:	e000      	b.n	80036aa <DMA_CheckFifoParam+0xe6>
      break;
 80036a8:	bf00      	nop
    }
  } 
  
  return status; 
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b089      	sub	sp, #36	; 0x24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
 80036d2:	e16b      	b.n	80039ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036d4:	2201      	movs	r2, #1
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4013      	ands	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	f040 815a 	bne.w	80039a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d00b      	beq.n	8003712 <HAL_GPIO_Init+0x5a>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003706:	2b11      	cmp	r3, #17
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b12      	cmp	r3, #18
 8003710:	d130      	bne.n	8003774 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 0201 	and.w	r2, r3, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	2203      	movs	r2, #3
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d003      	beq.n	80037b4 <HAL_GPIO_Init+0xfc>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b12      	cmp	r3, #18
 80037b2:	d123      	bne.n	80037fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	08da      	lsrs	r2, r3, #3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3208      	adds	r2, #8
 80037bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	f003 0307 	and.w	r3, r3, #7
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	220f      	movs	r2, #15
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	691a      	ldr	r2, [r3, #16]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	08da      	lsrs	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3208      	adds	r2, #8
 80037f6:	69b9      	ldr	r1, [r7, #24]
 80037f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	2203      	movs	r2, #3
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43db      	mvns	r3, r3
 800380e:	69ba      	ldr	r2, [r7, #24]
 8003810:	4013      	ands	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0203 	and.w	r2, r3, #3
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80b4 	beq.w	80039a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_GPIO_Init+0x308>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <HAL_GPIO_Init+0x308>)
 8003848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800384c:	6453      	str	r3, [r2, #68]	; 0x44
 800384e:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_GPIO_Init+0x308>)
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003856:	60fb      	str	r3, [r7, #12]
 8003858:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800385a:	4a5a      	ldr	r2, [pc, #360]	; (80039c4 <HAL_GPIO_Init+0x30c>)
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	3302      	adds	r3, #2
 8003862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003866:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	220f      	movs	r2, #15
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43db      	mvns	r3, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a51      	ldr	r2, [pc, #324]	; (80039c8 <HAL_GPIO_Init+0x310>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d02b      	beq.n	80038de <HAL_GPIO_Init+0x226>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a50      	ldr	r2, [pc, #320]	; (80039cc <HAL_GPIO_Init+0x314>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d025      	beq.n	80038da <HAL_GPIO_Init+0x222>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	; (80039d0 <HAL_GPIO_Init+0x318>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01f      	beq.n	80038d6 <HAL_GPIO_Init+0x21e>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	; (80039d4 <HAL_GPIO_Init+0x31c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d019      	beq.n	80038d2 <HAL_GPIO_Init+0x21a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	; (80039d8 <HAL_GPIO_Init+0x320>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d013      	beq.n	80038ce <HAL_GPIO_Init+0x216>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	; (80039dc <HAL_GPIO_Init+0x324>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00d      	beq.n	80038ca <HAL_GPIO_Init+0x212>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	; (80039e0 <HAL_GPIO_Init+0x328>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d007      	beq.n	80038c6 <HAL_GPIO_Init+0x20e>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4a      	ldr	r2, [pc, #296]	; (80039e4 <HAL_GPIO_Init+0x32c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d101      	bne.n	80038c2 <HAL_GPIO_Init+0x20a>
 80038be:	2307      	movs	r3, #7
 80038c0:	e00e      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038c2:	2308      	movs	r3, #8
 80038c4:	e00c      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038c6:	2306      	movs	r3, #6
 80038c8:	e00a      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038ca:	2305      	movs	r3, #5
 80038cc:	e008      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038ce:	2304      	movs	r3, #4
 80038d0:	e006      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038d2:	2303      	movs	r3, #3
 80038d4:	e004      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038da:	2301      	movs	r3, #1
 80038dc:	e000      	b.n	80038e0 <HAL_GPIO_Init+0x228>
 80038de:	2300      	movs	r3, #0
 80038e0:	69fa      	ldr	r2, [r7, #28]
 80038e2:	f002 0203 	and.w	r2, r2, #3
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	4093      	lsls	r3, r2
 80038ea:	69ba      	ldr	r2, [r7, #24]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038f0:	4934      	ldr	r1, [pc, #208]	; (80039c4 <HAL_GPIO_Init+0x30c>)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80038fe:	4b3a      	ldr	r3, [pc, #232]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	43db      	mvns	r3, r3
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	4013      	ands	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800391a:	69ba      	ldr	r2, [r7, #24]
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	4313      	orrs	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003922:	4a31      	ldr	r2, [pc, #196]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003928:	4b2f      	ldr	r3, [pc, #188]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	43db      	mvns	r3, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4013      	ands	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800394c:	4a26      	ldr	r2, [pc, #152]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003952:	4b25      	ldr	r3, [pc, #148]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003976:	4a1c      	ldr	r2, [pc, #112]	; (80039e8 <HAL_GPIO_Init+0x330>)
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_GPIO_Init+0x330>)
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	43db      	mvns	r3, r3
 8003986:	69ba      	ldr	r2, [r7, #24]
 8003988:	4013      	ands	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	4313      	orrs	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a0:	4a11      	ldr	r2, [pc, #68]	; (80039e8 <HAL_GPIO_Init+0x330>)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b0f      	cmp	r3, #15
 80039b0:	f67f ae90 	bls.w	80036d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039b4:	bf00      	nop
 80039b6:	3724      	adds	r7, #36	; 0x24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40020000 	.word	0x40020000
 80039cc:	40020400 	.word	0x40020400
 80039d0:	40020800 	.word	0x40020800
 80039d4:	40020c00 	.word	0x40020c00
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40021400 	.word	0x40021400
 80039e0:	40021800 	.word	0x40021800
 80039e4:	40021c00 	.word	0x40021c00
 80039e8:	40013c00 	.word	0x40013c00

080039ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	460b      	mov	r3, r1
 80039f6:	807b      	strh	r3, [r7, #2]
 80039f8:	4613      	mov	r3, r2
 80039fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039fc:	787b      	ldrb	r3, [r7, #1]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a02:	887a      	ldrh	r2, [r7, #2]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a08:	e003      	b.n	8003a12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a0a:	887b      	ldrh	r3, [r7, #2]
 8003a0c:	041a      	lsls	r2, r3, #16
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	619a      	str	r2, [r3, #24]
}
 8003a12:	bf00      	nop
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e02b      	b.n	8003a88 <HAL_IWDG_Init+0x6a>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003a38:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f245 5255 	movw	r2, #21845	; 0x5555
 8003a42:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	6852      	ldr	r2, [r2, #4]
 8003a4c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	6892      	ldr	r2, [r2, #8]
 8003a56:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003a58:	f7fe fd40 	bl	80024dc <HAL_GetTick>
 8003a5c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8003a5e:	e008      	b.n	8003a72 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003a60:	f7fe fd3c 	bl	80024dc <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b30      	cmp	r3, #48	; 0x30
 8003a6c:	d901      	bls.n	8003a72 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e00a      	b.n	8003a88 <HAL_IWDG_Init+0x6a>
  while (hiwdg->Instance->SR != 0x00u)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f1      	bne.n	8003a60 <HAL_IWDG_Init+0x42>
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003a84:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3710      	adds	r7, #16
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e25b      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d075      	beq.n	8003bba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ace:	4ba3      	ldr	r3, [pc, #652]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b04      	cmp	r3, #4
 8003ad8:	d00c      	beq.n	8003af4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4ba0      	ldr	r3, [pc, #640]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d112      	bne.n	8003b0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ae6:	4b9d      	ldr	r3, [pc, #628]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af4:	4b99      	ldr	r3, [pc, #612]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d05b      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x108>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d157      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e236      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d106      	bne.n	8003b24 <HAL_RCC_OscConfig+0x74>
 8003b16:	4b91      	ldr	r3, [pc, #580]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a90      	ldr	r2, [pc, #576]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	e01d      	b.n	8003b60 <HAL_RCC_OscConfig+0xb0>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x98>
 8003b2e:	4b8b      	ldr	r3, [pc, #556]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a8a      	ldr	r2, [pc, #552]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	4b88      	ldr	r3, [pc, #544]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a87      	ldr	r2, [pc, #540]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	e00b      	b.n	8003b60 <HAL_RCC_OscConfig+0xb0>
 8003b48:	4b84      	ldr	r3, [pc, #528]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a83      	ldr	r2, [pc, #524]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b52:	6013      	str	r3, [r2, #0]
 8003b54:	4b81      	ldr	r3, [pc, #516]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a80      	ldr	r2, [pc, #512]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d013      	beq.n	8003b90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fe fcb8 	bl	80024dc <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe fcb4 	bl	80024dc <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	; 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e1fb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b82:	4b76      	ldr	r3, [pc, #472]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0xc0>
 8003b8e:	e014      	b.n	8003bba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b90:	f7fe fca4 	bl	80024dc <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe fca0 	bl	80024dc <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	; 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e1e7      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003baa:	4b6c      	ldr	r3, [pc, #432]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1f0      	bne.n	8003b98 <HAL_RCC_OscConfig+0xe8>
 8003bb6:	e000      	b.n	8003bba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d063      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bc6:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00b      	beq.n	8003bea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b62      	ldr	r3, [pc, #392]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d11c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d116      	bne.n	8003c18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bea:	4b5c      	ldr	r3, [pc, #368]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0302 	and.w	r3, r3, #2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x152>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d001      	beq.n	8003c02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e1bb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c02:	4b56      	ldr	r3, [pc, #344]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4952      	ldr	r1, [pc, #328]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c16:	e03a      	b.n	8003c8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c20:	4b4f      	ldr	r3, [pc, #316]	; (8003d60 <HAL_RCC_OscConfig+0x2b0>)
 8003c22:	2201      	movs	r2, #1
 8003c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c26:	f7fe fc59 	bl	80024dc <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c2e:	f7fe fc55 	bl	80024dc <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e19c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c40:	4b46      	ldr	r3, [pc, #280]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0302 	and.w	r3, r3, #2
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4c:	4b43      	ldr	r3, [pc, #268]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	00db      	lsls	r3, r3, #3
 8003c5a:	4940      	ldr	r1, [pc, #256]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	600b      	str	r3, [r1, #0]
 8003c60:	e015      	b.n	8003c8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c62:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <HAL_RCC_OscConfig+0x2b0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7fe fc38 	bl	80024dc <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c70:	f7fe fc34 	bl	80024dc <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e17b      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c82:	4b36      	ldr	r3, [pc, #216]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0308 	and.w	r3, r3, #8
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d030      	beq.n	8003cfc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d016      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ca2:	4b30      	ldr	r3, [pc, #192]	; (8003d64 <HAL_RCC_OscConfig+0x2b4>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca8:	f7fe fc18 	bl	80024dc <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cb0:	f7fe fc14 	bl	80024dc <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e15b      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cc2:	4b26      	ldr	r3, [pc, #152]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0f0      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x200>
 8003cce:	e015      	b.n	8003cfc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cd0:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x2b4>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd6:	f7fe fc01 	bl	80024dc <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cde:	f7fe fbfd 	bl	80024dc <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e144      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 80a0 	beq.w	8003e4a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b13      	ldr	r3, [pc, #76]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a0e      	ldr	r2, [pc, #56]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_OscConfig+0x2b8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d121      	bne.n	8003d8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <HAL_RCC_OscConfig+0x2b8>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <HAL_RCC_OscConfig+0x2b8>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d52:	f7fe fbc3 	bl	80024dc <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	e011      	b.n	8003d7e <HAL_RCC_OscConfig+0x2ce>
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	42470000 	.word	0x42470000
 8003d64:	42470e80 	.word	0x42470e80
 8003d68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d6c:	f7fe fbb6 	bl	80024dc <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0fd      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d7e:	4b81      	ldr	r3, [pc, #516]	; (8003f84 <HAL_RCC_OscConfig+0x4d4>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d106      	bne.n	8003da0 <HAL_RCC_OscConfig+0x2f0>
 8003d92:	4b7d      	ldr	r3, [pc, #500]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a7c      	ldr	r2, [pc, #496]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9e:	e01c      	b.n	8003dda <HAL_RCC_OscConfig+0x32a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2b05      	cmp	r3, #5
 8003da6:	d10c      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x312>
 8003da8:	4b77      	ldr	r3, [pc, #476]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dac:	4a76      	ldr	r2, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dae:	f043 0304 	orr.w	r3, r3, #4
 8003db2:	6713      	str	r3, [r2, #112]	; 0x70
 8003db4:	4b74      	ldr	r3, [pc, #464]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	4a73      	ldr	r2, [pc, #460]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dba:	f043 0301 	orr.w	r3, r3, #1
 8003dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8003dc0:	e00b      	b.n	8003dda <HAL_RCC_OscConfig+0x32a>
 8003dc2:	4b71      	ldr	r3, [pc, #452]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a70      	ldr	r2, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003dce:	4b6e      	ldr	r3, [pc, #440]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a6d      	ldr	r2, [pc, #436]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003dd4:	f023 0304 	bic.w	r3, r3, #4
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d015      	beq.n	8003e0e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de2:	f7fe fb7b 	bl	80024dc <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de8:	e00a      	b.n	8003e00 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dea:	f7fe fb77 	bl	80024dc <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e0bc      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e00:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ee      	beq.n	8003dea <HAL_RCC_OscConfig+0x33a>
 8003e0c:	e014      	b.n	8003e38 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e0e:	f7fe fb65 	bl	80024dc <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e14:	e00a      	b.n	8003e2c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e16:	f7fe fb61 	bl	80024dc <HAL_GetTick>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e0a6      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2c:	4b56      	ldr	r3, [pc, #344]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1ee      	bne.n	8003e16 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e3e:	4b52      	ldr	r3, [pc, #328]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	4a51      	ldr	r2, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 8092 	beq.w	8003f78 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e54:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 030c 	and.w	r3, r3, #12
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d05c      	beq.n	8003f1a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d141      	bne.n	8003eec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e68:	4b48      	ldr	r3, [pc, #288]	; (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fe fb35 	bl	80024dc <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e76:	f7fe fb31 	bl	80024dc <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e078      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69da      	ldr	r2, [r3, #28]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	019b      	lsls	r3, r3, #6
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	3b01      	subs	r3, #1
 8003eae:	041b      	lsls	r3, r3, #16
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	061b      	lsls	r3, r3, #24
 8003eb8:	4933      	ldr	r1, [pc, #204]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ebe:	4b33      	ldr	r3, [pc, #204]	; (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fb0a 	bl	80024dc <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ecc:	f7fe fb06 	bl	80024dc <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e04d      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ede:	4b2a      	ldr	r3, [pc, #168]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x41c>
 8003eea:	e045      	b.n	8003f78 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eec:	4b27      	ldr	r3, [pc, #156]	; (8003f8c <HAL_RCC_OscConfig+0x4dc>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef2:	f7fe faf3 	bl	80024dc <HAL_GetTick>
 8003ef6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fe faef 	bl	80024dc <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e036      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x44a>
 8003f18:	e02e      	b.n	8003f78 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d101      	bne.n	8003f26 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e029      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f26:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <HAL_RCC_OscConfig+0x4d8>)
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d115      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f4e:	4013      	ands	r3, r2
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d10d      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40007000 	.word	0x40007000
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	42470060 	.word	0x42470060

08003f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0cc      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b68      	ldr	r3, [pc, #416]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d90c      	bls.n	8003fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fba:	4b63      	ldr	r3, [pc, #396]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d001      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0b8      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0302 	and.w	r3, r3, #2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d020      	beq.n	800401a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d005      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe4:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a58      	ldr	r2, [pc, #352]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d005      	beq.n	8004008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ffc:	4b53      	ldr	r3, [pc, #332]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	4a52      	ldr	r2, [pc, #328]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b50      	ldr	r3, [pc, #320]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	494d      	ldr	r1, [pc, #308]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d044      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402e:	4b47      	ldr	r3, [pc, #284]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d119      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e07f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d003      	beq.n	800404e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404a:	2b03      	cmp	r3, #3
 800404c:	d107      	bne.n	800405e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404e:	4b3f      	ldr	r3, [pc, #252]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d109      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405e:	4b3b      	ldr	r3, [pc, #236]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e067      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f023 0203 	bic.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4934      	ldr	r1, [pc, #208]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004080:	f7fe fa2c 	bl	80024dc <HAL_GetTick>
 8004084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004086:	e00a      	b.n	800409e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004088:	f7fe fa28 	bl	80024dc <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e04f      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800409e:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 020c 	and.w	r2, r3, #12
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d1eb      	bne.n	8004088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d20c      	bcs.n	80040d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b20      	ldr	r3, [pc, #128]	; (8004148 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e032      	b.n	800413e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d008      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e4:	4b19      	ldr	r3, [pc, #100]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4916      	ldr	r1, [pc, #88]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d009      	beq.n	8004116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004102:	4b12      	ldr	r3, [pc, #72]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	490e      	ldr	r1, [pc, #56]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	4313      	orrs	r3, r2
 8004114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004116:	f000 f821 	bl	800415c <HAL_RCC_GetSysClockFreq>
 800411a:	4601      	mov	r1, r0
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	091b      	lsrs	r3, r3, #4
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	5cd3      	ldrb	r3, [r2, r3]
 800412a:	fa21 f303 	lsr.w	r3, r1, r3
 800412e:	4a09      	ldr	r2, [pc, #36]	; (8004154 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004132:	4b09      	ldr	r3, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1c8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe f8b6 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40023c00 	.word	0x40023c00
 800414c:	40023800 	.word	0x40023800
 8004150:	0800d844 	.word	0x0800d844
 8004154:	20000000 	.word	0x20000000
 8004158:	20000004 	.word	0x20000004

0800415c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800415c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	607b      	str	r3, [r7, #4]
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
 800416a:	2300      	movs	r3, #0
 800416c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800416e:	2300      	movs	r3, #0
 8004170:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004172:	4b50      	ldr	r3, [pc, #320]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 030c 	and.w	r3, r3, #12
 800417a:	2b04      	cmp	r3, #4
 800417c:	d007      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x32>
 800417e:	2b08      	cmp	r3, #8
 8004180:	d008      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x38>
 8004182:	2b00      	cmp	r3, #0
 8004184:	f040 808d 	bne.w	80042a2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b4b      	ldr	r3, [pc, #300]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800418a:	60bb      	str	r3, [r7, #8]
       break;
 800418c:	e08c      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418e:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 8004190:	60bb      	str	r3, [r7, #8]
      break;
 8004192:	e089      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b47      	ldr	r3, [pc, #284]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419e:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d023      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b42      	ldr	r3, [pc, #264]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	f04f 0400 	mov.w	r4, #0
 80041b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	ea03 0501 	and.w	r5, r3, r1
 80041c0:	ea04 0602 	and.w	r6, r4, r2
 80041c4:	4a3d      	ldr	r2, [pc, #244]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 80041c6:	fb02 f106 	mul.w	r1, r2, r6
 80041ca:	2200      	movs	r2, #0
 80041cc:	fb02 f205 	mul.w	r2, r2, r5
 80041d0:	440a      	add	r2, r1
 80041d2:	493a      	ldr	r1, [pc, #232]	; (80042bc <HAL_RCC_GetSysClockFreq+0x160>)
 80041d4:	fba5 0101 	umull	r0, r1, r5, r1
 80041d8:	1853      	adds	r3, r2, r1
 80041da:	4619      	mov	r1, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f04f 0400 	mov.w	r4, #0
 80041e2:	461a      	mov	r2, r3
 80041e4:	4623      	mov	r3, r4
 80041e6:	f7fb fffb 	bl	80001e0 <__aeabi_uldivmod>
 80041ea:	4603      	mov	r3, r0
 80041ec:	460c      	mov	r4, r1
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	e049      	b.n	8004286 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041f2:	4b30      	ldr	r3, [pc, #192]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	099b      	lsrs	r3, r3, #6
 80041f8:	f04f 0400 	mov.w	r4, #0
 80041fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	ea03 0501 	and.w	r5, r3, r1
 8004208:	ea04 0602 	and.w	r6, r4, r2
 800420c:	4629      	mov	r1, r5
 800420e:	4632      	mov	r2, r6
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	f04f 0400 	mov.w	r4, #0
 8004218:	0154      	lsls	r4, r2, #5
 800421a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800421e:	014b      	lsls	r3, r1, #5
 8004220:	4619      	mov	r1, r3
 8004222:	4622      	mov	r2, r4
 8004224:	1b49      	subs	r1, r1, r5
 8004226:	eb62 0206 	sbc.w	r2, r2, r6
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	f04f 0400 	mov.w	r4, #0
 8004232:	0194      	lsls	r4, r2, #6
 8004234:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004238:	018b      	lsls	r3, r1, #6
 800423a:	1a5b      	subs	r3, r3, r1
 800423c:	eb64 0402 	sbc.w	r4, r4, r2
 8004240:	f04f 0100 	mov.w	r1, #0
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	00e2      	lsls	r2, r4, #3
 800424a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800424e:	00d9      	lsls	r1, r3, #3
 8004250:	460b      	mov	r3, r1
 8004252:	4614      	mov	r4, r2
 8004254:	195b      	adds	r3, r3, r5
 8004256:	eb44 0406 	adc.w	r4, r4, r6
 800425a:	f04f 0100 	mov.w	r1, #0
 800425e:	f04f 0200 	mov.w	r2, #0
 8004262:	02a2      	lsls	r2, r4, #10
 8004264:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004268:	0299      	lsls	r1, r3, #10
 800426a:	460b      	mov	r3, r1
 800426c:	4614      	mov	r4, r2
 800426e:	4618      	mov	r0, r3
 8004270:	4621      	mov	r1, r4
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f04f 0400 	mov.w	r4, #0
 8004278:	461a      	mov	r2, r3
 800427a:	4623      	mov	r3, r4
 800427c:	f7fb ffb0 	bl	80001e0 <__aeabi_uldivmod>
 8004280:	4603      	mov	r3, r0
 8004282:	460c      	mov	r4, r1
 8004284:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004286:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0c1b      	lsrs	r3, r3, #16
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	3301      	adds	r3, #1
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004296:	68fa      	ldr	r2, [r7, #12]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	60bb      	str	r3, [r7, #8]
      break;
 80042a0:	e002      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a2:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80042a4:	60bb      	str	r3, [r7, #8]
      break;
 80042a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042a8:	68bb      	ldr	r3, [r7, #8]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	00f42400 	.word	0x00f42400
 80042bc:	017d7840 	.word	0x017d7840

080042c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000000 	.word	0x20000000

080042d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042dc:	f7ff fff0 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 80042e0:	4601      	mov	r1, r0
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0a9b      	lsrs	r3, r3, #10
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4a03      	ldr	r2, [pc, #12]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ee:	5cd3      	ldrb	r3, [r2, r3]
 80042f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	0800d854 	.word	0x0800d854

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004304:	f7ff ffdc 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 8004308:	4601      	mov	r1, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0b5b      	lsrs	r3, r3, #13
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4a03      	ldr	r2, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004316:	5cd3      	ldrb	r3, [r2, r3]
 8004318:	fa21 f303 	lsr.w	r3, r1, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	0800d854 	.word	0x0800d854

08004328 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	220f      	movs	r2, #15
 8004336:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004338:	4b12      	ldr	r3, [pc, #72]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f003 0203 	and.w	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004350:	4b0c      	ldr	r3, [pc, #48]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800435c:	4b09      	ldr	r3, [pc, #36]	; (8004384 <HAL_RCC_GetClockConfig+0x5c>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	08db      	lsrs	r3, r3, #3
 8004362:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800436a:	4b07      	ldr	r3, [pc, #28]	; (8004388 <HAL_RCC_GetClockConfig+0x60>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 020f 	and.w	r2, r3, #15
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	601a      	str	r2, [r3, #0]
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40023800 	.word	0x40023800
 8004388:	40023c00 	.word	0x40023c00

0800438c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d101      	bne.n	800439e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e022      	b.n	80043e4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d105      	bne.n	80043b6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7fd fd27 	bl	8001e04 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2203      	movs	r2, #3
 80043ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f814 	bl	80043ec <HAL_SD_InitCard>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d001      	beq.n	80043ce <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e00a      	b.n	80043e4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043ec:	b5b0      	push	{r4, r5, r7, lr}
 80043ee:	b08e      	sub	sp, #56	; 0x38
 80043f0:	af04      	add	r7, sp, #16
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004404:	2300      	movs	r3, #0
 8004406:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004408:	2376      	movs	r3, #118	; 0x76
 800440a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681d      	ldr	r5, [r3, #0]
 8004410:	466c      	mov	r4, sp
 8004412:	f107 0314 	add.w	r3, r7, #20
 8004416:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800441a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004424:	4628      	mov	r0, r5
 8004426:	f002 fbf7 	bl	8006c18 <SDIO_Init>
 800442a:	4603      	mov	r3, r0
 800442c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e031      	b.n	80044a0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800443c:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_SD_InitCard+0xbc>)
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4618      	mov	r0, r3
 8004448:	f002 fc2f 	bl	8006caa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800444c:	4b16      	ldr	r3, [pc, #88]	; (80044a8 <HAL_SD_InitCard+0xbc>)
 800444e:	2201      	movs	r2, #1
 8004450:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 ffdc 	bl	8005410 <SD_PowerON>
 8004458:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00b      	beq.n	8004478 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e013      	b.n	80044a0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 fefb 	bl	8005274 <SD_InitCard>
 800447e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00b      	beq.n	800449e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3728      	adds	r7, #40	; 0x28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bdb0      	pop	{r4, r5, r7, pc}
 80044a8:	422580a0 	.word	0x422580a0

080044ac <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08c      	sub	sp, #48	; 0x30
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d107      	bne.n	80044d4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0c9      	b.n	8004668 <HAL_SD_ReadBlocks_DMA+0x1bc>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	f040 80c2 	bne.w	8004666 <HAL_SD_ReadBlocks_DMA+0x1ba>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80044e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d907      	bls.n	8004506 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e0b0      	b.n	8004668 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2203      	movs	r2, #3
 800450a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2200      	movs	r2, #0
 8004514:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004524:	f043 0302 	orr.w	r3, r3, #2
 8004528:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452e:	4a50      	ldr	r2, [pc, #320]	; (8004670 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	4a4f      	ldr	r2, [pc, #316]	; (8004674 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8004538:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	2200      	movs	r2, #0
 8004540:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	3380      	adds	r3, #128	; 0x80
 800454c:	4619      	mov	r1, r3
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	025b      	lsls	r3, r3, #9
 8004554:	089b      	lsrs	r3, r3, #2
 8004556:	f7fe fdc1 	bl	80030dc <HAL_DMA_Start_IT>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d017      	beq.n	8004590 <HAL_SD_ReadBlocks_DMA+0xe4>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a40      	ldr	r2, [pc, #256]	; (8004678 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e06b      	b.n	8004668 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004590:	4b3a      	ldr	r3, [pc, #232]	; (800467c <HAL_SD_ReadBlocks_DMA+0x1d0>)
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459a:	2b01      	cmp	r3, #1
 800459c:	d002      	beq.n	80045a4 <HAL_SD_ReadBlocks_DMA+0xf8>
      {
        add *= 512U;
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	025b      	lsls	r3, r3, #9
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045ac:	4618      	mov	r0, r3
 80045ae:	f002 fc0f 	bl	8006dd0 <SDMMC_CmdBlockLength>
 80045b2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00f      	beq.n	80045da <HAL_SD_ReadBlocks_DMA+0x12e>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a2e      	ldr	r2, [pc, #184]	; (8004678 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e046      	b.n	8004668 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80045da:	f04f 33ff 	mov.w	r3, #4294967295
 80045de:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	025b      	lsls	r3, r3, #9
 80045e4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80045e6:	2390      	movs	r3, #144	; 0x90
 80045e8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80045ea:	2302      	movs	r3, #2
 80045ec:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80045f2:	2301      	movs	r3, #1
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f107 0210 	add.w	r2, r7, #16
 80045fe:	4611      	mov	r1, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f002 fbb9 	bl	8006d78 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d90a      	bls.n	8004622 <HAL_SD_ReadBlocks_DMA+0x176>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2282      	movs	r2, #130	; 0x82
 8004610:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004618:	4618      	mov	r0, r3
 800461a:	f002 fc1d 	bl	8006e58 <SDMMC_CmdReadMultiBlock>
 800461e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004620:	e009      	b.n	8004636 <HAL_SD_ReadBlocks_DMA+0x18a>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2281      	movs	r2, #129	; 0x81
 8004626:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800462e:	4618      	mov	r0, r3
 8004630:	f002 fbf0 	bl	8006e14 <SDMMC_CmdReadSingleBlock>
 8004634:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004638:	2b00      	cmp	r3, #0
 800463a:	d012      	beq.n	8004662 <HAL_SD_ReadBlocks_DMA+0x1b6>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8004642:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	431a      	orrs	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e002      	b.n	8004668 <HAL_SD_ReadBlocks_DMA+0x1bc>
      }

      return HAL_OK;
 8004662:	2300      	movs	r3, #0
 8004664:	e000      	b.n	8004668 <HAL_SD_ReadBlocks_DMA+0x1bc>
    }
  }
  else
  {
    return HAL_BUSY;
 8004666:	2302      	movs	r3, #2
  }
}
 8004668:	4618      	mov	r0, r3
 800466a:	3730      	adds	r7, #48	; 0x30
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08005083 	.word	0x08005083
 8004674:	080050f5 	.word	0x080050f5
 8004678:	004005ff 	.word	0x004005ff
 800467c:	4225858c 	.word	0x4225858c

08004680 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	; 0x30
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e0ce      	b.n	8004846 <HAL_SD_WriteBlocks_DMA+0x1c6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	f040 80c7 	bne.w	8004844 <HAL_SD_WriteBlocks_DMA+0x1c4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80046bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	441a      	add	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d907      	bls.n	80046da <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e0b5      	b.n	8004846 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2203      	movs	r2, #3
 80046de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2200      	movs	r2, #0
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80046f8:	f043 0302 	orr.w	r3, r3, #2
 80046fc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004702:	4a53      	ldr	r2, [pc, #332]	; (8004850 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8004704:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800470a:	4a52      	ldr	r2, [pc, #328]	; (8004854 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800470c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	2200      	movs	r2, #0
 8004714:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471a:	2b01      	cmp	r3, #1
 800471c:	d002      	beq.n	8004724 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	025b      	lsls	r3, r3, #9
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800472c:	4618      	mov	r0, r3
 800472e:	f002 fb4f 	bl	8006dd0 <SDMMC_CmdBlockLength>
 8004732:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00f      	beq.n	800475a <HAL_SD_WriteBlocks_DMA+0xda>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a46      	ldr	r2, [pc, #280]	; (8004858 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	431a      	orrs	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e075      	b.n	8004846 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d90a      	bls.n	8004776 <HAL_SD_WriteBlocks_DMA+0xf6>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	22a0      	movs	r2, #160	; 0xa0
 8004764:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800476c:	4618      	mov	r0, r3
 800476e:	f002 fbb7 	bl	8006ee0 <SDMMC_CmdWriteMultiBlock>
 8004772:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004774:	e009      	b.n	800478a <HAL_SD_WriteBlocks_DMA+0x10a>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2290      	movs	r2, #144	; 0x90
 800477a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004782:	4618      	mov	r0, r3
 8004784:	f002 fb8a 	bl	8006e9c <SDMMC_CmdWriteSingleBlock>
 8004788:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	2b00      	cmp	r3, #0
 800478e:	d012      	beq.n	80047b6 <HAL_SD_WriteBlocks_DMA+0x136>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a30      	ldr	r2, [pc, #192]	; (8004858 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 8004796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	431a      	orrs	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e047      	b.n	8004846 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80047b6:	4b29      	ldr	r3, [pc, #164]	; (800485c <HAL_SD_WriteBlocks_DMA+0x1dc>)
 80047b8:	2201      	movs	r2, #1
 80047ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3380      	adds	r3, #128	; 0x80
 80047c8:	461a      	mov	r2, r3
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	025b      	lsls	r3, r3, #9
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	f7fe fc84 	bl	80030dc <HAL_DMA_Start_IT>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d01c      	beq.n	8004814 <HAL_SD_WriteBlocks_DMA+0x194>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 80047e8:	f023 0302 	bic.w	r3, r3, #2
 80047ec:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a19      	ldr	r2, [pc, #100]	; (8004858 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 80047f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e018      	b.n	8004846 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004814:	f04f 33ff 	mov.w	r3, #4294967295
 8004818:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	025b      	lsls	r3, r3, #9
 800481e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004820:	2390      	movs	r3, #144	; 0x90
 8004822:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004824:	2300      	movs	r3, #0
 8004826:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004828:	2300      	movs	r3, #0
 800482a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800482c:	2301      	movs	r3, #1
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f107 0210 	add.w	r2, r7, #16
 8004838:	4611      	mov	r1, r2
 800483a:	4618      	mov	r0, r3
 800483c:	f002 fa9c 	bl	8006d78 <SDIO_ConfigData>

      return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_SD_WriteBlocks_DMA+0x1c6>
    }
  }
  else
  {
    return HAL_BUSY;
 8004844:	2302      	movs	r3, #2
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3730      	adds	r7, #48	; 0x30
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	08005059 	.word	0x08005059
 8004854:	080050f5 	.word	0x080050f5
 8004858:	004005ff 	.word	0x004005ff
 800485c:	4225858c 	.word	0x4225858c

08004860 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004874:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d008      	beq.n	800488e <HAL_SD_IRQHandler+0x2e>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 0308 	and.w	r3, r3, #8
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 ffd8 	bl	800583c <SD_Read_IT>
 800488c:	e165      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004898:	2b00      	cmp	r3, #0
 800489a:	f000 808f 	beq.w	80049bc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80048b6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80048ba:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d039      	beq.n	800494a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_SD_IRQHandler+0x8a>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f003 0320 	and.w	r3, r3, #32
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d011      	beq.n	800490e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f002 fb18 	bl	8006f24 <SDMMC_CmdStopTransfer>
 80048f4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d008      	beq.n	800490e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f92f 	bl	8004b6c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f240 523a 	movw	r2, #1338	; 0x53a
 8004916:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_SD_IRQHandler+0xda>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f002 ff76 	bl	800782c <HAL_SD_RxCpltCallback>
 8004940:	e10b      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f002 ff68 	bl	8007818 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004948:	e107      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8102 	beq.w	8004b5a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0320 	and.w	r3, r3, #32
 800495c:	2b00      	cmp	r3, #0
 800495e:	d011      	beq.n	8004984 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f002 fadd 	bl	8006f24 <SDMMC_CmdStopTransfer>
 800496a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	431a      	orrs	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8f4 	bl	8004b6c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	f040 80e5 	bne.w	8004b5a <HAL_SD_IRQHandler+0x2fa>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	f040 80df 	bne.w	8004b5a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f022 0208 	bic.w	r2, r2, #8
 80049aa:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f002 ff2f 	bl	8007818 <HAL_SD_TxCpltCallback>
}
 80049ba:	e0ce      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d008      	beq.n	80049dc <HAL_SD_IRQHandler+0x17c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0308 	and.w	r3, r3, #8
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 ff82 	bl	80058de <SD_Write_IT>
 80049da:	e0be      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049e2:	f240 233a 	movw	r3, #570	; 0x23a
 80049e6:	4013      	ands	r3, r2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 80b6 	beq.w	8004b5a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	f043 0202 	orr.w	r2, r3, #2
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a0e:	f003 0308 	and.w	r3, r3, #8
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d005      	beq.n	8004a22 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	f043 0208 	orr.w	r2, r3, #8
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d005      	beq.n	8004a3c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a34:	f043 0220 	orr.w	r2, r3, #32
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a42:	f003 0310 	and.w	r3, r3, #16
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d005      	beq.n	8004a56 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	f043 0210 	orr.w	r2, r3, #16
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	f043 0208 	orr.w	r2, r3, #8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f240 723a 	movw	r2, #1850	; 0x73a
 8004a78:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6812      	ldr	r2, [r2, #0]
 8004a84:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8004a88:	f023 0302 	bic.w	r3, r3, #2
 8004a8c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f002 fa46 	bl	8006f24 <SDMMC_CmdStopTransfer>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00a      	beq.n	8004ac4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f000 f855 	bl	8004b6c <HAL_SD_ErrorCallback>
}
 8004ac2:	e04a      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d045      	beq.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0310 	and.w	r3, r3, #16
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d104      	bne.n	8004ae2 <HAL_SD_IRQHandler+0x282>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d011      	beq.n	8004b06 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	4a1f      	ldr	r2, [pc, #124]	; (8004b64 <HAL_SD_IRQHandler+0x304>)
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7fe fb4c 	bl	800318c <HAL_DMA_Abort_IT>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d02f      	beq.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fb4a 	bl	8005198 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004b04:	e029      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <HAL_SD_IRQHandler+0x2ba>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d011      	beq.n	8004b3e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a12      	ldr	r2, [pc, #72]	; (8004b68 <HAL_SD_IRQHandler+0x308>)
 8004b20:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe fb30 	bl	800318c <HAL_DMA_Abort_IT>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d013      	beq.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fb65 	bl	8005206 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004b3c:	e00d      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f002 fe56 	bl	8007804 <HAL_SD_AbortCallback>
}
 8004b58:	e7ff      	b.n	8004b5a <HAL_SD_IRQHandler+0x2fa>
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	08005199 	.word	0x08005199
 8004b68:	08005207 	.word	0x08005207

08004b6c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b8e:	0f9b      	lsrs	r3, r3, #30
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9a:	0e9b      	lsrs	r3, r3, #26
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 030f 	and.w	r3, r3, #15
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bac:	0e1b      	lsrs	r3, r3, #24
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	f003 0303 	and.w	r3, r3, #3
 8004bb4:	b2da      	uxtb	r2, r3
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	b2da      	uxtb	r2, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bca:	0a1b      	lsrs	r3, r3, #8
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be0:	0d1b      	lsrs	r3, r3, #20
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bec:	0c1b      	lsrs	r3, r3, #16
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bfe:	0bdb      	lsrs	r3, r3, #15
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c10:	0b9b      	lsrs	r3, r3, #14
 8004c12:	b2db      	uxtb	r3, r3
 8004c14:	f003 0301 	and.w	r3, r3, #1
 8004c18:	b2da      	uxtb	r2, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c22:	0b5b      	lsrs	r3, r3, #13
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c34:	0b1b      	lsrs	r3, r3, #12
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	2200      	movs	r2, #0
 8004c46:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d163      	bne.n	8004d18 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c54:	009a      	lsls	r2, r3, #2
 8004c56:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004c60:	0f92      	lsrs	r2, r2, #30
 8004c62:	431a      	orrs	r2, r3
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c6c:	0edb      	lsrs	r3, r3, #27
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	b2da      	uxtb	r2, r3
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c7e:	0e1b      	lsrs	r3, r3, #24
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 0307 	and.w	r3, r3, #7
 8004c86:	b2da      	uxtb	r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c90:	0d5b      	lsrs	r3, r3, #21
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ca2:	0c9b      	lsrs	r3, r3, #18
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cb4:	0bdb      	lsrs	r3, r3, #15
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	7e1b      	ldrb	r3, [r3, #24]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	2201      	movs	r2, #1
 8004cda:	fa02 f303 	lsl.w	r3, r2, r3
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ce2:	fb02 f203 	mul.w	r2, r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	7a1b      	ldrb	r3, [r3, #8]
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	409a      	lsls	r2, r3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004d04:	0a52      	lsrs	r2, r2, #9
 8004d06:	fb02 f203 	mul.w	r2, r2, r3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d14:	661a      	str	r2, [r3, #96]	; 0x60
 8004d16:	e031      	b.n	8004d7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d11d      	bne.n	8004d5c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d24:	041b      	lsls	r3, r3, #16
 8004d26:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d2e:	0c1b      	lsrs	r3, r3, #16
 8004d30:	431a      	orrs	r2, r3
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	029a      	lsls	r2, r3, #10
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d50:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	661a      	str	r2, [r3, #96]	; 0x60
 8004d5a:	e00f      	b.n	8004d7c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a58      	ldr	r2, [pc, #352]	; (8004ec4 <HAL_SD_GetCardCSD+0x344>)
 8004d62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e09d      	b.n	8004eb8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d80:	0b9b      	lsrs	r3, r3, #14
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	09db      	lsrs	r3, r3, #7
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004daa:	b2da      	uxtb	r2, r3
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db4:	0fdb      	lsrs	r3, r3, #31
 8004db6:	b2da      	uxtb	r2, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	0f5b      	lsrs	r3, r3, #29
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	0e9b      	lsrs	r3, r3, #26
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	0d9b      	lsrs	r3, r3, #22
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	f003 030f 	and.w	r3, r3, #15
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	0d5b      	lsrs	r3, r3, #21
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	0c1b      	lsrs	r3, r3, #16
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f003 0301 	and.w	r3, r3, #1
 8004e1a:	b2da      	uxtb	r2, r3
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e26:	0bdb      	lsrs	r3, r3, #15
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	0b9b      	lsrs	r3, r3, #14
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e4e:	0b5b      	lsrs	r3, r3, #13
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	b2da      	uxtb	r2, r3
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e62:	0b1b      	lsrs	r3, r3, #12
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	b2da      	uxtb	r2, r3
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e76:	0a9b      	lsrs	r3, r3, #10
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e8a:	0a1b      	lsrs	r3, r3, #8
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	f003 0303 	and.w	r3, r3, #3
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	004005ff 	.word	0x004005ff

08004ec8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b08e      	sub	sp, #56	; 0x38
 8004f24:	af04      	add	r7, sp, #16
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2203      	movs	r2, #3
 8004f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d02e      	beq.n	8004f98 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f40:	d106      	bne.n	8004f50 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	639a      	str	r2, [r3, #56]	; 0x38
 8004f4e:	e029      	b.n	8004fa4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f56:	d10a      	bne.n	8004f6e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 fb0f 	bl	800557c <SD_WideBus_Enable>
 8004f5e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	431a      	orrs	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004f6c:	e01a      	b.n	8004fa4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fb4c 	bl	8005612 <SD_WideBus_Disable>
 8004f7a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	639a      	str	r2, [r3, #56]	; 0x38
 8004f88:	e00c      	b.n	8004fa4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	639a      	str	r2, [r3, #56]	; 0x38
 8004f96:	e005      	b.n	8004fa4 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d009      	beq.n	8004fc0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a18      	ldr	r2, [pc, #96]	; (8005014 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8004fb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e024      	b.n	800500a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681d      	ldr	r5, [r3, #0]
 8004fe6:	466c      	mov	r4, sp
 8004fe8:	f107 0318 	add.w	r3, r7, #24
 8004fec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004ff0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004ff4:	f107 030c 	add.w	r3, r7, #12
 8004ff8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f001 fe0c 	bl	8006c18 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	4618      	mov	r0, r3
 800500c:	3728      	adds	r7, #40	; 0x28
 800500e:	46bd      	mov	sp, r7
 8005010:	bdb0      	pop	{r4, r5, r7, pc}
 8005012:	bf00      	nop
 8005014:	004005ff 	.word	0x004005ff

08005018 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005020:	2300      	movs	r3, #0
 8005022:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005024:	f107 030c 	add.w	r3, r7, #12
 8005028:	4619      	mov	r1, r3
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa7e 	bl	800552c <SD_SendStatus>
 8005030:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	0a5b      	lsrs	r3, r3, #9
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800504e:	693b      	ldr	r3, [r7, #16]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3718      	adds	r7, #24
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b084      	sub	sp, #16
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2b82      	cmp	r3, #130	; 0x82
 8005096:	d111      	bne.n	80050bc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f001 ff41 	bl	8006f24 <SDMMC_CmdStopTransfer>
 80050a2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d008      	beq.n	80050bc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	431a      	orrs	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fd58 	bl	8004b6c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0208 	bic.w	r2, r2, #8
 80050ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80050d4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f002 fba1 	bl	800782c <HAL_SD_RxCpltCallback>
#endif
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005100:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fe f9ee 	bl	80034e4 <HAL_DMA_GetError>
 8005108:	4603      	mov	r3, r0
 800510a:	2b02      	cmp	r3, #2
 800510c:	d03e      	beq.n	800518c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005114:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800511c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d002      	beq.n	800512a <SD_DMAError+0x36>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d12d      	bne.n	8005186 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a19      	ldr	r2, [pc, #100]	; (8005194 <SD_DMAError+0xa0>)
 8005130:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005140:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800514e:	6978      	ldr	r0, [r7, #20]
 8005150:	f7ff ff62 	bl	8005018 <HAL_SD_GetCardState>
 8005154:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b06      	cmp	r3, #6
 800515a:	d002      	beq.n	8005162 <SD_DMAError+0x6e>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b05      	cmp	r3, #5
 8005160:	d10a      	bne.n	8005178 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f001 fedc 	bl	8006f24 <SDMMC_CmdStopTransfer>
 800516c:	4602      	mov	r2, r0
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005172:	431a      	orrs	r2, r3
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2200      	movs	r2, #0
 8005184:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8005186:	6978      	ldr	r0, [r7, #20]
 8005188:	f7ff fcf0 	bl	8004b6c <HAL_SD_ErrorCallback>
#endif
  }
}
 800518c:	bf00      	nop
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	004005ff 	.word	0x004005ff

08005198 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f240 523a 	movw	r2, #1338	; 0x53a
 80051ae:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ff31 	bl	8005018 <HAL_SD_GetCardState>
 80051b6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	2b06      	cmp	r3, #6
 80051ca:	d002      	beq.n	80051d2 <SD_DMATxAbort+0x3a>
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	d10a      	bne.n	80051e8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f001 fea4 	bl	8006f24 <SDMMC_CmdStopTransfer>
 80051dc:	4602      	mov	r2, r0
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	431a      	orrs	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d103      	bne.n	80051f8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f002 fb07 	bl	8007804 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80051f6:	e002      	b.n	80051fe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff fcb7 	bl	8004b6c <HAL_SD_ErrorCallback>
}
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b084      	sub	sp, #16
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005212:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f240 523a 	movw	r2, #1338	; 0x53a
 800521c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800521e:	68f8      	ldr	r0, [r7, #12]
 8005220:	f7ff fefa 	bl	8005018 <HAL_SD_GetCardState>
 8005224:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b06      	cmp	r3, #6
 8005238:	d002      	beq.n	8005240 <SD_DMARxAbort+0x3a>
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b05      	cmp	r3, #5
 800523e:	d10a      	bne.n	8005256 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4618      	mov	r0, r3
 8005246:	f001 fe6d 	bl	8006f24 <SDMMC_CmdStopTransfer>
 800524a:	4602      	mov	r2, r0
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005250:	431a      	orrs	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f002 fad0 	bl	8007804 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8005264:	e002      	b.n	800526c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f7ff fc80 	bl	8004b6c <HAL_SD_ErrorCallback>
}
 800526c:	bf00      	nop
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005274:	b5b0      	push	{r4, r5, r7, lr}
 8005276:	b094      	sub	sp, #80	; 0x50
 8005278:	af04      	add	r7, sp, #16
 800527a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800527c:	2301      	movs	r3, #1
 800527e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4618      	mov	r0, r3
 8005286:	f001 fd1f 	bl	8006cc8 <SDIO_GetPowerState>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005290:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8005294:	e0b7      	b.n	8005406 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529a:	2b03      	cmp	r3, #3
 800529c:	d02f      	beq.n	80052fe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 ff48 	bl	8007138 <SDMMC_CmdSendCID>
 80052a8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80052aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <SD_InitCard+0x40>
    {
      return errorstate;
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	e0a8      	b.n	8005406 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2100      	movs	r1, #0
 80052ba:	4618      	mov	r0, r3
 80052bc:	f001 fd49 	bl	8006d52 <SDIO_GetResponse>
 80052c0:	4602      	mov	r2, r0
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2104      	movs	r1, #4
 80052cc:	4618      	mov	r0, r3
 80052ce:	f001 fd40 	bl	8006d52 <SDIO_GetResponse>
 80052d2:	4602      	mov	r2, r0
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2108      	movs	r1, #8
 80052de:	4618      	mov	r0, r3
 80052e0:	f001 fd37 	bl	8006d52 <SDIO_GetResponse>
 80052e4:	4602      	mov	r2, r0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	210c      	movs	r1, #12
 80052f0:	4618      	mov	r0, r3
 80052f2:	f001 fd2e 	bl	8006d52 <SDIO_GetResponse>
 80052f6:	4602      	mov	r2, r0
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	2b03      	cmp	r3, #3
 8005304:	d00d      	beq.n	8005322 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f107 020e 	add.w	r2, r7, #14
 800530e:	4611      	mov	r1, r2
 8005310:	4618      	mov	r0, r3
 8005312:	f001 ff4e 	bl	80071b2 <SDMMC_CmdSetRelAdd>
 8005316:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <SD_InitCard+0xae>
    {
      return errorstate;
 800531e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005320:	e071      	b.n	8005406 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	2b03      	cmp	r3, #3
 8005328:	d036      	beq.n	8005398 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800532a:	89fb      	ldrh	r3, [r7, #14]
 800532c:	461a      	mov	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533a:	041b      	lsls	r3, r3, #16
 800533c:	4619      	mov	r1, r3
 800533e:	4610      	mov	r0, r2
 8005340:	f001 ff18 	bl	8007174 <SDMMC_CmdSendCSD>
 8005344:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <SD_InitCard+0xdc>
    {
      return errorstate;
 800534c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534e:	e05a      	b.n	8005406 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2100      	movs	r1, #0
 8005356:	4618      	mov	r0, r3
 8005358:	f001 fcfb 	bl	8006d52 <SDIO_GetResponse>
 800535c:	4602      	mov	r2, r0
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2104      	movs	r1, #4
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fcf2 	bl	8006d52 <SDIO_GetResponse>
 800536e:	4602      	mov	r2, r0
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2108      	movs	r1, #8
 800537a:	4618      	mov	r0, r3
 800537c:	f001 fce9 	bl	8006d52 <SDIO_GetResponse>
 8005380:	4602      	mov	r2, r0
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	210c      	movs	r1, #12
 800538c:	4618      	mov	r0, r3
 800538e:	f001 fce0 	bl	8006d52 <SDIO_GetResponse>
 8005392:	4602      	mov	r2, r0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2104      	movs	r1, #4
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 fcd7 	bl	8006d52 <SDIO_GetResponse>
 80053a4:	4603      	mov	r3, r0
 80053a6:	0d1a      	lsrs	r2, r3, #20
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80053ac:	f107 0310 	add.w	r3, r7, #16
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fbe4 	bl	8004b80 <HAL_SD_GetCardCSD>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d002      	beq.n	80053c4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80053be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80053c2:	e020      	b.n	8005406 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6819      	ldr	r1, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	f04f 0400 	mov.w	r4, #0
 80053d2:	461a      	mov	r2, r3
 80053d4:	4623      	mov	r3, r4
 80053d6:	4608      	mov	r0, r1
 80053d8:	f001 fdc6 	bl	8006f68 <SDMMC_CmdSelDesel>
 80053dc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80053de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <SD_InitCard+0x174>
  {
    return errorstate;
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	e00e      	b.n	8005406 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681d      	ldr	r5, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	466c      	mov	r4, sp
 80053f0:	f103 0210 	add.w	r2, r3, #16
 80053f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80053f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80053fa:	3304      	adds	r3, #4
 80053fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053fe:	4628      	mov	r0, r5
 8005400:	f001 fc0a 	bl	8006c18 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3740      	adds	r7, #64	; 0x40
 800540a:	46bd      	mov	sp, r7
 800540c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005410 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005418:	2300      	movs	r3, #0
 800541a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	2300      	movs	r3, #0
 8005422:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4618      	mov	r0, r3
 800542a:	f001 fdc0 	bl	8006fae <SDMMC_CmdGoIdleState>
 800542e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <SD_PowerON+0x2a>
  {
    return errorstate;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	e072      	b.n	8005520 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f001 fdd3 	bl	8006fea <SDMMC_CmdOperCond>
 8005444:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00d      	beq.n	8005468 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f001 fda9 	bl	8006fae <SDMMC_CmdGoIdleState>
 800545c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d004      	beq.n	800546e <SD_PowerON+0x5e>
    {
      return errorstate;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	e05b      	b.n	8005520 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005472:	2b01      	cmp	r3, #1
 8005474:	d137      	bne.n	80054e6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2100      	movs	r1, #0
 800547c:	4618      	mov	r0, r3
 800547e:	f001 fdd3 	bl	8007028 <SDMMC_CmdAppCommand>
 8005482:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d02d      	beq.n	80054e6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800548a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800548e:	e047      	b.n	8005520 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2100      	movs	r1, #0
 8005496:	4618      	mov	r0, r3
 8005498:	f001 fdc6 	bl	8007028 <SDMMC_CmdAppCommand>
 800549c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <SD_PowerON+0x98>
    {
      return errorstate;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	e03b      	b.n	8005520 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	491e      	ldr	r1, [pc, #120]	; (8005528 <SD_PowerON+0x118>)
 80054ae:	4618      	mov	r0, r3
 80054b0:	f001 fddc 	bl	800706c <SDMMC_CmdAppOperCommand>
 80054b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80054bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054c0:	e02e      	b.n	8005520 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2100      	movs	r1, #0
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 fc42 	bl	8006d52 <SDIO_GetResponse>
 80054ce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	0fdb      	lsrs	r3, r3, #31
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <SD_PowerON+0xcc>
 80054d8:	2301      	movs	r3, #1
 80054da:	e000      	b.n	80054de <SD_PowerON+0xce>
 80054dc:	2300      	movs	r3, #0
 80054de:	613b      	str	r3, [r7, #16]

    count++;
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d802      	bhi.n	80054f6 <SD_PowerON+0xe6>
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0cc      	beq.n	8005490 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d902      	bls.n	8005506 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005504:	e00c      	b.n	8005520 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	645a      	str	r2, [r3, #68]	; 0x44
 8005516:	e002      	b.n	800551e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	c1100000 	.word	0xc1100000

0800552c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800553c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005540:	e018      	b.n	8005574 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	4619      	mov	r1, r3
 800554e:	4610      	mov	r0, r2
 8005550:	f001 fe50 	bl	80071f4 <SDMMC_CmdSendStatus>
 8005554:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <SD_SendStatus+0x34>
  {
    return errorstate;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	e009      	b.n	8005574 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f001 fbf3 	bl	8006d52 <SDIO_GetResponse>
 800556c:	4602      	mov	r2, r0
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8005584:	2300      	movs	r3, #0
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	2300      	movs	r3, #0
 800558a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f001 fbdd 	bl	8006d52 <SDIO_GetResponse>
 8005598:	4603      	mov	r3, r0
 800559a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800559e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055a2:	d102      	bne.n	80055aa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80055a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80055a8:	e02f      	b.n	800560a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80055aa:	f107 030c 	add.w	r3, r7, #12
 80055ae:	4619      	mov	r1, r3
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f879 	bl	80056a8 <SD_FindSCR>
 80055b6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	e023      	b.n	800560a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01c      	beq.n	8005606 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055d4:	041b      	lsls	r3, r3, #16
 80055d6:	4619      	mov	r1, r3
 80055d8:	4610      	mov	r0, r2
 80055da:	f001 fd25 	bl	8007028 <SDMMC_CmdAppCommand>
 80055de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	e00f      	b.n	800560a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2102      	movs	r1, #2
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fd5e 	bl	80070b2 <SDMMC_CmdBusWidth>
 80055f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	e003      	b.n	800560a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005602:	2300      	movs	r3, #0
 8005604:	e001      	b.n	800560a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8005606:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b086      	sub	sp, #24
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800561a:	2300      	movs	r3, #0
 800561c:	60fb      	str	r3, [r7, #12]
 800561e:	2300      	movs	r3, #0
 8005620:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f001 fb92 	bl	8006d52 <SDIO_GetResponse>
 800562e:	4603      	mov	r3, r0
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005638:	d102      	bne.n	8005640 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800563a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800563e:	e02f      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8005640:	f107 030c 	add.w	r3, r7, #12
 8005644:	4619      	mov	r1, r3
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f82e 	bl	80056a8 <SD_FindSCR>
 800564c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	e023      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d01c      	beq.n	800569c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566a:	041b      	lsls	r3, r3, #16
 800566c:	4619      	mov	r1, r3
 800566e:	4610      	mov	r0, r2
 8005670:	f001 fcda 	bl	8007028 <SDMMC_CmdAppCommand>
 8005674:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d001      	beq.n	8005680 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	e00f      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2100      	movs	r1, #0
 8005686:	4618      	mov	r0, r3
 8005688:	f001 fd13 	bl	80070b2 <SDMMC_CmdBusWidth>
 800568c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	e003      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8005698:	2300      	movs	r3, #0
 800569a:	e001      	b.n	80056a0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800569c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	3718      	adds	r7, #24
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bd80      	pop	{r7, pc}

080056a8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b08f      	sub	sp, #60	; 0x3c
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80056b2:	f7fc ff13 	bl	80024dc <HAL_GetTick>
 80056b6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80056bc:	2300      	movs	r3, #0
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2108      	movs	r1, #8
 80056ce:	4618      	mov	r0, r3
 80056d0:	f001 fb7e 	bl	8006dd0 <SDMMC_CmdBlockLength>
 80056d4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	e0a9      	b.n	8005834 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f001 fc9b 	bl	8007028 <SDMMC_CmdAppCommand>
 80056f2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d001      	beq.n	80056fe <SD_FindSCR+0x56>
  {
    return errorstate;
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	e09a      	b.n	8005834 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005702:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8005704:	2308      	movs	r3, #8
 8005706:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8005708:	2330      	movs	r3, #48	; 0x30
 800570a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800570c:	2302      	movs	r3, #2
 800570e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005710:	2300      	movs	r3, #0
 8005712:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8005714:	2301      	movs	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f107 0210 	add.w	r2, r7, #16
 8005720:	4611      	mov	r1, r2
 8005722:	4618      	mov	r0, r3
 8005724:	f001 fb28 	bl	8006d78 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4618      	mov	r0, r3
 800572e:	f001 fce2 	bl	80070f6 <SDMMC_CmdSendSCR>
 8005732:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8005734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005736:	2b00      	cmp	r3, #0
 8005738:	d022      	beq.n	8005780 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	e07a      	b.n	8005834 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00e      	beq.n	800576a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6819      	ldr	r1, [r3, #0]
 8005750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	f107 0208 	add.w	r2, r7, #8
 8005758:	18d4      	adds	r4, r2, r3
 800575a:	4608      	mov	r0, r1
 800575c:	f001 fa87 	bl	8006c6e <SDIO_ReadFIFO>
 8005760:	4603      	mov	r3, r0
 8005762:	6023      	str	r3, [r4, #0]
      index++;
 8005764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005766:	3301      	adds	r3, #1
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800576a:	f7fc feb7 	bl	80024dc <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d102      	bne.n	8005780 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800577a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800577e:	e059      	b.n	8005834 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005786:	f240 432a 	movw	r3, #1066	; 0x42a
 800578a:	4013      	ands	r3, r2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0d6      	beq.n	800573e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2208      	movs	r2, #8
 80057a4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80057a6:	2308      	movs	r3, #8
 80057a8:	e044      	b.n	8005834 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d005      	beq.n	80057c4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2202      	movs	r2, #2
 80057be:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80057c0:	2302      	movs	r3, #2
 80057c2:	e037      	b.n	8005834 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ca:	f003 0320 	and.w	r3, r3, #32
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d005      	beq.n	80057de <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2220      	movs	r2, #32
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80057da:	2320      	movs	r3, #32
 80057dc:	e02a      	b.n	8005834 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	061a      	lsls	r2, r3, #24
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	021b      	lsls	r3, r3, #8
 80057f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0a1b      	lsrs	r3, r3, #8
 80057fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80057fe:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	0e1b      	lsrs	r3, r3, #24
 8005804:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8005806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005808:	601a      	str	r2, [r3, #0]
    scr++;
 800580a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800580c:	3304      	adds	r3, #4
 800580e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	061a      	lsls	r2, r3, #24
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800581c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	0a1b      	lsrs	r3, r3, #8
 8005822:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8005826:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	0e1b      	lsrs	r3, r3, #24
 800582c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	373c      	adds	r7, #60	; 0x3c
 8005838:	46bd      	mov	sp, r7
 800583a:	bd90      	pop	{r4, r7, pc}

0800583c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005848:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d03f      	beq.n	80058d6 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e033      	b.n	80058c4 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f001 fa04 	bl	8006c6e <SDIO_ReadFIFO>
 8005866:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	3301      	adds	r3, #1
 8005874:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	3b01      	subs	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	701a      	strb	r2, [r3, #0]
      tmp++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3301      	adds	r3, #1
 800588a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	3b01      	subs	r3, #1
 8005890:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	0c1b      	lsrs	r3, r3, #16
 8005896:	b2da      	uxtb	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3301      	adds	r3, #1
 80058a0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	3b01      	subs	r3, #1
 80058a6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	0e1b      	lsrs	r3, r3, #24
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	3301      	adds	r3, #1
 80058b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	3301      	adds	r3, #1
 80058c2:	617b      	str	r3, [r7, #20]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	2b07      	cmp	r3, #7
 80058c8:	d9c8      	bls.n	800585c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	693a      	ldr	r2, [r7, #16]
 80058d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80058d6:	bf00      	nop
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b086      	sub	sp, #24
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d043      	beq.n	8005980 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	e037      	b.n	800596e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	3b01      	subs	r3, #1
 800590e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	021a      	lsls	r2, r3, #8
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	4313      	orrs	r3, r2
 800591a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	3b01      	subs	r3, #1
 8005926:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	041a      	lsls	r2, r3, #16
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4313      	orrs	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]
      tmp++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	3b01      	subs	r3, #1
 800593e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	061a      	lsls	r2, r3, #24
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	4313      	orrs	r3, r2
 800594a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3301      	adds	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3b01      	subs	r3, #1
 8005956:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f107 0208 	add.w	r2, r7, #8
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f001 f990 	bl	8006c88 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3301      	adds	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b07      	cmp	r3, #7
 8005972:	d9c4      	bls.n	80058fe <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8005980:	bf00      	nop
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e056      	b.n	8005a48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d106      	bne.n	80059ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7fc fb15 	bl	8001fe4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2202      	movs	r2, #2
 80059be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	ea42 0103 	orr.w	r1, r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	0c1b      	lsrs	r3, r3, #16
 8005a18:	f003 0104 	and.w	r1, r3, #4
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69da      	ldr	r2, [r3, #28]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d101      	bne.n	8005a62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e01d      	b.n	8005a9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d106      	bne.n	8005a7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f815 	bl	8005aa6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2202      	movs	r2, #2
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	3304      	adds	r3, #4
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4610      	mov	r0, r2
 8005a90:	f000 f968 	bl	8005d64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b085      	sub	sp, #20
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	68da      	ldr	r2, [r3, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f003 0307 	and.w	r3, r3, #7
 8005adc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2b06      	cmp	r3, #6
 8005ae2:	d007      	beq.n	8005af4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f042 0201 	orr.w	r2, r2, #1
 8005af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d122      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d11b      	bne.n	8005b5e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f06f 0202 	mvn.w	r2, #2
 8005b2e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f8ee 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005b4a:	e005      	b.n	8005b58 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f8e0 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f8f1 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f003 0304 	and.w	r3, r3, #4
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d122      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d11b      	bne.n	8005bb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f06f 0204 	mvn.w	r2, #4
 8005b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2202      	movs	r2, #2
 8005b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f8c4 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005b9e:	e005      	b.n	8005bac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f8b6 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f8c7 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0308 	and.w	r3, r3, #8
 8005bbc:	2b08      	cmp	r3, #8
 8005bbe:	d122      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0308 	and.w	r3, r3, #8
 8005bca:	2b08      	cmp	r3, #8
 8005bcc:	d11b      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f06f 0208 	mvn.w	r2, #8
 8005bd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2204      	movs	r2, #4
 8005bdc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 f89a 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005bf2:	e005      	b.n	8005c00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 f88c 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 f89d 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	f003 0310 	and.w	r3, r3, #16
 8005c10:	2b10      	cmp	r3, #16
 8005c12:	d122      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	f003 0310 	and.w	r3, r3, #16
 8005c1e:	2b10      	cmp	r3, #16
 8005c20:	d11b      	bne.n	8005c5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f06f 0210 	mvn.w	r2, #16
 8005c2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2208      	movs	r2, #8
 8005c30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f870 	bl	8005d26 <HAL_TIM_IC_CaptureCallback>
 8005c46:	e005      	b.n	8005c54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 f862 	bl	8005d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 f873 	bl	8005d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d10e      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d107      	bne.n	8005c86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f06f 0201 	mvn.w	r2, #1
 8005c7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7fb ff89 	bl	8001b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d10e      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9e:	2b80      	cmp	r3, #128	; 0x80
 8005ca0:	d107      	bne.n	8005cb2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005caa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cac:	6878      	ldr	r0, [r7, #4]
 8005cae:	f000 f903 	bl	8005eb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	691b      	ldr	r3, [r3, #16]
 8005cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbc:	2b40      	cmp	r3, #64	; 0x40
 8005cbe:	d10e      	bne.n	8005cde <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b40      	cmp	r3, #64	; 0x40
 8005ccc:	d107      	bne.n	8005cde <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f838 	bl	8005d4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d10e      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	f003 0320 	and.w	r3, r3, #32
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d107      	bne.n	8005d0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f06f 0220 	mvn.w	r2, #32
 8005d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f8cd 	bl	8005ea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d0a:	bf00      	nop
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b083      	sub	sp, #12
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d1a:	bf00      	nop
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d26:	b480      	push	{r7}
 8005d28:	b083      	sub	sp, #12
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d42:	bf00      	nop
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d56:	bf00      	nop
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
	...

08005d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a40      	ldr	r2, [pc, #256]	; (8005e78 <TIM_Base_SetConfig+0x114>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d82:	d00f      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3d      	ldr	r2, [pc, #244]	; (8005e7c <TIM_Base_SetConfig+0x118>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00b      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a3c      	ldr	r2, [pc, #240]	; (8005e80 <TIM_Base_SetConfig+0x11c>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d007      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a3b      	ldr	r2, [pc, #236]	; (8005e84 <TIM_Base_SetConfig+0x120>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d003      	beq.n	8005da4 <TIM_Base_SetConfig+0x40>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	4a3a      	ldr	r2, [pc, #232]	; (8005e88 <TIM_Base_SetConfig+0x124>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d108      	bne.n	8005db6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2f      	ldr	r2, [pc, #188]	; (8005e78 <TIM_Base_SetConfig+0x114>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d02b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dc4:	d027      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2c      	ldr	r2, [pc, #176]	; (8005e7c <TIM_Base_SetConfig+0x118>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d023      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a2b      	ldr	r2, [pc, #172]	; (8005e80 <TIM_Base_SetConfig+0x11c>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d01f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a2a      	ldr	r2, [pc, #168]	; (8005e84 <TIM_Base_SetConfig+0x120>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d01b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a29      	ldr	r2, [pc, #164]	; (8005e88 <TIM_Base_SetConfig+0x124>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d017      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a28      	ldr	r2, [pc, #160]	; (8005e8c <TIM_Base_SetConfig+0x128>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d013      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a27      	ldr	r2, [pc, #156]	; (8005e90 <TIM_Base_SetConfig+0x12c>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d00f      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a26      	ldr	r2, [pc, #152]	; (8005e94 <TIM_Base_SetConfig+0x130>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d00b      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a25      	ldr	r2, [pc, #148]	; (8005e98 <TIM_Base_SetConfig+0x134>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d007      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a24      	ldr	r2, [pc, #144]	; (8005e9c <TIM_Base_SetConfig+0x138>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d003      	beq.n	8005e16 <TIM_Base_SetConfig+0xb2>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a23      	ldr	r2, [pc, #140]	; (8005ea0 <TIM_Base_SetConfig+0x13c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d108      	bne.n	8005e28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689a      	ldr	r2, [r3, #8]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a0a      	ldr	r2, [pc, #40]	; (8005e78 <TIM_Base_SetConfig+0x114>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d003      	beq.n	8005e5c <TIM_Base_SetConfig+0xf8>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a0c      	ldr	r2, [pc, #48]	; (8005e88 <TIM_Base_SetConfig+0x124>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d103      	bne.n	8005e64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	615a      	str	r2, [r3, #20]
}
 8005e6a:	bf00      	nop
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop
 8005e78:	40010000 	.word	0x40010000
 8005e7c:	40000400 	.word	0x40000400
 8005e80:	40000800 	.word	0x40000800
 8005e84:	40000c00 	.word	0x40000c00
 8005e88:	40010400 	.word	0x40010400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800
 8005e98:	40001800 	.word	0x40001800
 8005e9c:	40001c00 	.word	0x40001c00
 8005ea0:	40002000 	.word	0x40002000

08005ea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e03f      	b.n	8005f5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fc f8be 	bl	8002074 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2224      	movs	r2, #36	; 0x24
 8005efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fb05 	bl	8006520 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	691a      	ldr	r2, [r3, #16]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	695a      	ldr	r2, [r3, #20]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b088      	sub	sp, #32
 8005f6a:	af02      	add	r7, sp, #8
 8005f6c:	60f8      	str	r0, [r7, #12]
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	603b      	str	r3, [r7, #0]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	f040 8083 	bne.w	800608e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <HAL_UART_Transmit+0x2e>
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e07b      	b.n	8006090 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Transmit+0x40>
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	e074      	b.n	8006090 <HAL_UART_Transmit+0x12a>
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2221      	movs	r2, #33	; 0x21
 8005fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005fbc:	f7fc fa8e 	bl	80024dc <HAL_GetTick>
 8005fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	88fa      	ldrh	r2, [r7, #6]
 8005fcc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005fd6:	e042      	b.n	800605e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fee:	d122      	bne.n	8006036 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	2180      	movs	r1, #128	; 0x80
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 fa12 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d001      	beq.n	800600a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	e042      	b.n	8006090 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800601c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d103      	bne.n	800602e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	3302      	adds	r3, #2
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	e017      	b.n	800605e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	3301      	adds	r3, #1
 8006032:	60bb      	str	r3, [r7, #8]
 8006034:	e013      	b.n	800605e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f9ef 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d001      	beq.n	8006050 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e01f      	b.n	8006090 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	60ba      	str	r2, [r7, #8]
 8006056:	781a      	ldrb	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1b7      	bne.n	8005fd8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 f9d6 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8006078:	4603      	mov	r3, r0
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800607e:	2303      	movs	r3, #3
 8006080:	e006      	b.n	8006090 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800608a:	2300      	movs	r3, #0
 800608c:	e000      	b.n	8006090 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800608e:	2302      	movs	r3, #2
  }
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af02      	add	r7, sp, #8
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	4613      	mov	r3, r2
 80060a6:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b20      	cmp	r3, #32
 80060b6:	f040 8090 	bne.w	80061da <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <HAL_UART_Receive+0x2e>
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d101      	bne.n	80060ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e088      	b.n	80061dc <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d101      	bne.n	80060d8 <HAL_UART_Receive+0x40>
 80060d4:	2302      	movs	r3, #2
 80060d6:	e081      	b.n	80061dc <HAL_UART_Receive+0x144>
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2222      	movs	r2, #34	; 0x22
 80060ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80060ee:	f7fc f9f5 	bl	80024dc <HAL_GetTick>
 80060f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	88fa      	ldrh	r2, [r7, #6]
 80060f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	88fa      	ldrh	r2, [r7, #6]
 80060fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006108:	e05c      	b.n	80061c4 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800610e:	b29b      	uxth	r3, r3
 8006110:	3b01      	subs	r3, #1
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006120:	d12b      	bne.n	800617a <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	9300      	str	r3, [sp, #0]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	2120      	movs	r1, #32
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 f979 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e04f      	b.n	80061dc <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10c      	bne.n	8006162 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006154:	b29a      	uxth	r2, r3
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	3302      	adds	r3, #2
 800615e:	60bb      	str	r3, [r7, #8]
 8006160:	e030      	b.n	80061c4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	b29b      	uxth	r3, r3
 800616a:	b2db      	uxtb	r3, r3
 800616c:	b29a      	uxth	r2, r3
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	3301      	adds	r3, #1
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	e024      	b.n	80061c4 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2200      	movs	r2, #0
 8006182:	2120      	movs	r1, #32
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f94d 	bl	8006424 <UART_WaitOnFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e023      	b.n	80061dc <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d108      	bne.n	80061ae <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6859      	ldr	r1, [r3, #4]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	1c5a      	adds	r2, r3, #1
 80061a6:	60ba      	str	r2, [r7, #8]
 80061a8:	b2ca      	uxtb	r2, r1
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	e00a      	b.n	80061c4 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	b2da      	uxtb	r2, r3
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	1c59      	adds	r1, r3, #1
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d19d      	bne.n	800610a <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	e000      	b.n	80061dc <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80061da:	2302      	movs	r3, #2
  }
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3718      	adds	r7, #24
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	4613      	mov	r3, r2
 80061f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d166      	bne.n	80062cc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <HAL_UART_Receive_DMA+0x26>
 8006204:	88fb      	ldrh	r3, [r7, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e05f      	b.n	80062ce <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006214:	2b01      	cmp	r3, #1
 8006216:	d101      	bne.n	800621c <HAL_UART_Receive_DMA+0x38>
 8006218:	2302      	movs	r3, #2
 800621a:	e058      	b.n	80062ce <HAL_UART_Receive_DMA+0xea>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006224:	68ba      	ldr	r2, [r7, #8]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	88fa      	ldrh	r2, [r7, #6]
 800622e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2222      	movs	r2, #34	; 0x22
 800623a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006242:	4a25      	ldr	r2, [pc, #148]	; (80062d8 <HAL_UART_Receive_DMA+0xf4>)
 8006244:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624a:	4a24      	ldr	r2, [pc, #144]	; (80062dc <HAL_UART_Receive_DMA+0xf8>)
 800624c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	4a23      	ldr	r2, [pc, #140]	; (80062e0 <HAL_UART_Receive_DMA+0xfc>)
 8006254:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625a:	2200      	movs	r2, #0
 800625c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800625e:	f107 0308 	add.w	r3, r7, #8
 8006262:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	f7fc ff31 	bl	80030dc <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800627a:	2300      	movs	r3, #0
 800627c:	613b      	str	r3, [r7, #16]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	695a      	ldr	r2, [r3, #20]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f042 0201 	orr.w	r2, r2, #1
 80062b6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695a      	ldr	r2, [r3, #20]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	e000      	b.n	80062ce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80062cc:	2302      	movs	r3, #2
  }
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3718      	adds	r7, #24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	0800630d 	.word	0x0800630d
 80062dc:	08006375 	.word	0x08006375
 80062e0:	08006391 	.word	0x08006391

080062e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80062ec:	bf00      	nop
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b084      	sub	sp, #16
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006318:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d11e      	bne.n	8006366 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800633c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f022 0201 	bic.w	r2, r2, #1
 800634c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800635c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2220      	movs	r2, #32
 8006362:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f7fa fca4 	bl	8000cb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006380:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f7ff ffae 	bl	80062e4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006398:	2300      	movs	r3, #0
 800639a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	695b      	ldr	r3, [r3, #20]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	bf0c      	ite	eq
 80063b0:	2301      	moveq	r3, #1
 80063b2:	2300      	movne	r3, #0
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b21      	cmp	r3, #33	; 0x21
 80063c2:	d108      	bne.n	80063d6 <UART_DMAError+0x46>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d005      	beq.n	80063d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2200      	movs	r2, #0
 80063ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80063d0:	68b8      	ldr	r0, [r7, #8]
 80063d2:	f000 f871 	bl	80064b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	bf0c      	ite	eq
 80063e4:	2301      	moveq	r3, #1
 80063e6:	2300      	movne	r3, #0
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b22      	cmp	r3, #34	; 0x22
 80063f6:	d108      	bne.n	800640a <UART_DMAError+0x7a>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	2200      	movs	r2, #0
 8006402:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006404:	68b8      	ldr	r0, [r7, #8]
 8006406:	f000 f86d 	bl	80064e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640e:	f043 0210 	orr.w	r2, r3, #16
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006416:	68b8      	ldr	r0, [r7, #8]
 8006418:	f7ff ff6e 	bl	80062f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800641c:	bf00      	nop
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	60b9      	str	r1, [r7, #8]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4613      	mov	r3, r2
 8006432:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006434:	e02c      	b.n	8006490 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d028      	beq.n	8006490 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d007      	beq.n	8006454 <UART_WaitOnFlagUntilTimeout+0x30>
 8006444:	f7fc f84a 	bl	80024dc <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	69ba      	ldr	r2, [r7, #24]
 8006450:	429a      	cmp	r2, r3
 8006452:	d21d      	bcs.n	8006490 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006462:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f022 0201 	bic.w	r2, r2, #1
 8006472:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e00f      	b.n	80064b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4013      	ands	r3, r2
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d0c3      	beq.n	8006436 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80064ce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2220      	movs	r2, #32
 80064d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68da      	ldr	r2, [r3, #12]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80064fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	695a      	ldr	r2, [r3, #20]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0201 	bic.w	r2, r2, #1
 800650a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2220      	movs	r2, #32
 8006510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68da      	ldr	r2, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	689a      	ldr	r2, [r3, #8]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	691b      	ldr	r3, [r3, #16]
 8006548:	431a      	orrs	r2, r3
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006562:	f023 030c 	bic.w	r3, r3, #12
 8006566:	687a      	ldr	r2, [r7, #4]
 8006568:	6812      	ldr	r2, [r2, #0]
 800656a:	68f9      	ldr	r1, [r7, #12]
 800656c:	430b      	orrs	r3, r1
 800656e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658e:	f040 818b 	bne.w	80068a8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4ac1      	ldr	r2, [pc, #772]	; (800689c <UART_SetConfig+0x37c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d005      	beq.n	80065a8 <UART_SetConfig+0x88>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4abf      	ldr	r2, [pc, #764]	; (80068a0 <UART_SetConfig+0x380>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	f040 80bd 	bne.w	8006722 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065a8:	f7fd feaa 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 80065ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	461d      	mov	r5, r3
 80065b2:	f04f 0600 	mov.w	r6, #0
 80065b6:	46a8      	mov	r8, r5
 80065b8:	46b1      	mov	r9, r6
 80065ba:	eb18 0308 	adds.w	r3, r8, r8
 80065be:	eb49 0409 	adc.w	r4, r9, r9
 80065c2:	4698      	mov	r8, r3
 80065c4:	46a1      	mov	r9, r4
 80065c6:	eb18 0805 	adds.w	r8, r8, r5
 80065ca:	eb49 0906 	adc.w	r9, r9, r6
 80065ce:	f04f 0100 	mov.w	r1, #0
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065e2:	4688      	mov	r8, r1
 80065e4:	4691      	mov	r9, r2
 80065e6:	eb18 0005 	adds.w	r0, r8, r5
 80065ea:	eb49 0106 	adc.w	r1, r9, r6
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	461d      	mov	r5, r3
 80065f4:	f04f 0600 	mov.w	r6, #0
 80065f8:	196b      	adds	r3, r5, r5
 80065fa:	eb46 0406 	adc.w	r4, r6, r6
 80065fe:	461a      	mov	r2, r3
 8006600:	4623      	mov	r3, r4
 8006602:	f7f9 fded 	bl	80001e0 <__aeabi_uldivmod>
 8006606:	4603      	mov	r3, r0
 8006608:	460c      	mov	r4, r1
 800660a:	461a      	mov	r2, r3
 800660c:	4ba5      	ldr	r3, [pc, #660]	; (80068a4 <UART_SetConfig+0x384>)
 800660e:	fba3 2302 	umull	r2, r3, r3, r2
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	461d      	mov	r5, r3
 800661c:	f04f 0600 	mov.w	r6, #0
 8006620:	46a9      	mov	r9, r5
 8006622:	46b2      	mov	sl, r6
 8006624:	eb19 0309 	adds.w	r3, r9, r9
 8006628:	eb4a 040a 	adc.w	r4, sl, sl
 800662c:	4699      	mov	r9, r3
 800662e:	46a2      	mov	sl, r4
 8006630:	eb19 0905 	adds.w	r9, r9, r5
 8006634:	eb4a 0a06 	adc.w	sl, sl, r6
 8006638:	f04f 0100 	mov.w	r1, #0
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006644:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006648:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800664c:	4689      	mov	r9, r1
 800664e:	4692      	mov	sl, r2
 8006650:	eb19 0005 	adds.w	r0, r9, r5
 8006654:	eb4a 0106 	adc.w	r1, sl, r6
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	461d      	mov	r5, r3
 800665e:	f04f 0600 	mov.w	r6, #0
 8006662:	196b      	adds	r3, r5, r5
 8006664:	eb46 0406 	adc.w	r4, r6, r6
 8006668:	461a      	mov	r2, r3
 800666a:	4623      	mov	r3, r4
 800666c:	f7f9 fdb8 	bl	80001e0 <__aeabi_uldivmod>
 8006670:	4603      	mov	r3, r0
 8006672:	460c      	mov	r4, r1
 8006674:	461a      	mov	r2, r3
 8006676:	4b8b      	ldr	r3, [pc, #556]	; (80068a4 <UART_SetConfig+0x384>)
 8006678:	fba3 1302 	umull	r1, r3, r3, r2
 800667c:	095b      	lsrs	r3, r3, #5
 800667e:	2164      	movs	r1, #100	; 0x64
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	3332      	adds	r3, #50	; 0x32
 800668a:	4a86      	ldr	r2, [pc, #536]	; (80068a4 <UART_SetConfig+0x384>)
 800668c:	fba2 2303 	umull	r2, r3, r2, r3
 8006690:	095b      	lsrs	r3, r3, #5
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006698:	4498      	add	r8, r3
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	461d      	mov	r5, r3
 800669e:	f04f 0600 	mov.w	r6, #0
 80066a2:	46a9      	mov	r9, r5
 80066a4:	46b2      	mov	sl, r6
 80066a6:	eb19 0309 	adds.w	r3, r9, r9
 80066aa:	eb4a 040a 	adc.w	r4, sl, sl
 80066ae:	4699      	mov	r9, r3
 80066b0:	46a2      	mov	sl, r4
 80066b2:	eb19 0905 	adds.w	r9, r9, r5
 80066b6:	eb4a 0a06 	adc.w	sl, sl, r6
 80066ba:	f04f 0100 	mov.w	r1, #0
 80066be:	f04f 0200 	mov.w	r2, #0
 80066c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066ce:	4689      	mov	r9, r1
 80066d0:	4692      	mov	sl, r2
 80066d2:	eb19 0005 	adds.w	r0, r9, r5
 80066d6:	eb4a 0106 	adc.w	r1, sl, r6
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	461d      	mov	r5, r3
 80066e0:	f04f 0600 	mov.w	r6, #0
 80066e4:	196b      	adds	r3, r5, r5
 80066e6:	eb46 0406 	adc.w	r4, r6, r6
 80066ea:	461a      	mov	r2, r3
 80066ec:	4623      	mov	r3, r4
 80066ee:	f7f9 fd77 	bl	80001e0 <__aeabi_uldivmod>
 80066f2:	4603      	mov	r3, r0
 80066f4:	460c      	mov	r4, r1
 80066f6:	461a      	mov	r2, r3
 80066f8:	4b6a      	ldr	r3, [pc, #424]	; (80068a4 <UART_SetConfig+0x384>)
 80066fa:	fba3 1302 	umull	r1, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	2164      	movs	r1, #100	; 0x64
 8006702:	fb01 f303 	mul.w	r3, r1, r3
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	00db      	lsls	r3, r3, #3
 800670a:	3332      	adds	r3, #50	; 0x32
 800670c:	4a65      	ldr	r2, [pc, #404]	; (80068a4 <UART_SetConfig+0x384>)
 800670e:	fba2 2303 	umull	r2, r3, r2, r3
 8006712:	095b      	lsrs	r3, r3, #5
 8006714:	f003 0207 	and.w	r2, r3, #7
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4442      	add	r2, r8
 800671e:	609a      	str	r2, [r3, #8]
 8006720:	e26f      	b.n	8006c02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006722:	f7fd fdd9 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8006726:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	461d      	mov	r5, r3
 800672c:	f04f 0600 	mov.w	r6, #0
 8006730:	46a8      	mov	r8, r5
 8006732:	46b1      	mov	r9, r6
 8006734:	eb18 0308 	adds.w	r3, r8, r8
 8006738:	eb49 0409 	adc.w	r4, r9, r9
 800673c:	4698      	mov	r8, r3
 800673e:	46a1      	mov	r9, r4
 8006740:	eb18 0805 	adds.w	r8, r8, r5
 8006744:	eb49 0906 	adc.w	r9, r9, r6
 8006748:	f04f 0100 	mov.w	r1, #0
 800674c:	f04f 0200 	mov.w	r2, #0
 8006750:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006754:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006758:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800675c:	4688      	mov	r8, r1
 800675e:	4691      	mov	r9, r2
 8006760:	eb18 0005 	adds.w	r0, r8, r5
 8006764:	eb49 0106 	adc.w	r1, r9, r6
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	461d      	mov	r5, r3
 800676e:	f04f 0600 	mov.w	r6, #0
 8006772:	196b      	adds	r3, r5, r5
 8006774:	eb46 0406 	adc.w	r4, r6, r6
 8006778:	461a      	mov	r2, r3
 800677a:	4623      	mov	r3, r4
 800677c:	f7f9 fd30 	bl	80001e0 <__aeabi_uldivmod>
 8006780:	4603      	mov	r3, r0
 8006782:	460c      	mov	r4, r1
 8006784:	461a      	mov	r2, r3
 8006786:	4b47      	ldr	r3, [pc, #284]	; (80068a4 <UART_SetConfig+0x384>)
 8006788:	fba3 2302 	umull	r2, r3, r3, r2
 800678c:	095b      	lsrs	r3, r3, #5
 800678e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	461d      	mov	r5, r3
 8006796:	f04f 0600 	mov.w	r6, #0
 800679a:	46a9      	mov	r9, r5
 800679c:	46b2      	mov	sl, r6
 800679e:	eb19 0309 	adds.w	r3, r9, r9
 80067a2:	eb4a 040a 	adc.w	r4, sl, sl
 80067a6:	4699      	mov	r9, r3
 80067a8:	46a2      	mov	sl, r4
 80067aa:	eb19 0905 	adds.w	r9, r9, r5
 80067ae:	eb4a 0a06 	adc.w	sl, sl, r6
 80067b2:	f04f 0100 	mov.w	r1, #0
 80067b6:	f04f 0200 	mov.w	r2, #0
 80067ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067c6:	4689      	mov	r9, r1
 80067c8:	4692      	mov	sl, r2
 80067ca:	eb19 0005 	adds.w	r0, r9, r5
 80067ce:	eb4a 0106 	adc.w	r1, sl, r6
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	461d      	mov	r5, r3
 80067d8:	f04f 0600 	mov.w	r6, #0
 80067dc:	196b      	adds	r3, r5, r5
 80067de:	eb46 0406 	adc.w	r4, r6, r6
 80067e2:	461a      	mov	r2, r3
 80067e4:	4623      	mov	r3, r4
 80067e6:	f7f9 fcfb 	bl	80001e0 <__aeabi_uldivmod>
 80067ea:	4603      	mov	r3, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	461a      	mov	r2, r3
 80067f0:	4b2c      	ldr	r3, [pc, #176]	; (80068a4 <UART_SetConfig+0x384>)
 80067f2:	fba3 1302 	umull	r1, r3, r3, r2
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	2164      	movs	r1, #100	; 0x64
 80067fa:	fb01 f303 	mul.w	r3, r1, r3
 80067fe:	1ad3      	subs	r3, r2, r3
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	3332      	adds	r3, #50	; 0x32
 8006804:	4a27      	ldr	r2, [pc, #156]	; (80068a4 <UART_SetConfig+0x384>)
 8006806:	fba2 2303 	umull	r2, r3, r2, r3
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	005b      	lsls	r3, r3, #1
 800680e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006812:	4498      	add	r8, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	461d      	mov	r5, r3
 8006818:	f04f 0600 	mov.w	r6, #0
 800681c:	46a9      	mov	r9, r5
 800681e:	46b2      	mov	sl, r6
 8006820:	eb19 0309 	adds.w	r3, r9, r9
 8006824:	eb4a 040a 	adc.w	r4, sl, sl
 8006828:	4699      	mov	r9, r3
 800682a:	46a2      	mov	sl, r4
 800682c:	eb19 0905 	adds.w	r9, r9, r5
 8006830:	eb4a 0a06 	adc.w	sl, sl, r6
 8006834:	f04f 0100 	mov.w	r1, #0
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006840:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006844:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006848:	4689      	mov	r9, r1
 800684a:	4692      	mov	sl, r2
 800684c:	eb19 0005 	adds.w	r0, r9, r5
 8006850:	eb4a 0106 	adc.w	r1, sl, r6
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	461d      	mov	r5, r3
 800685a:	f04f 0600 	mov.w	r6, #0
 800685e:	196b      	adds	r3, r5, r5
 8006860:	eb46 0406 	adc.w	r4, r6, r6
 8006864:	461a      	mov	r2, r3
 8006866:	4623      	mov	r3, r4
 8006868:	f7f9 fcba 	bl	80001e0 <__aeabi_uldivmod>
 800686c:	4603      	mov	r3, r0
 800686e:	460c      	mov	r4, r1
 8006870:	461a      	mov	r2, r3
 8006872:	4b0c      	ldr	r3, [pc, #48]	; (80068a4 <UART_SetConfig+0x384>)
 8006874:	fba3 1302 	umull	r1, r3, r3, r2
 8006878:	095b      	lsrs	r3, r3, #5
 800687a:	2164      	movs	r1, #100	; 0x64
 800687c:	fb01 f303 	mul.w	r3, r1, r3
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	00db      	lsls	r3, r3, #3
 8006884:	3332      	adds	r3, #50	; 0x32
 8006886:	4a07      	ldr	r2, [pc, #28]	; (80068a4 <UART_SetConfig+0x384>)
 8006888:	fba2 2303 	umull	r2, r3, r2, r3
 800688c:	095b      	lsrs	r3, r3, #5
 800688e:	f003 0207 	and.w	r2, r3, #7
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4442      	add	r2, r8
 8006898:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800689a:	e1b2      	b.n	8006c02 <UART_SetConfig+0x6e2>
 800689c:	40011000 	.word	0x40011000
 80068a0:	40011400 	.word	0x40011400
 80068a4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4ad7      	ldr	r2, [pc, #860]	; (8006c0c <UART_SetConfig+0x6ec>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d005      	beq.n	80068be <UART_SetConfig+0x39e>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4ad6      	ldr	r2, [pc, #856]	; (8006c10 <UART_SetConfig+0x6f0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f040 80d1 	bne.w	8006a60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068be:	f7fd fd1f 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 80068c2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	469a      	mov	sl, r3
 80068c8:	f04f 0b00 	mov.w	fp, #0
 80068cc:	46d0      	mov	r8, sl
 80068ce:	46d9      	mov	r9, fp
 80068d0:	eb18 0308 	adds.w	r3, r8, r8
 80068d4:	eb49 0409 	adc.w	r4, r9, r9
 80068d8:	4698      	mov	r8, r3
 80068da:	46a1      	mov	r9, r4
 80068dc:	eb18 080a 	adds.w	r8, r8, sl
 80068e0:	eb49 090b 	adc.w	r9, r9, fp
 80068e4:	f04f 0100 	mov.w	r1, #0
 80068e8:	f04f 0200 	mov.w	r2, #0
 80068ec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068f0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068f4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068f8:	4688      	mov	r8, r1
 80068fa:	4691      	mov	r9, r2
 80068fc:	eb1a 0508 	adds.w	r5, sl, r8
 8006900:	eb4b 0609 	adc.w	r6, fp, r9
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4619      	mov	r1, r3
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	f04f 0400 	mov.w	r4, #0
 8006916:	0094      	lsls	r4, r2, #2
 8006918:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800691c:	008b      	lsls	r3, r1, #2
 800691e:	461a      	mov	r2, r3
 8006920:	4623      	mov	r3, r4
 8006922:	4628      	mov	r0, r5
 8006924:	4631      	mov	r1, r6
 8006926:	f7f9 fc5b 	bl	80001e0 <__aeabi_uldivmod>
 800692a:	4603      	mov	r3, r0
 800692c:	460c      	mov	r4, r1
 800692e:	461a      	mov	r2, r3
 8006930:	4bb8      	ldr	r3, [pc, #736]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006932:	fba3 2302 	umull	r2, r3, r3, r2
 8006936:	095b      	lsrs	r3, r3, #5
 8006938:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	469b      	mov	fp, r3
 8006940:	f04f 0c00 	mov.w	ip, #0
 8006944:	46d9      	mov	r9, fp
 8006946:	46e2      	mov	sl, ip
 8006948:	eb19 0309 	adds.w	r3, r9, r9
 800694c:	eb4a 040a 	adc.w	r4, sl, sl
 8006950:	4699      	mov	r9, r3
 8006952:	46a2      	mov	sl, r4
 8006954:	eb19 090b 	adds.w	r9, r9, fp
 8006958:	eb4a 0a0c 	adc.w	sl, sl, ip
 800695c:	f04f 0100 	mov.w	r1, #0
 8006960:	f04f 0200 	mov.w	r2, #0
 8006964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800696c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006970:	4689      	mov	r9, r1
 8006972:	4692      	mov	sl, r2
 8006974:	eb1b 0509 	adds.w	r5, fp, r9
 8006978:	eb4c 060a 	adc.w	r6, ip, sl
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4619      	mov	r1, r3
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	f04f 0400 	mov.w	r4, #0
 800698e:	0094      	lsls	r4, r2, #2
 8006990:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006994:	008b      	lsls	r3, r1, #2
 8006996:	461a      	mov	r2, r3
 8006998:	4623      	mov	r3, r4
 800699a:	4628      	mov	r0, r5
 800699c:	4631      	mov	r1, r6
 800699e:	f7f9 fc1f 	bl	80001e0 <__aeabi_uldivmod>
 80069a2:	4603      	mov	r3, r0
 80069a4:	460c      	mov	r4, r1
 80069a6:	461a      	mov	r2, r3
 80069a8:	4b9a      	ldr	r3, [pc, #616]	; (8006c14 <UART_SetConfig+0x6f4>)
 80069aa:	fba3 1302 	umull	r1, r3, r3, r2
 80069ae:	095b      	lsrs	r3, r3, #5
 80069b0:	2164      	movs	r1, #100	; 0x64
 80069b2:	fb01 f303 	mul.w	r3, r1, r3
 80069b6:	1ad3      	subs	r3, r2, r3
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	3332      	adds	r3, #50	; 0x32
 80069bc:	4a95      	ldr	r2, [pc, #596]	; (8006c14 <UART_SetConfig+0x6f4>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069c8:	4498      	add	r8, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	469b      	mov	fp, r3
 80069ce:	f04f 0c00 	mov.w	ip, #0
 80069d2:	46d9      	mov	r9, fp
 80069d4:	46e2      	mov	sl, ip
 80069d6:	eb19 0309 	adds.w	r3, r9, r9
 80069da:	eb4a 040a 	adc.w	r4, sl, sl
 80069de:	4699      	mov	r9, r3
 80069e0:	46a2      	mov	sl, r4
 80069e2:	eb19 090b 	adds.w	r9, r9, fp
 80069e6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069ea:	f04f 0100 	mov.w	r1, #0
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069fe:	4689      	mov	r9, r1
 8006a00:	4692      	mov	sl, r2
 8006a02:	eb1b 0509 	adds.w	r5, fp, r9
 8006a06:	eb4c 060a 	adc.w	r6, ip, sl
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	f04f 0400 	mov.w	r4, #0
 8006a1c:	0094      	lsls	r4, r2, #2
 8006a1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a22:	008b      	lsls	r3, r1, #2
 8006a24:	461a      	mov	r2, r3
 8006a26:	4623      	mov	r3, r4
 8006a28:	4628      	mov	r0, r5
 8006a2a:	4631      	mov	r1, r6
 8006a2c:	f7f9 fbd8 	bl	80001e0 <__aeabi_uldivmod>
 8006a30:	4603      	mov	r3, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	461a      	mov	r2, r3
 8006a36:	4b77      	ldr	r3, [pc, #476]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006a38:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	2164      	movs	r1, #100	; 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	3332      	adds	r3, #50	; 0x32
 8006a4a:	4a72      	ldr	r2, [pc, #456]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	f003 020f 	and.w	r2, r3, #15
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4442      	add	r2, r8
 8006a5c:	609a      	str	r2, [r3, #8]
 8006a5e:	e0d0      	b.n	8006c02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a60:	f7fd fc3a 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8006a64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	469a      	mov	sl, r3
 8006a6a:	f04f 0b00 	mov.w	fp, #0
 8006a6e:	46d0      	mov	r8, sl
 8006a70:	46d9      	mov	r9, fp
 8006a72:	eb18 0308 	adds.w	r3, r8, r8
 8006a76:	eb49 0409 	adc.w	r4, r9, r9
 8006a7a:	4698      	mov	r8, r3
 8006a7c:	46a1      	mov	r9, r4
 8006a7e:	eb18 080a 	adds.w	r8, r8, sl
 8006a82:	eb49 090b 	adc.w	r9, r9, fp
 8006a86:	f04f 0100 	mov.w	r1, #0
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a9a:	4688      	mov	r8, r1
 8006a9c:	4691      	mov	r9, r2
 8006a9e:	eb1a 0508 	adds.w	r5, sl, r8
 8006aa2:	eb4b 0609 	adc.w	r6, fp, r9
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	4619      	mov	r1, r3
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	f04f 0400 	mov.w	r4, #0
 8006ab8:	0094      	lsls	r4, r2, #2
 8006aba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006abe:	008b      	lsls	r3, r1, #2
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	4623      	mov	r3, r4
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	f7f9 fb8a 	bl	80001e0 <__aeabi_uldivmod>
 8006acc:	4603      	mov	r3, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	4b50      	ldr	r3, [pc, #320]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006ad4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	469b      	mov	fp, r3
 8006ae2:	f04f 0c00 	mov.w	ip, #0
 8006ae6:	46d9      	mov	r9, fp
 8006ae8:	46e2      	mov	sl, ip
 8006aea:	eb19 0309 	adds.w	r3, r9, r9
 8006aee:	eb4a 040a 	adc.w	r4, sl, sl
 8006af2:	4699      	mov	r9, r3
 8006af4:	46a2      	mov	sl, r4
 8006af6:	eb19 090b 	adds.w	r9, r9, fp
 8006afa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006afe:	f04f 0100 	mov.w	r1, #0
 8006b02:	f04f 0200 	mov.w	r2, #0
 8006b06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b12:	4689      	mov	r9, r1
 8006b14:	4692      	mov	sl, r2
 8006b16:	eb1b 0509 	adds.w	r5, fp, r9
 8006b1a:	eb4c 060a 	adc.w	r6, ip, sl
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4619      	mov	r1, r3
 8006b24:	f04f 0200 	mov.w	r2, #0
 8006b28:	f04f 0300 	mov.w	r3, #0
 8006b2c:	f04f 0400 	mov.w	r4, #0
 8006b30:	0094      	lsls	r4, r2, #2
 8006b32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b36:	008b      	lsls	r3, r1, #2
 8006b38:	461a      	mov	r2, r3
 8006b3a:	4623      	mov	r3, r4
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	4631      	mov	r1, r6
 8006b40:	f7f9 fb4e 	bl	80001e0 <__aeabi_uldivmod>
 8006b44:	4603      	mov	r3, r0
 8006b46:	460c      	mov	r4, r1
 8006b48:	461a      	mov	r2, r3
 8006b4a:	4b32      	ldr	r3, [pc, #200]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b50:	095b      	lsrs	r3, r3, #5
 8006b52:	2164      	movs	r1, #100	; 0x64
 8006b54:	fb01 f303 	mul.w	r3, r1, r3
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	3332      	adds	r3, #50	; 0x32
 8006b5e:	4a2d      	ldr	r2, [pc, #180]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006b60:	fba2 2303 	umull	r2, r3, r2, r3
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b6a:	4498      	add	r8, r3
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	469b      	mov	fp, r3
 8006b70:	f04f 0c00 	mov.w	ip, #0
 8006b74:	46d9      	mov	r9, fp
 8006b76:	46e2      	mov	sl, ip
 8006b78:	eb19 0309 	adds.w	r3, r9, r9
 8006b7c:	eb4a 040a 	adc.w	r4, sl, sl
 8006b80:	4699      	mov	r9, r3
 8006b82:	46a2      	mov	sl, r4
 8006b84:	eb19 090b 	adds.w	r9, r9, fp
 8006b88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b8c:	f04f 0100 	mov.w	r1, #0
 8006b90:	f04f 0200 	mov.w	r2, #0
 8006b94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ba0:	4689      	mov	r9, r1
 8006ba2:	4692      	mov	sl, r2
 8006ba4:	eb1b 0509 	adds.w	r5, fp, r9
 8006ba8:	eb4c 060a 	adc.w	r6, ip, sl
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f04f 0200 	mov.w	r2, #0
 8006bb6:	f04f 0300 	mov.w	r3, #0
 8006bba:	f04f 0400 	mov.w	r4, #0
 8006bbe:	0094      	lsls	r4, r2, #2
 8006bc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bc4:	008b      	lsls	r3, r1, #2
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	4623      	mov	r3, r4
 8006bca:	4628      	mov	r0, r5
 8006bcc:	4631      	mov	r1, r6
 8006bce:	f7f9 fb07 	bl	80001e0 <__aeabi_uldivmod>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006bda:	fba3 1302 	umull	r1, r3, r3, r2
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	2164      	movs	r1, #100	; 0x64
 8006be2:	fb01 f303 	mul.w	r3, r1, r3
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	3332      	adds	r3, #50	; 0x32
 8006bec:	4a09      	ldr	r2, [pc, #36]	; (8006c14 <UART_SetConfig+0x6f4>)
 8006bee:	fba2 2303 	umull	r2, r3, r2, r3
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f003 020f 	and.w	r2, r3, #15
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4442      	add	r2, r8
 8006bfe:	609a      	str	r2, [r3, #8]
}
 8006c00:	e7ff      	b.n	8006c02 <UART_SetConfig+0x6e2>
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c0c:	40011000 	.word	0x40011000
 8006c10:	40011400 	.word	0x40011400
 8006c14:	51eb851f 	.word	0x51eb851f

08006c18 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006c18:	b084      	sub	sp, #16
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	f107 001c 	add.w	r0, r7, #28
 8006c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006c2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006c30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006c32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006c36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006c3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006c3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006c42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006c52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	b004      	add	sp, #16
 8006c6c:	4770      	bx	lr

08006c6e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b083      	sub	sp, #12
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	370c      	adds	r7, #12
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr

08006c88 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b082      	sub	sp, #8
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006cb8:	2002      	movs	r0, #2
 8006cba:	f7fb fc1b 	bl	80024f4 <HAL_Delay>
  
  return HAL_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f003 0303 	and.w	r3, r3, #3
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d02:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006d08:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006d0e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006d1e:	f023 030f 	bic.w	r3, r3, #15
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3714      	adds	r7, #20
 8006d30:	46bd      	mov	sp, r7
 8006d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d36:	4770      	bx	lr

08006d38 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	b2db      	uxtb	r3, r3
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	3314      	adds	r3, #20
 8006d60:	461a      	mov	r2, r3
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	4413      	add	r3, r2
 8006d66:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
}  
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685a      	ldr	r2, [r3, #4]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d9e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006da4:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006daa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	431a      	orrs	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006dc2:	2300      	movs	r3, #0

}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b088      	sub	sp, #32
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006dde:	2310      	movs	r3, #16
 8006de0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006de2:	2340      	movs	r3, #64	; 0x40
 8006de4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006df0:	f107 0308 	add.w	r3, r7, #8
 8006df4:	4619      	mov	r1, r3
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff ff74 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006dfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e00:	2110      	movs	r1, #16
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fa40 	bl	8007288 <SDMMC_GetCmdResp1>
 8006e08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006e22:	2311      	movs	r3, #17
 8006e24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e26:	2340      	movs	r3, #64	; 0x40
 8006e28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e34:	f107 0308 	add.w	r3, r7, #8
 8006e38:	4619      	mov	r1, r3
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ff52 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006e40:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e44:	2111      	movs	r1, #17
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fa1e 	bl	8007288 <SDMMC_GetCmdResp1>
 8006e4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e4e:	69fb      	ldr	r3, [r7, #28]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3720      	adds	r7, #32
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006e66:	2312      	movs	r3, #18
 8006e68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e6a:	2340      	movs	r3, #64	; 0x40
 8006e6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e78:	f107 0308 	add.w	r3, r7, #8
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f7ff ff30 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e84:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e88:	2112      	movs	r1, #18
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f9fc 	bl	8007288 <SDMMC_GetCmdResp1>
 8006e90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e92:	69fb      	ldr	r3, [r7, #28]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3720      	adds	r7, #32
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b088      	sub	sp, #32
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006eaa:	2318      	movs	r3, #24
 8006eac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006eae:	2340      	movs	r3, #64	; 0x40
 8006eb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006eb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ebc:	f107 0308 	add.w	r3, r7, #8
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff ff0e 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ecc:	2118      	movs	r1, #24
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f000 f9da 	bl	8007288 <SDMMC_GetCmdResp1>
 8006ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ed6:	69fb      	ldr	r3, [r7, #28]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b088      	sub	sp, #32
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006eee:	2319      	movs	r3, #25
 8006ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006efe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f00:	f107 0308 	add.w	r3, r7, #8
 8006f04:	4619      	mov	r1, r3
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7ff feec 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f10:	2119      	movs	r1, #25
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f9b8 	bl	8007288 <SDMMC_GetCmdResp1>
 8006f18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3720      	adds	r7, #32
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b088      	sub	sp, #32
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006f30:	230c      	movs	r3, #12
 8006f32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f34:	2340      	movs	r3, #64	; 0x40
 8006f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f42:	f107 0308 	add.w	r3, r7, #8
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7ff fecb 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006f4e:	4a05      	ldr	r2, [pc, #20]	; (8006f64 <SDMMC_CmdStopTransfer+0x40>)
 8006f50:	210c      	movs	r1, #12
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f998 	bl	8007288 <SDMMC_GetCmdResp1>
 8006f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f5a:	69fb      	ldr	r3, [r7, #28]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3720      	adds	r7, #32
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	05f5e100 	.word	0x05f5e100

08006f68 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b08a      	sub	sp, #40	; 0x28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006f78:	2307      	movs	r3, #7
 8006f7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f80:	2300      	movs	r3, #0
 8006f82:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f88:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f8a:	f107 0310 	add.w	r3, r7, #16
 8006f8e:	4619      	mov	r1, r3
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fea7 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9a:	2107      	movs	r1, #7
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f973 	bl	8007288 <SDMMC_GetCmdResp1>
 8006fa2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3728      	adds	r7, #40	; 0x28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}

08006fae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b088      	sub	sp, #32
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fcc:	f107 0308 	add.w	r3, r7, #8
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7ff fe86 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f92d 	bl	8007238 <SDMMC_GetCmdError>
 8006fde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fe0:	69fb      	ldr	r3, [r7, #28]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b088      	sub	sp, #32
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006ff2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006ff6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ffc:	2340      	movs	r3, #64	; 0x40
 8006ffe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007008:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800700a:	f107 0308 	add.w	r3, r7, #8
 800700e:	4619      	mov	r1, r3
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7ff fe67 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fb16 	bl	8007648 <SDMMC_GetCmdResp7>
 800701c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800701e:	69fb      	ldr	r3, [r7, #28]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3720      	adds	r7, #32
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007036:	2337      	movs	r3, #55	; 0x37
 8007038:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800703a:	2340      	movs	r3, #64	; 0x40
 800703c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800703e:	2300      	movs	r3, #0
 8007040:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007046:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007048:	f107 0308 	add.w	r3, r7, #8
 800704c:	4619      	mov	r1, r3
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff fe48 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007054:	f241 3288 	movw	r2, #5000	; 0x1388
 8007058:	2137      	movs	r1, #55	; 0x37
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 f914 	bl	8007288 <SDMMC_GetCmdResp1>
 8007060:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007062:	69fb      	ldr	r3, [r7, #28]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800707c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007080:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007082:	2329      	movs	r3, #41	; 0x29
 8007084:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800708e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007092:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007094:	f107 0308 	add.w	r3, r7, #8
 8007098:	4619      	mov	r1, r3
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7ff fe22 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f000 fa23 	bl	80074ec <SDMMC_GetCmdResp3>
 80070a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070a8:	69fb      	ldr	r3, [r7, #28]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3720      	adds	r7, #32
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b088      	sub	sp, #32
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80070c0:	2306      	movs	r3, #6
 80070c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070c4:	2340      	movs	r3, #64	; 0x40
 80070c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070c8:	2300      	movs	r3, #0
 80070ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070d2:	f107 0308 	add.w	r3, r7, #8
 80070d6:	4619      	mov	r1, r3
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff fe03 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	2106      	movs	r1, #6
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 f8cf 	bl	8007288 <SDMMC_GetCmdResp1>
 80070ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070ec:	69fb      	ldr	r3, [r7, #28]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3720      	adds	r7, #32
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b088      	sub	sp, #32
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007102:	2333      	movs	r3, #51	; 0x33
 8007104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800710a:	2300      	movs	r3, #0
 800710c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800710e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007112:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007114:	f107 0308 	add.w	r3, r7, #8
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f7ff fde2 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8007120:	f241 3288 	movw	r2, #5000	; 0x1388
 8007124:	2133      	movs	r1, #51	; 0x33
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f8ae 	bl	8007288 <SDMMC_GetCmdResp1>
 800712c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800712e:	69fb      	ldr	r3, [r7, #28]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3720      	adds	r7, #32
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b088      	sub	sp, #32
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007140:	2300      	movs	r3, #0
 8007142:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007144:	2302      	movs	r3, #2
 8007146:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007148:	23c0      	movs	r3, #192	; 0xc0
 800714a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800714c:	2300      	movs	r3, #0
 800714e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007154:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007156:	f107 0308 	add.w	r3, r7, #8
 800715a:	4619      	mov	r1, r3
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7ff fdc1 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f97c 	bl	8007460 <SDMMC_GetCmdResp2>
 8007168:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800716a:	69fb      	ldr	r3, [r7, #28]
}
 800716c:	4618      	mov	r0, r3
 800716e:	3720      	adds	r7, #32
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}

08007174 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b088      	sub	sp, #32
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007182:	2309      	movs	r3, #9
 8007184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007186:	23c0      	movs	r3, #192	; 0xc0
 8007188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800718e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007192:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007194:	f107 0308 	add.w	r3, r7, #8
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7ff fda2 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f95d 	bl	8007460 <SDMMC_GetCmdResp2>
 80071a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071a8:	69fb      	ldr	r3, [r7, #28]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3720      	adds	r7, #32
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}

080071b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b088      	sub	sp, #32
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80071c0:	2303      	movs	r3, #3
 80071c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071c4:	2340      	movs	r3, #64	; 0x40
 80071c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071d2:	f107 0308 	add.w	r3, r7, #8
 80071d6:	4619      	mov	r1, r3
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fd83 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	2103      	movs	r1, #3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f9bc 	bl	8007560 <SDMMC_GetCmdResp6>
 80071e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071ea:	69fb      	ldr	r3, [r7, #28]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b088      	sub	sp, #32
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007202:	230d      	movs	r3, #13
 8007204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007206:	2340      	movs	r3, #64	; 0x40
 8007208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800720a:	2300      	movs	r3, #0
 800720c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800720e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007214:	f107 0308 	add.w	r3, r7, #8
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f7ff fd62 	bl	8006ce4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007220:	f241 3288 	movw	r2, #5000	; 0x1388
 8007224:	210d      	movs	r1, #13
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 f82e 	bl	8007288 <SDMMC_GetCmdResp1>
 800722c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800722e:	69fb      	ldr	r3, [r7, #28]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3720      	adds	r7, #32
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007238:	b490      	push	{r4, r7}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007240:	4b0f      	ldr	r3, [pc, #60]	; (8007280 <SDMMC_GetCmdError+0x48>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a0f      	ldr	r2, [pc, #60]	; (8007284 <SDMMC_GetCmdError+0x4c>)
 8007246:	fba2 2303 	umull	r2, r3, r2, r3
 800724a:	0a5b      	lsrs	r3, r3, #9
 800724c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007250:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007254:	4623      	mov	r3, r4
 8007256:	1e5c      	subs	r4, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d102      	bne.n	8007262 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800725c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007260:	e009      	b.n	8007276 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f2      	beq.n	8007254 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	22c5      	movs	r2, #197	; 0xc5
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bc90      	pop	{r4, r7}
 800727e:	4770      	bx	lr
 8007280:	20000000 	.word	0x20000000
 8007284:	10624dd3 	.word	0x10624dd3

08007288 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007288:	b590      	push	{r4, r7, lr}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	460b      	mov	r3, r1
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007296:	4b6f      	ldr	r3, [pc, #444]	; (8007454 <SDMMC_GetCmdResp1+0x1cc>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a6f      	ldr	r2, [pc, #444]	; (8007458 <SDMMC_GetCmdResp1+0x1d0>)
 800729c:	fba2 2303 	umull	r2, r3, r2, r3
 80072a0:	0a5b      	lsrs	r3, r3, #9
 80072a2:	687a      	ldr	r2, [r7, #4]
 80072a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80072a8:	4623      	mov	r3, r4
 80072aa:	1e5c      	subs	r4, r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80072b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072b4:	e0c9      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0f0      	beq.n	80072a8 <SDMMC_GetCmdResp1+0x20>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1eb      	bne.n	80072a8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d004      	beq.n	80072e6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2204      	movs	r2, #4
 80072e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072e2:	2304      	movs	r3, #4
 80072e4:	e0b1      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d004      	beq.n	80072fc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2201      	movs	r2, #1
 80072f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072f8:	2301      	movs	r3, #1
 80072fa:	e0a6      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	22c5      	movs	r2, #197	; 0xc5
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff fd18 	bl	8006d38 <SDIO_GetCommandResponse>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	7afb      	ldrb	r3, [r7, #11]
 800730e:	4293      	cmp	r3, r2
 8007310:	d001      	beq.n	8007316 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007312:	2301      	movs	r3, #1
 8007314:	e099      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007316:	2100      	movs	r1, #0
 8007318:	68f8      	ldr	r0, [r7, #12]
 800731a:	f7ff fd1a 	bl	8006d52 <SDIO_GetResponse>
 800731e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007320:	693a      	ldr	r2, [r7, #16]
 8007322:	4b4e      	ldr	r3, [pc, #312]	; (800745c <SDMMC_GetCmdResp1+0x1d4>)
 8007324:	4013      	ands	r3, r2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d101      	bne.n	800732e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
 800732c:	e08d      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	da02      	bge.n	800733a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007334:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007338:	e087      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007340:	2b00      	cmp	r3, #0
 8007342:	d001      	beq.n	8007348 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007344:	2340      	movs	r3, #64	; 0x40
 8007346:	e080      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007352:	2380      	movs	r3, #128	; 0x80
 8007354:	e079      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007360:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007364:	e071      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d002      	beq.n	8007376 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007374:	e069      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007384:	e061      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800738c:	2b00      	cmp	r3, #0
 800738e:	d002      	beq.n	8007396 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007390:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007394:	e059      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80073a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073a4:	e051      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80073b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073b4:	e049      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80073c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073c4:	e041      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80073d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d4:	e039      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80073e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073e4:	e031      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80073f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073f4:	e029      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007400:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007404:	e021      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007410:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007414:	e019      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d002      	beq.n	8007426 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007420:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007424:	e011      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007430:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007434:	e009      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	f003 0308 	and.w	r3, r3, #8
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007440:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007444:	e001      	b.n	800744a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007446:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800744a:	4618      	mov	r0, r3
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd90      	pop	{r4, r7, pc}
 8007452:	bf00      	nop
 8007454:	20000000 	.word	0x20000000
 8007458:	10624dd3 	.word	0x10624dd3
 800745c:	fdffe008 	.word	0xfdffe008

08007460 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007460:	b490      	push	{r4, r7}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007468:	4b1e      	ldr	r3, [pc, #120]	; (80074e4 <SDMMC_GetCmdResp2+0x84>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a1e      	ldr	r2, [pc, #120]	; (80074e8 <SDMMC_GetCmdResp2+0x88>)
 800746e:	fba2 2303 	umull	r2, r3, r2, r3
 8007472:	0a5b      	lsrs	r3, r3, #9
 8007474:	f241 3288 	movw	r2, #5000	; 0x1388
 8007478:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800747c:	4623      	mov	r3, r4
 800747e:	1e5c      	subs	r4, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d102      	bne.n	800748a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007484:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007488:	e026      	b.n	80074d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800748e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <SDMMC_GetCmdResp2+0x1c>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1eb      	bne.n	800747c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a8:	f003 0304 	and.w	r3, r3, #4
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d004      	beq.n	80074ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2204      	movs	r2, #4
 80074b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074b6:	2304      	movs	r3, #4
 80074b8:	e00e      	b.n	80074d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d004      	beq.n	80074d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e003      	b.n	80074d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	22c5      	movs	r2, #197	; 0xc5
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3710      	adds	r7, #16
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc90      	pop	{r4, r7}
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	20000000 	.word	0x20000000
 80074e8:	10624dd3 	.word	0x10624dd3

080074ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80074ec:	b490      	push	{r4, r7}
 80074ee:	b084      	sub	sp, #16
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074f4:	4b18      	ldr	r3, [pc, #96]	; (8007558 <SDMMC_GetCmdResp3+0x6c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a18      	ldr	r2, [pc, #96]	; (800755c <SDMMC_GetCmdResp3+0x70>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	0a5b      	lsrs	r3, r3, #9
 8007500:	f241 3288 	movw	r2, #5000	; 0x1388
 8007504:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007508:	4623      	mov	r3, r4
 800750a:	1e5c      	subs	r4, r3, #1
 800750c:	2b00      	cmp	r3, #0
 800750e:	d102      	bne.n	8007516 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007510:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007514:	e01b      	b.n	800754e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <SDMMC_GetCmdResp3+0x1c>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800752c:	2b00      	cmp	r3, #0
 800752e:	d1eb      	bne.n	8007508 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007534:	f003 0304 	and.w	r3, r3, #4
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2204      	movs	r2, #4
 8007540:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007542:	2304      	movs	r3, #4
 8007544:	e003      	b.n	800754e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	22c5      	movs	r2, #197	; 0xc5
 800754a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bc90      	pop	{r4, r7}
 8007556:	4770      	bx	lr
 8007558:	20000000 	.word	0x20000000
 800755c:	10624dd3 	.word	0x10624dd3

08007560 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007560:	b590      	push	{r4, r7, lr}
 8007562:	b087      	sub	sp, #28
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	460b      	mov	r3, r1
 800756a:	607a      	str	r2, [r7, #4]
 800756c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800756e:	4b34      	ldr	r3, [pc, #208]	; (8007640 <SDMMC_GetCmdResp6+0xe0>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a34      	ldr	r2, [pc, #208]	; (8007644 <SDMMC_GetCmdResp6+0xe4>)
 8007574:	fba2 2303 	umull	r2, r3, r2, r3
 8007578:	0a5b      	lsrs	r3, r3, #9
 800757a:	f241 3288 	movw	r2, #5000	; 0x1388
 800757e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007582:	4623      	mov	r3, r4
 8007584:	1e5c      	subs	r4, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d102      	bne.n	8007590 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800758a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800758e:	e052      	b.n	8007636 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800759c:	2b00      	cmp	r3, #0
 800759e:	d0f0      	beq.n	8007582 <SDMMC_GetCmdResp6+0x22>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1eb      	bne.n	8007582 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ae:	f003 0304 	and.w	r3, r3, #4
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d004      	beq.n	80075c0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2204      	movs	r2, #4
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075bc:	2304      	movs	r3, #4
 80075be:	e03a      	b.n	8007636 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c4:	f003 0301 	and.w	r3, r3, #1
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d004      	beq.n	80075d6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e02f      	b.n	8007636 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f7ff fbae 	bl	8006d38 <SDIO_GetCommandResponse>
 80075dc:	4603      	mov	r3, r0
 80075de:	461a      	mov	r2, r3
 80075e0:	7afb      	ldrb	r3, [r7, #11]
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d001      	beq.n	80075ea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e025      	b.n	8007636 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	22c5      	movs	r2, #197	; 0xc5
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80075f0:	2100      	movs	r1, #0
 80075f2:	68f8      	ldr	r0, [r7, #12]
 80075f4:	f7ff fbad 	bl	8006d52 <SDIO_GetResponse>
 80075f8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d106      	bne.n	8007612 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	0c1b      	lsrs	r3, r3, #16
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800760e:	2300      	movs	r3, #0
 8007610:	e011      	b.n	8007636 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800761c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007620:	e009      	b.n	8007636 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d002      	beq.n	8007632 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800762c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007630:	e001      	b.n	8007636 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007632:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd90      	pop	{r4, r7, pc}
 800763e:	bf00      	nop
 8007640:	20000000 	.word	0x20000000
 8007644:	10624dd3 	.word	0x10624dd3

08007648 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007648:	b490      	push	{r4, r7}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007650:	4b21      	ldr	r3, [pc, #132]	; (80076d8 <SDMMC_GetCmdResp7+0x90>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a21      	ldr	r2, [pc, #132]	; (80076dc <SDMMC_GetCmdResp7+0x94>)
 8007656:	fba2 2303 	umull	r2, r3, r2, r3
 800765a:	0a5b      	lsrs	r3, r3, #9
 800765c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007660:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007664:	4623      	mov	r3, r4
 8007666:	1e5c      	subs	r4, r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	d102      	bne.n	8007672 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800766c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007670:	e02c      	b.n	80076cc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007676:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0f0      	beq.n	8007664 <SDMMC_GetCmdResp7+0x1c>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007688:	2b00      	cmp	r3, #0
 800768a:	d1eb      	bne.n	8007664 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007690:	f003 0304 	and.w	r3, r3, #4
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2204      	movs	r2, #4
 800769c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800769e:	2304      	movs	r3, #4
 80076a0:	e014      	b.n	80076cc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d004      	beq.n	80076b8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2201      	movs	r2, #1
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e009      	b.n	80076cc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2240      	movs	r2, #64	; 0x40
 80076c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80076ca:	2300      	movs	r3, #0
  
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc90      	pop	{r4, r7}
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	20000000 	.word	0x20000000
 80076dc:	10624dd3 	.word	0x10624dd3

080076e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80076e4:	4904      	ldr	r1, [pc, #16]	; (80076f8 <MX_FATFS_Init+0x18>)
 80076e6:	4805      	ldr	r0, [pc, #20]	; (80076fc <MX_FATFS_Init+0x1c>)
 80076e8:	f002 fd98 	bl	800a21c <FATFS_LinkDriver>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
 80076f0:	4b03      	ldr	r3, [pc, #12]	; (8007700 <MX_FATFS_Init+0x20>)
 80076f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80076f4:	bf00      	nop
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200065cc 	.word	0x200065cc
 80076fc:	0800d864 	.word	0x0800d864
 8007700:	200065c8 	.word	0x200065c8

08007704 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007704:	b480      	push	{r7}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007708:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 800770a:	4618      	mov	r0, r3
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800771a:	2300      	movs	r3, #0
 800771c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800771e:	f000 f896 	bl	800784e <BSP_SD_IsDetected>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	d001      	beq.n	800772c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e012      	b.n	8007752 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800772c:	480b      	ldr	r0, [pc, #44]	; (800775c <BSP_SD_Init+0x48>)
 800772e:	f7fc fe2d 	bl	800438c <HAL_SD_Init>
 8007732:	4603      	mov	r3, r0
 8007734:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007736:	79fb      	ldrb	r3, [r7, #7]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d109      	bne.n	8007750 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800773c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007740:	4806      	ldr	r0, [pc, #24]	; (800775c <BSP_SD_Init+0x48>)
 8007742:	f7fd fbed 	bl	8004f20 <HAL_SD_ConfigWideBusOperation>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8007750:	79fb      	ldrb	r3, [r7, #7]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}
 800775a:	bf00      	nop
 800775c:	200063ec 	.word	0x200063ec

08007760 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b086      	sub	sp, #24
 8007764:	af00      	add	r7, sp, #0
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	68ba      	ldr	r2, [r7, #8]
 8007774:	68f9      	ldr	r1, [r7, #12]
 8007776:	4806      	ldr	r0, [pc, #24]	; (8007790 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007778:	f7fc fe98 	bl	80044ac <HAL_SD_ReadBlocks_DMA>
 800777c:	4603      	mov	r3, r0
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007782:	2301      	movs	r3, #1
 8007784:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8007786:	7dfb      	ldrb	r3, [r7, #23]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	200063ec 	.word	0x200063ec

08007794 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	68f9      	ldr	r1, [r7, #12]
 80077aa:	4806      	ldr	r0, [pc, #24]	; (80077c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 80077ac:	f7fc ff68 	bl	8004680 <HAL_SD_WriteBlocks_DMA>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80077bc:	4618      	mov	r0, r3
 80077be:	3718      	adds	r7, #24
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}
 80077c4:	200063ec 	.word	0x200063ec

080077c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80077cc:	4805      	ldr	r0, [pc, #20]	; (80077e4 <BSP_SD_GetCardState+0x1c>)
 80077ce:	f7fd fc23 	bl	8005018 <HAL_SD_GetCardState>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b04      	cmp	r3, #4
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
}
 80077de:	4618      	mov	r0, r3
 80077e0:	bd80      	pop	{r7, pc}
 80077e2:	bf00      	nop
 80077e4:	200063ec 	.word	0x200063ec

080077e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80077f0:	6879      	ldr	r1, [r7, #4]
 80077f2:	4803      	ldr	r0, [pc, #12]	; (8007800 <BSP_SD_GetCardInfo+0x18>)
 80077f4:	f7fd fb68 	bl	8004ec8 <HAL_SD_GetCardInfo>
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	200063ec 	.word	0x200063ec

08007804 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800780c:	f000 f818 	bl	8007840 <BSP_SD_AbortCallback>
}
 8007810:	bf00      	nop
 8007812:	3708      	adds	r7, #8
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b082      	sub	sp, #8
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007820:	f000 f9a8 	bl	8007b74 <BSP_SD_WriteCpltCallback>
}
 8007824:	bf00      	nop
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007834:	f000 f9ac 	bl	8007b90 <BSP_SD_ReadCpltCallback>
}
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007840:	b480      	push	{r7}
 8007842:	af00      	add	r7, sp, #0

}
 8007844:	bf00      	nop
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007854:	2301      	movs	r3, #1
 8007856:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	b2db      	uxtb	r3, r3
}
 800785c:	4618      	mov	r0, r3
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 8007870:	f002 fd6c 	bl	800a34c <osKernelSysTick>
 8007874:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 8007876:	e006      	b.n	8007886 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007878:	f7ff ffa6 	bl	80077c8 <BSP_SD_GetCardState>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d101      	bne.n	8007886 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007882:	2300      	movs	r3, #0
 8007884:	e009      	b.n	800789a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8007886:	f002 fd61 	bl	800a34c <osKernelSysTick>
 800788a:	4602      	mov	r2, r0
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	1ad3      	subs	r3, r2, r3
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d8f0      	bhi.n	8007878 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800789a:	4618      	mov	r0, r3
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
	...

080078a4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80078ae:	4b0b      	ldr	r3, [pc, #44]	; (80078dc <SD_CheckStatus+0x38>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80078b4:	f7ff ff88 	bl	80077c8 <BSP_SD_GetCardState>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d107      	bne.n	80078ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80078be:	4b07      	ldr	r3, [pc, #28]	; (80078dc <SD_CheckStatus+0x38>)
 80078c0:	781b      	ldrb	r3, [r3, #0]
 80078c2:	b2db      	uxtb	r3, r3
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	4b04      	ldr	r3, [pc, #16]	; (80078dc <SD_CheckStatus+0x38>)
 80078cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80078ce:	4b03      	ldr	r3, [pc, #12]	; (80078dc <SD_CheckStatus+0x38>)
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	b2db      	uxtb	r3, r3
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3708      	adds	r7, #8
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	20000009 	.word	0x20000009

080078e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80078e0:	b590      	push	{r4, r7, lr}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80078ea:	4b20      	ldr	r3, [pc, #128]	; (800796c <SD_initialize+0x8c>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 80078f0:	f002 fd20 	bl	800a334 <osKernelRunning>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d030      	beq.n	800795c <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80078fa:	f7ff ff0b 	bl	8007714 <BSP_SD_Init>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d107      	bne.n	8007914 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ffcc 	bl	80078a4 <SD_CheckStatus>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	4b16      	ldr	r3, [pc, #88]	; (800796c <SD_initialize+0x8c>)
 8007912:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007914:	4b15      	ldr	r3, [pc, #84]	; (800796c <SD_initialize+0x8c>)
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	2b01      	cmp	r3, #1
 800791c:	d01e      	beq.n	800795c <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800791e:	4b14      	ldr	r3, [pc, #80]	; (8007970 <SD_initialize+0x90>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10e      	bne.n	8007944 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8007926:	4b13      	ldr	r3, [pc, #76]	; (8007974 <SD_initialize+0x94>)
 8007928:	f107 0408 	add.w	r4, r7, #8
 800792c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800792e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8007932:	f107 0308 	add.w	r3, r7, #8
 8007936:	2100      	movs	r1, #0
 8007938:	4618      	mov	r0, r3
 800793a:	f002 fede 	bl	800a6fa <osMessageCreate>
 800793e:	4602      	mov	r2, r0
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <SD_initialize+0x90>)
 8007942:	601a      	str	r2, [r3, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 8007944:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <SD_initialize+0x90>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d107      	bne.n	800795c <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800794c:	4b07      	ldr	r3, [pc, #28]	; (800796c <SD_initialize+0x8c>)
 800794e:	781b      	ldrb	r3, [r3, #0]
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f043 0301 	orr.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	4b04      	ldr	r3, [pc, #16]	; (800796c <SD_initialize+0x8c>)
 800795a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800795c:	4b03      	ldr	r3, [pc, #12]	; (800796c <SD_initialize+0x8c>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	b2db      	uxtb	r3, r3
}
 8007962:	4618      	mov	r0, r3
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	bd90      	pop	{r4, r7, pc}
 800796a:	bf00      	nop
 800796c:	20000009 	.word	0x20000009
 8007970:	20002494 	.word	0x20002494
 8007974:	0800d7e8 	.word	0x0800d7e8

08007978 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	4618      	mov	r0, r3
 8007986:	f7ff ff8d 	bl	80078a4 <SD_CheckStatus>
 800798a:	4603      	mov	r3, r0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b08a      	sub	sp, #40	; 0x28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	603b      	str	r3, [r7, #0]
 80079a0:	4603      	mov	r3, r0
 80079a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80079a4:	2301      	movs	r3, #1
 80079a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80079aa:	f247 5030 	movw	r0, #30000	; 0x7530
 80079ae:	f7ff ff5b 	bl	8007868 <SD_CheckStatusWithTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da02      	bge.n	80079be <SD_read+0x2a>
  {
    return res;
 80079b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079bc:	e032      	b.n	8007a24 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	6879      	ldr	r1, [r7, #4]
 80079c2:	68b8      	ldr	r0, [r7, #8]
 80079c4:	f7ff fecc 	bl	8007760 <BSP_SD_ReadBlocks_DMA>
 80079c8:	4603      	mov	r3, r0
 80079ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 80079ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d124      	bne.n	8007a20 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80079d6:	4b15      	ldr	r3, [pc, #84]	; (8007a2c <SD_read+0x98>)
 80079d8:	6819      	ldr	r1, [r3, #0]
 80079da:	f107 0314 	add.w	r3, r7, #20
 80079de:	f247 5230 	movw	r2, #30000	; 0x7530
 80079e2:	4618      	mov	r0, r3
 80079e4:	f002 fef2 	bl	800a7cc <osMessageGet>

    if (event.status == osEventMessage)
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	d118      	bne.n	8007a20 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d115      	bne.n	8007a20 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 80079f4:	f002 fcaa 	bl	800a34c <osKernelSysTick>
 80079f8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 80079fa:	e008      	b.n	8007a0e <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80079fc:	f7ff fee4 	bl	80077c8 <BSP_SD_GetCardState>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d103      	bne.n	8007a0e <SD_read+0x7a>
              {
                res = RES_OK;
 8007a06:	2300      	movs	r3, #0
 8007a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007a0c:	e008      	b.n	8007a20 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 8007a0e:	f002 fc9d 	bl	800a34c <osKernelSysTick>
 8007a12:	4602      	mov	r2, r0
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	1ad3      	subs	r3, r2, r3
 8007a18:	f247 522f 	movw	r2, #29999	; 0x752f
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d9ed      	bls.n	80079fc <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3728      	adds	r7, #40	; 0x28
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}
 8007a2c:	20002494 	.word	0x20002494

08007a30 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	; 0x28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	607a      	str	r2, [r7, #4]
 8007a3a:	603b      	str	r3, [r7, #0]
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007a40:	2301      	movs	r3, #1
 8007a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007a46:	f247 5030 	movw	r0, #30000	; 0x7530
 8007a4a:	f7ff ff0d 	bl	8007868 <SD_CheckStatusWithTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	da02      	bge.n	8007a5a <SD_write+0x2a>
  {
    return res;
 8007a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a58:	e02e      	b.n	8007ab8 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	68b8      	ldr	r0, [r7, #8]
 8007a60:	f7ff fe98 	bl	8007794 <BSP_SD_WriteBlocks_DMA>
 8007a64:	4603      	mov	r3, r0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d124      	bne.n	8007ab4 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8007a6a:	4b15      	ldr	r3, [pc, #84]	; (8007ac0 <SD_write+0x90>)
 8007a6c:	6819      	ldr	r1, [r3, #0]
 8007a6e:	f107 0314 	add.w	r3, r7, #20
 8007a72:	f247 5230 	movw	r2, #30000	; 0x7530
 8007a76:	4618      	mov	r0, r3
 8007a78:	f002 fea8 	bl	800a7cc <osMessageGet>

    if (event.status == osEventMessage)
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b10      	cmp	r3, #16
 8007a80:	d118      	bne.n	8007ab4 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d115      	bne.n	8007ab4 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 8007a88:	f002 fc60 	bl	800a34c <osKernelSysTick>
 8007a8c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007a8e:	e008      	b.n	8007aa2 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007a90:	f7ff fe9a 	bl	80077c8 <BSP_SD_GetCardState>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d103      	bne.n	8007aa2 <SD_write+0x72>
          {
            res = RES_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 8007aa0:	e008      	b.n	8007ab4 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 8007aa2:	f002 fc53 	bl	800a34c <osKernelSysTick>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	6a3b      	ldr	r3, [r7, #32]
 8007aaa:	1ad3      	subs	r3, r2, r3
 8007aac:	f247 522f 	movw	r2, #29999	; 0x752f
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d9ed      	bls.n	8007a90 <SD_write+0x60>
    }

  }
#endif

  return res;
 8007ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3728      	adds	r7, #40	; 0x28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	20002494 	.word	0x20002494

08007ac4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08c      	sub	sp, #48	; 0x30
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	603a      	str	r2, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007ada:	4b25      	ldr	r3, [pc, #148]	; (8007b70 <SD_ioctl+0xac>)
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d001      	beq.n	8007aec <SD_ioctl+0x28>
 8007ae8:	2303      	movs	r3, #3
 8007aea:	e03c      	b.n	8007b66 <SD_ioctl+0xa2>

  switch (cmd)
 8007aec:	79bb      	ldrb	r3, [r7, #6]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d834      	bhi.n	8007b5c <SD_ioctl+0x98>
 8007af2:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <SD_ioctl+0x34>)
 8007af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af8:	08007b09 	.word	0x08007b09
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b29 	.word	0x08007b29
 8007b04:	08007b43 	.word	0x08007b43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b0e:	e028      	b.n	8007b62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b10:	f107 030c 	add.w	r3, r7, #12
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7ff fe67 	bl	80077e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b26:	e01c      	b.n	8007b62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b28:	f107 030c 	add.w	r3, r7, #12
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7ff fe5b 	bl	80077e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b40:	e00f      	b.n	8007b62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007b42:	f107 030c 	add.w	r3, r7, #12
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7ff fe4e 	bl	80077e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4e:	0a5a      	lsrs	r2, r3, #9
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007b5a:	e002      	b.n	8007b62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007b5c:	2304      	movs	r3, #4
 8007b5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007b62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3730      	adds	r7, #48	; 0x30
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000009 	.word	0x20000009

08007b74 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 8007b78:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <BSP_SD_WriteCpltCallback+0x18>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	2102      	movs	r1, #2
 8007b80:	4618      	mov	r0, r3
 8007b82:	f002 fde3 	bl	800a74c <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007b86:	bf00      	nop
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20002494 	.word	0x20002494

08007b90 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <BSP_SD_ReadCpltCallback+0x18>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2101      	movs	r1, #1
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f002 fdd5 	bl	800a74c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 8007ba2:	bf00      	nop
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20002494 	.word	0x20002494

08007bac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	4a08      	ldr	r2, [pc, #32]	; (8007bdc <disk_status+0x30>)
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4413      	add	r3, r2
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	79fa      	ldrb	r2, [r7, #7]
 8007bc4:	4905      	ldr	r1, [pc, #20]	; (8007bdc <disk_status+0x30>)
 8007bc6:	440a      	add	r2, r1
 8007bc8:	7a12      	ldrb	r2, [r2, #8]
 8007bca:	4610      	mov	r0, r2
 8007bcc:	4798      	blx	r3
 8007bce:	4603      	mov	r3, r0
 8007bd0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3710      	adds	r7, #16
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}
 8007bdc:	200024c0 	.word	0x200024c0

08007be0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007bee:	79fb      	ldrb	r3, [r7, #7]
 8007bf0:	4a0d      	ldr	r2, [pc, #52]	; (8007c28 <disk_initialize+0x48>)
 8007bf2:	5cd3      	ldrb	r3, [r2, r3]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d111      	bne.n	8007c1c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007bf8:	79fb      	ldrb	r3, [r7, #7]
 8007bfa:	4a0b      	ldr	r2, [pc, #44]	; (8007c28 <disk_initialize+0x48>)
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	4a09      	ldr	r2, [pc, #36]	; (8007c28 <disk_initialize+0x48>)
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	79fa      	ldrb	r2, [r7, #7]
 8007c0e:	4906      	ldr	r1, [pc, #24]	; (8007c28 <disk_initialize+0x48>)
 8007c10:	440a      	add	r2, r1
 8007c12:	7a12      	ldrb	r2, [r2, #8]
 8007c14:	4610      	mov	r0, r2
 8007c16:	4798      	blx	r3
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	200024c0 	.word	0x200024c0

08007c2c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007c2c:	b590      	push	{r4, r7, lr}
 8007c2e:	b087      	sub	sp, #28
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60b9      	str	r1, [r7, #8]
 8007c34:	607a      	str	r2, [r7, #4]
 8007c36:	603b      	str	r3, [r7, #0]
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4a0a      	ldr	r2, [pc, #40]	; (8007c68 <disk_read+0x3c>)
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	689c      	ldr	r4, [r3, #8]
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	4a07      	ldr	r2, [pc, #28]	; (8007c68 <disk_read+0x3c>)
 8007c4c:	4413      	add	r3, r2
 8007c4e:	7a18      	ldrb	r0, [r3, #8]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	47a0      	blx	r4
 8007c58:	4603      	mov	r3, r0
 8007c5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd90      	pop	{r4, r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200024c0 	.word	0x200024c0

08007c6c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007c6c:	b590      	push	{r4, r7, lr}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	4603      	mov	r3, r0
 8007c7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	4a0a      	ldr	r2, [pc, #40]	; (8007ca8 <disk_write+0x3c>)
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	68dc      	ldr	r4, [r3, #12]
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	4a07      	ldr	r2, [pc, #28]	; (8007ca8 <disk_write+0x3c>)
 8007c8c:	4413      	add	r3, r2
 8007c8e:	7a18      	ldrb	r0, [r3, #8]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	68b9      	ldr	r1, [r7, #8]
 8007c96:	47a0      	blx	r4
 8007c98:	4603      	mov	r3, r0
 8007c9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	371c      	adds	r7, #28
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd90      	pop	{r4, r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	200024c0 	.word	0x200024c0

08007cac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	603a      	str	r2, [r7, #0]
 8007cb6:	71fb      	strb	r3, [r7, #7]
 8007cb8:	460b      	mov	r3, r1
 8007cba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007cbc:	79fb      	ldrb	r3, [r7, #7]
 8007cbe:	4a09      	ldr	r2, [pc, #36]	; (8007ce4 <disk_ioctl+0x38>)
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4413      	add	r3, r2
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	79fa      	ldrb	r2, [r7, #7]
 8007cca:	4906      	ldr	r1, [pc, #24]	; (8007ce4 <disk_ioctl+0x38>)
 8007ccc:	440a      	add	r2, r1
 8007cce:	7a10      	ldrb	r0, [r2, #8]
 8007cd0:	79b9      	ldrb	r1, [r7, #6]
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	4798      	blx	r3
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	73fb      	strb	r3, [r7, #15]
  return res;
 8007cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	200024c0 	.word	0x200024c0

08007ce8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007cf8:	89fb      	ldrh	r3, [r7, #14]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	b21a      	sxth	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	b21b      	sxth	r3, r3
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b21b      	sxth	r3, r3
 8007d08:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007d0a:	89fb      	ldrh	r3, [r7, #14]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3714      	adds	r7, #20
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3303      	adds	r3, #3
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	021b      	lsls	r3, r3, #8
 8007d2c:	687a      	ldr	r2, [r7, #4]
 8007d2e:	3202      	adds	r2, #2
 8007d30:	7812      	ldrb	r2, [r2, #0]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	021b      	lsls	r3, r3, #8
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	3201      	adds	r2, #1
 8007d3e:	7812      	ldrb	r2, [r2, #0]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7812      	ldrb	r2, [r2, #0]
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	60fb      	str	r3, [r7, #12]
	return rv;
 8007d50:	68fb      	ldr	r3, [r7, #12]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	460b      	mov	r3, r1
 8007d68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	887a      	ldrh	r2, [r7, #2]
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]
 8007d76:	887b      	ldrh	r3, [r7, #2]
 8007d78:	0a1b      	lsrs	r3, r3, #8
 8007d7a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	887a      	ldrh	r2, [r7, #2]
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	1c5a      	adds	r2, r3, #1
 8007da2:	607a      	str	r2, [r7, #4]
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	0a1b      	lsrs	r3, r3, #8
 8007dae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	607a      	str	r2, [r7, #4]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	b2d2      	uxtb	r2, r2
 8007dba:	701a      	strb	r2, [r3, #0]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	0a1b      	lsrs	r3, r3, #8
 8007dc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	607a      	str	r2, [r7, #4]
 8007dc8:	683a      	ldr	r2, [r7, #0]
 8007dca:	b2d2      	uxtb	r2, r2
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	607a      	str	r2, [r7, #4]
 8007dda:	683a      	ldr	r2, [r7, #0]
 8007ddc:	b2d2      	uxtb	r2, r2
 8007dde:	701a      	strb	r2, [r3, #0]
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007dec:	b480      	push	{r7}
 8007dee:	b087      	sub	sp, #28
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00d      	beq.n	8007e22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	1c53      	adds	r3, r2, #1
 8007e0a:	613b      	str	r3, [r7, #16]
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	1c59      	adds	r1, r3, #1
 8007e10:	6179      	str	r1, [r7, #20]
 8007e12:	7812      	ldrb	r2, [r2, #0]
 8007e14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	607b      	str	r3, [r7, #4]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1f1      	bne.n	8007e06 <mem_cpy+0x1a>
	}
}
 8007e22:	bf00      	nop
 8007e24:	371c      	adds	r7, #28
 8007e26:	46bd      	mov	sp, r7
 8007e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2c:	4770      	bx	lr

08007e2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007e2e:	b480      	push	{r7}
 8007e30:	b087      	sub	sp, #28
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	60f8      	str	r0, [r7, #12]
 8007e36:	60b9      	str	r1, [r7, #8]
 8007e38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	1c5a      	adds	r2, r3, #1
 8007e42:	617a      	str	r2, [r7, #20]
 8007e44:	68ba      	ldr	r2, [r7, #8]
 8007e46:	b2d2      	uxtb	r2, r2
 8007e48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	607b      	str	r3, [r7, #4]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1f3      	bne.n	8007e3e <mem_set+0x10>
}
 8007e56:	bf00      	nop
 8007e58:	371c      	adds	r7, #28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007e62:	b480      	push	{r7}
 8007e64:	b089      	sub	sp, #36	; 0x24
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	1c5a      	adds	r2, r3, #1
 8007e7e:	61fa      	str	r2, [r7, #28]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	4619      	mov	r1, r3
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	1c5a      	adds	r2, r3, #1
 8007e88:	61ba      	str	r2, [r7, #24]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	1acb      	subs	r3, r1, r3
 8007e8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	3b01      	subs	r3, #1
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <mem_cmp+0x40>
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0eb      	beq.n	8007e7a <mem_cmp+0x18>

	return r;
 8007ea2:	697b      	ldr	r3, [r7, #20]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3724      	adds	r7, #36	; 0x24
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007eba:	e002      	b.n	8007ec2 <chk_chr+0x12>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	781b      	ldrb	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d005      	beq.n	8007ed6 <chk_chr+0x26>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	461a      	mov	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d1f2      	bne.n	8007ebc <chk_chr+0xc>
	return *str;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b082      	sub	sp, #8
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d009      	beq.n	8007f08 <lock_fs+0x22>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f002 f9ca 	bl	800a292 <ff_req_grant>
 8007efe:	4603      	mov	r3, r0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d001      	beq.n	8007f08 <lock_fs+0x22>
 8007f04:	2301      	movs	r3, #1
 8007f06:	e000      	b.n	8007f0a <lock_fs+0x24>
 8007f08:	2300      	movs	r3, #0
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}

08007f12 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b082      	sub	sp, #8
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	6078      	str	r0, [r7, #4]
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00d      	beq.n	8007f40 <unlock_fs+0x2e>
 8007f24:	78fb      	ldrb	r3, [r7, #3]
 8007f26:	2b0c      	cmp	r3, #12
 8007f28:	d00a      	beq.n	8007f40 <unlock_fs+0x2e>
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	2b0b      	cmp	r3, #11
 8007f2e:	d007      	beq.n	8007f40 <unlock_fs+0x2e>
 8007f30:	78fb      	ldrb	r3, [r7, #3]
 8007f32:	2b0f      	cmp	r3, #15
 8007f34:	d004      	beq.n	8007f40 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f002 f9be 	bl	800a2bc <ff_rel_grant>
	}
}
 8007f40:	bf00      	nop
 8007f42:	3708      	adds	r7, #8
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007f52:	2300      	movs	r3, #0
 8007f54:	60bb      	str	r3, [r7, #8]
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e029      	b.n	8007fb0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007f5c:	4a27      	ldr	r2, [pc, #156]	; (8007ffc <chk_lock+0xb4>)
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	4413      	add	r3, r2
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d01d      	beq.n	8007fa6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f6a:	4a24      	ldr	r2, [pc, #144]	; (8007ffc <chk_lock+0xb4>)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	011b      	lsls	r3, r3, #4
 8007f70:	4413      	add	r3, r2
 8007f72:	681a      	ldr	r2, [r3, #0]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d116      	bne.n	8007faa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007f7c:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <chk_lock+0xb4>)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	011b      	lsls	r3, r3, #4
 8007f82:	4413      	add	r3, r2
 8007f84:	3304      	adds	r3, #4
 8007f86:	681a      	ldr	r2, [r3, #0]
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d10c      	bne.n	8007faa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007f90:	4a1a      	ldr	r2, [pc, #104]	; (8007ffc <chk_lock+0xb4>)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	011b      	lsls	r3, r3, #4
 8007f96:	4413      	add	r3, r2
 8007f98:	3308      	adds	r3, #8
 8007f9a:	681a      	ldr	r2, [r3, #0]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d102      	bne.n	8007faa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007fa4:	e007      	b.n	8007fb6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3301      	adds	r3, #1
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d9d2      	bls.n	8007f5c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d109      	bne.n	8007fd0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d102      	bne.n	8007fc8 <chk_lock+0x80>
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d101      	bne.n	8007fcc <chk_lock+0x84>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e010      	b.n	8007fee <chk_lock+0xa6>
 8007fcc:	2312      	movs	r3, #18
 8007fce:	e00e      	b.n	8007fee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d108      	bne.n	8007fe8 <chk_lock+0xa0>
 8007fd6:	4a09      	ldr	r2, [pc, #36]	; (8007ffc <chk_lock+0xb4>)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	011b      	lsls	r3, r3, #4
 8007fdc:	4413      	add	r3, r2
 8007fde:	330c      	adds	r3, #12
 8007fe0:	881b      	ldrh	r3, [r3, #0]
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe6:	d101      	bne.n	8007fec <chk_lock+0xa4>
 8007fe8:	2310      	movs	r3, #16
 8007fea:	e000      	b.n	8007fee <chk_lock+0xa6>
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	200024a0 	.word	0x200024a0

08008000 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008006:	2300      	movs	r3, #0
 8008008:	607b      	str	r3, [r7, #4]
 800800a:	e002      	b.n	8008012 <enq_lock+0x12>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3301      	adds	r3, #1
 8008010:	607b      	str	r3, [r7, #4]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d806      	bhi.n	8008026 <enq_lock+0x26>
 8008018:	4a09      	ldr	r2, [pc, #36]	; (8008040 <enq_lock+0x40>)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	4413      	add	r3, r2
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d1f2      	bne.n	800800c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b02      	cmp	r3, #2
 800802a:	bf14      	ite	ne
 800802c:	2301      	movne	r3, #1
 800802e:	2300      	moveq	r3, #0
 8008030:	b2db      	uxtb	r3, r3
}
 8008032:	4618      	mov	r0, r3
 8008034:	370c      	adds	r7, #12
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	200024a0 	.word	0x200024a0

08008044 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	e01f      	b.n	8008094 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008054:	4a41      	ldr	r2, [pc, #260]	; (800815c <inc_lock+0x118>)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	011b      	lsls	r3, r3, #4
 800805a:	4413      	add	r3, r2
 800805c:	681a      	ldr	r2, [r3, #0]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	429a      	cmp	r2, r3
 8008064:	d113      	bne.n	800808e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008066:	4a3d      	ldr	r2, [pc, #244]	; (800815c <inc_lock+0x118>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	4413      	add	r3, r2
 800806e:	3304      	adds	r3, #4
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008076:	429a      	cmp	r2, r3
 8008078:	d109      	bne.n	800808e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800807a:	4a38      	ldr	r2, [pc, #224]	; (800815c <inc_lock+0x118>)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	011b      	lsls	r3, r3, #4
 8008080:	4413      	add	r3, r2
 8008082:	3308      	adds	r3, #8
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800808a:	429a      	cmp	r2, r3
 800808c:	d006      	beq.n	800809c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	3301      	adds	r3, #1
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b01      	cmp	r3, #1
 8008098:	d9dc      	bls.n	8008054 <inc_lock+0x10>
 800809a:	e000      	b.n	800809e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800809c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d132      	bne.n	800810a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80080a4:	2300      	movs	r3, #0
 80080a6:	60fb      	str	r3, [r7, #12]
 80080a8:	e002      	b.n	80080b0 <inc_lock+0x6c>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	3301      	adds	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d806      	bhi.n	80080c4 <inc_lock+0x80>
 80080b6:	4a29      	ldr	r2, [pc, #164]	; (800815c <inc_lock+0x118>)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	011b      	lsls	r3, r3, #4
 80080bc:	4413      	add	r3, r2
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1f2      	bne.n	80080aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d101      	bne.n	80080ce <inc_lock+0x8a>
 80080ca:	2300      	movs	r3, #0
 80080cc:	e040      	b.n	8008150 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	4922      	ldr	r1, [pc, #136]	; (800815c <inc_lock+0x118>)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	011b      	lsls	r3, r3, #4
 80080d8:	440b      	add	r3, r1
 80080da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	689a      	ldr	r2, [r3, #8]
 80080e0:	491e      	ldr	r1, [pc, #120]	; (800815c <inc_lock+0x118>)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	440b      	add	r3, r1
 80080e8:	3304      	adds	r3, #4
 80080ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	695a      	ldr	r2, [r3, #20]
 80080f0:	491a      	ldr	r1, [pc, #104]	; (800815c <inc_lock+0x118>)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	011b      	lsls	r3, r3, #4
 80080f6:	440b      	add	r3, r1
 80080f8:	3308      	adds	r3, #8
 80080fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80080fc:	4a17      	ldr	r2, [pc, #92]	; (800815c <inc_lock+0x118>)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	011b      	lsls	r3, r3, #4
 8008102:	4413      	add	r3, r2
 8008104:	330c      	adds	r3, #12
 8008106:	2200      	movs	r2, #0
 8008108:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <inc_lock+0xe0>
 8008110:	4a12      	ldr	r2, [pc, #72]	; (800815c <inc_lock+0x118>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	011b      	lsls	r3, r3, #4
 8008116:	4413      	add	r3, r2
 8008118:	330c      	adds	r3, #12
 800811a:	881b      	ldrh	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <inc_lock+0xe0>
 8008120:	2300      	movs	r3, #0
 8008122:	e015      	b.n	8008150 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d108      	bne.n	800813c <inc_lock+0xf8>
 800812a:	4a0c      	ldr	r2, [pc, #48]	; (800815c <inc_lock+0x118>)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	011b      	lsls	r3, r3, #4
 8008130:	4413      	add	r3, r2
 8008132:	330c      	adds	r3, #12
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	3301      	adds	r3, #1
 8008138:	b29a      	uxth	r2, r3
 800813a:	e001      	b.n	8008140 <inc_lock+0xfc>
 800813c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008140:	4906      	ldr	r1, [pc, #24]	; (800815c <inc_lock+0x118>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	011b      	lsls	r3, r3, #4
 8008146:	440b      	add	r3, r1
 8008148:	330c      	adds	r3, #12
 800814a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	3301      	adds	r3, #1
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	200024a0 	.word	0x200024a0

08008160 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3b01      	subs	r3, #1
 800816c:	607b      	str	r3, [r7, #4]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2b01      	cmp	r3, #1
 8008172:	d825      	bhi.n	80081c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008174:	4a17      	ldr	r2, [pc, #92]	; (80081d4 <dec_lock+0x74>)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	011b      	lsls	r3, r3, #4
 800817a:	4413      	add	r3, r2
 800817c:	330c      	adds	r3, #12
 800817e:	881b      	ldrh	r3, [r3, #0]
 8008180:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008182:	89fb      	ldrh	r3, [r7, #14]
 8008184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008188:	d101      	bne.n	800818e <dec_lock+0x2e>
 800818a:	2300      	movs	r3, #0
 800818c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800818e:	89fb      	ldrh	r3, [r7, #14]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d002      	beq.n	800819a <dec_lock+0x3a>
 8008194:	89fb      	ldrh	r3, [r7, #14]
 8008196:	3b01      	subs	r3, #1
 8008198:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800819a:	4a0e      	ldr	r2, [pc, #56]	; (80081d4 <dec_lock+0x74>)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	011b      	lsls	r3, r3, #4
 80081a0:	4413      	add	r3, r2
 80081a2:	330c      	adds	r3, #12
 80081a4:	89fa      	ldrh	r2, [r7, #14]
 80081a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80081a8:	89fb      	ldrh	r3, [r7, #14]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d105      	bne.n	80081ba <dec_lock+0x5a>
 80081ae:	4a09      	ldr	r2, [pc, #36]	; (80081d4 <dec_lock+0x74>)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	011b      	lsls	r3, r3, #4
 80081b4:	4413      	add	r3, r2
 80081b6:	2200      	movs	r2, #0
 80081b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	737b      	strb	r3, [r7, #13]
 80081be:	e001      	b.n	80081c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80081c0:	2302      	movs	r3, #2
 80081c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80081c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	200024a0 	.word	0x200024a0

080081d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80081d8:	b480      	push	{r7}
 80081da:	b085      	sub	sp, #20
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80081e0:	2300      	movs	r3, #0
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e010      	b.n	8008208 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80081e6:	4a0d      	ldr	r2, [pc, #52]	; (800821c <clear_lock+0x44>)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	011b      	lsls	r3, r3, #4
 80081ec:	4413      	add	r3, r2
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d105      	bne.n	8008202 <clear_lock+0x2a>
 80081f6:	4a09      	ldr	r2, [pc, #36]	; (800821c <clear_lock+0x44>)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	011b      	lsls	r3, r3, #4
 80081fc:	4413      	add	r3, r2
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2b01      	cmp	r3, #1
 800820c:	d9eb      	bls.n	80081e6 <clear_lock+0xe>
	}
}
 800820e:	bf00      	nop
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	200024a0 	.word	0x200024a0

08008220 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008228:	2300      	movs	r3, #0
 800822a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	78db      	ldrb	r3, [r3, #3]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d034      	beq.n	800829e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008238:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7858      	ldrb	r0, [r3, #1]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008244:	2301      	movs	r3, #1
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	f7ff fd10 	bl	8007c6c <disk_write>
 800824c:	4603      	mov	r3, r0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <sync_window+0x38>
			res = FR_DISK_ERR;
 8008252:	2301      	movs	r3, #1
 8008254:	73fb      	strb	r3, [r7, #15]
 8008256:	e022      	b.n	800829e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	1ad2      	subs	r2, r2, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	429a      	cmp	r2, r3
 800826c:	d217      	bcs.n	800829e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	789b      	ldrb	r3, [r3, #2]
 8008272:	613b      	str	r3, [r7, #16]
 8008274:	e010      	b.n	8008298 <sync_window+0x78>
					wsect += fs->fsize;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	697a      	ldr	r2, [r7, #20]
 800827c:	4413      	add	r3, r2
 800827e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	7858      	ldrb	r0, [r3, #1]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800828a:	2301      	movs	r3, #1
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	f7ff fced 	bl	8007c6c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	3b01      	subs	r3, #1
 8008296:	613b      	str	r3, [r7, #16]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d8eb      	bhi.n	8008276 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800829e:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d01b      	beq.n	80082f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f7ff ffad 	bl	8008220 <sync_window>
 80082c6:	4603      	mov	r3, r0
 80082c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80082ca:	7bfb      	ldrb	r3, [r7, #15]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d113      	bne.n	80082f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	7858      	ldrb	r0, [r3, #1]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80082da:	2301      	movs	r3, #1
 80082dc:	683a      	ldr	r2, [r7, #0]
 80082de:	f7ff fca5 	bl	8007c2c <disk_read>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d004      	beq.n	80082f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80082e8:	f04f 33ff 	mov.w	r3, #4294967295
 80082ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	683a      	ldr	r2, [r7, #0]
 80082f6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80082f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
	...

08008304 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff ff87 	bl	8008220 <sync_window>
 8008312:	4603      	mov	r3, r0
 8008314:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008316:	7bfb      	ldrb	r3, [r7, #15]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d159      	bne.n	80083d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b03      	cmp	r3, #3
 8008322:	d149      	bne.n	80083b8 <sync_fs+0xb4>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	791b      	ldrb	r3, [r3, #4]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d145      	bne.n	80083b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	899b      	ldrh	r3, [r3, #12]
 8008336:	461a      	mov	r2, r3
 8008338:	2100      	movs	r1, #0
 800833a:	f7ff fd78 	bl	8007e2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	3338      	adds	r3, #56	; 0x38
 8008342:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008346:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800834a:	4618      	mov	r0, r3
 800834c:	f7ff fd07 	bl	8007d5e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3338      	adds	r3, #56	; 0x38
 8008354:	4921      	ldr	r1, [pc, #132]	; (80083dc <sync_fs+0xd8>)
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff fd1c 	bl	8007d94 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3338      	adds	r3, #56	; 0x38
 8008360:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008364:	491e      	ldr	r1, [pc, #120]	; (80083e0 <sync_fs+0xdc>)
 8008366:	4618      	mov	r0, r3
 8008368:	f7ff fd14 	bl	8007d94 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	3338      	adds	r3, #56	; 0x38
 8008370:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	699b      	ldr	r3, [r3, #24]
 8008378:	4619      	mov	r1, r3
 800837a:	4610      	mov	r0, r2
 800837c:	f7ff fd0a 	bl	8007d94 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3338      	adds	r3, #56	; 0x38
 8008384:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	4619      	mov	r1, r3
 800838e:	4610      	mov	r0, r2
 8008390:	f7ff fd00 	bl	8007d94 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	7858      	ldrb	r0, [r3, #1]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083ac:	2301      	movs	r3, #1
 80083ae:	f7ff fc5d 	bl	8007c6c <disk_write>
			fs->fsi_flag = 0;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	785b      	ldrb	r3, [r3, #1]
 80083bc:	2200      	movs	r2, #0
 80083be:	2100      	movs	r1, #0
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fc73 	bl	8007cac <disk_ioctl>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d001      	beq.n	80083d0 <sync_fs+0xcc>
 80083cc:	2301      	movs	r3, #1
 80083ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80083d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	41615252 	.word	0x41615252
 80083e0:	61417272 	.word	0x61417272

080083e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	3b02      	subs	r3, #2
 80083f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	69db      	ldr	r3, [r3, #28]
 80083f8:	3b02      	subs	r3, #2
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d301      	bcc.n	8008404 <clust2sect+0x20>
 8008400:	2300      	movs	r3, #0
 8008402:	e008      	b.n	8008416 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	895b      	ldrh	r3, [r3, #10]
 8008408:	461a      	mov	r2, r3
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	fb03 f202 	mul.w	r2, r3, r2
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008414:	4413      	add	r3, r2
}
 8008416:	4618      	mov	r0, r3
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b086      	sub	sp, #24
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d904      	bls.n	8008442 <get_fat+0x20>
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <get_fat+0x26>
		val = 1;	/* Internal error */
 8008442:	2301      	movs	r3, #1
 8008444:	617b      	str	r3, [r7, #20]
 8008446:	e0b7      	b.n	80085b8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008448:	f04f 33ff 	mov.w	r3, #4294967295
 800844c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	2b02      	cmp	r3, #2
 8008454:	d05a      	beq.n	800850c <get_fat+0xea>
 8008456:	2b03      	cmp	r3, #3
 8008458:	d07d      	beq.n	8008556 <get_fat+0x134>
 800845a:	2b01      	cmp	r3, #1
 800845c:	f040 80a2 	bne.w	80085a4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	085b      	lsrs	r3, r3, #1
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4413      	add	r3, r2
 800846c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	899b      	ldrh	r3, [r3, #12]
 8008476:	4619      	mov	r1, r3
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	fbb3 f3f1 	udiv	r3, r3, r1
 800847e:	4413      	add	r3, r2
 8008480:	4619      	mov	r1, r3
 8008482:	6938      	ldr	r0, [r7, #16]
 8008484:	f7ff ff10 	bl	80082a8 <move_window>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	f040 808d 	bne.w	80085aa <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	60fa      	str	r2, [r7, #12]
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	8992      	ldrh	r2, [r2, #12]
 800849a:	fbb3 f1f2 	udiv	r1, r3, r2
 800849e:	fb02 f201 	mul.w	r2, r2, r1
 80084a2:	1a9b      	subs	r3, r3, r2
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4413      	add	r3, r2
 80084a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	899b      	ldrh	r3, [r3, #12]
 80084b6:	4619      	mov	r1, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80084be:	4413      	add	r3, r2
 80084c0:	4619      	mov	r1, r3
 80084c2:	6938      	ldr	r0, [r7, #16]
 80084c4:	f7ff fef0 	bl	80082a8 <move_window>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d16f      	bne.n	80085ae <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	899b      	ldrh	r3, [r3, #12]
 80084d2:	461a      	mov	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80084da:	fb02 f201 	mul.w	r2, r2, r1
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4413      	add	r3, r2
 80084e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	461a      	mov	r2, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d002      	beq.n	8008502 <get_fat+0xe0>
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	091b      	lsrs	r3, r3, #4
 8008500:	e002      	b.n	8008508 <get_fat+0xe6>
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008508:	617b      	str	r3, [r7, #20]
			break;
 800850a:	e055      	b.n	80085b8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	899b      	ldrh	r3, [r3, #12]
 8008514:	085b      	lsrs	r3, r3, #1
 8008516:	b29b      	uxth	r3, r3
 8008518:	4619      	mov	r1, r3
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	fbb3 f3f1 	udiv	r3, r3, r1
 8008520:	4413      	add	r3, r2
 8008522:	4619      	mov	r1, r3
 8008524:	6938      	ldr	r0, [r7, #16]
 8008526:	f7ff febf 	bl	80082a8 <move_window>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d140      	bne.n	80085b2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	005b      	lsls	r3, r3, #1
 800853a:	693a      	ldr	r2, [r7, #16]
 800853c:	8992      	ldrh	r2, [r2, #12]
 800853e:	fbb3 f0f2 	udiv	r0, r3, r2
 8008542:	fb02 f200 	mul.w	r2, r2, r0
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	440b      	add	r3, r1
 800854a:	4618      	mov	r0, r3
 800854c:	f7ff fbcc 	bl	8007ce8 <ld_word>
 8008550:	4603      	mov	r3, r0
 8008552:	617b      	str	r3, [r7, #20]
			break;
 8008554:	e030      	b.n	80085b8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	899b      	ldrh	r3, [r3, #12]
 800855e:	089b      	lsrs	r3, r3, #2
 8008560:	b29b      	uxth	r3, r3
 8008562:	4619      	mov	r1, r3
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	fbb3 f3f1 	udiv	r3, r3, r1
 800856a:	4413      	add	r3, r2
 800856c:	4619      	mov	r1, r3
 800856e:	6938      	ldr	r0, [r7, #16]
 8008570:	f7ff fe9a 	bl	80082a8 <move_window>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d11d      	bne.n	80085b6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	8992      	ldrh	r2, [r2, #12]
 8008588:	fbb3 f0f2 	udiv	r0, r3, r2
 800858c:	fb02 f200 	mul.w	r2, r2, r0
 8008590:	1a9b      	subs	r3, r3, r2
 8008592:	440b      	add	r3, r1
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff fbbf 	bl	8007d18 <ld_dword>
 800859a:	4603      	mov	r3, r0
 800859c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80085a0:	617b      	str	r3, [r7, #20]
			break;
 80085a2:	e009      	b.n	80085b8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	e006      	b.n	80085b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085aa:	bf00      	nop
 80085ac:	e004      	b.n	80085b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80085ae:	bf00      	nop
 80085b0:	e002      	b.n	80085b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80085b2:	bf00      	nop
 80085b4:	e000      	b.n	80085b8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80085b6:	bf00      	nop
		}
	}

	return val;
 80085b8:	697b      	ldr	r3, [r7, #20]
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3718      	adds	r7, #24
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80085c2:	b590      	push	{r4, r7, lr}
 80085c4:	b089      	sub	sp, #36	; 0x24
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80085ce:	2302      	movs	r3, #2
 80085d0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	f240 8106 	bls.w	80087e6 <put_fat+0x224>
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	f080 8100 	bcs.w	80087e6 <put_fat+0x224>
		switch (fs->fs_type) {
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	f000 8088 	beq.w	8008700 <put_fat+0x13e>
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	f000 80b0 	beq.w	8008756 <put_fat+0x194>
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	f040 80f5 	bne.w	80087e6 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	085b      	lsrs	r3, r3, #1
 8008604:	69ba      	ldr	r2, [r7, #24]
 8008606:	4413      	add	r3, r2
 8008608:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	899b      	ldrh	r3, [r3, #12]
 8008612:	4619      	mov	r1, r3
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	fbb3 f3f1 	udiv	r3, r3, r1
 800861a:	4413      	add	r3, r2
 800861c:	4619      	mov	r1, r3
 800861e:	68f8      	ldr	r0, [r7, #12]
 8008620:	f7ff fe42 	bl	80082a8 <move_window>
 8008624:	4603      	mov	r3, r0
 8008626:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008628:	7ffb      	ldrb	r3, [r7, #31]
 800862a:	2b00      	cmp	r3, #0
 800862c:	f040 80d4 	bne.w	80087d8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	1c5a      	adds	r2, r3, #1
 800863a:	61ba      	str	r2, [r7, #24]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	8992      	ldrh	r2, [r2, #12]
 8008640:	fbb3 f0f2 	udiv	r0, r3, r2
 8008644:	fb02 f200 	mul.w	r2, r2, r0
 8008648:	1a9b      	subs	r3, r3, r2
 800864a:	440b      	add	r3, r1
 800864c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	f003 0301 	and.w	r3, r3, #1
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00d      	beq.n	8008674 <put_fat+0xb2>
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	b25b      	sxtb	r3, r3
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	b25a      	sxtb	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	b2db      	uxtb	r3, r3
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	b25b      	sxtb	r3, r3
 800866c:	4313      	orrs	r3, r2
 800866e:	b25b      	sxtb	r3, r3
 8008670:	b2db      	uxtb	r3, r3
 8008672:	e001      	b.n	8008678 <put_fat+0xb6>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	b2db      	uxtb	r3, r3
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2201      	movs	r2, #1
 8008680:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	899b      	ldrh	r3, [r3, #12]
 800868a:	4619      	mov	r1, r3
 800868c:	69bb      	ldr	r3, [r7, #24]
 800868e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008692:	4413      	add	r3, r2
 8008694:	4619      	mov	r1, r3
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f7ff fe06 	bl	80082a8 <move_window>
 800869c:	4603      	mov	r3, r0
 800869e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80086a0:	7ffb      	ldrb	r3, [r7, #31]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f040 809a 	bne.w	80087dc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	899b      	ldrh	r3, [r3, #12]
 80086b2:	461a      	mov	r2, r3
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	fbb3 f0f2 	udiv	r0, r3, r2
 80086ba:	fb02 f200 	mul.w	r2, r2, r0
 80086be:	1a9b      	subs	r3, r3, r2
 80086c0:	440b      	add	r3, r1
 80086c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	f003 0301 	and.w	r3, r3, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <put_fat+0x114>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	091b      	lsrs	r3, r3, #4
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	e00e      	b.n	80086f4 <put_fat+0x132>
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	781b      	ldrb	r3, [r3, #0]
 80086da:	b25b      	sxtb	r3, r3
 80086dc:	f023 030f 	bic.w	r3, r3, #15
 80086e0:	b25a      	sxtb	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	0a1b      	lsrs	r3, r3, #8
 80086e6:	b25b      	sxtb	r3, r3
 80086e8:	f003 030f 	and.w	r3, r3, #15
 80086ec:	b25b      	sxtb	r3, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	b25b      	sxtb	r3, r3
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2201      	movs	r2, #1
 80086fc:	70da      	strb	r2, [r3, #3]
			break;
 80086fe:	e072      	b.n	80087e6 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	899b      	ldrh	r3, [r3, #12]
 8008708:	085b      	lsrs	r3, r3, #1
 800870a:	b29b      	uxth	r3, r3
 800870c:	4619      	mov	r1, r3
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	fbb3 f3f1 	udiv	r3, r3, r1
 8008714:	4413      	add	r3, r2
 8008716:	4619      	mov	r1, r3
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f7ff fdc5 	bl	80082a8 <move_window>
 800871e:	4603      	mov	r3, r0
 8008720:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008722:	7ffb      	ldrb	r3, [r7, #31]
 8008724:	2b00      	cmp	r3, #0
 8008726:	d15b      	bne.n	80087e0 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	68fa      	ldr	r2, [r7, #12]
 8008734:	8992      	ldrh	r2, [r2, #12]
 8008736:	fbb3 f0f2 	udiv	r0, r3, r2
 800873a:	fb02 f200 	mul.w	r2, r2, r0
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	440b      	add	r3, r1
 8008742:	687a      	ldr	r2, [r7, #4]
 8008744:	b292      	uxth	r2, r2
 8008746:	4611      	mov	r1, r2
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fb08 	bl	8007d5e <st_word>
			fs->wflag = 1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2201      	movs	r2, #1
 8008752:	70da      	strb	r2, [r3, #3]
			break;
 8008754:	e047      	b.n	80087e6 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	899b      	ldrh	r3, [r3, #12]
 800875e:	089b      	lsrs	r3, r3, #2
 8008760:	b29b      	uxth	r3, r3
 8008762:	4619      	mov	r1, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	fbb3 f3f1 	udiv	r3, r3, r1
 800876a:	4413      	add	r3, r2
 800876c:	4619      	mov	r1, r3
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fd9a 	bl	80082a8 <move_window>
 8008774:	4603      	mov	r3, r0
 8008776:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008778:	7ffb      	ldrb	r3, [r7, #31]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d132      	bne.n	80087e4 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	009b      	lsls	r3, r3, #2
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	8992      	ldrh	r2, [r2, #12]
 8008792:	fbb3 f0f2 	udiv	r0, r3, r2
 8008796:	fb02 f200 	mul.w	r2, r2, r0
 800879a:	1a9b      	subs	r3, r3, r2
 800879c:	440b      	add	r3, r1
 800879e:	4618      	mov	r0, r3
 80087a0:	f7ff faba 	bl	8007d18 <ld_dword>
 80087a4:	4603      	mov	r3, r0
 80087a6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80087aa:	4323      	orrs	r3, r4
 80087ac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	8992      	ldrh	r2, [r2, #12]
 80087bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80087c0:	fb02 f200 	mul.w	r2, r2, r0
 80087c4:	1a9b      	subs	r3, r3, r2
 80087c6:	440b      	add	r3, r1
 80087c8:	6879      	ldr	r1, [r7, #4]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fae2 	bl	8007d94 <st_dword>
			fs->wflag = 1;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2201      	movs	r2, #1
 80087d4:	70da      	strb	r2, [r3, #3]
			break;
 80087d6:	e006      	b.n	80087e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80087d8:	bf00      	nop
 80087da:	e004      	b.n	80087e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80087dc:	bf00      	nop
 80087de:	e002      	b.n	80087e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80087e0:	bf00      	nop
 80087e2:	e000      	b.n	80087e6 <put_fat+0x224>
			if (res != FR_OK) break;
 80087e4:	bf00      	nop
		}
	}
	return res;
 80087e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3724      	adds	r7, #36	; 0x24
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}

080087f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b088      	sub	sp, #32
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80087fc:	2300      	movs	r3, #0
 80087fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b01      	cmp	r3, #1
 800880a:	d904      	bls.n	8008816 <remove_chain+0x26>
 800880c:	69bb      	ldr	r3, [r7, #24]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	429a      	cmp	r2, r3
 8008814:	d301      	bcc.n	800881a <remove_chain+0x2a>
 8008816:	2302      	movs	r3, #2
 8008818:	e04b      	b.n	80088b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00c      	beq.n	800883a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8008820:	f04f 32ff 	mov.w	r2, #4294967295
 8008824:	6879      	ldr	r1, [r7, #4]
 8008826:	69b8      	ldr	r0, [r7, #24]
 8008828:	f7ff fecb 	bl	80085c2 <put_fat>
 800882c:	4603      	mov	r3, r0
 800882e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8008830:	7ffb      	ldrb	r3, [r7, #31]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d001      	beq.n	800883a <remove_chain+0x4a>
 8008836:	7ffb      	ldrb	r3, [r7, #31]
 8008838:	e03b      	b.n	80088b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800883a:	68b9      	ldr	r1, [r7, #8]
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fdf0 	bl	8008422 <get_fat>
 8008842:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d031      	beq.n	80088ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d101      	bne.n	8008854 <remove_chain+0x64>
 8008850:	2302      	movs	r3, #2
 8008852:	e02e      	b.n	80088b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800885a:	d101      	bne.n	8008860 <remove_chain+0x70>
 800885c:	2301      	movs	r3, #1
 800885e:	e028      	b.n	80088b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8008860:	2200      	movs	r2, #0
 8008862:	68b9      	ldr	r1, [r7, #8]
 8008864:	69b8      	ldr	r0, [r7, #24]
 8008866:	f7ff feac 	bl	80085c2 <put_fat>
 800886a:	4603      	mov	r3, r0
 800886c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800886e:	7ffb      	ldrb	r3, [r7, #31]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d001      	beq.n	8008878 <remove_chain+0x88>
 8008874:	7ffb      	ldrb	r3, [r7, #31]
 8008876:	e01c      	b.n	80088b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8008878:	69bb      	ldr	r3, [r7, #24]
 800887a:	699a      	ldr	r2, [r3, #24]
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	69db      	ldr	r3, [r3, #28]
 8008880:	3b02      	subs	r3, #2
 8008882:	429a      	cmp	r2, r3
 8008884:	d20b      	bcs.n	800889e <remove_chain+0xae>
			fs->free_clst++;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8008890:	69bb      	ldr	r3, [r7, #24]
 8008892:	791b      	ldrb	r3, [r3, #4]
 8008894:	f043 0301 	orr.w	r3, r3, #1
 8008898:	b2da      	uxtb	r2, r3
 800889a:	69bb      	ldr	r3, [r7, #24]
 800889c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80088a2:	69bb      	ldr	r3, [r7, #24]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d3c6      	bcc.n	800883a <remove_chain+0x4a>
 80088ac:	e000      	b.n	80088b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80088ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3720      	adds	r7, #32
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b088      	sub	sp, #32
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10d      	bne.n	80088ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	695b      	ldr	r3, [r3, #20]
 80088d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d004      	beq.n	80088e6 <create_chain+0x2c>
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d31b      	bcc.n	800891e <create_chain+0x64>
 80088e6:	2301      	movs	r3, #1
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	e018      	b.n	800891e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80088ec:	6839      	ldr	r1, [r7, #0]
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f7ff fd97 	bl	8008422 <get_fat>
 80088f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d801      	bhi.n	8008900 <create_chain+0x46>
 80088fc:	2301      	movs	r3, #1
 80088fe:	e070      	b.n	80089e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008906:	d101      	bne.n	800890c <create_chain+0x52>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	e06a      	b.n	80089e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800890c:	693b      	ldr	r3, [r7, #16]
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	429a      	cmp	r2, r3
 8008914:	d201      	bcs.n	800891a <create_chain+0x60>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	e063      	b.n	80089e2 <create_chain+0x128>
		scl = clst;
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8008922:	69fb      	ldr	r3, [r7, #28]
 8008924:	3301      	adds	r3, #1
 8008926:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	69db      	ldr	r3, [r3, #28]
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	429a      	cmp	r2, r3
 8008930:	d307      	bcc.n	8008942 <create_chain+0x88>
				ncl = 2;
 8008932:	2302      	movs	r3, #2
 8008934:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	429a      	cmp	r2, r3
 800893c:	d901      	bls.n	8008942 <create_chain+0x88>
 800893e:	2300      	movs	r3, #0
 8008940:	e04f      	b.n	80089e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8008942:	69f9      	ldr	r1, [r7, #28]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f7ff fd6c 	bl	8008422 <get_fat>
 800894a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00e      	beq.n	8008970 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d003      	beq.n	8008960 <create_chain+0xa6>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d101      	bne.n	8008964 <create_chain+0xaa>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	e03e      	b.n	80089e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008964:	69fa      	ldr	r2, [r7, #28]
 8008966:	69bb      	ldr	r3, [r7, #24]
 8008968:	429a      	cmp	r2, r3
 800896a:	d1da      	bne.n	8008922 <create_chain+0x68>
 800896c:	2300      	movs	r3, #0
 800896e:	e038      	b.n	80089e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008970:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008972:	f04f 32ff 	mov.w	r2, #4294967295
 8008976:	69f9      	ldr	r1, [r7, #28]
 8008978:	6938      	ldr	r0, [r7, #16]
 800897a:	f7ff fe22 	bl	80085c2 <put_fat>
 800897e:	4603      	mov	r3, r0
 8008980:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d109      	bne.n	800899c <create_chain+0xe2>
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d006      	beq.n	800899c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800898e:	69fa      	ldr	r2, [r7, #28]
 8008990:	6839      	ldr	r1, [r7, #0]
 8008992:	6938      	ldr	r0, [r7, #16]
 8008994:	f7ff fe15 	bl	80085c2 <put_fat>
 8008998:	4603      	mov	r3, r0
 800899a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800899c:	7dfb      	ldrb	r3, [r7, #23]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d116      	bne.n	80089d0 <create_chain+0x116>
		fs->last_clst = ncl;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	699a      	ldr	r2, [r3, #24]
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	69db      	ldr	r3, [r3, #28]
 80089b0:	3b02      	subs	r3, #2
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d804      	bhi.n	80089c0 <create_chain+0x106>
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	699b      	ldr	r3, [r3, #24]
 80089ba:	1e5a      	subs	r2, r3, #1
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	791b      	ldrb	r3, [r3, #4]
 80089c4:	f043 0301 	orr.w	r3, r3, #1
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	711a      	strb	r2, [r3, #4]
 80089ce:	e007      	b.n	80089e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80089d0:	7dfb      	ldrb	r3, [r7, #23]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d102      	bne.n	80089dc <create_chain+0x122>
 80089d6:	f04f 33ff 	mov.w	r3, #4294967295
 80089da:	e000      	b.n	80089de <create_chain+0x124>
 80089dc:	2301      	movs	r3, #1
 80089de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80089e0:	69fb      	ldr	r3, [r7, #28]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3720      	adds	r7, #32
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b087      	sub	sp, #28
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
 80089f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	3304      	adds	r3, #4
 8008a00:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	899b      	ldrh	r3, [r3, #12]
 8008a06:	461a      	mov	r2, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	8952      	ldrh	r2, [r2, #10]
 8008a12:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	1d1a      	adds	r2, r3, #4
 8008a1c:	613a      	str	r2, [r7, #16]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008a22:	68bb      	ldr	r3, [r7, #8]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d101      	bne.n	8008a2c <clmt_clust+0x42>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e010      	b.n	8008a4e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d307      	bcc.n	8008a44 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	3304      	adds	r3, #4
 8008a40:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008a42:	e7e9      	b.n	8008a18 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8008a44:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	4413      	add	r3, r2
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	371c      	adds	r7, #28
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr

08008a5a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b086      	sub	sp, #24
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a70:	d204      	bcs.n	8008a7c <dir_sdi+0x22>
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	f003 031f 	and.w	r3, r3, #31
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d001      	beq.n	8008a80 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e071      	b.n	8008b64 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	683a      	ldr	r2, [r7, #0]
 8008a84:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d106      	bne.n	8008aa0 <dir_sdi+0x46>
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d902      	bls.n	8008aa0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a9e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10c      	bne.n	8008ac0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	095b      	lsrs	r3, r3, #5
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	8912      	ldrh	r2, [r2, #8]
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d301      	bcc.n	8008ab6 <dir_sdi+0x5c>
 8008ab2:	2302      	movs	r3, #2
 8008ab4:	e056      	b.n	8008b64 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	61da      	str	r2, [r3, #28]
 8008abe:	e02d      	b.n	8008b1c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	895b      	ldrh	r3, [r3, #10]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	899b      	ldrh	r3, [r3, #12]
 8008aca:	fb03 f302 	mul.w	r3, r3, r2
 8008ace:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008ad0:	e019      	b.n	8008b06 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6979      	ldr	r1, [r7, #20]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fca3 	bl	8008422 <get_fat>
 8008adc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae4:	d101      	bne.n	8008aea <dir_sdi+0x90>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	e03c      	b.n	8008b64 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	2b01      	cmp	r3, #1
 8008aee:	d904      	bls.n	8008afa <dir_sdi+0xa0>
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	697a      	ldr	r2, [r7, #20]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d301      	bcc.n	8008afe <dir_sdi+0xa4>
 8008afa:	2302      	movs	r3, #2
 8008afc:	e032      	b.n	8008b64 <dir_sdi+0x10a>
			ofs -= csz;
 8008afe:	683a      	ldr	r2, [r7, #0]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008b06:	683a      	ldr	r2, [r7, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d2e1      	bcs.n	8008ad2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8008b0e:	6979      	ldr	r1, [r7, #20]
 8008b10:	6938      	ldr	r0, [r7, #16]
 8008b12:	f7ff fc67 	bl	80083e4 <clust2sect>
 8008b16:	4602      	mov	r2, r0
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <dir_sdi+0xd4>
 8008b2a:	2302      	movs	r3, #2
 8008b2c:	e01a      	b.n	8008b64 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	69da      	ldr	r2, [r3, #28]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	899b      	ldrh	r3, [r3, #12]
 8008b36:	4619      	mov	r1, r3
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8008b3e:	441a      	add	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	899b      	ldrh	r3, [r3, #12]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b56:	fb02 f200 	mul.w	r2, r2, r0
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	18ca      	adds	r2, r1, r3
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	695b      	ldr	r3, [r3, #20]
 8008b80:	3320      	adds	r3, #32
 8008b82:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	69db      	ldr	r3, [r3, #28]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <dir_next+0x28>
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b92:	d301      	bcc.n	8008b98 <dir_next+0x2c>
 8008b94:	2304      	movs	r3, #4
 8008b96:	e0bb      	b.n	8008d10 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	899b      	ldrh	r3, [r3, #12]
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8008ba4:	fb02 f201 	mul.w	r2, r2, r1
 8008ba8:	1a9b      	subs	r3, r3, r2
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 809d 	bne.w	8008cea <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	1c5a      	adds	r2, r3, #1
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10b      	bne.n	8008bda <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	095b      	lsrs	r3, r3, #5
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	8912      	ldrh	r2, [r2, #8]
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	f0c0 808d 	bcc.w	8008cea <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	61da      	str	r2, [r3, #28]
 8008bd6:	2304      	movs	r3, #4
 8008bd8:	e09a      	b.n	8008d10 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	899b      	ldrh	r3, [r3, #12]
 8008bde:	461a      	mov	r2, r3
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	8952      	ldrh	r2, [r2, #10]
 8008bea:	3a01      	subs	r2, #1
 8008bec:	4013      	ands	r3, r2
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d17b      	bne.n	8008cea <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	699b      	ldr	r3, [r3, #24]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7ff fc11 	bl	8008422 <get_fat>
 8008c00:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b01      	cmp	r3, #1
 8008c06:	d801      	bhi.n	8008c0c <dir_next+0xa0>
 8008c08:	2302      	movs	r3, #2
 8008c0a:	e081      	b.n	8008d10 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c12:	d101      	bne.n	8008c18 <dir_next+0xac>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e07b      	b.n	8008d10 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	69db      	ldr	r3, [r3, #28]
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d359      	bcc.n	8008cd6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d104      	bne.n	8008c32 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	61da      	str	r2, [r3, #28]
 8008c2e:	2304      	movs	r3, #4
 8008c30:	e06e      	b.n	8008d10 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008c32:	687a      	ldr	r2, [r7, #4]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	699b      	ldr	r3, [r3, #24]
 8008c38:	4619      	mov	r1, r3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	f7ff fe3d 	bl	80088ba <create_chain>
 8008c40:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <dir_next+0xe0>
 8008c48:	2307      	movs	r3, #7
 8008c4a:	e061      	b.n	8008d10 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <dir_next+0xea>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e05c      	b.n	8008d10 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c5c:	d101      	bne.n	8008c62 <dir_next+0xf6>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	e056      	b.n	8008d10 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008c62:	68f8      	ldr	r0, [r7, #12]
 8008c64:	f7ff fadc 	bl	8008220 <sync_window>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <dir_next+0x106>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	e04e      	b.n	8008d10 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	899b      	ldrh	r3, [r3, #12]
 8008c7c:	461a      	mov	r2, r3
 8008c7e:	2100      	movs	r1, #0
 8008c80:	f7ff f8d5 	bl	8007e2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008c84:	2300      	movs	r3, #0
 8008c86:	613b      	str	r3, [r7, #16]
 8008c88:	6979      	ldr	r1, [r7, #20]
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff fbaa 	bl	80083e4 <clust2sect>
 8008c90:	4602      	mov	r2, r0
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	635a      	str	r2, [r3, #52]	; 0x34
 8008c96:	e012      	b.n	8008cbe <dir_next+0x152>
						fs->wflag = 1;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008c9e:	68f8      	ldr	r0, [r7, #12]
 8008ca0:	f7ff fabe 	bl	8008220 <sync_window>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <dir_next+0x142>
 8008caa:	2301      	movs	r3, #1
 8008cac:	e030      	b.n	8008d10 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	613b      	str	r3, [r7, #16]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cb8:	1c5a      	adds	r2, r3, #1
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	895b      	ldrh	r3, [r3, #10]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d3e6      	bcc.n	8008c98 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	1ad2      	subs	r2, r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	697a      	ldr	r2, [r7, #20]
 8008cda:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008cdc:	6979      	ldr	r1, [r7, #20]
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f7ff fb80 	bl	80083e4 <clust2sect>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	68ba      	ldr	r2, [r7, #8]
 8008cee:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	899b      	ldrh	r3, [r3, #12]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	fbb3 f0f2 	udiv	r0, r3, r2
 8008d02:	fb02 f200 	mul.w	r2, r2, r0
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	18ca      	adds	r2, r1, r3
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008d28:	2100      	movs	r1, #0
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f7ff fe95 	bl	8008a5a <dir_sdi>
 8008d30:	4603      	mov	r3, r0
 8008d32:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008d34:	7dfb      	ldrb	r3, [r7, #23]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d12b      	bne.n	8008d92 <dir_alloc+0x7a>
		n = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	69db      	ldr	r3, [r3, #28]
 8008d42:	4619      	mov	r1, r3
 8008d44:	68f8      	ldr	r0, [r7, #12]
 8008d46:	f7ff faaf 	bl	80082a8 <move_window>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008d4e:	7dfb      	ldrb	r3, [r7, #23]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d11d      	bne.n	8008d90 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	781b      	ldrb	r3, [r3, #0]
 8008d5a:	2be5      	cmp	r3, #229	; 0xe5
 8008d5c:	d004      	beq.n	8008d68 <dir_alloc+0x50>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6a1b      	ldr	r3, [r3, #32]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d107      	bne.n	8008d78 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	613b      	str	r3, [r7, #16]
 8008d6e:	693a      	ldr	r2, [r7, #16]
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d102      	bne.n	8008d7c <dir_alloc+0x64>
 8008d76:	e00c      	b.n	8008d92 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008d78:	2300      	movs	r3, #0
 8008d7a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f7ff fef4 	bl	8008b6c <dir_next>
 8008d84:	4603      	mov	r3, r0
 8008d86:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008d88:	7dfb      	ldrb	r3, [r7, #23]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d0d7      	beq.n	8008d3e <dir_alloc+0x26>
 8008d8e:	e000      	b.n	8008d92 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008d90:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008d92:	7dfb      	ldrb	r3, [r7, #23]
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d101      	bne.n	8008d9c <dir_alloc+0x84>
 8008d98:	2307      	movs	r3, #7
 8008d9a:	75fb      	strb	r3, [r7, #23]
	return res;
 8008d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3718      	adds	r7, #24
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}

08008da6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008da6:	b580      	push	{r7, lr}
 8008da8:	b084      	sub	sp, #16
 8008daa:	af00      	add	r7, sp, #0
 8008dac:	6078      	str	r0, [r7, #4]
 8008dae:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	331a      	adds	r3, #26
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fe ff97 	bl	8007ce8 <ld_word>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d109      	bne.n	8008dda <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	3314      	adds	r3, #20
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fe ff8c 	bl	8007ce8 <ld_word>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	68fa      	ldr	r2, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008dda:	68fb      	ldr	r3, [r7, #12]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	331a      	adds	r3, #26
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	b292      	uxth	r2, r2
 8008df8:	4611      	mov	r1, r2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe ffaf 	bl	8007d5e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b03      	cmp	r3, #3
 8008e06:	d109      	bne.n	8008e1c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	f103 0214 	add.w	r2, r3, #20
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	0c1b      	lsrs	r3, r3, #16
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	4619      	mov	r1, r3
 8008e16:	4610      	mov	r0, r2
 8008e18:	f7fe ffa1 	bl	8007d5e <st_word>
	}
}
 8008e1c:	bf00      	nop
 8008e1e:	3710      	adds	r7, #16
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008e32:	2100      	movs	r1, #0
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7ff fe10 	bl	8008a5a <dir_sdi>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008e3e:	7dfb      	ldrb	r3, [r7, #23]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d001      	beq.n	8008e48 <dir_find+0x24>
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	e03e      	b.n	8008ec6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	69db      	ldr	r3, [r3, #28]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	6938      	ldr	r0, [r7, #16]
 8008e50:	f7ff fa2a 	bl	80082a8 <move_window>
 8008e54:	4603      	mov	r3, r0
 8008e56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d12f      	bne.n	8008ebe <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d102      	bne.n	8008e72 <dir_find+0x4e>
 8008e6c:	2304      	movs	r3, #4
 8008e6e:	75fb      	strb	r3, [r7, #23]
 8008e70:	e028      	b.n	8008ec4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	330b      	adds	r3, #11
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e7e:	b2da      	uxtb	r2, r3
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	330b      	adds	r3, #11
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	f003 0308 	and.w	r3, r3, #8
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <dir_find+0x86>
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6a18      	ldr	r0, [r3, #32]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	3324      	adds	r3, #36	; 0x24
 8008e9c:	220b      	movs	r2, #11
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	f7fe ffdf 	bl	8007e62 <mem_cmp>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00b      	beq.n	8008ec2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f7ff fe5d 	bl	8008b6c <dir_next>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d0c5      	beq.n	8008e48 <dir_find+0x24>
 8008ebc:	e002      	b.n	8008ec4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8008ebe:	bf00      	nop
 8008ec0:	e000      	b.n	8008ec4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8008ec2:	bf00      	nop

	return res;
 8008ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3718      	adds	r7, #24
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	af00      	add	r7, sp, #0
 8008ed4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008edc:	2101      	movs	r1, #1
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7ff ff1a 	bl	8008d18 <dir_alloc>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008ee8:	7bfb      	ldrb	r3, [r7, #15]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d11c      	bne.n	8008f28 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	69db      	ldr	r3, [r3, #28]
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	68b8      	ldr	r0, [r7, #8]
 8008ef6:	f7ff f9d7 	bl	80082a8 <move_window>
 8008efa:	4603      	mov	r3, r0
 8008efc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008efe:	7bfb      	ldrb	r3, [r7, #15]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d111      	bne.n	8008f28 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a1b      	ldr	r3, [r3, #32]
 8008f08:	2220      	movs	r2, #32
 8008f0a:	2100      	movs	r1, #0
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7fe ff8e 	bl	8007e2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a18      	ldr	r0, [r3, #32]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	3324      	adds	r3, #36	; 0x24
 8008f1a:	220b      	movs	r2, #11
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f7fe ff65 	bl	8007dec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2201      	movs	r2, #1
 8008f26:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
	...

08008f34 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	60fb      	str	r3, [r7, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3324      	adds	r3, #36	; 0x24
 8008f48:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008f4a:	220b      	movs	r2, #11
 8008f4c:	2120      	movs	r1, #32
 8008f4e:	68b8      	ldr	r0, [r7, #8]
 8008f50:	f7fe ff6d 	bl	8007e2e <mem_set>
	si = i = 0; ni = 8;
 8008f54:	2300      	movs	r3, #0
 8008f56:	613b      	str	r3, [r7, #16]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	2308      	movs	r3, #8
 8008f5e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	1c5a      	adds	r2, r3, #1
 8008f64:	617a      	str	r2, [r7, #20]
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4413      	add	r3, r2
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008f6e:	7ffb      	ldrb	r3, [r7, #31]
 8008f70:	2b20      	cmp	r3, #32
 8008f72:	d94e      	bls.n	8009012 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008f74:	7ffb      	ldrb	r3, [r7, #31]
 8008f76:	2b2f      	cmp	r3, #47	; 0x2f
 8008f78:	d006      	beq.n	8008f88 <create_name+0x54>
 8008f7a:	7ffb      	ldrb	r3, [r7, #31]
 8008f7c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f7e:	d110      	bne.n	8008fa2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008f80:	e002      	b.n	8008f88 <create_name+0x54>
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	3301      	adds	r3, #1
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	2b2f      	cmp	r3, #47	; 0x2f
 8008f92:	d0f6      	beq.n	8008f82 <create_name+0x4e>
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	4413      	add	r3, r2
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b5c      	cmp	r3, #92	; 0x5c
 8008f9e:	d0f0      	beq.n	8008f82 <create_name+0x4e>
			break;
 8008fa0:	e038      	b.n	8009014 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8008fa2:	7ffb      	ldrb	r3, [r7, #31]
 8008fa4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fa6:	d003      	beq.n	8008fb0 <create_name+0x7c>
 8008fa8:	693a      	ldr	r2, [r7, #16]
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d30c      	bcc.n	8008fca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	2b0b      	cmp	r3, #11
 8008fb4:	d002      	beq.n	8008fbc <create_name+0x88>
 8008fb6:	7ffb      	ldrb	r3, [r7, #31]
 8008fb8:	2b2e      	cmp	r3, #46	; 0x2e
 8008fba:	d001      	beq.n	8008fc0 <create_name+0x8c>
 8008fbc:	2306      	movs	r3, #6
 8008fbe:	e044      	b.n	800904a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	230b      	movs	r3, #11
 8008fc6:	61bb      	str	r3, [r7, #24]
			continue;
 8008fc8:	e022      	b.n	8009010 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008fca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	da04      	bge.n	8008fdc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8008fd2:	7ffb      	ldrb	r3, [r7, #31]
 8008fd4:	3b80      	subs	r3, #128	; 0x80
 8008fd6:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <create_name+0x120>)
 8008fd8:	5cd3      	ldrb	r3, [r2, r3]
 8008fda:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008fdc:	7ffb      	ldrb	r3, [r7, #31]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	481d      	ldr	r0, [pc, #116]	; (8009058 <create_name+0x124>)
 8008fe2:	f7fe ff65 	bl	8007eb0 <chk_chr>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <create_name+0xbc>
 8008fec:	2306      	movs	r3, #6
 8008fee:	e02c      	b.n	800904a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8008ff0:	7ffb      	ldrb	r3, [r7, #31]
 8008ff2:	2b60      	cmp	r3, #96	; 0x60
 8008ff4:	d905      	bls.n	8009002 <create_name+0xce>
 8008ff6:	7ffb      	ldrb	r3, [r7, #31]
 8008ff8:	2b7a      	cmp	r3, #122	; 0x7a
 8008ffa:	d802      	bhi.n	8009002 <create_name+0xce>
 8008ffc:	7ffb      	ldrb	r3, [r7, #31]
 8008ffe:	3b20      	subs	r3, #32
 8009000:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	613a      	str	r2, [r7, #16]
 8009008:	68ba      	ldr	r2, [r7, #8]
 800900a:	4413      	add	r3, r2
 800900c:	7ffa      	ldrb	r2, [r7, #31]
 800900e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009010:	e7a6      	b.n	8008f60 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009012:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	697b      	ldr	r3, [r7, #20]
 8009018:	441a      	add	r2, r3
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <create_name+0xf4>
 8009024:	2306      	movs	r3, #6
 8009026:	e010      	b.n	800904a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	781b      	ldrb	r3, [r3, #0]
 800902c:	2be5      	cmp	r3, #229	; 0xe5
 800902e:	d102      	bne.n	8009036 <create_name+0x102>
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	2205      	movs	r2, #5
 8009034:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009036:	7ffb      	ldrb	r3, [r7, #31]
 8009038:	2b20      	cmp	r3, #32
 800903a:	d801      	bhi.n	8009040 <create_name+0x10c>
 800903c:	2204      	movs	r2, #4
 800903e:	e000      	b.n	8009042 <create_name+0x10e>
 8009040:	2200      	movs	r2, #0
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	330b      	adds	r3, #11
 8009046:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009048:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800904a:	4618      	mov	r0, r3
 800904c:	3720      	adds	r7, #32
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	0800d878 	.word	0x0800d878
 8009058:	0800d7f8 	.word	0x0800d7f8

0800905c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009070:	e002      	b.n	8009078 <follow_path+0x1c>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	3301      	adds	r3, #1
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	2b2f      	cmp	r3, #47	; 0x2f
 800907e:	d0f8      	beq.n	8009072 <follow_path+0x16>
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b5c      	cmp	r3, #92	; 0x5c
 8009086:	d0f4      	beq.n	8009072 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	2200      	movs	r2, #0
 800908c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	2b1f      	cmp	r3, #31
 8009094:	d80a      	bhi.n	80090ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2280      	movs	r2, #128	; 0x80
 800909a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800909e:	2100      	movs	r1, #0
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fcda 	bl	8008a5a <dir_sdi>
 80090a6:	4603      	mov	r3, r0
 80090a8:	75fb      	strb	r3, [r7, #23]
 80090aa:	e048      	b.n	800913e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80090ac:	463b      	mov	r3, r7
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f7ff ff3f 	bl	8008f34 <create_name>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80090ba:	7dfb      	ldrb	r3, [r7, #23]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d139      	bne.n	8009134 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80090c0:	6878      	ldr	r0, [r7, #4]
 80090c2:	f7ff feaf 	bl	8008e24 <dir_find>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80090d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00a      	beq.n	80090ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80090d8:	7dfb      	ldrb	r3, [r7, #23]
 80090da:	2b04      	cmp	r3, #4
 80090dc:	d12c      	bne.n	8009138 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80090de:	7afb      	ldrb	r3, [r7, #11]
 80090e0:	f003 0304 	and.w	r3, r3, #4
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d127      	bne.n	8009138 <follow_path+0xdc>
 80090e8:	2305      	movs	r3, #5
 80090ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80090ec:	e024      	b.n	8009138 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d121      	bne.n	800913c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	799b      	ldrb	r3, [r3, #6]
 80090fc:	f003 0310 	and.w	r3, r3, #16
 8009100:	2b00      	cmp	r3, #0
 8009102:	d102      	bne.n	800910a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009104:	2305      	movs	r3, #5
 8009106:	75fb      	strb	r3, [r7, #23]
 8009108:	e019      	b.n	800913e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	695b      	ldr	r3, [r3, #20]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	8992      	ldrh	r2, [r2, #12]
 8009118:	fbb3 f0f2 	udiv	r0, r3, r2
 800911c:	fb02 f200 	mul.w	r2, r2, r0
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	440b      	add	r3, r1
 8009124:	4619      	mov	r1, r3
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f7ff fe3d 	bl	8008da6 <ld_clust>
 800912c:	4602      	mov	r2, r0
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009132:	e7bb      	b.n	80090ac <follow_path+0x50>
			if (res != FR_OK) break;
 8009134:	bf00      	nop
 8009136:	e002      	b.n	800913e <follow_path+0xe2>
				break;
 8009138:	bf00      	nop
 800913a:	e000      	b.n	800913e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800913c:	bf00      	nop
			}
		}
	}

	return res;
 800913e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009150:	f04f 33ff 	mov.w	r3, #4294967295
 8009154:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d031      	beq.n	80091c2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	e002      	b.n	800916c <get_ldnumber+0x24>
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	3301      	adds	r3, #1
 800916a:	617b      	str	r3, [r7, #20]
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	2b20      	cmp	r3, #32
 8009172:	d903      	bls.n	800917c <get_ldnumber+0x34>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	2b3a      	cmp	r3, #58	; 0x3a
 800917a:	d1f4      	bne.n	8009166 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	2b3a      	cmp	r3, #58	; 0x3a
 8009182:	d11c      	bne.n	80091be <get_ldnumber+0x76>
			tp = *path;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	1c5a      	adds	r2, r3, #1
 800918e:	60fa      	str	r2, [r7, #12]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	3b30      	subs	r3, #48	; 0x30
 8009194:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	2b09      	cmp	r3, #9
 800919a:	d80e      	bhi.n	80091ba <get_ldnumber+0x72>
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d10a      	bne.n	80091ba <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d107      	bne.n	80091ba <get_ldnumber+0x72>
					vol = (int)i;
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	3301      	adds	r3, #1
 80091b2:	617b      	str	r3, [r7, #20]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	e002      	b.n	80091c4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80091be:	2300      	movs	r3, #0
 80091c0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80091c2:	693b      	ldr	r3, [r7, #16]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	371c      	adds	r7, #28
 80091c8:	46bd      	mov	sp, r7
 80091ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ce:	4770      	bx	lr

080091d0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	70da      	strb	r2, [r3, #3]
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f04f 32ff 	mov.w	r2, #4294967295
 80091e6:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f7ff f85c 	bl	80082a8 <move_window>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <check_fs+0x2a>
 80091f6:	2304      	movs	r3, #4
 80091f8:	e038      	b.n	800926c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	3338      	adds	r3, #56	; 0x38
 80091fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009202:	4618      	mov	r0, r3
 8009204:	f7fe fd70 	bl	8007ce8 <ld_word>
 8009208:	4603      	mov	r3, r0
 800920a:	461a      	mov	r2, r3
 800920c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009210:	429a      	cmp	r2, r3
 8009212:	d001      	beq.n	8009218 <check_fs+0x48>
 8009214:	2303      	movs	r3, #3
 8009216:	e029      	b.n	800926c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800921e:	2be9      	cmp	r3, #233	; 0xe9
 8009220:	d009      	beq.n	8009236 <check_fs+0x66>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009228:	2beb      	cmp	r3, #235	; 0xeb
 800922a:	d11e      	bne.n	800926a <check_fs+0x9a>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009232:	2b90      	cmp	r3, #144	; 0x90
 8009234:	d119      	bne.n	800926a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3338      	adds	r3, #56	; 0x38
 800923a:	3336      	adds	r3, #54	; 0x36
 800923c:	4618      	mov	r0, r3
 800923e:	f7fe fd6b 	bl	8007d18 <ld_dword>
 8009242:	4603      	mov	r3, r0
 8009244:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009248:	4a0a      	ldr	r2, [pc, #40]	; (8009274 <check_fs+0xa4>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d101      	bne.n	8009252 <check_fs+0x82>
 800924e:	2300      	movs	r3, #0
 8009250:	e00c      	b.n	800926c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	3338      	adds	r3, #56	; 0x38
 8009256:	3352      	adds	r3, #82	; 0x52
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe fd5d 	bl	8007d18 <ld_dword>
 800925e:	4602      	mov	r2, r0
 8009260:	4b05      	ldr	r3, [pc, #20]	; (8009278 <check_fs+0xa8>)
 8009262:	429a      	cmp	r2, r3
 8009264:	d101      	bne.n	800926a <check_fs+0x9a>
 8009266:	2300      	movs	r3, #0
 8009268:	e000      	b.n	800926c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800926a:	2302      	movs	r3, #2
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	00544146 	.word	0x00544146
 8009278:	33544146 	.word	0x33544146

0800927c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b096      	sub	sp, #88	; 0x58
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2200      	movs	r2, #0
 800928e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009290:	68f8      	ldr	r0, [r7, #12]
 8009292:	f7ff ff59 	bl	8009148 <get_ldnumber>
 8009296:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800929a:	2b00      	cmp	r3, #0
 800929c:	da01      	bge.n	80092a2 <find_volume+0x26>
 800929e:	230b      	movs	r3, #11
 80092a0:	e26c      	b.n	800977c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80092a2:	4aa4      	ldr	r2, [pc, #656]	; (8009534 <find_volume+0x2b8>)
 80092a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092aa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80092ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <find_volume+0x3a>
 80092b2:	230c      	movs	r3, #12
 80092b4:	e262      	b.n	800977c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80092b6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092b8:	f7fe fe15 	bl	8007ee6 <lock_fs>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d101      	bne.n	80092c6 <find_volume+0x4a>
 80092c2:	230f      	movs	r3, #15
 80092c4:	e25a      	b.n	800977c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092ca:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80092cc:	79fb      	ldrb	r3, [r7, #7]
 80092ce:	f023 0301 	bic.w	r3, r3, #1
 80092d2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80092d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d6:	781b      	ldrb	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01a      	beq.n	8009312 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	785b      	ldrb	r3, [r3, #1]
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7fe fc63 	bl	8007bac <disk_status>
 80092e6:	4603      	mov	r3, r0
 80092e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80092ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d10c      	bne.n	8009312 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d007      	beq.n	800930e <find_volume+0x92>
 80092fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009302:	f003 0304 	and.w	r3, r3, #4
 8009306:	2b00      	cmp	r3, #0
 8009308:	d001      	beq.n	800930e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800930a:	230a      	movs	r3, #10
 800930c:	e236      	b.n	800977c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800930e:	2300      	movs	r3, #0
 8009310:	e234      	b.n	800977c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	2200      	movs	r2, #0
 8009316:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800931a:	b2da      	uxtb	r2, r3
 800931c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009322:	785b      	ldrb	r3, [r3, #1]
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe fc5b 	bl	8007be0 <disk_initialize>
 800932a:	4603      	mov	r3, r0
 800932c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8009330:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800933c:	2303      	movs	r3, #3
 800933e:	e21d      	b.n	800977c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <find_volume+0xda>
 8009346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800934a:	f003 0304 	and.w	r3, r3, #4
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8009352:	230a      	movs	r3, #10
 8009354:	e212      	b.n	800977c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8009356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009358:	7858      	ldrb	r0, [r3, #1]
 800935a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935c:	330c      	adds	r3, #12
 800935e:	461a      	mov	r2, r3
 8009360:	2102      	movs	r1, #2
 8009362:	f7fe fca3 	bl	8007cac <disk_ioctl>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d001      	beq.n	8009370 <find_volume+0xf4>
 800936c:	2301      	movs	r3, #1
 800936e:	e205      	b.n	800977c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8009370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009372:	899b      	ldrh	r3, [r3, #12]
 8009374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009378:	d80d      	bhi.n	8009396 <find_volume+0x11a>
 800937a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800937c:	899b      	ldrh	r3, [r3, #12]
 800937e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009382:	d308      	bcc.n	8009396 <find_volume+0x11a>
 8009384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009386:	899b      	ldrh	r3, [r3, #12]
 8009388:	461a      	mov	r2, r3
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	899b      	ldrh	r3, [r3, #12]
 800938e:	3b01      	subs	r3, #1
 8009390:	4013      	ands	r3, r2
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <find_volume+0x11e>
 8009396:	2301      	movs	r3, #1
 8009398:	e1f0      	b.n	800977c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800939e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80093a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80093a2:	f7ff ff15 	bl	80091d0 <check_fs>
 80093a6:	4603      	mov	r3, r0
 80093a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80093ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d14b      	bne.n	800944c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80093b4:	2300      	movs	r3, #0
 80093b6:	643b      	str	r3, [r7, #64]	; 0x40
 80093b8:	e01f      	b.n	80093fa <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80093ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093bc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80093c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c2:	011b      	lsls	r3, r3, #4
 80093c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80093c8:	4413      	add	r3, r2
 80093ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80093cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093ce:	3304      	adds	r3, #4
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d006      	beq.n	80093e4 <find_volume+0x168>
 80093d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093d8:	3308      	adds	r3, #8
 80093da:	4618      	mov	r0, r3
 80093dc:	f7fe fc9c 	bl	8007d18 <ld_dword>
 80093e0:	4602      	mov	r2, r0
 80093e2:	e000      	b.n	80093e6 <find_volume+0x16a>
 80093e4:	2200      	movs	r2, #0
 80093e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80093ee:	440b      	add	r3, r1
 80093f0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80093f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093f6:	3301      	adds	r3, #1
 80093f8:	643b      	str	r3, [r7, #64]	; 0x40
 80093fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093fc:	2b03      	cmp	r3, #3
 80093fe:	d9dc      	bls.n	80093ba <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009400:	2300      	movs	r3, #0
 8009402:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009404:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009406:	2b00      	cmp	r3, #0
 8009408:	d002      	beq.n	8009410 <find_volume+0x194>
 800940a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800940c:	3b01      	subs	r3, #1
 800940e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8009418:	4413      	add	r3, r2
 800941a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800941e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009422:	2b00      	cmp	r3, #0
 8009424:	d005      	beq.n	8009432 <find_volume+0x1b6>
 8009426:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009428:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800942a:	f7ff fed1 	bl	80091d0 <check_fs>
 800942e:	4603      	mov	r3, r0
 8009430:	e000      	b.n	8009434 <find_volume+0x1b8>
 8009432:	2303      	movs	r3, #3
 8009434:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800943c:	2b01      	cmp	r3, #1
 800943e:	d905      	bls.n	800944c <find_volume+0x1d0>
 8009440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009442:	3301      	adds	r3, #1
 8009444:	643b      	str	r3, [r7, #64]	; 0x40
 8009446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009448:	2b03      	cmp	r3, #3
 800944a:	d9e1      	bls.n	8009410 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800944c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009450:	2b04      	cmp	r3, #4
 8009452:	d101      	bne.n	8009458 <find_volume+0x1dc>
 8009454:	2301      	movs	r3, #1
 8009456:	e191      	b.n	800977c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009458:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800945c:	2b01      	cmp	r3, #1
 800945e:	d901      	bls.n	8009464 <find_volume+0x1e8>
 8009460:	230d      	movs	r3, #13
 8009462:	e18b      	b.n	800977c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009466:	3338      	adds	r3, #56	; 0x38
 8009468:	330b      	adds	r3, #11
 800946a:	4618      	mov	r0, r3
 800946c:	f7fe fc3c 	bl	8007ce8 <ld_word>
 8009470:	4603      	mov	r3, r0
 8009472:	461a      	mov	r2, r3
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	899b      	ldrh	r3, [r3, #12]
 8009478:	429a      	cmp	r2, r3
 800947a:	d001      	beq.n	8009480 <find_volume+0x204>
 800947c:	230d      	movs	r3, #13
 800947e:	e17d      	b.n	800977c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8009480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009482:	3338      	adds	r3, #56	; 0x38
 8009484:	3316      	adds	r3, #22
 8009486:	4618      	mov	r0, r3
 8009488:	f7fe fc2e 	bl	8007ce8 <ld_word>
 800948c:	4603      	mov	r3, r0
 800948e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8009490:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009492:	2b00      	cmp	r3, #0
 8009494:	d106      	bne.n	80094a4 <find_volume+0x228>
 8009496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009498:	3338      	adds	r3, #56	; 0x38
 800949a:	3324      	adds	r3, #36	; 0x24
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fc3b 	bl	8007d18 <ld_dword>
 80094a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094a8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80094b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80094b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b6:	789b      	ldrb	r3, [r3, #2]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d005      	beq.n	80094c8 <find_volume+0x24c>
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	789b      	ldrb	r3, [r3, #2]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d001      	beq.n	80094c8 <find_volume+0x24c>
 80094c4:	230d      	movs	r3, #13
 80094c6:	e159      	b.n	800977c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	789b      	ldrb	r3, [r3, #2]
 80094cc:	461a      	mov	r2, r3
 80094ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094d0:	fb02 f303 	mul.w	r3, r2, r3
 80094d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094dc:	b29a      	uxth	r2, r3
 80094de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80094e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e4:	895b      	ldrh	r3, [r3, #10]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d008      	beq.n	80094fc <find_volume+0x280>
 80094ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ec:	895b      	ldrh	r3, [r3, #10]
 80094ee:	461a      	mov	r2, r3
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	895b      	ldrh	r3, [r3, #10]
 80094f4:	3b01      	subs	r3, #1
 80094f6:	4013      	ands	r3, r2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <find_volume+0x284>
 80094fc:	230d      	movs	r3, #13
 80094fe:	e13d      	b.n	800977c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8009500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009502:	3338      	adds	r3, #56	; 0x38
 8009504:	3311      	adds	r3, #17
 8009506:	4618      	mov	r0, r3
 8009508:	f7fe fbee 	bl	8007ce8 <ld_word>
 800950c:	4603      	mov	r3, r0
 800950e:	461a      	mov	r2, r3
 8009510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009512:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009516:	891b      	ldrh	r3, [r3, #8]
 8009518:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800951a:	8992      	ldrh	r2, [r2, #12]
 800951c:	0952      	lsrs	r2, r2, #5
 800951e:	b292      	uxth	r2, r2
 8009520:	fbb3 f1f2 	udiv	r1, r3, r2
 8009524:	fb02 f201 	mul.w	r2, r2, r1
 8009528:	1a9b      	subs	r3, r3, r2
 800952a:	b29b      	uxth	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d003      	beq.n	8009538 <find_volume+0x2bc>
 8009530:	230d      	movs	r3, #13
 8009532:	e123      	b.n	800977c <find_volume+0x500>
 8009534:	20002498 	.word	0x20002498

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953a:	3338      	adds	r3, #56	; 0x38
 800953c:	3313      	adds	r3, #19
 800953e:	4618      	mov	r0, r3
 8009540:	f7fe fbd2 	bl	8007ce8 <ld_word>
 8009544:	4603      	mov	r3, r0
 8009546:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800954a:	2b00      	cmp	r3, #0
 800954c:	d106      	bne.n	800955c <find_volume+0x2e0>
 800954e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009550:	3338      	adds	r3, #56	; 0x38
 8009552:	3320      	adds	r3, #32
 8009554:	4618      	mov	r0, r3
 8009556:	f7fe fbdf 	bl	8007d18 <ld_dword>
 800955a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800955c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800955e:	3338      	adds	r3, #56	; 0x38
 8009560:	330e      	adds	r3, #14
 8009562:	4618      	mov	r0, r3
 8009564:	f7fe fbc0 	bl	8007ce8 <ld_word>
 8009568:	4603      	mov	r3, r0
 800956a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800956c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <find_volume+0x2fa>
 8009572:	230d      	movs	r3, #13
 8009574:	e102      	b.n	800977c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009576:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800957a:	4413      	add	r3, r2
 800957c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800957e:	8911      	ldrh	r1, [r2, #8]
 8009580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009582:	8992      	ldrh	r2, [r2, #12]
 8009584:	0952      	lsrs	r2, r2, #5
 8009586:	b292      	uxth	r2, r2
 8009588:	fbb1 f2f2 	udiv	r2, r1, r2
 800958c:	b292      	uxth	r2, r2
 800958e:	4413      	add	r3, r2
 8009590:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8009592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	429a      	cmp	r2, r3
 8009598:	d201      	bcs.n	800959e <find_volume+0x322>
 800959a:	230d      	movs	r3, #13
 800959c:	e0ee      	b.n	800977c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800959e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095a6:	8952      	ldrh	r2, [r2, #10]
 80095a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80095ac:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <find_volume+0x33c>
 80095b4:	230d      	movs	r3, #13
 80095b6:	e0e1      	b.n	800977c <find_volume+0x500>
		fmt = FS_FAT32;
 80095b8:	2303      	movs	r3, #3
 80095ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80095be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d802      	bhi.n	80095ce <find_volume+0x352>
 80095c8:	2302      	movs	r3, #2
 80095ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d802      	bhi.n	80095de <find_volume+0x362>
 80095d8:	2301      	movs	r3, #1
 80095da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80095de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e0:	1c9a      	adds	r2, r3, #2
 80095e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80095e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095ea:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80095ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80095ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095f0:	441a      	add	r2, r3
 80095f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095f4:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80095f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fa:	441a      	add	r2, r3
 80095fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095fe:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8009600:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009604:	2b03      	cmp	r3, #3
 8009606:	d11e      	bne.n	8009646 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960a:	3338      	adds	r3, #56	; 0x38
 800960c:	332a      	adds	r3, #42	; 0x2a
 800960e:	4618      	mov	r0, r3
 8009610:	f7fe fb6a 	bl	8007ce8 <ld_word>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <find_volume+0x3a2>
 800961a:	230d      	movs	r3, #13
 800961c:	e0ae      	b.n	800977c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800961e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009620:	891b      	ldrh	r3, [r3, #8]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d001      	beq.n	800962a <find_volume+0x3ae>
 8009626:	230d      	movs	r3, #13
 8009628:	e0a8      	b.n	800977c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800962a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800962c:	3338      	adds	r3, #56	; 0x38
 800962e:	332c      	adds	r3, #44	; 0x2c
 8009630:	4618      	mov	r0, r3
 8009632:	f7fe fb71 	bl	8007d18 <ld_dword>
 8009636:	4602      	mov	r2, r0
 8009638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800963c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	647b      	str	r3, [r7, #68]	; 0x44
 8009644:	e01f      	b.n	8009686 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8009646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009648:	891b      	ldrh	r3, [r3, #8]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d101      	bne.n	8009652 <find_volume+0x3d6>
 800964e:	230d      	movs	r3, #13
 8009650:	e094      	b.n	800977c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009658:	441a      	add	r2, r3
 800965a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800965e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009662:	2b02      	cmp	r3, #2
 8009664:	d103      	bne.n	800966e <find_volume+0x3f2>
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	005b      	lsls	r3, r3, #1
 800966c:	e00a      	b.n	8009684 <find_volume+0x408>
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	69da      	ldr	r2, [r3, #28]
 8009672:	4613      	mov	r3, r2
 8009674:	005b      	lsls	r3, r3, #1
 8009676:	4413      	add	r3, r2
 8009678:	085a      	lsrs	r2, r3, #1
 800967a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800967c:	69db      	ldr	r3, [r3, #28]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009684:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009688:	6a1a      	ldr	r2, [r3, #32]
 800968a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800968c:	899b      	ldrh	r3, [r3, #12]
 800968e:	4619      	mov	r1, r3
 8009690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009692:	440b      	add	r3, r1
 8009694:	3b01      	subs	r3, #1
 8009696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009698:	8989      	ldrh	r1, [r1, #12]
 800969a:	fbb3 f3f1 	udiv	r3, r3, r1
 800969e:	429a      	cmp	r2, r3
 80096a0:	d201      	bcs.n	80096a6 <find_volume+0x42a>
 80096a2:	230d      	movs	r3, #13
 80096a4:	e06a      	b.n	800977c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80096a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096a8:	f04f 32ff 	mov.w	r2, #4294967295
 80096ac:	619a      	str	r2, [r3, #24]
 80096ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b0:	699a      	ldr	r2, [r3, #24]
 80096b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80096b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096b8:	2280      	movs	r2, #128	; 0x80
 80096ba:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80096bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80096c0:	2b03      	cmp	r3, #3
 80096c2:	d149      	bne.n	8009758 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80096c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096c6:	3338      	adds	r3, #56	; 0x38
 80096c8:	3330      	adds	r3, #48	; 0x30
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fb0c 	bl	8007ce8 <ld_word>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d140      	bne.n	8009758 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80096d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d8:	3301      	adds	r3, #1
 80096da:	4619      	mov	r1, r3
 80096dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80096de:	f7fe fde3 	bl	80082a8 <move_window>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d137      	bne.n	8009758 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 80096e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ea:	2200      	movs	r2, #0
 80096ec:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	3338      	adds	r3, #56	; 0x38
 80096f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7fe faf6 	bl	8007ce8 <ld_word>
 80096fc:	4603      	mov	r3, r0
 80096fe:	461a      	mov	r2, r3
 8009700:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8009704:	429a      	cmp	r2, r3
 8009706:	d127      	bne.n	8009758 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800970a:	3338      	adds	r3, #56	; 0x38
 800970c:	4618      	mov	r0, r3
 800970e:	f7fe fb03 	bl	8007d18 <ld_dword>
 8009712:	4602      	mov	r2, r0
 8009714:	4b1b      	ldr	r3, [pc, #108]	; (8009784 <find_volume+0x508>)
 8009716:	429a      	cmp	r2, r3
 8009718:	d11e      	bne.n	8009758 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800971a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800971c:	3338      	adds	r3, #56	; 0x38
 800971e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009722:	4618      	mov	r0, r3
 8009724:	f7fe faf8 	bl	8007d18 <ld_dword>
 8009728:	4602      	mov	r2, r0
 800972a:	4b17      	ldr	r3, [pc, #92]	; (8009788 <find_volume+0x50c>)
 800972c:	429a      	cmp	r2, r3
 800972e:	d113      	bne.n	8009758 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8009730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009732:	3338      	adds	r3, #56	; 0x38
 8009734:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8009738:	4618      	mov	r0, r3
 800973a:	f7fe faed 	bl	8007d18 <ld_dword>
 800973e:	4602      	mov	r2, r0
 8009740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009742:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8009744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009746:	3338      	adds	r3, #56	; 0x38
 8009748:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fae3 	bl	8007d18 <ld_dword>
 8009752:	4602      	mov	r2, r0
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800975e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8009760:	4b0a      	ldr	r3, [pc, #40]	; (800978c <find_volume+0x510>)
 8009762:	881b      	ldrh	r3, [r3, #0]
 8009764:	3301      	adds	r3, #1
 8009766:	b29a      	uxth	r2, r3
 8009768:	4b08      	ldr	r3, [pc, #32]	; (800978c <find_volume+0x510>)
 800976a:	801a      	strh	r2, [r3, #0]
 800976c:	4b07      	ldr	r3, [pc, #28]	; (800978c <find_volume+0x510>)
 800976e:	881a      	ldrh	r2, [r3, #0]
 8009770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009772:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8009774:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009776:	f7fe fd2f 	bl	80081d8 <clear_lock>
#endif
	return FR_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3758      	adds	r7, #88	; 0x58
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	41615252 	.word	0x41615252
 8009788:	61417272 	.word	0x61417272
 800978c:	2000249c 	.word	0x2000249c

08009790 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800979a:	2309      	movs	r3, #9
 800979c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d02e      	beq.n	8009802 <validate+0x72>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d02a      	beq.n	8009802 <validate+0x72>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d025      	beq.n	8009802 <validate+0x72>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	889a      	ldrh	r2, [r3, #4]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	88db      	ldrh	r3, [r3, #6]
 80097c0:	429a      	cmp	r2, r3
 80097c2:	d11e      	bne.n	8009802 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4618      	mov	r0, r3
 80097ca:	f7fe fb8c 	bl	8007ee6 <lock_fs>
 80097ce:	4603      	mov	r3, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d014      	beq.n	80097fe <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	785b      	ldrb	r3, [r3, #1]
 80097da:	4618      	mov	r0, r3
 80097dc:	f7fe f9e6 	bl	8007bac <disk_status>
 80097e0:	4603      	mov	r3, r0
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d102      	bne.n	80097f0 <validate+0x60>
				res = FR_OK;
 80097ea:	2300      	movs	r3, #0
 80097ec:	73fb      	strb	r3, [r7, #15]
 80097ee:	e008      	b.n	8009802 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f7fe fb8b 	bl	8007f12 <unlock_fs>
 80097fc:	e001      	b.n	8009802 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80097fe:	230f      	movs	r3, #15
 8009800:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8009802:	7bfb      	ldrb	r3, [r7, #15]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d102      	bne.n	800980e <validate+0x7e>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	e000      	b.n	8009810 <validate+0x80>
 800980e:	2300      	movs	r3, #0
 8009810:	683a      	ldr	r2, [r7, #0]
 8009812:	6013      	str	r3, [r2, #0]
	return res;
 8009814:	7bfb      	ldrb	r3, [r7, #15]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
	...

08009820 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b088      	sub	sp, #32
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4613      	mov	r3, r2
 800982c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8009832:	f107 0310 	add.w	r3, r7, #16
 8009836:	4618      	mov	r0, r3
 8009838:	f7ff fc86 	bl	8009148 <get_ldnumber>
 800983c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	2b00      	cmp	r3, #0
 8009842:	da01      	bge.n	8009848 <f_mount+0x28>
 8009844:	230b      	movs	r3, #11
 8009846:	e048      	b.n	80098da <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009848:	4a26      	ldr	r2, [pc, #152]	; (80098e4 <f_mount+0xc4>)
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009850:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8009852:	69bb      	ldr	r3, [r7, #24]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d00f      	beq.n	8009878 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009858:	69b8      	ldr	r0, [r7, #24]
 800985a:	f7fe fcbd 	bl	80081d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	4618      	mov	r0, r3
 8009864:	f000 fd09 	bl	800a27a <ff_del_syncobj>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d101      	bne.n	8009872 <f_mount+0x52>
 800986e:	2302      	movs	r3, #2
 8009870:	e033      	b.n	80098da <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2200      	movs	r2, #0
 8009876:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d00f      	beq.n	800989e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	b2da      	uxtb	r2, r3
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	3310      	adds	r3, #16
 800988c:	4619      	mov	r1, r3
 800988e:	4610      	mov	r0, r2
 8009890:	f000 fcd3 	bl	800a23a <ff_cre_syncobj>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <f_mount+0x7e>
 800989a:	2302      	movs	r3, #2
 800989c:	e01d      	b.n	80098da <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	4910      	ldr	r1, [pc, #64]	; (80098e4 <f_mount+0xc4>)
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <f_mount+0x94>
 80098ae:	79fb      	ldrb	r3, [r7, #7]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d001      	beq.n	80098b8 <f_mount+0x98>
 80098b4:	2300      	movs	r3, #0
 80098b6:	e010      	b.n	80098da <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80098b8:	f107 010c 	add.w	r1, r7, #12
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	2200      	movs	r2, #0
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff fcda 	bl	800927c <find_volume>
 80098c8:	4603      	mov	r3, r0
 80098ca:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	7dfa      	ldrb	r2, [r7, #23]
 80098d0:	4611      	mov	r1, r2
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fe fb1d 	bl	8007f12 <unlock_fs>
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3720      	adds	r7, #32
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20002498 	.word	0x20002498

080098e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b098      	sub	sp, #96	; 0x60
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <f_open+0x18>
 80098fc:	2309      	movs	r3, #9
 80098fe:	e1c2      	b.n	8009c86 <f_open+0x39e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8009900:	79fb      	ldrb	r3, [r7, #7]
 8009902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009906:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009908:	79fa      	ldrb	r2, [r7, #7]
 800990a:	f107 0110 	add.w	r1, r7, #16
 800990e:	f107 0308 	add.w	r3, r7, #8
 8009912:	4618      	mov	r0, r3
 8009914:	f7ff fcb2 	bl	800927c <find_volume>
 8009918:	4603      	mov	r3, r0
 800991a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800991e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 819f 	bne.w	8009c66 <f_open+0x37e>
		dj.obj.fs = fs;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	f107 0314 	add.w	r3, r7, #20
 8009932:	4611      	mov	r1, r2
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff fb91 	bl	800905c <follow_path>
 800993a:	4603      	mov	r3, r0
 800993c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009944:	2b00      	cmp	r3, #0
 8009946:	d11a      	bne.n	800997e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009948:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800994c:	b25b      	sxtb	r3, r3
 800994e:	2b00      	cmp	r3, #0
 8009950:	da03      	bge.n	800995a <f_open+0x72>
				res = FR_INVALID_NAME;
 8009952:	2306      	movs	r3, #6
 8009954:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009958:	e011      	b.n	800997e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800995a:	79fb      	ldrb	r3, [r7, #7]
 800995c:	f023 0301 	bic.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	bf14      	ite	ne
 8009964:	2301      	movne	r3, #1
 8009966:	2300      	moveq	r3, #0
 8009968:	b2db      	uxtb	r3, r3
 800996a:	461a      	mov	r2, r3
 800996c:	f107 0314 	add.w	r3, r7, #20
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fae8 	bl	8007f48 <chk_lock>
 8009978:	4603      	mov	r3, r0
 800997a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800997e:	79fb      	ldrb	r3, [r7, #7]
 8009980:	f003 031c 	and.w	r3, r3, #28
 8009984:	2b00      	cmp	r3, #0
 8009986:	d07f      	beq.n	8009a88 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8009988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800998c:	2b00      	cmp	r3, #0
 800998e:	d017      	beq.n	80099c0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8009990:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009994:	2b04      	cmp	r3, #4
 8009996:	d10e      	bne.n	80099b6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009998:	f7fe fb32 	bl	8008000 <enq_lock>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d006      	beq.n	80099b0 <f_open+0xc8>
 80099a2:	f107 0314 	add.w	r3, r7, #20
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fa91 	bl	8008ece <dir_register>
 80099ac:	4603      	mov	r3, r0
 80099ae:	e000      	b.n	80099b2 <f_open+0xca>
 80099b0:	2312      	movs	r3, #18
 80099b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80099b6:	79fb      	ldrb	r3, [r7, #7]
 80099b8:	f043 0308 	orr.w	r3, r3, #8
 80099bc:	71fb      	strb	r3, [r7, #7]
 80099be:	e010      	b.n	80099e2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80099c0:	7ebb      	ldrb	r3, [r7, #26]
 80099c2:	f003 0311 	and.w	r3, r3, #17
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d003      	beq.n	80099d2 <f_open+0xea>
					res = FR_DENIED;
 80099ca:	2307      	movs	r3, #7
 80099cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80099d0:	e007      	b.n	80099e2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	f003 0304 	and.w	r3, r3, #4
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <f_open+0xfa>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80099e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d168      	bne.n	8009abc <f_open+0x1d4>
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	f003 0308 	and.w	r3, r3, #8
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d063      	beq.n	8009abc <f_open+0x1d4>
				dw = GET_FATTIME();
 80099f4:	f7fd fe86 	bl	8007704 <get_fattime>
 80099f8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80099fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099fc:	330e      	adds	r3, #14
 80099fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7fe f9c7 	bl	8007d94 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a08:	3316      	adds	r3, #22
 8009a0a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe f9c1 	bl	8007d94 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8009a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a14:	330b      	adds	r3, #11
 8009a16:	2220      	movs	r2, #32
 8009a18:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7ff f9c0 	bl	8008da6 <ld_clust>
 8009a26:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f7ff f9d8 	bl	8008de4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a36:	331c      	adds	r3, #28
 8009a38:	2100      	movs	r1, #0
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe f9aa 	bl	8007d94 <st_dword>
					fs->wflag = 1;
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	2201      	movs	r2, #1
 8009a44:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d037      	beq.n	8009abc <f_open+0x1d4>
						dw = fs->winsect;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a50:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8009a52:	f107 0314 	add.w	r3, r7, #20
 8009a56:	2200      	movs	r2, #0
 8009a58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fec8 	bl	80087f0 <remove_chain>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8009a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d126      	bne.n	8009abc <f_open+0x1d4>
							res = move_window(fs, dw);
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7fe fc18 	bl	80082a8 <move_window>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a82:	3a01      	subs	r2, #1
 8009a84:	615a      	str	r2, [r3, #20]
 8009a86:	e019      	b.n	8009abc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009a88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d115      	bne.n	8009abc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009a90:	7ebb      	ldrb	r3, [r7, #26]
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8009a9a:	2304      	movs	r3, #4
 8009a9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009aa0:	e00c      	b.n	8009abc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d007      	beq.n	8009abc <f_open+0x1d4>
 8009aac:	7ebb      	ldrb	r3, [r7, #26]
 8009aae:	f003 0301 	and.w	r3, r3, #1
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <f_open+0x1d4>
						res = FR_DENIED;
 8009ab6:	2307      	movs	r3, #7
 8009ab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009abc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d128      	bne.n	8009b16 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009ac4:	79fb      	ldrb	r3, [r7, #7]
 8009ac6:	f003 0308 	and.w	r3, r3, #8
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009ace:	79fb      	ldrb	r3, [r7, #7]
 8009ad0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ad4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009ade:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009ae4:	79fb      	ldrb	r3, [r7, #7]
 8009ae6:	f023 0301 	bic.w	r3, r3, #1
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bf14      	ite	ne
 8009aee:	2301      	movne	r3, #1
 8009af0:	2300      	moveq	r3, #0
 8009af2:	b2db      	uxtb	r3, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	f107 0314 	add.w	r3, r7, #20
 8009afa:	4611      	mov	r1, r2
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe faa1 	bl	8008044 <inc_lock>
 8009b02:	4602      	mov	r2, r0
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d102      	bne.n	8009b16 <f_open+0x22e>
 8009b10:	2302      	movs	r3, #2
 8009b12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8009b16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f040 80a3 	bne.w	8009c66 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009b20:	693b      	ldr	r3, [r7, #16]
 8009b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f7ff f93d 	bl	8008da6 <ld_clust>
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8009b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b34:	331c      	adds	r3, #28
 8009b36:	4618      	mov	r0, r3
 8009b38:	f7fe f8ee 	bl	8007d18 <ld_dword>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	88da      	ldrh	r2, [r3, #6]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	79fa      	ldrb	r2, [r7, #7]
 8009b5a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	3330      	adds	r3, #48	; 0x30
 8009b72:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b76:	2100      	movs	r1, #0
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fe f958 	bl	8007e2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009b7e:	79fb      	ldrb	r3, [r7, #7]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d06e      	beq.n	8009c66 <f_open+0x37e>
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	68db      	ldr	r3, [r3, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d06a      	beq.n	8009c66 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	68da      	ldr	r2, [r3, #12]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	895b      	ldrh	r3, [r3, #10]
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	899b      	ldrh	r3, [r3, #12]
 8009ba2:	fb03 f302 	mul.w	r3, r3, r2
 8009ba6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8009bb4:	e016      	b.n	8009be4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f7fe fc31 	bl	8008422 <get_fat>
 8009bc0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bc4:	2b01      	cmp	r3, #1
 8009bc6:	d802      	bhi.n	8009bce <f_open+0x2e6>
 8009bc8:	2302      	movs	r3, #2
 8009bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009bce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd4:	d102      	bne.n	8009bdc <f_open+0x2f4>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	657b      	str	r3, [r7, #84]	; 0x54
 8009be4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d103      	bne.n	8009bf4 <f_open+0x30c>
 8009bec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d8e0      	bhi.n	8009bb6 <f_open+0x2ce>
				}
				fp->clust = clst;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009bf8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009bfa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d131      	bne.n	8009c66 <f_open+0x37e>
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	899b      	ldrh	r3, [r3, #12]
 8009c06:	461a      	mov	r2, r3
 8009c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c0e:	fb02 f201 	mul.w	r2, r2, r1
 8009c12:	1a9b      	subs	r3, r3, r2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d026      	beq.n	8009c66 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fbe1 	bl	80083e4 <clust2sect>
 8009c22:	6478      	str	r0, [r7, #68]	; 0x44
 8009c24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d103      	bne.n	8009c32 <f_open+0x34a>
						res = FR_INT_ERR;
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009c30:	e019      	b.n	8009c66 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	899b      	ldrh	r3, [r3, #12]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c40:	441a      	add	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	7858      	ldrb	r0, [r3, #1]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1a      	ldr	r2, [r3, #32]
 8009c54:	2301      	movs	r3, #1
 8009c56:	f7fd ffe9 	bl	8007c2c <disk_read>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <f_open+0x37e>
 8009c60:	2301      	movs	r3, #1
 8009c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009c66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d002      	beq.n	8009c74 <f_open+0x38c>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe f948 	bl	8007f12 <unlock_fs>
 8009c82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3760      	adds	r7, #96	; 0x60
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b08c      	sub	sp, #48	; 0x30
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	607a      	str	r2, [r7, #4]
 8009c9a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f107 0210 	add.w	r2, r7, #16
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7ff fd6e 	bl	8009790 <validate>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009cba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d107      	bne.n	8009cd2 <f_write+0x44>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	7d5b      	ldrb	r3, [r3, #21]
 8009cc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d009      	beq.n	8009ce6 <f_write+0x58>
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f7fe f919 	bl	8007f12 <unlock_fs>
 8009ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ce4:	e192      	b.n	800a00c <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	7d1b      	ldrb	r3, [r3, #20]
 8009cea:	f003 0302 	and.w	r3, r3, #2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d106      	bne.n	8009d00 <f_write+0x72>
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	2107      	movs	r1, #7
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fe f90b 	bl	8007f12 <unlock_fs>
 8009cfc:	2307      	movs	r3, #7
 8009cfe:	e185      	b.n	800a00c <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	699a      	ldr	r2, [r3, #24]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	441a      	add	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	699b      	ldr	r3, [r3, #24]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	f080 816a 	bcs.w	8009fe6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	43db      	mvns	r3, r3
 8009d18:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009d1a:	e164      	b.n	8009fe6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	699b      	ldr	r3, [r3, #24]
 8009d20:	693a      	ldr	r2, [r7, #16]
 8009d22:	8992      	ldrh	r2, [r2, #12]
 8009d24:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d28:	fb02 f201 	mul.w	r2, r2, r1
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	f040 810f 	bne.w	8009f52 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	693a      	ldr	r2, [r7, #16]
 8009d3a:	8992      	ldrh	r2, [r2, #12]
 8009d3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d40:	693a      	ldr	r2, [r7, #16]
 8009d42:	8952      	ldrh	r2, [r2, #10]
 8009d44:	3a01      	subs	r2, #1
 8009d46:	4013      	ands	r3, r2
 8009d48:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d14d      	bne.n	8009dec <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10c      	bne.n	8009d72 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d11a      	bne.n	8009d9a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2100      	movs	r1, #0
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7fe fda6 	bl	80088ba <create_chain>
 8009d6e:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d70:	e013      	b.n	8009d9a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d007      	beq.n	8009d8a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	699b      	ldr	r3, [r3, #24]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	68f8      	ldr	r0, [r7, #12]
 8009d82:	f7fe fe32 	bl	80089ea <clmt_clust>
 8009d86:	62b8      	str	r0, [r7, #40]	; 0x28
 8009d88:	e007      	b.n	8009d9a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	69db      	ldr	r3, [r3, #28]
 8009d90:	4619      	mov	r1, r3
 8009d92:	4610      	mov	r0, r2
 8009d94:	f7fe fd91 	bl	80088ba <create_chain>
 8009d98:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f000 8127 	beq.w	8009ff0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d109      	bne.n	8009dbc <f_write+0x12e>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2202      	movs	r2, #2
 8009dac:	755a      	strb	r2, [r3, #21]
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	2102      	movs	r1, #2
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fe f8ad 	bl	8007f12 <unlock_fs>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e127      	b.n	800a00c <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dc2:	d109      	bne.n	8009dd8 <f_write+0x14a>
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	755a      	strb	r2, [r3, #21]
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	2101      	movs	r1, #1
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7fe f89f 	bl	8007f12 <unlock_fs>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	e119      	b.n	800a00c <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ddc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d102      	bne.n	8009dec <f_write+0x15e>
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	7d1b      	ldrb	r3, [r3, #20]
 8009df0:	b25b      	sxtb	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	da1d      	bge.n	8009e32 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	7858      	ldrb	r0, [r3, #1]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6a1a      	ldr	r2, [r3, #32]
 8009e04:	2301      	movs	r3, #1
 8009e06:	f7fd ff31 	bl	8007c6c <disk_write>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d009      	beq.n	8009e24 <f_write+0x196>
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	2201      	movs	r2, #1
 8009e14:	755a      	strb	r2, [r3, #21]
 8009e16:	693b      	ldr	r3, [r7, #16]
 8009e18:	2101      	movs	r1, #1
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7fe f879 	bl	8007f12 <unlock_fs>
 8009e20:	2301      	movs	r3, #1
 8009e22:	e0f3      	b.n	800a00c <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	7d1b      	ldrb	r3, [r3, #20]
 8009e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	69db      	ldr	r3, [r3, #28]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	f7fe fad2 	bl	80083e4 <clust2sect>
 8009e40:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d109      	bne.n	8009e5c <f_write+0x1ce>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	755a      	strb	r2, [r3, #21]
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	2102      	movs	r1, #2
 8009e52:	4618      	mov	r0, r3
 8009e54:	f7fe f85d 	bl	8007f12 <unlock_fs>
 8009e58:	2302      	movs	r3, #2
 8009e5a:	e0d7      	b.n	800a00c <f_write+0x37e>
			sect += csect;
 8009e5c:	697a      	ldr	r2, [r7, #20]
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	4413      	add	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	899b      	ldrh	r3, [r3, #12]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e70:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d048      	beq.n	8009f0a <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009e78:	69ba      	ldr	r2, [r7, #24]
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	8952      	ldrh	r2, [r2, #10]
 8009e82:	4293      	cmp	r3, r2
 8009e84:	d905      	bls.n	8009e92 <f_write+0x204>
					cc = fs->csize - csect;
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	895b      	ldrh	r3, [r3, #10]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	7858      	ldrb	r0, [r3, #1]
 8009e96:	6a3b      	ldr	r3, [r7, #32]
 8009e98:	697a      	ldr	r2, [r7, #20]
 8009e9a:	69f9      	ldr	r1, [r7, #28]
 8009e9c:	f7fd fee6 	bl	8007c6c <disk_write>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d009      	beq.n	8009eba <f_write+0x22c>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	2201      	movs	r2, #1
 8009eaa:	755a      	strb	r2, [r3, #21]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	2101      	movs	r1, #1
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fe f82e 	bl	8007f12 <unlock_fs>
 8009eb6:	2301      	movs	r3, #1
 8009eb8:	e0a8      	b.n	800a00c <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6a1a      	ldr	r2, [r3, #32]
 8009ebe:	697b      	ldr	r3, [r7, #20]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	6a3a      	ldr	r2, [r7, #32]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d918      	bls.n	8009efa <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6a1a      	ldr	r2, [r3, #32]
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	8992      	ldrh	r2, [r2, #12]
 8009eda:	fb02 f303 	mul.w	r3, r2, r3
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	18d1      	adds	r1, r2, r3
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	899b      	ldrh	r3, [r3, #12]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f7fd ff80 	bl	8007dec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	7d1b      	ldrb	r3, [r3, #20]
 8009ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ef4:	b2da      	uxtb	r2, r3
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	899b      	ldrh	r3, [r3, #12]
 8009efe:	461a      	mov	r2, r3
 8009f00:	6a3b      	ldr	r3, [r7, #32]
 8009f02:	fb02 f303 	mul.w	r3, r2, r3
 8009f06:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009f08:	e050      	b.n	8009fac <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d01b      	beq.n	8009f4c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	699a      	ldr	r2, [r3, #24]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d215      	bcs.n	8009f4c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	7858      	ldrb	r0, [r3, #1]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	f7fd fe7d 	bl	8007c2c <disk_read>
 8009f32:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d009      	beq.n	8009f4c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	755a      	strb	r2, [r3, #21]
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	2101      	movs	r1, #1
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fd ffe5 	bl	8007f12 <unlock_fs>
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e05f      	b.n	800a00c <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	697a      	ldr	r2, [r7, #20]
 8009f50:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	899b      	ldrh	r3, [r3, #12]
 8009f56:	4618      	mov	r0, r3
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	699b      	ldr	r3, [r3, #24]
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	8992      	ldrh	r2, [r2, #12]
 8009f60:	fbb3 f1f2 	udiv	r1, r3, r2
 8009f64:	fb02 f201 	mul.w	r2, r2, r1
 8009f68:	1a9b      	subs	r3, r3, r2
 8009f6a:	1ac3      	subs	r3, r0, r3
 8009f6c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d901      	bls.n	8009f7a <f_write+0x2ec>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	699b      	ldr	r3, [r3, #24]
 8009f84:	693a      	ldr	r2, [r7, #16]
 8009f86:	8992      	ldrh	r2, [r2, #12]
 8009f88:	fbb3 f0f2 	udiv	r0, r3, r2
 8009f8c:	fb02 f200 	mul.w	r2, r2, r0
 8009f90:	1a9b      	subs	r3, r3, r2
 8009f92:	440b      	add	r3, r1
 8009f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f96:	69f9      	ldr	r1, [r7, #28]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7fd ff27 	bl	8007dec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	7d1b      	ldrb	r3, [r3, #20]
 8009fa2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009fa6:	b2da      	uxtb	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	4413      	add	r3, r2
 8009fb2:	61fb      	str	r3, [r7, #28]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	699a      	ldr	r2, [r3, #24]
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	441a      	add	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	619a      	str	r2, [r3, #24]
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	68da      	ldr	r2, [r3, #12]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	699b      	ldr	r3, [r3, #24]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	bf38      	it	cc
 8009fcc:	461a      	movcc	r2, r3
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	60da      	str	r2, [r3, #12]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fd8:	441a      	add	r2, r3
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fe2:	1ad3      	subs	r3, r2, r3
 8009fe4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f47f ae97 	bne.w	8009d1c <f_write+0x8e>
 8009fee:	e000      	b.n	8009ff2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009ff0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	7d1b      	ldrb	r3, [r3, #20]
 8009ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	2100      	movs	r1, #0
 800a004:	4618      	mov	r0, r3
 800a006:	f7fd ff84 	bl	8007f12 <unlock_fs>
 800a00a:	2300      	movs	r3, #0
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3730      	adds	r7, #48	; 0x30
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f107 0208 	add.w	r2, r7, #8
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7ff fbb3 	bl	8009790 <validate>
 800a02a:	4603      	mov	r3, r0
 800a02c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a02e:	7dfb      	ldrb	r3, [r7, #23]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d16d      	bne.n	800a110 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	7d1b      	ldrb	r3, [r3, #20]
 800a038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d067      	beq.n	800a110 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	7d1b      	ldrb	r3, [r3, #20]
 800a044:	b25b      	sxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	da1a      	bge.n	800a080 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	7858      	ldrb	r0, [r3, #1]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6a1a      	ldr	r2, [r3, #32]
 800a058:	2301      	movs	r3, #1
 800a05a:	f7fd fe07 	bl	8007c6c <disk_write>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d006      	beq.n	800a072 <f_sync+0x5e>
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2101      	movs	r1, #1
 800a068:	4618      	mov	r0, r3
 800a06a:	f7fd ff52 	bl	8007f12 <unlock_fs>
 800a06e:	2301      	movs	r3, #1
 800a070:	e055      	b.n	800a11e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	7d1b      	ldrb	r3, [r3, #20]
 800a076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800a080:	f7fd fb40 	bl	8007704 <get_fattime>
 800a084:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800a086:	68ba      	ldr	r2, [r7, #8]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	4619      	mov	r1, r3
 800a08e:	4610      	mov	r0, r2
 800a090:	f7fe f90a 	bl	80082a8 <move_window>
 800a094:	4603      	mov	r3, r0
 800a096:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800a098:	7dfb      	ldrb	r3, [r7, #23]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d138      	bne.n	800a110 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	330b      	adds	r3, #11
 800a0a8:	781a      	ldrb	r2, [r3, #0]
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	330b      	adds	r3, #11
 800a0ae:	f042 0220 	orr.w	r2, r2, #32
 800a0b2:	b2d2      	uxtb	r2, r2
 800a0b4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	6818      	ldr	r0, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	68f9      	ldr	r1, [r7, #12]
 800a0c2:	f7fe fe8f 	bl	8008de4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f103 021c 	add.w	r2, r3, #28
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	4610      	mov	r0, r2
 800a0d4:	f7fd fe5e 	bl	8007d94 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	3316      	adds	r3, #22
 800a0dc:	6939      	ldr	r1, [r7, #16]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fd fe58 	bl	8007d94 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	3312      	adds	r3, #18
 800a0e8:	2100      	movs	r1, #0
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7fd fe37 	bl	8007d5e <st_word>
					fs->wflag = 1;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7fe f903 	bl	8008304 <sync_fs>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	7d1b      	ldrb	r3, [r3, #20]
 800a106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	7dfa      	ldrb	r2, [r7, #23]
 800a114:	4611      	mov	r1, r2
 800a116:	4618      	mov	r0, r3
 800a118:	f7fd fefb 	bl	8007f12 <unlock_fs>
 800a11c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}

0800a126 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800a126:	b580      	push	{r7, lr}
 800a128:	b084      	sub	sp, #16
 800a12a:	af00      	add	r7, sp, #0
 800a12c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f7ff ff70 	bl	800a014 <f_sync>
 800a134:	4603      	mov	r3, r0
 800a136:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800a138:	7bfb      	ldrb	r3, [r7, #15]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d11d      	bne.n	800a17a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f107 0208 	add.w	r2, r7, #8
 800a144:	4611      	mov	r1, r2
 800a146:	4618      	mov	r0, r3
 800a148:	f7ff fb22 	bl	8009790 <validate>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d111      	bne.n	800a17a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	4618      	mov	r0, r3
 800a15c:	f7fe f800 	bl	8008160 <dec_lock>
 800a160:	4603      	mov	r3, r0
 800a162:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800a164:	7bfb      	ldrb	r3, [r7, #15]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d102      	bne.n	800a170 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2200      	movs	r2, #0
 800a16e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	2100      	movs	r1, #0
 800a174:	4618      	mov	r0, r3
 800a176:	f7fd fecc 	bl	8007f12 <unlock_fs>
#endif
		}
	}
	return res;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a184:	b480      	push	{r7}
 800a186:	b087      	sub	sp, #28
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	4613      	mov	r3, r2
 800a190:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a192:	2301      	movs	r3, #1
 800a194:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a19a:	4b1f      	ldr	r3, [pc, #124]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a19c:	7a5b      	ldrb	r3, [r3, #9]
 800a19e:	b2db      	uxtb	r3, r3
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d131      	bne.n	800a208 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a1a4:	4b1c      	ldr	r3, [pc, #112]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1a6:	7a5b      	ldrb	r3, [r3, #9]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	4b1a      	ldr	r3, [pc, #104]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a1b2:	4b19      	ldr	r3, [pc, #100]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1b4:	7a5b      	ldrb	r3, [r3, #9]
 800a1b6:	b2db      	uxtb	r3, r3
 800a1b8:	4a17      	ldr	r2, [pc, #92]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a1c2:	4b15      	ldr	r3, [pc, #84]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1c4:	7a5b      	ldrb	r3, [r3, #9]
 800a1c6:	b2db      	uxtb	r3, r3
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	4b13      	ldr	r3, [pc, #76]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1cc:	4413      	add	r3, r2
 800a1ce:	79fa      	ldrb	r2, [r7, #7]
 800a1d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a1d2:	4b11      	ldr	r3, [pc, #68]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1d4:	7a5b      	ldrb	r3, [r3, #9]
 800a1d6:	b2db      	uxtb	r3, r3
 800a1d8:	1c5a      	adds	r2, r3, #1
 800a1da:	b2d1      	uxtb	r1, r2
 800a1dc:	4a0e      	ldr	r2, [pc, #56]	; (800a218 <FATFS_LinkDriverEx+0x94>)
 800a1de:	7251      	strb	r1, [r2, #9]
 800a1e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a1e2:	7dbb      	ldrb	r3, [r7, #22]
 800a1e4:	3330      	adds	r3, #48	; 0x30
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	223a      	movs	r2, #58	; 0x3a
 800a1f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a1f4:	68bb      	ldr	r3, [r7, #8]
 800a1f6:	3302      	adds	r3, #2
 800a1f8:	222f      	movs	r2, #47	; 0x2f
 800a1fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	3303      	adds	r3, #3
 800a200:	2200      	movs	r2, #0
 800a202:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a204:	2300      	movs	r3, #0
 800a206:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a208:	7dfb      	ldrb	r3, [r7, #23]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	200024c0 	.word	0x200024c0

0800a21c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b082      	sub	sp, #8
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a226:	2200      	movs	r2, #0
 800a228:	6839      	ldr	r1, [r7, #0]
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f7ff ffaa 	bl	800a184 <FATFS_LinkDriverEx>
 800a230:	4603      	mov	r3, r0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b086      	sub	sp, #24
 800a23e:	af00      	add	r7, sp, #0
 800a240:	4603      	mov	r3, r0
 800a242:	6039      	str	r1, [r7, #0]
 800a244:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800a246:	2300      	movs	r3, #0
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	2300      	movs	r3, #0
 800a24c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a24e:	f107 030c 	add.w	r3, r7, #12
 800a252:	2101      	movs	r1, #1
 800a254:	4618      	mov	r0, r3
 800a256:	f000 f985 	bl	800a564 <osSemaphoreCreate>
 800a25a:	4602      	mov	r2, r0
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	bf14      	ite	ne
 800a268:	2301      	movne	r3, #1
 800a26a:	2300      	moveq	r3, #0
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	617b      	str	r3, [r7, #20]

    return ret;
 800a270:	697b      	ldr	r3, [r7, #20]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b082      	sub	sp, #8
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa26 	bl	800a6d4 <osSemaphoreDelete>
#endif
    return 1;
 800a288:	2301      	movs	r3, #1
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3708      	adds	r7, #8
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b084      	sub	sp, #16
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800a29e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f992 	bl	800a5cc <osSemaphoreWait>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d101      	bne.n	800a2b2 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3710      	adds	r7, #16
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f9cf 	bl	800a668 <osSemaphoreRelease>
#endif
}
 800a2ca:	bf00      	nop
 800a2cc:	3708      	adds	r7, #8
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}

0800a2d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a2d2:	b480      	push	{r7}
 800a2d4:	b085      	sub	sp, #20
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	4603      	mov	r3, r0
 800a2da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a2e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a2e4:	2b84      	cmp	r3, #132	; 0x84
 800a2e6:	d005      	beq.n	800a2f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a2e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	3303      	adds	r3, #3
 800a2f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a308:	f3ef 8305 	mrs	r3, IPSR
 800a30c:	607b      	str	r3, [r7, #4]
  return(result);
 800a30e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a310:	2b00      	cmp	r3, #0
 800a312:	bf14      	ite	ne
 800a314:	2301      	movne	r3, #1
 800a316:	2300      	moveq	r3, #0
 800a318:	b2db      	uxtb	r3, r3
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	370c      	adds	r7, #12
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a32a:	f001 fcaf 	bl	800bc8c <vTaskStartScheduler>
  
  return osOK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	bd80      	pop	{r7, pc}

0800a334 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800a338:	f002 f8be 	bl	800c4b8 <xTaskGetSchedulerState>
 800a33c:	4603      	mov	r3, r0
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d101      	bne.n	800a346 <osKernelRunning+0x12>
    return 0;
 800a342:	2300      	movs	r3, #0
 800a344:	e000      	b.n	800a348 <osKernelRunning+0x14>
  else
    return 1;
 800a346:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800a348:	4618      	mov	r0, r3
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a350:	f7ff ffd7 	bl	800a302 <inHandlerMode>
 800a354:	4603      	mov	r3, r0
 800a356:	2b00      	cmp	r3, #0
 800a358:	d003      	beq.n	800a362 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a35a:	f001 fdaf 	bl	800bebc <xTaskGetTickCountFromISR>
 800a35e:	4603      	mov	r3, r0
 800a360:	e002      	b.n	800a368 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a362:	f001 fd9b 	bl	800be9c <xTaskGetTickCount>
 800a366:	4603      	mov	r3, r0
  }
}
 800a368:	4618      	mov	r0, r3
 800a36a:	bd80      	pop	{r7, pc}

0800a36c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a36c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a36e:	b089      	sub	sp, #36	; 0x24
 800a370:	af04      	add	r7, sp, #16
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d020      	beq.n	800a3c0 <osThreadCreate+0x54>
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d01c      	beq.n	800a3c0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	685c      	ldr	r4, [r3, #4]
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681d      	ldr	r5, [r3, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	691e      	ldr	r6, [r3, #16]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a398:	4618      	mov	r0, r3
 800a39a:	f7ff ff9a 	bl	800a2d2 <makeFreeRtosPriority>
 800a39e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	695b      	ldr	r3, [r3, #20]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3a8:	9202      	str	r2, [sp, #8]
 800a3aa:	9301      	str	r3, [sp, #4]
 800a3ac:	9100      	str	r1, [sp, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	4632      	mov	r2, r6
 800a3b2:	4629      	mov	r1, r5
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	f001 faa5 	bl	800b904 <xTaskCreateStatic>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	60fb      	str	r3, [r7, #12]
 800a3be:	e01c      	b.n	800a3fa <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685c      	ldr	r4, [r3, #4]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a3cc:	b29e      	uxth	r6, r3
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff ff7c 	bl	800a2d2 <makeFreeRtosPriority>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	f107 030c 	add.w	r3, r7, #12
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	9200      	str	r2, [sp, #0]
 800a3e4:	683b      	ldr	r3, [r7, #0]
 800a3e6:	4632      	mov	r2, r6
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f001 fae4 	bl	800b9b8 <xTaskCreate>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b01      	cmp	r3, #1
 800a3f4:	d001      	beq.n	800a3fa <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	e000      	b.n	800a3fc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3714      	adds	r7, #20
 800a400:	46bd      	mov	sp, r7
 800a402:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a404 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <osDelay+0x16>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	e000      	b.n	800a41c <osDelay+0x18>
 800a41a:	2301      	movs	r3, #1
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 fc01 	bl	800bc24 <vTaskDelay>
  
  return osOK;
 800a422:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b082      	sub	sp, #8
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d007      	beq.n	800a44c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	4619      	mov	r1, r3
 800a442:	2001      	movs	r0, #1
 800a444:	f000 fc55 	bl	800acf2 <xQueueCreateMutexStatic>
 800a448:	4603      	mov	r3, r0
 800a44a:	e003      	b.n	800a454 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a44c:	2001      	movs	r0, #1
 800a44e:	f000 fc38 	bl	800acc2 <xQueueCreateMutex>
 800a452:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}

0800a45c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a466:	2300      	movs	r3, #0
 800a468:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d101      	bne.n	800a474 <osMutexWait+0x18>
    return osErrorParameter;
 800a470:	2380      	movs	r3, #128	; 0x80
 800a472:	e03a      	b.n	800a4ea <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a474:	2300      	movs	r3, #0
 800a476:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d103      	bne.n	800a488 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a480:	f04f 33ff 	mov.w	r3, #4294967295
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e009      	b.n	800a49c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d006      	beq.n	800a49c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <osMutexWait+0x40>
      ticks = 1;
 800a498:	2301      	movs	r3, #1
 800a49a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a49c:	f7ff ff31 	bl	800a302 <inHandlerMode>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d017      	beq.n	800a4d6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a4a6:	f107 0308 	add.w	r3, r7, #8
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 f836 	bl	800b520 <xQueueReceiveFromISR>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d001      	beq.n	800a4be <osMutexWait+0x62>
      return osErrorOS;
 800a4ba:	23ff      	movs	r3, #255	; 0xff
 800a4bc:	e015      	b.n	800a4ea <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d011      	beq.n	800a4e8 <osMutexWait+0x8c>
 800a4c4:	4b0b      	ldr	r3, [pc, #44]	; (800a4f4 <osMutexWait+0x98>)
 800a4c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	f3bf 8f4f 	dsb	sy
 800a4d0:	f3bf 8f6f 	isb	sy
 800a4d4:	e008      	b.n	800a4e8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a4d6:	68f9      	ldr	r1, [r7, #12]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 ff19 	bl	800b310 <xQueueSemaphoreTake>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d001      	beq.n	800a4e8 <osMutexWait+0x8c>
    return osErrorOS;
 800a4e4:	23ff      	movs	r3, #255	; 0xff
 800a4e6:	e000      	b.n	800a4ea <osMutexWait+0x8e>
  }
  
  return osOK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	e000ed04 	.word	0xe000ed04

0800a4f8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a500:	2300      	movs	r3, #0
 800a502:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a504:	2300      	movs	r3, #0
 800a506:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a508:	f7ff fefb 	bl	800a302 <inHandlerMode>
 800a50c:	4603      	mov	r3, r0
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d016      	beq.n	800a540 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a512:	f107 0308 	add.w	r3, r7, #8
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fd93 	bl	800b044 <xQueueGiveFromISR>
 800a51e:	4603      	mov	r3, r0
 800a520:	2b01      	cmp	r3, #1
 800a522:	d001      	beq.n	800a528 <osMutexRelease+0x30>
      return osErrorOS;
 800a524:	23ff      	movs	r3, #255	; 0xff
 800a526:	e017      	b.n	800a558 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d013      	beq.n	800a556 <osMutexRelease+0x5e>
 800a52e:	4b0c      	ldr	r3, [pc, #48]	; (800a560 <osMutexRelease+0x68>)
 800a530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	f3bf 8f4f 	dsb	sy
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	e00a      	b.n	800a556 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a540:	2300      	movs	r3, #0
 800a542:	2200      	movs	r2, #0
 800a544:	2100      	movs	r1, #0
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f000 fbee 	bl	800ad28 <xQueueGenericSend>
 800a54c:	4603      	mov	r3, r0
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d001      	beq.n	800a556 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a552:	23ff      	movs	r3, #255	; 0xff
 800a554:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a556:	68fb      	ldr	r3, [r7, #12]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3710      	adds	r7, #16
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	e000ed04 	.word	0xe000ed04

0800a564 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a564:	b580      	push	{r7, lr}
 800a566:	b086      	sub	sp, #24
 800a568:	af02      	add	r7, sp, #8
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d010      	beq.n	800a598 <osSemaphoreCreate+0x34>
    if (count == 1) {
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b01      	cmp	r3, #1
 800a57a:	d10b      	bne.n	800a594 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685a      	ldr	r2, [r3, #4]
 800a580:	2303      	movs	r3, #3
 800a582:	9300      	str	r3, [sp, #0]
 800a584:	4613      	mov	r3, r2
 800a586:	2200      	movs	r2, #0
 800a588:	2100      	movs	r1, #0
 800a58a:	2001      	movs	r0, #1
 800a58c:	f000 faae 	bl	800aaec <xQueueGenericCreateStatic>
 800a590:	4603      	mov	r3, r0
 800a592:	e016      	b.n	800a5c2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a594:	2300      	movs	r3, #0
 800a596:	e014      	b.n	800a5c2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	d110      	bne.n	800a5c0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800a59e:	2203      	movs	r2, #3
 800a5a0:	2100      	movs	r1, #0
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	f000 fb15 	bl	800abd2 <xQueueGenericCreate>
 800a5a8:	60f8      	str	r0, [r7, #12]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d005      	beq.n	800a5bc <osSemaphoreCreate+0x58>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 fbb6 	bl	800ad28 <xQueueGenericSend>
      return sema;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	e000      	b.n	800a5c2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a5c0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
	...

0800a5cc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a5e0:	2380      	movs	r3, #128	; 0x80
 800a5e2:	e03a      	b.n	800a65a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ee:	d103      	bne.n	800a5f8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	60fb      	str	r3, [r7, #12]
 800a5f6:	e009      	b.n	800a60c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d006      	beq.n	800a60c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d101      	bne.n	800a60c <osSemaphoreWait+0x40>
      ticks = 1;
 800a608:	2301      	movs	r3, #1
 800a60a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a60c:	f7ff fe79 	bl	800a302 <inHandlerMode>
 800a610:	4603      	mov	r3, r0
 800a612:	2b00      	cmp	r3, #0
 800a614:	d017      	beq.n	800a646 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a616:	f107 0308 	add.w	r3, r7, #8
 800a61a:	461a      	mov	r2, r3
 800a61c:	2100      	movs	r1, #0
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f000 ff7e 	bl	800b520 <xQueueReceiveFromISR>
 800a624:	4603      	mov	r3, r0
 800a626:	2b01      	cmp	r3, #1
 800a628:	d001      	beq.n	800a62e <osSemaphoreWait+0x62>
      return osErrorOS;
 800a62a:	23ff      	movs	r3, #255	; 0xff
 800a62c:	e015      	b.n	800a65a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d011      	beq.n	800a658 <osSemaphoreWait+0x8c>
 800a634:	4b0b      	ldr	r3, [pc, #44]	; (800a664 <osSemaphoreWait+0x98>)
 800a636:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	f3bf 8f4f 	dsb	sy
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	e008      	b.n	800a658 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a646:	68f9      	ldr	r1, [r7, #12]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fe61 	bl	800b310 <xQueueSemaphoreTake>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b01      	cmp	r3, #1
 800a652:	d001      	beq.n	800a658 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a654:	23ff      	movs	r3, #255	; 0xff
 800a656:	e000      	b.n	800a65a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
 800a662:	bf00      	nop
 800a664:	e000ed04 	.word	0xe000ed04

0800a668 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b084      	sub	sp, #16
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a670:	2300      	movs	r3, #0
 800a672:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a674:	2300      	movs	r3, #0
 800a676:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a678:	f7ff fe43 	bl	800a302 <inHandlerMode>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d016      	beq.n	800a6b0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a682:	f107 0308 	add.w	r3, r7, #8
 800a686:	4619      	mov	r1, r3
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 fcdb 	bl	800b044 <xQueueGiveFromISR>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b01      	cmp	r3, #1
 800a692:	d001      	beq.n	800a698 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a694:	23ff      	movs	r3, #255	; 0xff
 800a696:	e017      	b.n	800a6c8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d013      	beq.n	800a6c6 <osSemaphoreRelease+0x5e>
 800a69e:	4b0c      	ldr	r3, [pc, #48]	; (800a6d0 <osSemaphoreRelease+0x68>)
 800a6a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6a4:	601a      	str	r2, [r3, #0]
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	e00a      	b.n	800a6c6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	2100      	movs	r1, #0
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fb36 	bl	800ad28 <xQueueGenericSend>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d001      	beq.n	800a6c6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a6c2:	23ff      	movs	r3, #255	; 0xff
 800a6c4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3710      	adds	r7, #16
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	e000ed04 	.word	0xe000ed04

0800a6d4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a6dc:	f7ff fe11 	bl	800a302 <inHandlerMode>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a6e6:	2382      	movs	r3, #130	; 0x82
 800a6e8:	e003      	b.n	800a6f2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f000 ff95 	bl	800b61a <vQueueDelete>

  return osOK; 
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3708      	adds	r7, #8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}

0800a6fa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a6fa:	b590      	push	{r4, r7, lr}
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	af02      	add	r7, sp, #8
 800a700:	6078      	str	r0, [r7, #4]
 800a702:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d012      	beq.n	800a732 <osMessageCreate+0x38>
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00e      	beq.n	800a732 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6818      	ldr	r0, [r3, #0]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6859      	ldr	r1, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689a      	ldr	r2, [r3, #8]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68dc      	ldr	r4, [r3, #12]
 800a724:	2300      	movs	r3, #0
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	4623      	mov	r3, r4
 800a72a:	f000 f9df 	bl	800aaec <xQueueGenericCreateStatic>
 800a72e:	4603      	mov	r3, r0
 800a730:	e008      	b.n	800a744 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6818      	ldr	r0, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685b      	ldr	r3, [r3, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	4619      	mov	r1, r3
 800a73e:	f000 fa48 	bl	800abd2 <xQueueGenericCreate>
 800a742:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd90      	pop	{r4, r7, pc}

0800a74c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b086      	sub	sp, #24
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a758:	2300      	movs	r3, #0
 800a75a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a760:	697b      	ldr	r3, [r7, #20]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <osMessagePut+0x1e>
    ticks = 1;
 800a766:	2301      	movs	r3, #1
 800a768:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a76a:	f7ff fdca 	bl	800a302 <inHandlerMode>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d018      	beq.n	800a7a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a774:	f107 0210 	add.w	r2, r7, #16
 800a778:	f107 0108 	add.w	r1, r7, #8
 800a77c:	2300      	movs	r3, #0
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f000 fbcc 	bl	800af1c <xQueueGenericSendFromISR>
 800a784:	4603      	mov	r3, r0
 800a786:	2b01      	cmp	r3, #1
 800a788:	d001      	beq.n	800a78e <osMessagePut+0x42>
      return osErrorOS;
 800a78a:	23ff      	movs	r3, #255	; 0xff
 800a78c:	e018      	b.n	800a7c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d014      	beq.n	800a7be <osMessagePut+0x72>
 800a794:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <osMessagePut+0x7c>)
 800a796:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a79a:	601a      	str	r2, [r3, #0]
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	e00b      	b.n	800a7be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a7a6:	f107 0108 	add.w	r1, r7, #8
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	68f8      	ldr	r0, [r7, #12]
 800a7b0:	f000 faba 	bl	800ad28 <xQueueGenericSend>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d001      	beq.n	800a7be <osMessagePut+0x72>
      return osErrorOS;
 800a7ba:	23ff      	movs	r3, #255	; 0xff
 800a7bc:	e000      	b.n	800a7c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3718      	adds	r7, #24
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	e000ed04 	.word	0xe000ed04

0800a7cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b08b      	sub	sp, #44	; 0x2c
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	60f8      	str	r0, [r7, #12]
 800a7d4:	60b9      	str	r1, [r7, #8]
 800a7d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10a      	bne.n	800a7fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a7e6:	2380      	movs	r3, #128	; 0x80
 800a7e8:	617b      	str	r3, [r7, #20]
    return event;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	461c      	mov	r4, r3
 800a7ee:	f107 0314 	add.w	r3, r7, #20
 800a7f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a7f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a7fa:	e054      	b.n	800a8a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a800:	2300      	movs	r3, #0
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d103      	bne.n	800a814 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a80c:	f04f 33ff 	mov.w	r3, #4294967295
 800a810:	627b      	str	r3, [r7, #36]	; 0x24
 800a812:	e009      	b.n	800a828 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d006      	beq.n	800a828 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a820:	2b00      	cmp	r3, #0
 800a822:	d101      	bne.n	800a828 <osMessageGet+0x5c>
      ticks = 1;
 800a824:	2301      	movs	r3, #1
 800a826:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a828:	f7ff fd6b 	bl	800a302 <inHandlerMode>
 800a82c:	4603      	mov	r3, r0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d01c      	beq.n	800a86c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a832:	f107 0220 	add.w	r2, r7, #32
 800a836:	f107 0314 	add.w	r3, r7, #20
 800a83a:	3304      	adds	r3, #4
 800a83c:	4619      	mov	r1, r3
 800a83e:	68b8      	ldr	r0, [r7, #8]
 800a840:	f000 fe6e 	bl	800b520 <xQueueReceiveFromISR>
 800a844:	4603      	mov	r3, r0
 800a846:	2b01      	cmp	r3, #1
 800a848:	d102      	bne.n	800a850 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a84a:	2310      	movs	r3, #16
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	e001      	b.n	800a854 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a850:	2300      	movs	r3, #0
 800a852:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a854:	6a3b      	ldr	r3, [r7, #32]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d01d      	beq.n	800a896 <osMessageGet+0xca>
 800a85a:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <osMessageGet+0xe4>)
 800a85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a860:	601a      	str	r2, [r3, #0]
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	e014      	b.n	800a896 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a86c:	f107 0314 	add.w	r3, r7, #20
 800a870:	3304      	adds	r3, #4
 800a872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a874:	4619      	mov	r1, r3
 800a876:	68b8      	ldr	r0, [r7, #8]
 800a878:	f000 fc6e 	bl	800b158 <xQueueReceive>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d102      	bne.n	800a888 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a882:	2310      	movs	r3, #16
 800a884:	617b      	str	r3, [r7, #20]
 800a886:	e006      	b.n	800a896 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <osMessageGet+0xc6>
 800a88e:	2300      	movs	r3, #0
 800a890:	e000      	b.n	800a894 <osMessageGet+0xc8>
 800a892:	2340      	movs	r3, #64	; 0x40
 800a894:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	461c      	mov	r4, r3
 800a89a:	f107 0314 	add.w	r3, r7, #20
 800a89e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	372c      	adds	r7, #44	; 0x2c
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd90      	pop	{r4, r7, pc}
 800a8ae:	bf00      	nop
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f103 0208 	add.w	r2, r3, #8
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a8cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	f103 0208 	add.w	r2, r3, #8
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f103 0208 	add.w	r2, r3, #8
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a8e8:	bf00      	nop
 800a8ea:	370c      	adds	r7, #12
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a902:	bf00      	nop
 800a904:	370c      	adds	r7, #12
 800a906:	46bd      	mov	sp, r7
 800a908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a90e:	b480      	push	{r7}
 800a910:	b085      	sub	sp, #20
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
 800a916:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	689a      	ldr	r2, [r3, #8]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	683a      	ldr	r2, [r7, #0]
 800a932:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	1c5a      	adds	r2, r3, #1
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	601a      	str	r2, [r3, #0]
}
 800a94a:	bf00      	nop
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a956:	b480      	push	{r7}
 800a958:	b085      	sub	sp, #20
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a96c:	d103      	bne.n	800a976 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	60fb      	str	r3, [r7, #12]
 800a974:	e00c      	b.n	800a990 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	3308      	adds	r3, #8
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	e002      	b.n	800a984 <vListInsert+0x2e>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	60fb      	str	r3, [r7, #12]
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	68ba      	ldr	r2, [r7, #8]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d2f6      	bcs.n	800a97e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	685a      	ldr	r2, [r3, #4]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	683a      	ldr	r2, [r7, #0]
 800a99e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	68fa      	ldr	r2, [r7, #12]
 800a9a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	683a      	ldr	r2, [r7, #0]
 800a9aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	601a      	str	r2, [r3, #0]
}
 800a9bc:	bf00      	nop
 800a9be:	3714      	adds	r7, #20
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	6892      	ldr	r2, [r2, #8]
 800a9de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	6852      	ldr	r2, [r2, #4]
 800a9e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	685b      	ldr	r3, [r3, #4]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d103      	bne.n	800a9fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	1e5a      	subs	r2, r3, #1
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d109      	bne.n	800aa44 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aa30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa34:	f383 8811 	msr	BASEPRI, r3
 800aa38:	f3bf 8f6f 	isb	sy
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	60bb      	str	r3, [r7, #8]
 800aa42:	e7fe      	b.n	800aa42 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800aa44:	f002 f96a 	bl	800cd1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa50:	68f9      	ldr	r1, [r7, #12]
 800aa52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa54:	fb01 f303 	mul.w	r3, r1, r3
 800aa58:	441a      	add	r2, r3
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2200      	movs	r2, #0
 800aa62:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa74:	3b01      	subs	r3, #1
 800aa76:	68f9      	ldr	r1, [r7, #12]
 800aa78:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa7a:	fb01 f303 	mul.w	r3, r1, r3
 800aa7e:	441a      	add	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	22ff      	movs	r2, #255	; 0xff
 800aa88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	22ff      	movs	r2, #255	; 0xff
 800aa90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d114      	bne.n	800aac4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d01a      	beq.n	800aad8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	3310      	adds	r3, #16
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f001 fb50 	bl	800c14c <xTaskRemoveFromEventList>
 800aaac:	4603      	mov	r3, r0
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d012      	beq.n	800aad8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aab2:	4b0d      	ldr	r3, [pc, #52]	; (800aae8 <xQueueGenericReset+0xcc>)
 800aab4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aab8:	601a      	str	r2, [r3, #0]
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	f3bf 8f6f 	isb	sy
 800aac2:	e009      	b.n	800aad8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	3310      	adds	r3, #16
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fef3 	bl	800a8b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	3324      	adds	r3, #36	; 0x24
 800aad2:	4618      	mov	r0, r3
 800aad4:	f7ff feee 	bl	800a8b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aad8:	f002 f94e 	bl	800cd78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aadc:	2301      	movs	r3, #1
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	e000ed04 	.word	0xe000ed04

0800aaec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08e      	sub	sp, #56	; 0x38
 800aaf0:	af02      	add	r7, sp, #8
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
 800aaf8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d109      	bne.n	800ab14 <xQueueGenericCreateStatic+0x28>
 800ab00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab04:	f383 8811 	msr	BASEPRI, r3
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	f3bf 8f4f 	dsb	sy
 800ab10:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab12:	e7fe      	b.n	800ab12 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d109      	bne.n	800ab2e <xQueueGenericCreateStatic+0x42>
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab2c:	e7fe      	b.n	800ab2c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <xQueueGenericCreateStatic+0x4e>
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d001      	beq.n	800ab3e <xQueueGenericCreateStatic+0x52>
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e000      	b.n	800ab40 <xQueueGenericCreateStatic+0x54>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d109      	bne.n	800ab58 <xQueueGenericCreateStatic+0x6c>
 800ab44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	623b      	str	r3, [r7, #32]
 800ab56:	e7fe      	b.n	800ab56 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <xQueueGenericCreateStatic+0x78>
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d101      	bne.n	800ab68 <xQueueGenericCreateStatic+0x7c>
 800ab64:	2301      	movs	r3, #1
 800ab66:	e000      	b.n	800ab6a <xQueueGenericCreateStatic+0x7e>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d109      	bne.n	800ab82 <xQueueGenericCreateStatic+0x96>
 800ab6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab72:	f383 8811 	msr	BASEPRI, r3
 800ab76:	f3bf 8f6f 	isb	sy
 800ab7a:	f3bf 8f4f 	dsb	sy
 800ab7e:	61fb      	str	r3, [r7, #28]
 800ab80:	e7fe      	b.n	800ab80 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ab82:	2348      	movs	r3, #72	; 0x48
 800ab84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	2b48      	cmp	r3, #72	; 0x48
 800ab8a:	d009      	beq.n	800aba0 <xQueueGenericCreateStatic+0xb4>
 800ab8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	61bb      	str	r3, [r7, #24]
 800ab9e:	e7fe      	b.n	800ab9e <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aba0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800aba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00d      	beq.n	800abc8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800abb4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	4613      	mov	r3, r2
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	68b9      	ldr	r1, [r7, #8]
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 f844 	bl	800ac50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800abca:	4618      	mov	r0, r3
 800abcc:	3730      	adds	r7, #48	; 0x30
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b08a      	sub	sp, #40	; 0x28
 800abd6:	af02      	add	r7, sp, #8
 800abd8:	60f8      	str	r0, [r7, #12]
 800abda:	60b9      	str	r1, [r7, #8]
 800abdc:	4613      	mov	r3, r2
 800abde:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d109      	bne.n	800abfa <xQueueGenericCreate+0x28>
 800abe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abea:	f383 8811 	msr	BASEPRI, r3
 800abee:	f3bf 8f6f 	isb	sy
 800abf2:	f3bf 8f4f 	dsb	sy
 800abf6:	613b      	str	r3, [r7, #16]
 800abf8:	e7fe      	b.n	800abf8 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d102      	bne.n	800ac06 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ac00:	2300      	movs	r3, #0
 800ac02:	61fb      	str	r3, [r7, #28]
 800ac04:	e004      	b.n	800ac10 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	fb02 f303 	mul.w	r3, r2, r3
 800ac0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	3348      	adds	r3, #72	; 0x48
 800ac14:	4618      	mov	r0, r3
 800ac16:	f002 f99b 	bl	800cf50 <pvPortMalloc>
 800ac1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d011      	beq.n	800ac46 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	3348      	adds	r3, #72	; 0x48
 800ac2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac34:	79fa      	ldrb	r2, [r7, #7]
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	9300      	str	r3, [sp, #0]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 f805 	bl	800ac50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac46:	69bb      	ldr	r3, [r7, #24]
	}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3720      	adds	r7, #32
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	bd80      	pop	{r7, pc}

0800ac50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	60f8      	str	r0, [r7, #12]
 800ac58:	60b9      	str	r1, [r7, #8]
 800ac5a:	607a      	str	r2, [r7, #4]
 800ac5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ac64:	69bb      	ldr	r3, [r7, #24]
 800ac66:	69ba      	ldr	r2, [r7, #24]
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	e002      	b.n	800ac72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ac6c:	69bb      	ldr	r3, [r7, #24]
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ac72:	69bb      	ldr	r3, [r7, #24]
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ac7e:	2101      	movs	r1, #1
 800ac80:	69b8      	ldr	r0, [r7, #24]
 800ac82:	f7ff fecb 	bl	800aa1c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ac86:	bf00      	nop
 800ac88:	3710      	adds	r7, #16
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	bd80      	pop	{r7, pc}

0800ac8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ac8e:	b580      	push	{r7, lr}
 800ac90:	b082      	sub	sp, #8
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00e      	beq.n	800acba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	2200      	movs	r2, #0
 800aca6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800acae:	2300      	movs	r3, #0
 800acb0:	2200      	movs	r2, #0
 800acb2:	2100      	movs	r1, #0
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f837 	bl	800ad28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800acba:	bf00      	nop
 800acbc:	3708      	adds	r7, #8
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}

0800acc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800acc2:	b580      	push	{r7, lr}
 800acc4:	b086      	sub	sp, #24
 800acc6:	af00      	add	r7, sp, #0
 800acc8:	4603      	mov	r3, r0
 800acca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800accc:	2301      	movs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
 800acd0:	2300      	movs	r3, #0
 800acd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800acd4:	79fb      	ldrb	r3, [r7, #7]
 800acd6:	461a      	mov	r2, r3
 800acd8:	6939      	ldr	r1, [r7, #16]
 800acda:	6978      	ldr	r0, [r7, #20]
 800acdc:	f7ff ff79 	bl	800abd2 <xQueueGenericCreate>
 800ace0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ace2:	68f8      	ldr	r0, [r7, #12]
 800ace4:	f7ff ffd3 	bl	800ac8e <prvInitialiseMutex>

		return xNewQueue;
 800ace8:	68fb      	ldr	r3, [r7, #12]
	}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b088      	sub	sp, #32
 800acf6:	af02      	add	r7, sp, #8
 800acf8:	4603      	mov	r3, r0
 800acfa:	6039      	str	r1, [r7, #0]
 800acfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800acfe:	2301      	movs	r3, #1
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	2300      	movs	r3, #0
 800ad04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ad06:	79fb      	ldrb	r3, [r7, #7]
 800ad08:	9300      	str	r3, [sp, #0]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	6939      	ldr	r1, [r7, #16]
 800ad10:	6978      	ldr	r0, [r7, #20]
 800ad12:	f7ff feeb 	bl	800aaec <xQueueGenericCreateStatic>
 800ad16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff ffb8 	bl	800ac8e <prvInitialiseMutex>

		return xNewQueue;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
	}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b08e      	sub	sp, #56	; 0x38
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
 800ad34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ad36:	2300      	movs	r3, #0
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d109      	bne.n	800ad58 <xQueueGenericSend+0x30>
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad56:	e7fe      	b.n	800ad56 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d103      	bne.n	800ad66 <xQueueGenericSend+0x3e>
 800ad5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d101      	bne.n	800ad6a <xQueueGenericSend+0x42>
 800ad66:	2301      	movs	r3, #1
 800ad68:	e000      	b.n	800ad6c <xQueueGenericSend+0x44>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d109      	bne.n	800ad84 <xQueueGenericSend+0x5c>
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	627b      	str	r3, [r7, #36]	; 0x24
 800ad82:	e7fe      	b.n	800ad82 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d103      	bne.n	800ad92 <xQueueGenericSend+0x6a>
 800ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d101      	bne.n	800ad96 <xQueueGenericSend+0x6e>
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <xQueueGenericSend+0x70>
 800ad96:	2300      	movs	r3, #0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d109      	bne.n	800adb0 <xQueueGenericSend+0x88>
 800ad9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada0:	f383 8811 	msr	BASEPRI, r3
 800ada4:	f3bf 8f6f 	isb	sy
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	623b      	str	r3, [r7, #32]
 800adae:	e7fe      	b.n	800adae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adb0:	f001 fb82 	bl	800c4b8 <xTaskGetSchedulerState>
 800adb4:	4603      	mov	r3, r0
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d102      	bne.n	800adc0 <xQueueGenericSend+0x98>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d101      	bne.n	800adc4 <xQueueGenericSend+0x9c>
 800adc0:	2301      	movs	r3, #1
 800adc2:	e000      	b.n	800adc6 <xQueueGenericSend+0x9e>
 800adc4:	2300      	movs	r3, #0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <xQueueGenericSend+0xb6>
 800adca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adce:	f383 8811 	msr	BASEPRI, r3
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	f3bf 8f4f 	dsb	sy
 800adda:	61fb      	str	r3, [r7, #28]
 800addc:	e7fe      	b.n	800addc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adde:	f001 ff9d 	bl	800cd1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ade2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ade6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adea:	429a      	cmp	r2, r3
 800adec:	d302      	bcc.n	800adf4 <xQueueGenericSend+0xcc>
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d129      	bne.n	800ae48 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adf4:	683a      	ldr	r2, [r7, #0]
 800adf6:	68b9      	ldr	r1, [r7, #8]
 800adf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800adfa:	f000 fc48 	bl	800b68e <prvCopyDataToQueue>
 800adfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d010      	beq.n	800ae2a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae0a:	3324      	adds	r3, #36	; 0x24
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f001 f99d 	bl	800c14c <xTaskRemoveFromEventList>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d013      	beq.n	800ae40 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ae18:	4b3f      	ldr	r3, [pc, #252]	; (800af18 <xQueueGenericSend+0x1f0>)
 800ae1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae1e:	601a      	str	r2, [r3, #0]
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	e00a      	b.n	800ae40 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ae30:	4b39      	ldr	r3, [pc, #228]	; (800af18 <xQueueGenericSend+0x1f0>)
 800ae32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae36:	601a      	str	r2, [r3, #0]
 800ae38:	f3bf 8f4f 	dsb	sy
 800ae3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae40:	f001 ff9a 	bl	800cd78 <vPortExitCritical>
				return pdPASS;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e063      	b.n	800af10 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d103      	bne.n	800ae56 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae4e:	f001 ff93 	bl	800cd78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	e05c      	b.n	800af10 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d106      	bne.n	800ae6a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae5c:	f107 0314 	add.w	r3, r7, #20
 800ae60:	4618      	mov	r0, r3
 800ae62:	f001 f9d5 	bl	800c210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae66:	2301      	movs	r3, #1
 800ae68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae6a:	f001 ff85 	bl	800cd78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae6e:	f000 ff6b 	bl	800bd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae72:	f001 ff53 	bl	800cd1c <vPortEnterCritical>
 800ae76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae7c:	b25b      	sxtb	r3, r3
 800ae7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae82:	d103      	bne.n	800ae8c <xQueueGenericSend+0x164>
 800ae84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae86:	2200      	movs	r2, #0
 800ae88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae92:	b25b      	sxtb	r3, r3
 800ae94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae98:	d103      	bne.n	800aea2 <xQueueGenericSend+0x17a>
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800aea2:	f001 ff69 	bl	800cd78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aea6:	1d3a      	adds	r2, r7, #4
 800aea8:	f107 0314 	add.w	r3, r7, #20
 800aeac:	4611      	mov	r1, r2
 800aeae:	4618      	mov	r0, r3
 800aeb0:	f001 f9c4 	bl	800c23c <xTaskCheckForTimeOut>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d124      	bne.n	800af04 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aeba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aebc:	f000 fcdf 	bl	800b87e <prvIsQueueFull>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d018      	beq.n	800aef8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec8:	3310      	adds	r3, #16
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	4611      	mov	r1, r2
 800aece:	4618      	mov	r0, r3
 800aed0:	f001 f918 	bl	800c104 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aed6:	f000 fc6a 	bl	800b7ae <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aeda:	f000 ff43 	bl	800bd64 <xTaskResumeAll>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f47f af7c 	bne.w	800adde <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <xQueueGenericSend+0x1f0>)
 800aee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	f3bf 8f4f 	dsb	sy
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	e772      	b.n	800adde <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefa:	f000 fc58 	bl	800b7ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aefe:	f000 ff31 	bl	800bd64 <xTaskResumeAll>
 800af02:	e76c      	b.n	800adde <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800af04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af06:	f000 fc52 	bl	800b7ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af0a:	f000 ff2b 	bl	800bd64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800af0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800af10:	4618      	mov	r0, r3
 800af12:	3738      	adds	r7, #56	; 0x38
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	e000ed04 	.word	0xe000ed04

0800af1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b08e      	sub	sp, #56	; 0x38
 800af20:	af00      	add	r7, sp, #0
 800af22:	60f8      	str	r0, [r7, #12]
 800af24:	60b9      	str	r1, [r7, #8]
 800af26:	607a      	str	r2, [r7, #4]
 800af28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	2b00      	cmp	r3, #0
 800af32:	d109      	bne.n	800af48 <xQueueGenericSendFromISR+0x2c>
 800af34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af38:	f383 8811 	msr	BASEPRI, r3
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f3bf 8f4f 	dsb	sy
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
 800af46:	e7fe      	b.n	800af46 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d103      	bne.n	800af56 <xQueueGenericSendFromISR+0x3a>
 800af4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af52:	2b00      	cmp	r3, #0
 800af54:	d101      	bne.n	800af5a <xQueueGenericSendFromISR+0x3e>
 800af56:	2301      	movs	r3, #1
 800af58:	e000      	b.n	800af5c <xQueueGenericSendFromISR+0x40>
 800af5a:	2300      	movs	r3, #0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d109      	bne.n	800af74 <xQueueGenericSendFromISR+0x58>
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	f383 8811 	msr	BASEPRI, r3
 800af68:	f3bf 8f6f 	isb	sy
 800af6c:	f3bf 8f4f 	dsb	sy
 800af70:	623b      	str	r3, [r7, #32]
 800af72:	e7fe      	b.n	800af72 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	2b02      	cmp	r3, #2
 800af78:	d103      	bne.n	800af82 <xQueueGenericSendFromISR+0x66>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d101      	bne.n	800af86 <xQueueGenericSendFromISR+0x6a>
 800af82:	2301      	movs	r3, #1
 800af84:	e000      	b.n	800af88 <xQueueGenericSendFromISR+0x6c>
 800af86:	2300      	movs	r3, #0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d109      	bne.n	800afa0 <xQueueGenericSendFromISR+0x84>
 800af8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	e7fe      	b.n	800af9e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800afa0:	f001 ff98 	bl	800ced4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800afa4:	f3ef 8211 	mrs	r2, BASEPRI
 800afa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	61ba      	str	r2, [r7, #24]
 800afba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800afbc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800afbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800afc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afc8:	429a      	cmp	r2, r3
 800afca:	d302      	bcc.n	800afd2 <xQueueGenericSendFromISR+0xb6>
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	2b02      	cmp	r3, #2
 800afd0:	d12c      	bne.n	800b02c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	68b9      	ldr	r1, [r7, #8]
 800afe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afe2:	f000 fb54 	bl	800b68e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afe6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800afea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afee:	d112      	bne.n	800b016 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d016      	beq.n	800b026 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800affa:	3324      	adds	r3, #36	; 0x24
 800affc:	4618      	mov	r0, r3
 800affe:	f001 f8a5 	bl	800c14c <xTaskRemoveFromEventList>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00e      	beq.n	800b026 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00b      	beq.n	800b026 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	601a      	str	r2, [r3, #0]
 800b014:	e007      	b.n	800b026 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b01a:	3301      	adds	r3, #1
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	b25a      	sxtb	r2, r3
 800b020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b026:	2301      	movs	r3, #1
 800b028:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b02a:	e001      	b.n	800b030 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b02c:	2300      	movs	r3, #0
 800b02e:	637b      	str	r3, [r7, #52]	; 0x34
 800b030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b032:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b03a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3738      	adds	r7, #56	; 0x38
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}

0800b044 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b08e      	sub	sp, #56	; 0x38
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
 800b04c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b054:	2b00      	cmp	r3, #0
 800b056:	d109      	bne.n	800b06c <xQueueGiveFromISR+0x28>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	f383 8811 	msr	BASEPRI, r3
 800b060:	f3bf 8f6f 	isb	sy
 800b064:	f3bf 8f4f 	dsb	sy
 800b068:	623b      	str	r3, [r7, #32]
 800b06a:	e7fe      	b.n	800b06a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b070:	2b00      	cmp	r3, #0
 800b072:	d009      	beq.n	800b088 <xQueueGiveFromISR+0x44>
 800b074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b078:	f383 8811 	msr	BASEPRI, r3
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	61fb      	str	r3, [r7, #28]
 800b086:	e7fe      	b.n	800b086 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d103      	bne.n	800b098 <xQueueGiveFromISR+0x54>
 800b090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <xQueueGiveFromISR+0x58>
 800b098:	2301      	movs	r3, #1
 800b09a:	e000      	b.n	800b09e <xQueueGiveFromISR+0x5a>
 800b09c:	2300      	movs	r3, #0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d109      	bne.n	800b0b6 <xQueueGiveFromISR+0x72>
 800b0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a6:	f383 8811 	msr	BASEPRI, r3
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	f3bf 8f4f 	dsb	sy
 800b0b2:	61bb      	str	r3, [r7, #24]
 800b0b4:	e7fe      	b.n	800b0b4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0b6:	f001 ff0d 	bl	800ced4 <vPortValidateInterruptPriority>
	__asm volatile
 800b0ba:	f3ef 8211 	mrs	r2, BASEPRI
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	617a      	str	r2, [r7, #20]
 800b0d0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b0d2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0e2:	429a      	cmp	r2, r3
 800b0e4:	d22b      	bcs.n	800b13e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b100:	d112      	bne.n	800b128 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b106:	2b00      	cmp	r3, #0
 800b108:	d016      	beq.n	800b138 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10c:	3324      	adds	r3, #36	; 0x24
 800b10e:	4618      	mov	r0, r3
 800b110:	f001 f81c 	bl	800c14c <xTaskRemoveFromEventList>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d00e      	beq.n	800b138 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	2201      	movs	r2, #1
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	e007      	b.n	800b138 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b12c:	3301      	adds	r3, #1
 800b12e:	b2db      	uxtb	r3, r3
 800b130:	b25a      	sxtb	r2, r3
 800b132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b138:	2301      	movs	r3, #1
 800b13a:	637b      	str	r3, [r7, #52]	; 0x34
 800b13c:	e001      	b.n	800b142 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b13e:	2300      	movs	r3, #0
 800b140:	637b      	str	r3, [r7, #52]	; 0x34
 800b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b144:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3738      	adds	r7, #56	; 0x38
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08c      	sub	sp, #48	; 0x30
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b164:	2300      	movs	r3, #0
 800b166:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d109      	bne.n	800b186 <xQueueReceive+0x2e>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	623b      	str	r3, [r7, #32]
 800b184:	e7fe      	b.n	800b184 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d103      	bne.n	800b194 <xQueueReceive+0x3c>
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <xQueueReceive+0x40>
 800b194:	2301      	movs	r3, #1
 800b196:	e000      	b.n	800b19a <xQueueReceive+0x42>
 800b198:	2300      	movs	r3, #0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d109      	bne.n	800b1b2 <xQueueReceive+0x5a>
 800b19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a2:	f383 8811 	msr	BASEPRI, r3
 800b1a6:	f3bf 8f6f 	isb	sy
 800b1aa:	f3bf 8f4f 	dsb	sy
 800b1ae:	61fb      	str	r3, [r7, #28]
 800b1b0:	e7fe      	b.n	800b1b0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1b2:	f001 f981 	bl	800c4b8 <xTaskGetSchedulerState>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d102      	bne.n	800b1c2 <xQueueReceive+0x6a>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d101      	bne.n	800b1c6 <xQueueReceive+0x6e>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e000      	b.n	800b1c8 <xQueueReceive+0x70>
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d109      	bne.n	800b1e0 <xQueueReceive+0x88>
 800b1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	61bb      	str	r3, [r7, #24]
 800b1de:	e7fe      	b.n	800b1de <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1e0:	f001 fd9c 	bl	800cd1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d01f      	beq.n	800b230 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1f0:	68b9      	ldr	r1, [r7, #8]
 800b1f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1f4:	f000 fab5 	bl	800b762 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	1e5a      	subs	r2, r3, #1
 800b1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fe:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00f      	beq.n	800b228 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b20a:	3310      	adds	r3, #16
 800b20c:	4618      	mov	r0, r3
 800b20e:	f000 ff9d 	bl	800c14c <xTaskRemoveFromEventList>
 800b212:	4603      	mov	r3, r0
 800b214:	2b00      	cmp	r3, #0
 800b216:	d007      	beq.n	800b228 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b218:	4b3c      	ldr	r3, [pc, #240]	; (800b30c <xQueueReceive+0x1b4>)
 800b21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b21e:	601a      	str	r2, [r3, #0]
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b228:	f001 fda6 	bl	800cd78 <vPortExitCritical>
				return pdPASS;
 800b22c:	2301      	movs	r3, #1
 800b22e:	e069      	b.n	800b304 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b236:	f001 fd9f 	bl	800cd78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e062      	b.n	800b304 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b23e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b240:	2b00      	cmp	r3, #0
 800b242:	d106      	bne.n	800b252 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b244:	f107 0310 	add.w	r3, r7, #16
 800b248:	4618      	mov	r0, r3
 800b24a:	f000 ffe1 	bl	800c210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b24e:	2301      	movs	r3, #1
 800b250:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b252:	f001 fd91 	bl	800cd78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b256:	f000 fd77 	bl	800bd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b25a:	f001 fd5f 	bl	800cd1c <vPortEnterCritical>
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b264:	b25b      	sxtb	r3, r3
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26a:	d103      	bne.n	800b274 <xQueueReceive+0x11c>
 800b26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b27a:	b25b      	sxtb	r3, r3
 800b27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b280:	d103      	bne.n	800b28a <xQueueReceive+0x132>
 800b282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b284:	2200      	movs	r2, #0
 800b286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b28a:	f001 fd75 	bl	800cd78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b28e:	1d3a      	adds	r2, r7, #4
 800b290:	f107 0310 	add.w	r3, r7, #16
 800b294:	4611      	mov	r1, r2
 800b296:	4618      	mov	r0, r3
 800b298:	f000 ffd0 	bl	800c23c <xTaskCheckForTimeOut>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d123      	bne.n	800b2ea <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2a4:	f000 fad5 	bl	800b852 <prvIsQueueEmpty>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d017      	beq.n	800b2de <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b0:	3324      	adds	r3, #36	; 0x24
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	4611      	mov	r1, r2
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f000 ff24 	bl	800c104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2be:	f000 fa76 	bl	800b7ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2c2:	f000 fd4f 	bl	800bd64 <xTaskResumeAll>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d189      	bne.n	800b1e0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800b2cc:	4b0f      	ldr	r3, [pc, #60]	; (800b30c <xQueueReceive+0x1b4>)
 800b2ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	e780      	b.n	800b1e0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e0:	f000 fa65 	bl	800b7ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2e4:	f000 fd3e 	bl	800bd64 <xTaskResumeAll>
 800b2e8:	e77a      	b.n	800b1e0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2ec:	f000 fa5f 	bl	800b7ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2f0:	f000 fd38 	bl	800bd64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f6:	f000 faac 	bl	800b852 <prvIsQueueEmpty>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f43f af6f 	beq.w	800b1e0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b302:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b304:	4618      	mov	r0, r3
 800b306:	3730      	adds	r7, #48	; 0x30
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	e000ed04 	.word	0xe000ed04

0800b310 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b08e      	sub	sp, #56	; 0x38
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b31a:	2300      	movs	r3, #0
 800b31c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b322:	2300      	movs	r3, #0
 800b324:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d109      	bne.n	800b340 <xQueueSemaphoreTake+0x30>
 800b32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b330:	f383 8811 	msr	BASEPRI, r3
 800b334:	f3bf 8f6f 	isb	sy
 800b338:	f3bf 8f4f 	dsb	sy
 800b33c:	623b      	str	r3, [r7, #32]
 800b33e:	e7fe      	b.n	800b33e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b344:	2b00      	cmp	r3, #0
 800b346:	d009      	beq.n	800b35c <xQueueSemaphoreTake+0x4c>
 800b348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b34c:	f383 8811 	msr	BASEPRI, r3
 800b350:	f3bf 8f6f 	isb	sy
 800b354:	f3bf 8f4f 	dsb	sy
 800b358:	61fb      	str	r3, [r7, #28]
 800b35a:	e7fe      	b.n	800b35a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b35c:	f001 f8ac 	bl	800c4b8 <xTaskGetSchedulerState>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d102      	bne.n	800b36c <xQueueSemaphoreTake+0x5c>
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d101      	bne.n	800b370 <xQueueSemaphoreTake+0x60>
 800b36c:	2301      	movs	r3, #1
 800b36e:	e000      	b.n	800b372 <xQueueSemaphoreTake+0x62>
 800b370:	2300      	movs	r3, #0
 800b372:	2b00      	cmp	r3, #0
 800b374:	d109      	bne.n	800b38a <xQueueSemaphoreTake+0x7a>
 800b376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	61bb      	str	r3, [r7, #24]
 800b388:	e7fe      	b.n	800b388 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b38a:	f001 fcc7 	bl	800cd1c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b392:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	2b00      	cmp	r3, #0
 800b398:	d024      	beq.n	800b3e4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	1e5a      	subs	r2, r3, #1
 800b39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d104      	bne.n	800b3b4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b3aa:	f001 fa3f 	bl	800c82c <pvTaskIncrementMutexHeldCount>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00f      	beq.n	800b3dc <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3be:	3310      	adds	r3, #16
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fec3 	bl	800c14c <xTaskRemoveFromEventList>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d007      	beq.n	800b3dc <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b3cc:	4b53      	ldr	r3, [pc, #332]	; (800b51c <xQueueSemaphoreTake+0x20c>)
 800b3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3d2:	601a      	str	r2, [r3, #0]
 800b3d4:	f3bf 8f4f 	dsb	sy
 800b3d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b3dc:	f001 fccc 	bl	800cd78 <vPortExitCritical>
				return pdPASS;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e096      	b.n	800b512 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d110      	bne.n	800b40c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d009      	beq.n	800b404 <xQueueSemaphoreTake+0xf4>
 800b3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f4:	f383 8811 	msr	BASEPRI, r3
 800b3f8:	f3bf 8f6f 	isb	sy
 800b3fc:	f3bf 8f4f 	dsb	sy
 800b400:	617b      	str	r3, [r7, #20]
 800b402:	e7fe      	b.n	800b402 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b404:	f001 fcb8 	bl	800cd78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b408:	2300      	movs	r3, #0
 800b40a:	e082      	b.n	800b512 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b412:	f107 030c 	add.w	r3, r7, #12
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fefa 	bl	800c210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b41c:	2301      	movs	r3, #1
 800b41e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b420:	f001 fcaa 	bl	800cd78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b424:	f000 fc90 	bl	800bd48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b428:	f001 fc78 	bl	800cd1c <vPortEnterCritical>
 800b42c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b42e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b432:	b25b      	sxtb	r3, r3
 800b434:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b438:	d103      	bne.n	800b442 <xQueueSemaphoreTake+0x132>
 800b43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b448:	b25b      	sxtb	r3, r3
 800b44a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b44e:	d103      	bne.n	800b458 <xQueueSemaphoreTake+0x148>
 800b450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b452:	2200      	movs	r2, #0
 800b454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b458:	f001 fc8e 	bl	800cd78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b45c:	463a      	mov	r2, r7
 800b45e:	f107 030c 	add.w	r3, r7, #12
 800b462:	4611      	mov	r1, r2
 800b464:	4618      	mov	r0, r3
 800b466:	f000 fee9 	bl	800c23c <xTaskCheckForTimeOut>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d132      	bne.n	800b4d6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b472:	f000 f9ee 	bl	800b852 <prvIsQueueEmpty>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d026      	beq.n	800b4ca <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d109      	bne.n	800b498 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800b484:	f001 fc4a 	bl	800cd1c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	4618      	mov	r0, r3
 800b48e:	f001 f831 	bl	800c4f4 <xTaskPriorityInherit>
 800b492:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b494:	f001 fc70 	bl	800cd78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	3324      	adds	r3, #36	; 0x24
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fe2f 	bl	800c104 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b4a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4a8:	f000 f981 	bl	800b7ae <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b4ac:	f000 fc5a 	bl	800bd64 <xTaskResumeAll>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	f47f af69 	bne.w	800b38a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800b4b8:	4b18      	ldr	r3, [pc, #96]	; (800b51c <xQueueSemaphoreTake+0x20c>)
 800b4ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	f3bf 8f4f 	dsb	sy
 800b4c4:	f3bf 8f6f 	isb	sy
 800b4c8:	e75f      	b.n	800b38a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b4ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4cc:	f000 f96f 	bl	800b7ae <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b4d0:	f000 fc48 	bl	800bd64 <xTaskResumeAll>
 800b4d4:	e759      	b.n	800b38a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b4d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4d8:	f000 f969 	bl	800b7ae <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b4dc:	f000 fc42 	bl	800bd64 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b4e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4e2:	f000 f9b6 	bl	800b852 <prvIsQueueEmpty>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f43f af4e 	beq.w	800b38a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00d      	beq.n	800b510 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800b4f4:	f001 fc12 	bl	800cd1c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b4fa:	f000 f8b0 	bl	800b65e <prvGetDisinheritPriorityAfterTimeout>
 800b4fe:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b506:	4618      	mov	r0, r3
 800b508:	f001 f8f8 	bl	800c6fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b50c:	f001 fc34 	bl	800cd78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b510:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b512:	4618      	mov	r0, r3
 800b514:	3738      	adds	r7, #56	; 0x38
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	e000ed04 	.word	0xe000ed04

0800b520 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b08e      	sub	sp, #56	; 0x38
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b532:	2b00      	cmp	r3, #0
 800b534:	d109      	bne.n	800b54a <xQueueReceiveFromISR+0x2a>
 800b536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	623b      	str	r3, [r7, #32]
 800b548:	e7fe      	b.n	800b548 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d103      	bne.n	800b558 <xQueueReceiveFromISR+0x38>
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	d101      	bne.n	800b55c <xQueueReceiveFromISR+0x3c>
 800b558:	2301      	movs	r3, #1
 800b55a:	e000      	b.n	800b55e <xQueueReceiveFromISR+0x3e>
 800b55c:	2300      	movs	r3, #0
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d109      	bne.n	800b576 <xQueueReceiveFromISR+0x56>
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	e7fe      	b.n	800b574 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b576:	f001 fcad 	bl	800ced4 <vPortValidateInterruptPriority>
	__asm volatile
 800b57a:	f3ef 8211 	mrs	r2, BASEPRI
 800b57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b582:	f383 8811 	msr	BASEPRI, r3
 800b586:	f3bf 8f6f 	isb	sy
 800b58a:	f3bf 8f4f 	dsb	sy
 800b58e:	61ba      	str	r2, [r7, #24]
 800b590:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b592:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b59a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d02f      	beq.n	800b602 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b5a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b5a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b5b0:	f000 f8d7 	bl	800b762 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b6:	1e5a      	subs	r2, r3, #1
 800b5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b5bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5c4:	d112      	bne.n	800b5ec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d016      	beq.n	800b5fc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5d0:	3310      	adds	r3, #16
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f000 fdba 	bl	800c14c <xTaskRemoveFromEventList>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00e      	beq.n	800b5fc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2201      	movs	r2, #1
 800b5e8:	601a      	str	r2, [r3, #0]
 800b5ea:	e007      	b.n	800b5fc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	b25a      	sxtb	r2, r3
 800b5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	637b      	str	r3, [r7, #52]	; 0x34
 800b600:	e001      	b.n	800b606 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800b602:	2300      	movs	r3, #0
 800b604:	637b      	str	r3, [r7, #52]	; 0x34
 800b606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b608:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b612:	4618      	mov	r0, r3
 800b614:	3738      	adds	r7, #56	; 0x38
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d109      	bne.n	800b640 <vQueueDelete+0x26>
	__asm volatile
 800b62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b630:	f383 8811 	msr	BASEPRI, r3
 800b634:	f3bf 8f6f 	isb	sy
 800b638:	f3bf 8f4f 	dsb	sy
 800b63c:	60bb      	str	r3, [r7, #8]
 800b63e:	e7fe      	b.n	800b63e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 f935 	bl	800b8b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800b650:	68f8      	ldr	r0, [r7, #12]
 800b652:	f001 fd3f 	bl	800d0d4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b656:	bf00      	nop
 800b658:	3710      	adds	r7, #16
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b65e:	b480      	push	{r7}
 800b660:	b085      	sub	sp, #20
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d006      	beq.n	800b67c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	f1c3 0307 	rsb	r3, r3, #7
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	e001      	b.n	800b680 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b67c:	2300      	movs	r3, #0
 800b67e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b680:	68fb      	ldr	r3, [r7, #12]
	}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr

0800b68e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b68e:	b580      	push	{r7, lr}
 800b690:	b086      	sub	sp, #24
 800b692:	af00      	add	r7, sp, #0
 800b694:	60f8      	str	r0, [r7, #12]
 800b696:	60b9      	str	r1, [r7, #8]
 800b698:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b69a:	2300      	movs	r3, #0
 800b69c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d10d      	bne.n	800b6c8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d14d      	bne.n	800b750 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 ff9b 	bl	800c5f4 <xTaskPriorityDisinherit>
 800b6be:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	609a      	str	r2, [r3, #8]
 800b6c6:	e043      	b.n	800b750 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d119      	bne.n	800b702 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6858      	ldr	r0, [r3, #4]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	68b9      	ldr	r1, [r7, #8]
 800b6da:	f001 fe33 	bl	800d344 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	685a      	ldr	r2, [r3, #4]
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e6:	441a      	add	r2, r3
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d32b      	bcc.n	800b750 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	605a      	str	r2, [r3, #4]
 800b700:	e026      	b.n	800b750 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	68d8      	ldr	r0, [r3, #12]
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b70a:	461a      	mov	r2, r3
 800b70c:	68b9      	ldr	r1, [r7, #8]
 800b70e:	f001 fe19 	bl	800d344 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	68da      	ldr	r2, [r3, #12]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71a:	425b      	negs	r3, r3
 800b71c:	441a      	add	r2, r3
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	68da      	ldr	r2, [r3, #12]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d207      	bcs.n	800b73e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	689a      	ldr	r2, [r3, #8]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b736:	425b      	negs	r3, r3
 800b738:	441a      	add	r2, r3
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b02      	cmp	r3, #2
 800b742:	d105      	bne.n	800b750 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d002      	beq.n	800b750 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	3b01      	subs	r3, #1
 800b74e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b750:	693b      	ldr	r3, [r7, #16]
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b758:	697b      	ldr	r3, [r7, #20]
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3718      	adds	r7, #24
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
 800b76a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b770:	2b00      	cmp	r3, #0
 800b772:	d018      	beq.n	800b7a6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68da      	ldr	r2, [r3, #12]
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b77c:	441a      	add	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68da      	ldr	r2, [r3, #12]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d303      	bcc.n	800b796 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68d9      	ldr	r1, [r3, #12]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	461a      	mov	r2, r3
 800b7a0:	6838      	ldr	r0, [r7, #0]
 800b7a2:	f001 fdcf 	bl	800d344 <memcpy>
	}
}
 800b7a6:	bf00      	nop
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b084      	sub	sp, #16
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b7b6:	f001 fab1 	bl	800cd1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7c0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7c2:	e011      	b.n	800b7e8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d012      	beq.n	800b7f2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3324      	adds	r3, #36	; 0x24
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f000 fcbb 	bl	800c14c <xTaskRemoveFromEventList>
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d001      	beq.n	800b7e0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b7dc:	f000 fd8e 	bl	800c2fc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b7e0:	7bfb      	ldrb	r3, [r7, #15]
 800b7e2:	3b01      	subs	r3, #1
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	dce9      	bgt.n	800b7c4 <prvUnlockQueue+0x16>
 800b7f0:	e000      	b.n	800b7f4 <prvUnlockQueue+0x46>
					break;
 800b7f2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	22ff      	movs	r2, #255	; 0xff
 800b7f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b7fc:	f001 fabc 	bl	800cd78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b800:	f001 fa8c 	bl	800cd1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b80a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b80c:	e011      	b.n	800b832 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	691b      	ldr	r3, [r3, #16]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d012      	beq.n	800b83c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	3310      	adds	r3, #16
 800b81a:	4618      	mov	r0, r3
 800b81c:	f000 fc96 	bl	800c14c <xTaskRemoveFromEventList>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b826:	f000 fd69 	bl	800c2fc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b82a:	7bbb      	ldrb	r3, [r7, #14]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b832:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b836:	2b00      	cmp	r3, #0
 800b838:	dce9      	bgt.n	800b80e <prvUnlockQueue+0x60>
 800b83a:	e000      	b.n	800b83e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b83c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	22ff      	movs	r2, #255	; 0xff
 800b842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b846:	f001 fa97 	bl	800cd78 <vPortExitCritical>
}
 800b84a:	bf00      	nop
 800b84c:	3710      	adds	r7, #16
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b084      	sub	sp, #16
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b85a:	f001 fa5f 	bl	800cd1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b862:	2b00      	cmp	r3, #0
 800b864:	d102      	bne.n	800b86c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b866:	2301      	movs	r3, #1
 800b868:	60fb      	str	r3, [r7, #12]
 800b86a:	e001      	b.n	800b870 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b86c:	2300      	movs	r3, #0
 800b86e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b870:	f001 fa82 	bl	800cd78 <vPortExitCritical>

	return xReturn;
 800b874:	68fb      	ldr	r3, [r7, #12]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3710      	adds	r7, #16
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b87e:	b580      	push	{r7, lr}
 800b880:	b084      	sub	sp, #16
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b886:	f001 fa49 	bl	800cd1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b892:	429a      	cmp	r2, r3
 800b894:	d102      	bne.n	800b89c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b896:	2301      	movs	r3, #1
 800b898:	60fb      	str	r3, [r7, #12]
 800b89a:	e001      	b.n	800b8a0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8a0:	f001 fa6a 	bl	800cd78 <vPortExitCritical>

	return xReturn;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}
	...

0800b8b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b085      	sub	sp, #20
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60fb      	str	r3, [r7, #12]
 800b8bc:	e016      	b.n	800b8ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b8be:	4a10      	ldr	r2, [pc, #64]	; (800b900 <vQueueUnregisterQueue+0x50>)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d10b      	bne.n	800b8e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b8ce:	4a0c      	ldr	r2, [pc, #48]	; (800b900 <vQueueUnregisterQueue+0x50>)
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2100      	movs	r1, #0
 800b8d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b8d8:	4a09      	ldr	r2, [pc, #36]	; (800b900 <vQueueUnregisterQueue+0x50>)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	00db      	lsls	r3, r3, #3
 800b8de:	4413      	add	r3, r2
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	605a      	str	r2, [r3, #4]
				break;
 800b8e4:	e005      	b.n	800b8f2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60fb      	str	r3, [r7, #12]
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2b07      	cmp	r3, #7
 800b8f0:	d9e5      	bls.n	800b8be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b8f2:	bf00      	nop
 800b8f4:	3714      	adds	r7, #20
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
 800b8fe:	bf00      	nop
 800b900:	20008638 	.word	0x20008638

0800b904 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08e      	sub	sp, #56	; 0x38
 800b908:	af04      	add	r7, sp, #16
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b914:	2b00      	cmp	r3, #0
 800b916:	d109      	bne.n	800b92c <xTaskCreateStatic+0x28>
 800b918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91c:	f383 8811 	msr	BASEPRI, r3
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	f3bf 8f4f 	dsb	sy
 800b928:	623b      	str	r3, [r7, #32]
 800b92a:	e7fe      	b.n	800b92a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800b92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d109      	bne.n	800b946 <xTaskCreateStatic+0x42>
 800b932:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b936:	f383 8811 	msr	BASEPRI, r3
 800b93a:	f3bf 8f6f 	isb	sy
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	61fb      	str	r3, [r7, #28]
 800b944:	e7fe      	b.n	800b944 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b946:	2354      	movs	r3, #84	; 0x54
 800b948:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	2b54      	cmp	r3, #84	; 0x54
 800b94e:	d009      	beq.n	800b964 <xTaskCreateStatic+0x60>
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	f383 8811 	msr	BASEPRI, r3
 800b958:	f3bf 8f6f 	isb	sy
 800b95c:	f3bf 8f4f 	dsb	sy
 800b960:	61bb      	str	r3, [r7, #24]
 800b962:	e7fe      	b.n	800b962 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b964:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d01e      	beq.n	800b9aa <xTaskCreateStatic+0xa6>
 800b96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d01b      	beq.n	800b9aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b97a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	2202      	movs	r2, #2
 800b980:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b984:	2300      	movs	r3, #0
 800b986:	9303      	str	r3, [sp, #12]
 800b988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b98a:	9302      	str	r3, [sp, #8]
 800b98c:	f107 0314 	add.w	r3, r7, #20
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	68b9      	ldr	r1, [r7, #8]
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 f850 	bl	800ba42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b9a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9a4:	f000 f8d4 	bl	800bb50 <prvAddNewTaskToReadyList>
 800b9a8:	e001      	b.n	800b9ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b9ae:	697b      	ldr	r3, [r7, #20]
	}
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	3728      	adds	r7, #40	; 0x28
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b08c      	sub	sp, #48	; 0x30
 800b9bc:	af04      	add	r7, sp, #16
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	603b      	str	r3, [r7, #0]
 800b9c4:	4613      	mov	r3, r2
 800b9c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9c8:	88fb      	ldrh	r3, [r7, #6]
 800b9ca:	009b      	lsls	r3, r3, #2
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	f001 fabf 	bl	800cf50 <pvPortMalloc>
 800b9d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d00e      	beq.n	800b9f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9da:	2054      	movs	r0, #84	; 0x54
 800b9dc:	f001 fab8 	bl	800cf50 <pvPortMalloc>
 800b9e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9e2:	69fb      	ldr	r3, [r7, #28]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	697a      	ldr	r2, [r7, #20]
 800b9ec:	631a      	str	r2, [r3, #48]	; 0x30
 800b9ee:	e005      	b.n	800b9fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9f0:	6978      	ldr	r0, [r7, #20]
 800b9f2:	f001 fb6f 	bl	800d0d4 <vPortFree>
 800b9f6:	e001      	b.n	800b9fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d017      	beq.n	800ba32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ba0a:	88fa      	ldrh	r2, [r7, #6]
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9303      	str	r3, [sp, #12]
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	9302      	str	r3, [sp, #8]
 800ba14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba16:	9301      	str	r3, [sp, #4]
 800ba18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	68b9      	ldr	r1, [r7, #8]
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f000 f80e 	bl	800ba42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba26:	69f8      	ldr	r0, [r7, #28]
 800ba28:	f000 f892 	bl	800bb50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	61bb      	str	r3, [r7, #24]
 800ba30:	e002      	b.n	800ba38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba32:	f04f 33ff 	mov.w	r3, #4294967295
 800ba36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba38:	69bb      	ldr	r3, [r7, #24]
	}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3720      	adds	r7, #32
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b088      	sub	sp, #32
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	60f8      	str	r0, [r7, #12]
 800ba4a:	60b9      	str	r1, [r7, #8]
 800ba4c:	607a      	str	r2, [r7, #4]
 800ba4e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ba5a:	3b01      	subs	r3, #1
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	f023 0307 	bic.w	r3, r3, #7
 800ba68:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	f003 0307 	and.w	r3, r3, #7
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d009      	beq.n	800ba88 <prvInitialiseNewTask+0x46>
 800ba74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba78:	f383 8811 	msr	BASEPRI, r3
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	f3bf 8f4f 	dsb	sy
 800ba84:	617b      	str	r3, [r7, #20]
 800ba86:	e7fe      	b.n	800ba86 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d01f      	beq.n	800bace <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba8e:	2300      	movs	r3, #0
 800ba90:	61fb      	str	r3, [r7, #28]
 800ba92:	e012      	b.n	800baba <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba94:	68ba      	ldr	r2, [r7, #8]
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	4413      	add	r3, r2
 800ba9a:	7819      	ldrb	r1, [r3, #0]
 800ba9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	4413      	add	r3, r2
 800baa2:	3334      	adds	r3, #52	; 0x34
 800baa4:	460a      	mov	r2, r1
 800baa6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baa8:	68ba      	ldr	r2, [r7, #8]
 800baaa:	69fb      	ldr	r3, [r7, #28]
 800baac:	4413      	add	r3, r2
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d006      	beq.n	800bac2 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	3301      	adds	r3, #1
 800bab8:	61fb      	str	r3, [r7, #28]
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	2b0f      	cmp	r3, #15
 800babe:	d9e9      	bls.n	800ba94 <prvInitialiseNewTask+0x52>
 800bac0:	e000      	b.n	800bac4 <prvInitialiseNewTask+0x82>
			{
				break;
 800bac2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac6:	2200      	movs	r2, #0
 800bac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bacc:	e003      	b.n	800bad6 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad8:	2b06      	cmp	r3, #6
 800bada:	d901      	bls.n	800bae0 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800badc:	2306      	movs	r3, #6
 800bade:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bae8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800baec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baee:	2200      	movs	r2, #0
 800baf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800baf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baf4:	3304      	adds	r3, #4
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fefc 	bl	800a8f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800bafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bafe:	3318      	adds	r3, #24
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe fef7 	bl	800a8f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bb06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb0e:	f1c3 0207 	rsb	r2, r3, #7
 800bb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	2200      	movs	r2, #0
 800bb20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	68f9      	ldr	r1, [r7, #12]
 800bb2e:	69b8      	ldr	r0, [r7, #24]
 800bb30:	f000 ffcc 	bl	800cacc <pxPortInitialiseStack>
 800bb34:	4602      	mov	r2, r0
 800bb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d002      	beq.n	800bb46 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb46:	bf00      	nop
 800bb48:	3720      	adds	r7, #32
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb58:	f001 f8e0 	bl	800cd1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb5c:	4b2a      	ldr	r3, [pc, #168]	; (800bc08 <prvAddNewTaskToReadyList+0xb8>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3301      	adds	r3, #1
 800bb62:	4a29      	ldr	r2, [pc, #164]	; (800bc08 <prvAddNewTaskToReadyList+0xb8>)
 800bb64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb66:	4b29      	ldr	r3, [pc, #164]	; (800bc0c <prvAddNewTaskToReadyList+0xbc>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d109      	bne.n	800bb82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb6e:	4a27      	ldr	r2, [pc, #156]	; (800bc0c <prvAddNewTaskToReadyList+0xbc>)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb74:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <prvAddNewTaskToReadyList+0xb8>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2b01      	cmp	r3, #1
 800bb7a:	d110      	bne.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb7c:	f000 fbe2 	bl	800c344 <prvInitialiseTaskLists>
 800bb80:	e00d      	b.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb82:	4b23      	ldr	r3, [pc, #140]	; (800bc10 <prvAddNewTaskToReadyList+0xc0>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d109      	bne.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb8a:	4b20      	ldr	r3, [pc, #128]	; (800bc0c <prvAddNewTaskToReadyList+0xbc>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d802      	bhi.n	800bb9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb98:	4a1c      	ldr	r2, [pc, #112]	; (800bc0c <prvAddNewTaskToReadyList+0xbc>)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb9e:	4b1d      	ldr	r3, [pc, #116]	; (800bc14 <prvAddNewTaskToReadyList+0xc4>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3301      	adds	r3, #1
 800bba4:	4a1b      	ldr	r2, [pc, #108]	; (800bc14 <prvAddNewTaskToReadyList+0xc4>)
 800bba6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbac:	2201      	movs	r2, #1
 800bbae:	409a      	lsls	r2, r3
 800bbb0:	4b19      	ldr	r3, [pc, #100]	; (800bc18 <prvAddNewTaskToReadyList+0xc8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	4a18      	ldr	r2, [pc, #96]	; (800bc18 <prvAddNewTaskToReadyList+0xc8>)
 800bbb8:	6013      	str	r3, [r2, #0]
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4413      	add	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4a15      	ldr	r2, [pc, #84]	; (800bc1c <prvAddNewTaskToReadyList+0xcc>)
 800bbc8:	441a      	add	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	3304      	adds	r3, #4
 800bbce:	4619      	mov	r1, r3
 800bbd0:	4610      	mov	r0, r2
 800bbd2:	f7fe fe9c 	bl	800a90e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbd6:	f001 f8cf 	bl	800cd78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbda:	4b0d      	ldr	r3, [pc, #52]	; (800bc10 <prvAddNewTaskToReadyList+0xc0>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d00e      	beq.n	800bc00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbe2:	4b0a      	ldr	r3, [pc, #40]	; (800bc0c <prvAddNewTaskToReadyList+0xbc>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbec:	429a      	cmp	r2, r3
 800bbee:	d207      	bcs.n	800bc00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbf0:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <prvAddNewTaskToReadyList+0xd0>)
 800bbf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbf6:	601a      	str	r2, [r3, #0]
 800bbf8:	f3bf 8f4f 	dsb	sy
 800bbfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	200025cc 	.word	0x200025cc
 800bc0c:	200024cc 	.word	0x200024cc
 800bc10:	200025d8 	.word	0x200025d8
 800bc14:	200025e8 	.word	0x200025e8
 800bc18:	200025d4 	.word	0x200025d4
 800bc1c:	200024d0 	.word	0x200024d0
 800bc20:	e000ed04 	.word	0xe000ed04

0800bc24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d016      	beq.n	800bc64 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc36:	4b13      	ldr	r3, [pc, #76]	; (800bc84 <vTaskDelay+0x60>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d009      	beq.n	800bc52 <vTaskDelay+0x2e>
 800bc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc42:	f383 8811 	msr	BASEPRI, r3
 800bc46:	f3bf 8f6f 	isb	sy
 800bc4a:	f3bf 8f4f 	dsb	sy
 800bc4e:	60bb      	str	r3, [r7, #8]
 800bc50:	e7fe      	b.n	800bc50 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800bc52:	f000 f879 	bl	800bd48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc56:	2100      	movs	r1, #0
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fed1 	bl	800ca00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc5e:	f000 f881 	bl	800bd64 <xTaskResumeAll>
 800bc62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d107      	bne.n	800bc7a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800bc6a:	4b07      	ldr	r3, [pc, #28]	; (800bc88 <vTaskDelay+0x64>)
 800bc6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	200025f4 	.word	0x200025f4
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08a      	sub	sp, #40	; 0x28
 800bc90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc9a:	463a      	mov	r2, r7
 800bc9c:	1d39      	adds	r1, r7, #4
 800bc9e:	f107 0308 	add.w	r3, r7, #8
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7f4 fc1c 	bl	80004e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	9202      	str	r2, [sp, #8]
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	460a      	mov	r2, r1
 800bcba:	491d      	ldr	r1, [pc, #116]	; (800bd30 <vTaskStartScheduler+0xa4>)
 800bcbc:	481d      	ldr	r0, [pc, #116]	; (800bd34 <vTaskStartScheduler+0xa8>)
 800bcbe:	f7ff fe21 	bl	800b904 <xTaskCreateStatic>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	4b1c      	ldr	r3, [pc, #112]	; (800bd38 <vTaskStartScheduler+0xac>)
 800bcc6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bcc8:	4b1b      	ldr	r3, [pc, #108]	; (800bd38 <vTaskStartScheduler+0xac>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	e001      	b.n	800bcda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d115      	bne.n	800bd0c <vTaskStartScheduler+0x80>
 800bce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bcf2:	4b12      	ldr	r3, [pc, #72]	; (800bd3c <vTaskStartScheduler+0xb0>)
 800bcf4:	f04f 32ff 	mov.w	r2, #4294967295
 800bcf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcfa:	4b11      	ldr	r3, [pc, #68]	; (800bd40 <vTaskStartScheduler+0xb4>)
 800bcfc:	2201      	movs	r2, #1
 800bcfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd00:	4b10      	ldr	r3, [pc, #64]	; (800bd44 <vTaskStartScheduler+0xb8>)
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd06:	f000 ff6b 	bl	800cbe0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd0a:	e00d      	b.n	800bd28 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd0c:	697b      	ldr	r3, [r7, #20]
 800bd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd12:	d109      	bne.n	800bd28 <vTaskStartScheduler+0x9c>
 800bd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd18:	f383 8811 	msr	BASEPRI, r3
 800bd1c:	f3bf 8f6f 	isb	sy
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	60fb      	str	r3, [r7, #12]
 800bd26:	e7fe      	b.n	800bd26 <vTaskStartScheduler+0x9a>
}
 800bd28:	bf00      	nop
 800bd2a:	3718      	adds	r7, #24
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	0800d83c 	.word	0x0800d83c
 800bd34:	0800c315 	.word	0x0800c315
 800bd38:	200025f0 	.word	0x200025f0
 800bd3c:	200025ec 	.word	0x200025ec
 800bd40:	200025d8 	.word	0x200025d8
 800bd44:	200025d0 	.word	0x200025d0

0800bd48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd48:	b480      	push	{r7}
 800bd4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800bd4c:	4b04      	ldr	r3, [pc, #16]	; (800bd60 <vTaskSuspendAll+0x18>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	3301      	adds	r3, #1
 800bd52:	4a03      	ldr	r2, [pc, #12]	; (800bd60 <vTaskSuspendAll+0x18>)
 800bd54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800bd56:	bf00      	nop
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr
 800bd60:	200025f4 	.word	0x200025f4

0800bd64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd6e:	2300      	movs	r3, #0
 800bd70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd72:	4b41      	ldr	r3, [pc, #260]	; (800be78 <xTaskResumeAll+0x114>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d109      	bne.n	800bd8e <xTaskResumeAll+0x2a>
 800bd7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd7e:	f383 8811 	msr	BASEPRI, r3
 800bd82:	f3bf 8f6f 	isb	sy
 800bd86:	f3bf 8f4f 	dsb	sy
 800bd8a:	603b      	str	r3, [r7, #0]
 800bd8c:	e7fe      	b.n	800bd8c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd8e:	f000 ffc5 	bl	800cd1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd92:	4b39      	ldr	r3, [pc, #228]	; (800be78 <xTaskResumeAll+0x114>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3b01      	subs	r3, #1
 800bd98:	4a37      	ldr	r2, [pc, #220]	; (800be78 <xTaskResumeAll+0x114>)
 800bd9a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd9c:	4b36      	ldr	r3, [pc, #216]	; (800be78 <xTaskResumeAll+0x114>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d161      	bne.n	800be68 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bda4:	4b35      	ldr	r3, [pc, #212]	; (800be7c <xTaskResumeAll+0x118>)
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d05d      	beq.n	800be68 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdac:	e02e      	b.n	800be0c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdae:	4b34      	ldr	r3, [pc, #208]	; (800be80 <xTaskResumeAll+0x11c>)
 800bdb0:	68db      	ldr	r3, [r3, #12]
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	3318      	adds	r3, #24
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe fe04 	bl	800a9c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	f7fe fdff 	bl	800a9c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdce:	2201      	movs	r2, #1
 800bdd0:	409a      	lsls	r2, r3
 800bdd2:	4b2c      	ldr	r3, [pc, #176]	; (800be84 <xTaskResumeAll+0x120>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	4a2a      	ldr	r2, [pc, #168]	; (800be84 <xTaskResumeAll+0x120>)
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde0:	4613      	mov	r3, r2
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4a27      	ldr	r2, [pc, #156]	; (800be88 <xTaskResumeAll+0x124>)
 800bdea:	441a      	add	r2, r3
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe fd8b 	bl	800a90e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdfc:	4b23      	ldr	r3, [pc, #140]	; (800be8c <xTaskResumeAll+0x128>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be02:	429a      	cmp	r2, r3
 800be04:	d302      	bcc.n	800be0c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800be06:	4b22      	ldr	r3, [pc, #136]	; (800be90 <xTaskResumeAll+0x12c>)
 800be08:	2201      	movs	r2, #1
 800be0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be0c:	4b1c      	ldr	r3, [pc, #112]	; (800be80 <xTaskResumeAll+0x11c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d1cc      	bne.n	800bdae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be1a:	f000 fb2d 	bl	800c478 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800be1e:	4b1d      	ldr	r3, [pc, #116]	; (800be94 <xTaskResumeAll+0x130>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d010      	beq.n	800be4c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be2a:	f000 f859 	bl	800bee0 <xTaskIncrementTick>
 800be2e:	4603      	mov	r3, r0
 800be30:	2b00      	cmp	r3, #0
 800be32:	d002      	beq.n	800be3a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800be34:	4b16      	ldr	r3, [pc, #88]	; (800be90 <xTaskResumeAll+0x12c>)
 800be36:	2201      	movs	r2, #1
 800be38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	3b01      	subs	r3, #1
 800be3e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d1f1      	bne.n	800be2a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800be46:	4b13      	ldr	r3, [pc, #76]	; (800be94 <xTaskResumeAll+0x130>)
 800be48:	2200      	movs	r2, #0
 800be4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <xTaskResumeAll+0x12c>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d009      	beq.n	800be68 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be54:	2301      	movs	r3, #1
 800be56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be58:	4b0f      	ldr	r3, [pc, #60]	; (800be98 <xTaskResumeAll+0x134>)
 800be5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be5e:	601a      	str	r2, [r3, #0]
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be68:	f000 ff86 	bl	800cd78 <vPortExitCritical>

	return xAlreadyYielded;
 800be6c:	68bb      	ldr	r3, [r7, #8]
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3710      	adds	r7, #16
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	200025f4 	.word	0x200025f4
 800be7c:	200025cc 	.word	0x200025cc
 800be80:	2000258c 	.word	0x2000258c
 800be84:	200025d4 	.word	0x200025d4
 800be88:	200024d0 	.word	0x200024d0
 800be8c:	200024cc 	.word	0x200024cc
 800be90:	200025e0 	.word	0x200025e0
 800be94:	200025dc 	.word	0x200025dc
 800be98:	e000ed04 	.word	0xe000ed04

0800be9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <xTaskGetTickCount+0x1c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bea8:	687b      	ldr	r3, [r7, #4]
}
 800beaa:	4618      	mov	r0, r3
 800beac:	370c      	adds	r7, #12
 800beae:	46bd      	mov	sp, r7
 800beb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb4:	4770      	bx	lr
 800beb6:	bf00      	nop
 800beb8:	200025d0 	.word	0x200025d0

0800bebc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b082      	sub	sp, #8
 800bec0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bec2:	f001 f807 	bl	800ced4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bec6:	2300      	movs	r3, #0
 800bec8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800beca:	4b04      	ldr	r3, [pc, #16]	; (800bedc <xTaskGetTickCountFromISR+0x20>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bed0:	683b      	ldr	r3, [r7, #0]
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	200025d0 	.word	0x200025d0

0800bee0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bee6:	2300      	movs	r3, #0
 800bee8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beea:	4b4e      	ldr	r3, [pc, #312]	; (800c024 <xTaskIncrementTick+0x144>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	f040 8087 	bne.w	800c002 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bef4:	4b4c      	ldr	r3, [pc, #304]	; (800c028 <xTaskIncrementTick+0x148>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	3301      	adds	r3, #1
 800befa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800befc:	4a4a      	ldr	r2, [pc, #296]	; (800c028 <xTaskIncrementTick+0x148>)
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d11f      	bne.n	800bf48 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800bf08:	4b48      	ldr	r3, [pc, #288]	; (800c02c <xTaskIncrementTick+0x14c>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d009      	beq.n	800bf26 <xTaskIncrementTick+0x46>
 800bf12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	603b      	str	r3, [r7, #0]
 800bf24:	e7fe      	b.n	800bf24 <xTaskIncrementTick+0x44>
 800bf26:	4b41      	ldr	r3, [pc, #260]	; (800c02c <xTaskIncrementTick+0x14c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	60fb      	str	r3, [r7, #12]
 800bf2c:	4b40      	ldr	r3, [pc, #256]	; (800c030 <xTaskIncrementTick+0x150>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	4a3e      	ldr	r2, [pc, #248]	; (800c02c <xTaskIncrementTick+0x14c>)
 800bf32:	6013      	str	r3, [r2, #0]
 800bf34:	4a3e      	ldr	r2, [pc, #248]	; (800c030 <xTaskIncrementTick+0x150>)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	6013      	str	r3, [r2, #0]
 800bf3a:	4b3e      	ldr	r3, [pc, #248]	; (800c034 <xTaskIncrementTick+0x154>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	4a3c      	ldr	r2, [pc, #240]	; (800c034 <xTaskIncrementTick+0x154>)
 800bf42:	6013      	str	r3, [r2, #0]
 800bf44:	f000 fa98 	bl	800c478 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf48:	4b3b      	ldr	r3, [pc, #236]	; (800c038 <xTaskIncrementTick+0x158>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d348      	bcc.n	800bfe4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf52:	4b36      	ldr	r3, [pc, #216]	; (800c02c <xTaskIncrementTick+0x14c>)
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d104      	bne.n	800bf66 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf5c:	4b36      	ldr	r3, [pc, #216]	; (800c038 <xTaskIncrementTick+0x158>)
 800bf5e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf62:	601a      	str	r2, [r3, #0]
					break;
 800bf64:	e03e      	b.n	800bfe4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf66:	4b31      	ldr	r3, [pc, #196]	; (800c02c <xTaskIncrementTick+0x14c>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68db      	ldr	r3, [r3, #12]
 800bf6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf70:	68bb      	ldr	r3, [r7, #8]
 800bf72:	685b      	ldr	r3, [r3, #4]
 800bf74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf76:	693a      	ldr	r2, [r7, #16]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d203      	bcs.n	800bf86 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf7e:	4a2e      	ldr	r2, [pc, #184]	; (800c038 <xTaskIncrementTick+0x158>)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf84:	e02e      	b.n	800bfe4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	3304      	adds	r3, #4
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f7fe fd1c 	bl	800a9c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d004      	beq.n	800bfa2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	3318      	adds	r3, #24
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	f7fe fd13 	bl	800a9c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	409a      	lsls	r2, r3
 800bfaa:	4b24      	ldr	r3, [pc, #144]	; (800c03c <xTaskIncrementTick+0x15c>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4313      	orrs	r3, r2
 800bfb0:	4a22      	ldr	r2, [pc, #136]	; (800c03c <xTaskIncrementTick+0x15c>)
 800bfb2:	6013      	str	r3, [r2, #0]
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	4a1f      	ldr	r2, [pc, #124]	; (800c040 <xTaskIncrementTick+0x160>)
 800bfc2:	441a      	add	r2, r3
 800bfc4:	68bb      	ldr	r3, [r7, #8]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	f7fe fc9f 	bl	800a90e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd4:	4b1b      	ldr	r3, [pc, #108]	; (800c044 <xTaskIncrementTick+0x164>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d3b9      	bcc.n	800bf52 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800bfde:	2301      	movs	r3, #1
 800bfe0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfe2:	e7b6      	b.n	800bf52 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bfe4:	4b17      	ldr	r3, [pc, #92]	; (800c044 <xTaskIncrementTick+0x164>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfea:	4915      	ldr	r1, [pc, #84]	; (800c040 <xTaskIncrementTick+0x160>)
 800bfec:	4613      	mov	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	4413      	add	r3, r2
 800bff2:	009b      	lsls	r3, r3, #2
 800bff4:	440b      	add	r3, r1
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d907      	bls.n	800c00c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800bffc:	2301      	movs	r3, #1
 800bffe:	617b      	str	r3, [r7, #20]
 800c000:	e004      	b.n	800c00c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c002:	4b11      	ldr	r3, [pc, #68]	; (800c048 <xTaskIncrementTick+0x168>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	4a0f      	ldr	r2, [pc, #60]	; (800c048 <xTaskIncrementTick+0x168>)
 800c00a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c00c:	4b0f      	ldr	r3, [pc, #60]	; (800c04c <xTaskIncrementTick+0x16c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800c014:	2301      	movs	r3, #1
 800c016:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c018:	697b      	ldr	r3, [r7, #20]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3718      	adds	r7, #24
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	200025f4 	.word	0x200025f4
 800c028:	200025d0 	.word	0x200025d0
 800c02c:	20002584 	.word	0x20002584
 800c030:	20002588 	.word	0x20002588
 800c034:	200025e4 	.word	0x200025e4
 800c038:	200025ec 	.word	0x200025ec
 800c03c:	200025d4 	.word	0x200025d4
 800c040:	200024d0 	.word	0x200024d0
 800c044:	200024cc 	.word	0x200024cc
 800c048:	200025dc 	.word	0x200025dc
 800c04c:	200025e0 	.word	0x200025e0

0800c050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c050:	b480      	push	{r7}
 800c052:	b087      	sub	sp, #28
 800c054:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c056:	4b26      	ldr	r3, [pc, #152]	; (800c0f0 <vTaskSwitchContext+0xa0>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c05e:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <vTaskSwitchContext+0xa4>)
 800c060:	2201      	movs	r2, #1
 800c062:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c064:	e03e      	b.n	800c0e4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800c066:	4b23      	ldr	r3, [pc, #140]	; (800c0f4 <vTaskSwitchContext+0xa4>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c06c:	4b22      	ldr	r3, [pc, #136]	; (800c0f8 <vTaskSwitchContext+0xa8>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	fab3 f383 	clz	r3, r3
 800c078:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c07a:	7afb      	ldrb	r3, [r7, #11]
 800c07c:	f1c3 031f 	rsb	r3, r3, #31
 800c080:	617b      	str	r3, [r7, #20]
 800c082:	491e      	ldr	r1, [pc, #120]	; (800c0fc <vTaskSwitchContext+0xac>)
 800c084:	697a      	ldr	r2, [r7, #20]
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d109      	bne.n	800c0aa <vTaskSwitchContext+0x5a>
	__asm volatile
 800c096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c09a:	f383 8811 	msr	BASEPRI, r3
 800c09e:	f3bf 8f6f 	isb	sy
 800c0a2:	f3bf 8f4f 	dsb	sy
 800c0a6:	607b      	str	r3, [r7, #4]
 800c0a8:	e7fe      	b.n	800c0a8 <vTaskSwitchContext+0x58>
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	4613      	mov	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	4413      	add	r3, r2
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4a11      	ldr	r2, [pc, #68]	; (800c0fc <vTaskSwitchContext+0xac>)
 800c0b6:	4413      	add	r3, r2
 800c0b8:	613b      	str	r3, [r7, #16]
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	605a      	str	r2, [r3, #4]
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	685a      	ldr	r2, [r3, #4]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	3308      	adds	r3, #8
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d104      	bne.n	800c0da <vTaskSwitchContext+0x8a>
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	685b      	ldr	r3, [r3, #4]
 800c0d4:	685a      	ldr	r2, [r3, #4]
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	605a      	str	r2, [r3, #4]
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	4a07      	ldr	r2, [pc, #28]	; (800c100 <vTaskSwitchContext+0xb0>)
 800c0e2:	6013      	str	r3, [r2, #0]
}
 800c0e4:	bf00      	nop
 800c0e6:	371c      	adds	r7, #28
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr
 800c0f0:	200025f4 	.word	0x200025f4
 800c0f4:	200025e0 	.word	0x200025e0
 800c0f8:	200025d4 	.word	0x200025d4
 800c0fc:	200024d0 	.word	0x200024d0
 800c100:	200024cc 	.word	0x200024cc

0800c104 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d109      	bne.n	800c128 <vTaskPlaceOnEventList+0x24>
 800c114:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	60fb      	str	r3, [r7, #12]
 800c126:	e7fe      	b.n	800c126 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c128:	4b07      	ldr	r3, [pc, #28]	; (800c148 <vTaskPlaceOnEventList+0x44>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	3318      	adds	r3, #24
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7fe fc10 	bl	800a956 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c136:	2101      	movs	r1, #1
 800c138:	6838      	ldr	r0, [r7, #0]
 800c13a:	f000 fc61 	bl	800ca00 <prvAddCurrentTaskToDelayedList>
}
 800c13e:	bf00      	nop
 800c140:	3710      	adds	r7, #16
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	200024cc 	.word	0x200024cc

0800c14c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b086      	sub	sp, #24
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	68db      	ldr	r3, [r3, #12]
 800c158:	68db      	ldr	r3, [r3, #12]
 800c15a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c15c:	693b      	ldr	r3, [r7, #16]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d109      	bne.n	800c176 <xTaskRemoveFromEventList+0x2a>
 800c162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	e7fe      	b.n	800c174 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	3318      	adds	r3, #24
 800c17a:	4618      	mov	r0, r3
 800c17c:	f7fe fc24 	bl	800a9c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c180:	4b1d      	ldr	r3, [pc, #116]	; (800c1f8 <xTaskRemoveFromEventList+0xac>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d11c      	bne.n	800c1c2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	3304      	adds	r3, #4
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe fc1b 	bl	800a9c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c192:	693b      	ldr	r3, [r7, #16]
 800c194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c196:	2201      	movs	r2, #1
 800c198:	409a      	lsls	r2, r3
 800c19a:	4b18      	ldr	r3, [pc, #96]	; (800c1fc <xTaskRemoveFromEventList+0xb0>)
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	4a16      	ldr	r2, [pc, #88]	; (800c1fc <xTaskRemoveFromEventList+0xb0>)
 800c1a2:	6013      	str	r3, [r2, #0]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1a8:	4613      	mov	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4a13      	ldr	r2, [pc, #76]	; (800c200 <xTaskRemoveFromEventList+0xb4>)
 800c1b2:	441a      	add	r2, r3
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	3304      	adds	r3, #4
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4610      	mov	r0, r2
 800c1bc:	f7fe fba7 	bl	800a90e <vListInsertEnd>
 800c1c0:	e005      	b.n	800c1ce <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	3318      	adds	r3, #24
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	480e      	ldr	r0, [pc, #56]	; (800c204 <xTaskRemoveFromEventList+0xb8>)
 800c1ca:	f7fe fba0 	bl	800a90e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1d2:	4b0d      	ldr	r3, [pc, #52]	; (800c208 <xTaskRemoveFromEventList+0xbc>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	d905      	bls.n	800c1e8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <xTaskRemoveFromEventList+0xc0>)
 800c1e2:	2201      	movs	r2, #1
 800c1e4:	601a      	str	r2, [r3, #0]
 800c1e6:	e001      	b.n	800c1ec <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1ec:	697b      	ldr	r3, [r7, #20]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3718      	adds	r7, #24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200025f4 	.word	0x200025f4
 800c1fc:	200025d4 	.word	0x200025d4
 800c200:	200024d0 	.word	0x200024d0
 800c204:	2000258c 	.word	0x2000258c
 800c208:	200024cc 	.word	0x200024cc
 800c20c:	200025e0 	.word	0x200025e0

0800c210 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c210:	b480      	push	{r7}
 800c212:	b083      	sub	sp, #12
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c218:	4b06      	ldr	r3, [pc, #24]	; (800c234 <vTaskInternalSetTimeOutState+0x24>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c220:	4b05      	ldr	r3, [pc, #20]	; (800c238 <vTaskInternalSetTimeOutState+0x28>)
 800c222:	681a      	ldr	r2, [r3, #0]
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	605a      	str	r2, [r3, #4]
}
 800c228:	bf00      	nop
 800c22a:	370c      	adds	r7, #12
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	200025e4 	.word	0x200025e4
 800c238:	200025d0 	.word	0x200025d0

0800c23c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b088      	sub	sp, #32
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d109      	bne.n	800c260 <xTaskCheckForTimeOut+0x24>
 800c24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c250:	f383 8811 	msr	BASEPRI, r3
 800c254:	f3bf 8f6f 	isb	sy
 800c258:	f3bf 8f4f 	dsb	sy
 800c25c:	613b      	str	r3, [r7, #16]
 800c25e:	e7fe      	b.n	800c25e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d109      	bne.n	800c27a <xTaskCheckForTimeOut+0x3e>
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	e7fe      	b.n	800c278 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800c27a:	f000 fd4f 	bl	800cd1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c27e:	4b1d      	ldr	r3, [pc, #116]	; (800c2f4 <xTaskCheckForTimeOut+0xb8>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c296:	d102      	bne.n	800c29e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c298:	2300      	movs	r3, #0
 800c29a:	61fb      	str	r3, [r7, #28]
 800c29c:	e023      	b.n	800c2e6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681a      	ldr	r2, [r3, #0]
 800c2a2:	4b15      	ldr	r3, [pc, #84]	; (800c2f8 <xTaskCheckForTimeOut+0xbc>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d007      	beq.n	800c2ba <xTaskCheckForTimeOut+0x7e>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	69ba      	ldr	r2, [r7, #24]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d302      	bcc.n	800c2ba <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	61fb      	str	r3, [r7, #28]
 800c2b8:	e015      	b.n	800c2e6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d20b      	bcs.n	800c2dc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	681a      	ldr	r2, [r3, #0]
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	1ad2      	subs	r2, r2, r3
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff ff9d 	bl	800c210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	61fb      	str	r3, [r7, #28]
 800c2da:	e004      	b.n	800c2e6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2e2:	2301      	movs	r3, #1
 800c2e4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2e6:	f000 fd47 	bl	800cd78 <vPortExitCritical>

	return xReturn;
 800c2ea:	69fb      	ldr	r3, [r7, #28]
}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3720      	adds	r7, #32
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	200025d0 	.word	0x200025d0
 800c2f8:	200025e4 	.word	0x200025e4

0800c2fc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c300:	4b03      	ldr	r3, [pc, #12]	; (800c310 <vTaskMissedYield+0x14>)
 800c302:	2201      	movs	r2, #1
 800c304:	601a      	str	r2, [r3, #0]
}
 800c306:	bf00      	nop
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr
 800c310:	200025e0 	.word	0x200025e0

0800c314 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c31c:	f000 f852 	bl	800c3c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c320:	4b06      	ldr	r3, [pc, #24]	; (800c33c <prvIdleTask+0x28>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	2b01      	cmp	r3, #1
 800c326:	d9f9      	bls.n	800c31c <prvIdleTask+0x8>
			{
				taskYIELD();
 800c328:	4b05      	ldr	r3, [pc, #20]	; (800c340 <prvIdleTask+0x2c>)
 800c32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	f3bf 8f4f 	dsb	sy
 800c334:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c338:	e7f0      	b.n	800c31c <prvIdleTask+0x8>
 800c33a:	bf00      	nop
 800c33c:	200024d0 	.word	0x200024d0
 800c340:	e000ed04 	.word	0xe000ed04

0800c344 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b082      	sub	sp, #8
 800c348:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c34a:	2300      	movs	r3, #0
 800c34c:	607b      	str	r3, [r7, #4]
 800c34e:	e00c      	b.n	800c36a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	4a12      	ldr	r2, [pc, #72]	; (800c3a4 <prvInitialiseTaskLists+0x60>)
 800c35c:	4413      	add	r3, r2
 800c35e:	4618      	mov	r0, r3
 800c360:	f7fe faa8 	bl	800a8b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	3301      	adds	r3, #1
 800c368:	607b      	str	r3, [r7, #4]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2b06      	cmp	r3, #6
 800c36e:	d9ef      	bls.n	800c350 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c370:	480d      	ldr	r0, [pc, #52]	; (800c3a8 <prvInitialiseTaskLists+0x64>)
 800c372:	f7fe fa9f 	bl	800a8b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c376:	480d      	ldr	r0, [pc, #52]	; (800c3ac <prvInitialiseTaskLists+0x68>)
 800c378:	f7fe fa9c 	bl	800a8b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c37c:	480c      	ldr	r0, [pc, #48]	; (800c3b0 <prvInitialiseTaskLists+0x6c>)
 800c37e:	f7fe fa99 	bl	800a8b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c382:	480c      	ldr	r0, [pc, #48]	; (800c3b4 <prvInitialiseTaskLists+0x70>)
 800c384:	f7fe fa96 	bl	800a8b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c388:	480b      	ldr	r0, [pc, #44]	; (800c3b8 <prvInitialiseTaskLists+0x74>)
 800c38a:	f7fe fa93 	bl	800a8b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c38e:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <prvInitialiseTaskLists+0x78>)
 800c390:	4a05      	ldr	r2, [pc, #20]	; (800c3a8 <prvInitialiseTaskLists+0x64>)
 800c392:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c394:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <prvInitialiseTaskLists+0x7c>)
 800c396:	4a05      	ldr	r2, [pc, #20]	; (800c3ac <prvInitialiseTaskLists+0x68>)
 800c398:	601a      	str	r2, [r3, #0]
}
 800c39a:	bf00      	nop
 800c39c:	3708      	adds	r7, #8
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	200024d0 	.word	0x200024d0
 800c3a8:	2000255c 	.word	0x2000255c
 800c3ac:	20002570 	.word	0x20002570
 800c3b0:	2000258c 	.word	0x2000258c
 800c3b4:	200025a0 	.word	0x200025a0
 800c3b8:	200025b8 	.word	0x200025b8
 800c3bc:	20002584 	.word	0x20002584
 800c3c0:	20002588 	.word	0x20002588

0800c3c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b082      	sub	sp, #8
 800c3c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3ca:	e019      	b.n	800c400 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3cc:	f000 fca6 	bl	800cd1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3d0:	4b0f      	ldr	r3, [pc, #60]	; (800c410 <prvCheckTasksWaitingTermination+0x4c>)
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	68db      	ldr	r3, [r3, #12]
 800c3d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7fe faf3 	bl	800a9c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3e2:	4b0c      	ldr	r3, [pc, #48]	; (800c414 <prvCheckTasksWaitingTermination+0x50>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	3b01      	subs	r3, #1
 800c3e8:	4a0a      	ldr	r2, [pc, #40]	; (800c414 <prvCheckTasksWaitingTermination+0x50>)
 800c3ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3ec:	4b0a      	ldr	r3, [pc, #40]	; (800c418 <prvCheckTasksWaitingTermination+0x54>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	4a09      	ldr	r2, [pc, #36]	; (800c418 <prvCheckTasksWaitingTermination+0x54>)
 800c3f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3f6:	f000 fcbf 	bl	800cd78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f000 f80e 	bl	800c41c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <prvCheckTasksWaitingTermination+0x54>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e1      	bne.n	800c3cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	200025a0 	.word	0x200025a0
 800c414:	200025cc 	.word	0x200025cc
 800c418:	200025b4 	.word	0x200025b4

0800c41c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c41c:	b580      	push	{r7, lr}
 800c41e:	b084      	sub	sp, #16
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d108      	bne.n	800c440 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c432:	4618      	mov	r0, r3
 800c434:	f000 fe4e 	bl	800d0d4 <vPortFree>
				vPortFree( pxTCB );
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 fe4b 	bl	800d0d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c43e:	e017      	b.n	800c470 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c446:	2b01      	cmp	r3, #1
 800c448:	d103      	bne.n	800c452 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fe42 	bl	800d0d4 <vPortFree>
	}
 800c450:	e00e      	b.n	800c470 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d009      	beq.n	800c470 <prvDeleteTCB+0x54>
 800c45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c460:	f383 8811 	msr	BASEPRI, r3
 800c464:	f3bf 8f6f 	isb	sy
 800c468:	f3bf 8f4f 	dsb	sy
 800c46c:	60fb      	str	r3, [r7, #12]
 800c46e:	e7fe      	b.n	800c46e <prvDeleteTCB+0x52>
	}
 800c470:	bf00      	nop
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c478:	b480      	push	{r7}
 800c47a:	b083      	sub	sp, #12
 800c47c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c47e:	4b0c      	ldr	r3, [pc, #48]	; (800c4b0 <prvResetNextTaskUnblockTime+0x38>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d104      	bne.n	800c492 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c488:	4b0a      	ldr	r3, [pc, #40]	; (800c4b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c48a:	f04f 32ff 	mov.w	r2, #4294967295
 800c48e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c490:	e008      	b.n	800c4a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c492:	4b07      	ldr	r3, [pc, #28]	; (800c4b0 <prvResetNextTaskUnblockTime+0x38>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	68db      	ldr	r3, [r3, #12]
 800c49a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	4a04      	ldr	r2, [pc, #16]	; (800c4b4 <prvResetNextTaskUnblockTime+0x3c>)
 800c4a2:	6013      	str	r3, [r2, #0]
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	20002584 	.word	0x20002584
 800c4b4:	200025ec 	.word	0x200025ec

0800c4b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b083      	sub	sp, #12
 800c4bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4be:	4b0b      	ldr	r3, [pc, #44]	; (800c4ec <xTaskGetSchedulerState+0x34>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d102      	bne.n	800c4cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	607b      	str	r3, [r7, #4]
 800c4ca:	e008      	b.n	800c4de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4cc:	4b08      	ldr	r3, [pc, #32]	; (800c4f0 <xTaskGetSchedulerState+0x38>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d102      	bne.n	800c4da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	607b      	str	r3, [r7, #4]
 800c4d8:	e001      	b.n	800c4de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4de:	687b      	ldr	r3, [r7, #4]
	}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	370c      	adds	r7, #12
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	200025d8 	.word	0x200025d8
 800c4f0:	200025f4 	.word	0x200025f4

0800c4f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c500:	2300      	movs	r3, #0
 800c502:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d069      	beq.n	800c5de <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c50e:	4b36      	ldr	r3, [pc, #216]	; (800c5e8 <xTaskPriorityInherit+0xf4>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c514:	429a      	cmp	r2, r3
 800c516:	d259      	bcs.n	800c5cc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	699b      	ldr	r3, [r3, #24]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	db06      	blt.n	800c52e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c520:	4b31      	ldr	r3, [pc, #196]	; (800c5e8 <xTaskPriorityInherit+0xf4>)
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c526:	f1c3 0207 	rsb	r2, r3, #7
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	6959      	ldr	r1, [r3, #20]
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c536:	4613      	mov	r3, r2
 800c538:	009b      	lsls	r3, r3, #2
 800c53a:	4413      	add	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4a2b      	ldr	r2, [pc, #172]	; (800c5ec <xTaskPriorityInherit+0xf8>)
 800c540:	4413      	add	r3, r2
 800c542:	4299      	cmp	r1, r3
 800c544:	d13a      	bne.n	800c5bc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	3304      	adds	r3, #4
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe fa3c 	bl	800a9c8 <uxListRemove>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d115      	bne.n	800c582 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55a:	4924      	ldr	r1, [pc, #144]	; (800c5ec <xTaskPriorityInherit+0xf8>)
 800c55c:	4613      	mov	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	440b      	add	r3, r1
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10a      	bne.n	800c582 <xTaskPriorityInherit+0x8e>
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c570:	2201      	movs	r2, #1
 800c572:	fa02 f303 	lsl.w	r3, r2, r3
 800c576:	43da      	mvns	r2, r3
 800c578:	4b1d      	ldr	r3, [pc, #116]	; (800c5f0 <xTaskPriorityInherit+0xfc>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	4013      	ands	r3, r2
 800c57e:	4a1c      	ldr	r2, [pc, #112]	; (800c5f0 <xTaskPriorityInherit+0xfc>)
 800c580:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c582:	4b19      	ldr	r3, [pc, #100]	; (800c5e8 <xTaskPriorityInherit+0xf4>)
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c590:	2201      	movs	r2, #1
 800c592:	409a      	lsls	r2, r3
 800c594:	4b16      	ldr	r3, [pc, #88]	; (800c5f0 <xTaskPriorityInherit+0xfc>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	4313      	orrs	r3, r2
 800c59a:	4a15      	ldr	r2, [pc, #84]	; (800c5f0 <xTaskPriorityInherit+0xfc>)
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5a2:	4613      	mov	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4413      	add	r3, r2
 800c5a8:	009b      	lsls	r3, r3, #2
 800c5aa:	4a10      	ldr	r2, [pc, #64]	; (800c5ec <xTaskPriorityInherit+0xf8>)
 800c5ac:	441a      	add	r2, r3
 800c5ae:	68bb      	ldr	r3, [r7, #8]
 800c5b0:	3304      	adds	r3, #4
 800c5b2:	4619      	mov	r1, r3
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	f7fe f9aa 	bl	800a90e <vListInsertEnd>
 800c5ba:	e004      	b.n	800c5c6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <xTaskPriorityInherit+0xf4>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	60fb      	str	r3, [r7, #12]
 800c5ca:	e008      	b.n	800c5de <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5d0:	4b05      	ldr	r3, [pc, #20]	; (800c5e8 <xTaskPriorityInherit+0xf4>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d201      	bcs.n	800c5de <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5de:	68fb      	ldr	r3, [r7, #12]
	}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	200024cc 	.word	0x200024cc
 800c5ec:	200024d0 	.word	0x200024d0
 800c5f0:	200025d4 	.word	0x200025d4

0800c5f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b086      	sub	sp, #24
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c600:	2300      	movs	r3, #0
 800c602:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d06c      	beq.n	800c6e4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c60a:	4b39      	ldr	r3, [pc, #228]	; (800c6f0 <xTaskPriorityDisinherit+0xfc>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	693a      	ldr	r2, [r7, #16]
 800c610:	429a      	cmp	r2, r3
 800c612:	d009      	beq.n	800c628 <xTaskPriorityDisinherit+0x34>
 800c614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c618:	f383 8811 	msr	BASEPRI, r3
 800c61c:	f3bf 8f6f 	isb	sy
 800c620:	f3bf 8f4f 	dsb	sy
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	e7fe      	b.n	800c626 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d109      	bne.n	800c644 <xTaskPriorityDisinherit+0x50>
 800c630:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	60bb      	str	r3, [r7, #8]
 800c642:	e7fe      	b.n	800c642 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c648:	1e5a      	subs	r2, r3, #1
 800c64a:	693b      	ldr	r3, [r7, #16]
 800c64c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c656:	429a      	cmp	r2, r3
 800c658:	d044      	beq.n	800c6e4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d140      	bne.n	800c6e4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c662:	693b      	ldr	r3, [r7, #16]
 800c664:	3304      	adds	r3, #4
 800c666:	4618      	mov	r0, r3
 800c668:	f7fe f9ae 	bl	800a9c8 <uxListRemove>
 800c66c:	4603      	mov	r3, r0
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d115      	bne.n	800c69e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c676:	491f      	ldr	r1, [pc, #124]	; (800c6f4 <xTaskPriorityDisinherit+0x100>)
 800c678:	4613      	mov	r3, r2
 800c67a:	009b      	lsls	r3, r3, #2
 800c67c:	4413      	add	r3, r2
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	440b      	add	r3, r1
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10a      	bne.n	800c69e <xTaskPriorityDisinherit+0xaa>
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	2201      	movs	r2, #1
 800c68e:	fa02 f303 	lsl.w	r3, r2, r3
 800c692:	43da      	mvns	r2, r3
 800c694:	4b18      	ldr	r3, [pc, #96]	; (800c6f8 <xTaskPriorityDisinherit+0x104>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4013      	ands	r3, r2
 800c69a:	4a17      	ldr	r2, [pc, #92]	; (800c6f8 <xTaskPriorityDisinherit+0x104>)
 800c69c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c6a2:	693b      	ldr	r3, [r7, #16]
 800c6a4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6aa:	f1c3 0207 	rsb	r2, r3, #7
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	409a      	lsls	r2, r3
 800c6ba:	4b0f      	ldr	r3, [pc, #60]	; (800c6f8 <xTaskPriorityDisinherit+0x104>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	4313      	orrs	r3, r2
 800c6c0:	4a0d      	ldr	r2, [pc, #52]	; (800c6f8 <xTaskPriorityDisinherit+0x104>)
 800c6c2:	6013      	str	r3, [r2, #0]
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	009b      	lsls	r3, r3, #2
 800c6cc:	4413      	add	r3, r2
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	4a08      	ldr	r2, [pc, #32]	; (800c6f4 <xTaskPriorityDisinherit+0x100>)
 800c6d2:	441a      	add	r2, r3
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	3304      	adds	r3, #4
 800c6d8:	4619      	mov	r1, r3
 800c6da:	4610      	mov	r0, r2
 800c6dc:	f7fe f917 	bl	800a90e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6e4:	697b      	ldr	r3, [r7, #20]
	}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	200024cc 	.word	0x200024cc
 800c6f4:	200024d0 	.word	0x200024d0
 800c6f8:	200025d4 	.word	0x200025d4

0800c6fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b088      	sub	sp, #32
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c70a:	2301      	movs	r3, #1
 800c70c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 8081 	beq.w	800c818 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c716:	69bb      	ldr	r3, [r7, #24]
 800c718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d109      	bne.n	800c732 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800c71e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	60fb      	str	r3, [r7, #12]
 800c730:	e7fe      	b.n	800c730 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c736:	683a      	ldr	r2, [r7, #0]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d902      	bls.n	800c742 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	61fb      	str	r3, [r7, #28]
 800c740:	e002      	b.n	800c748 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c742:	69bb      	ldr	r3, [r7, #24]
 800c744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c746:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c74c:	69fa      	ldr	r2, [r7, #28]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d062      	beq.n	800c818 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c752:	69bb      	ldr	r3, [r7, #24]
 800c754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c756:	697a      	ldr	r2, [r7, #20]
 800c758:	429a      	cmp	r2, r3
 800c75a:	d15d      	bne.n	800c818 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c75c:	4b30      	ldr	r3, [pc, #192]	; (800c820 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	69ba      	ldr	r2, [r7, #24]
 800c762:	429a      	cmp	r2, r3
 800c764:	d109      	bne.n	800c77a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800c766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c76a:	f383 8811 	msr	BASEPRI, r3
 800c76e:	f3bf 8f6f 	isb	sy
 800c772:	f3bf 8f4f 	dsb	sy
 800c776:	60bb      	str	r3, [r7, #8]
 800c778:	e7fe      	b.n	800c778 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	69fa      	ldr	r2, [r7, #28]
 800c784:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	db04      	blt.n	800c798 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c78e:	69fb      	ldr	r3, [r7, #28]
 800c790:	f1c3 0207 	rsb	r2, r3, #7
 800c794:	69bb      	ldr	r3, [r7, #24]
 800c796:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	6959      	ldr	r1, [r3, #20]
 800c79c:	693a      	ldr	r2, [r7, #16]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	4a1f      	ldr	r2, [pc, #124]	; (800c824 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c7a8:	4413      	add	r3, r2
 800c7aa:	4299      	cmp	r1, r3
 800c7ac:	d134      	bne.n	800c818 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	3304      	adds	r3, #4
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fe f908 	bl	800a9c8 <uxListRemove>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d115      	bne.n	800c7ea <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c7be:	69bb      	ldr	r3, [r7, #24]
 800c7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c2:	4918      	ldr	r1, [pc, #96]	; (800c824 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	440b      	add	r3, r1
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d10a      	bne.n	800c7ea <vTaskPriorityDisinheritAfterTimeout+0xee>
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d8:	2201      	movs	r2, #1
 800c7da:	fa02 f303 	lsl.w	r3, r2, r3
 800c7de:	43da      	mvns	r2, r3
 800c7e0:	4b11      	ldr	r3, [pc, #68]	; (800c828 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	4a10      	ldr	r2, [pc, #64]	; (800c828 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c7e8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	409a      	lsls	r2, r3
 800c7f2:	4b0d      	ldr	r3, [pc, #52]	; (800c828 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	4313      	orrs	r3, r2
 800c7f8:	4a0b      	ldr	r2, [pc, #44]	; (800c828 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800c7fa:	6013      	str	r3, [r2, #0]
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c800:	4613      	mov	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4a06      	ldr	r2, [pc, #24]	; (800c824 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800c80a:	441a      	add	r2, r3
 800c80c:	69bb      	ldr	r3, [r7, #24]
 800c80e:	3304      	adds	r3, #4
 800c810:	4619      	mov	r1, r3
 800c812:	4610      	mov	r0, r2
 800c814:	f7fe f87b 	bl	800a90e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c818:	bf00      	nop
 800c81a:	3720      	adds	r7, #32
 800c81c:	46bd      	mov	sp, r7
 800c81e:	bd80      	pop	{r7, pc}
 800c820:	200024cc 	.word	0x200024cc
 800c824:	200024d0 	.word	0x200024d0
 800c828:	200025d4 	.word	0x200025d4

0800c82c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c82c:	b480      	push	{r7}
 800c82e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c830:	4b07      	ldr	r3, [pc, #28]	; (800c850 <pvTaskIncrementMutexHeldCount+0x24>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d004      	beq.n	800c842 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c838:	4b05      	ldr	r3, [pc, #20]	; (800c850 <pvTaskIncrementMutexHeldCount+0x24>)
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c83e:	3201      	adds	r2, #1
 800c840:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c842:	4b03      	ldr	r3, [pc, #12]	; (800c850 <pvTaskIncrementMutexHeldCount+0x24>)
 800c844:	681b      	ldr	r3, [r3, #0]
	}
 800c846:	4618      	mov	r0, r3
 800c848:	46bd      	mov	sp, r7
 800c84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84e:	4770      	bx	lr
 800c850:	200024cc 	.word	0x200024cc

0800c854 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c85e:	f000 fa5d 	bl	800cd1c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c862:	4b1e      	ldr	r3, [pc, #120]	; (800c8dc <ulTaskNotifyTake+0x88>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d113      	bne.n	800c894 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c86c:	4b1b      	ldr	r3, [pc, #108]	; (800c8dc <ulTaskNotifyTake+0x88>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	2201      	movs	r2, #1
 800c872:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d00b      	beq.n	800c894 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c87c:	2101      	movs	r1, #1
 800c87e:	6838      	ldr	r0, [r7, #0]
 800c880:	f000 f8be 	bl	800ca00 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c884:	4b16      	ldr	r3, [pc, #88]	; (800c8e0 <ulTaskNotifyTake+0x8c>)
 800c886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	f3bf 8f4f 	dsb	sy
 800c890:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c894:	f000 fa70 	bl	800cd78 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c898:	f000 fa40 	bl	800cd1c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c89c:	4b0f      	ldr	r3, [pc, #60]	; (800c8dc <ulTaskNotifyTake+0x88>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8a2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d00c      	beq.n	800c8c4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d004      	beq.n	800c8ba <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c8b0:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <ulTaskNotifyTake+0x88>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	64da      	str	r2, [r3, #76]	; 0x4c
 800c8b8:	e004      	b.n	800c8c4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c8ba:	4b08      	ldr	r3, [pc, #32]	; (800c8dc <ulTaskNotifyTake+0x88>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	3a01      	subs	r2, #1
 800c8c2:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8c4:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <ulTaskNotifyTake+0x88>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800c8ce:	f000 fa53 	bl	800cd78 <vPortExitCritical>

		return ulReturn;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
	}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	200024cc 	.word	0x200024cc
 800c8e0:	e000ed04 	.word	0xe000ed04

0800c8e4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b08a      	sub	sp, #40	; 0x28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d109      	bne.n	800c908 <vTaskNotifyGiveFromISR+0x24>
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	61bb      	str	r3, [r7, #24]
 800c906:	e7fe      	b.n	800c906 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c908:	f000 fae4 	bl	800ced4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800c910:	f3ef 8211 	mrs	r2, BASEPRI
 800c914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c918:	f383 8811 	msr	BASEPRI, r3
 800c91c:	f3bf 8f6f 	isb	sy
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	617a      	str	r2, [r7, #20]
 800c926:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c928:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c92a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c932:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c936:	2202      	movs	r2, #2
 800c938:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c940:	1c5a      	adds	r2, r3, #1
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c946:	7ffb      	ldrb	r3, [r7, #31]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d144      	bne.n	800c9d6 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c950:	2b00      	cmp	r3, #0
 800c952:	d009      	beq.n	800c968 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 800c954:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c958:	f383 8811 	msr	BASEPRI, r3
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f3bf 8f4f 	dsb	sy
 800c964:	60fb      	str	r3, [r7, #12]
 800c966:	e7fe      	b.n	800c966 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c968:	4b1f      	ldr	r3, [pc, #124]	; (800c9e8 <vTaskNotifyGiveFromISR+0x104>)
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d11c      	bne.n	800c9aa <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	3304      	adds	r3, #4
 800c974:	4618      	mov	r0, r3
 800c976:	f7fe f827 	bl	800a9c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97e:	2201      	movs	r2, #1
 800c980:	409a      	lsls	r2, r3
 800c982:	4b1a      	ldr	r3, [pc, #104]	; (800c9ec <vTaskNotifyGiveFromISR+0x108>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4313      	orrs	r3, r2
 800c988:	4a18      	ldr	r2, [pc, #96]	; (800c9ec <vTaskNotifyGiveFromISR+0x108>)
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c98e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c990:	4613      	mov	r3, r2
 800c992:	009b      	lsls	r3, r3, #2
 800c994:	4413      	add	r3, r2
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	4a15      	ldr	r2, [pc, #84]	; (800c9f0 <vTaskNotifyGiveFromISR+0x10c>)
 800c99a:	441a      	add	r2, r3
 800c99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c99e:	3304      	adds	r3, #4
 800c9a0:	4619      	mov	r1, r3
 800c9a2:	4610      	mov	r0, r2
 800c9a4:	f7fd ffb3 	bl	800a90e <vListInsertEnd>
 800c9a8:	e005      	b.n	800c9b6 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	3318      	adds	r3, #24
 800c9ae:	4619      	mov	r1, r3
 800c9b0:	4810      	ldr	r0, [pc, #64]	; (800c9f4 <vTaskNotifyGiveFromISR+0x110>)
 800c9b2:	f7fd ffac 	bl	800a90e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9ba:	4b0f      	ldr	r3, [pc, #60]	; (800c9f8 <vTaskNotifyGiveFromISR+0x114>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9c0:	429a      	cmp	r2, r3
 800c9c2:	d908      	bls.n	800c9d6 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d002      	beq.n	800c9d0 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c9d0:	4b0a      	ldr	r3, [pc, #40]	; (800c9fc <vTaskNotifyGiveFromISR+0x118>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	601a      	str	r2, [r3, #0]
 800c9d6:	6a3b      	ldr	r3, [r7, #32]
 800c9d8:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c9e0:	bf00      	nop
 800c9e2:	3728      	adds	r7, #40	; 0x28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	200025f4 	.word	0x200025f4
 800c9ec:	200025d4 	.word	0x200025d4
 800c9f0:	200024d0 	.word	0x200024d0
 800c9f4:	2000258c 	.word	0x2000258c
 800c9f8:	200024cc 	.word	0x200024cc
 800c9fc:	200025e0 	.word	0x200025e0

0800ca00 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca0a:	4b29      	ldr	r3, [pc, #164]	; (800cab0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca10:	4b28      	ldr	r3, [pc, #160]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	3304      	adds	r3, #4
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7fd ffd6 	bl	800a9c8 <uxListRemove>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d10b      	bne.n	800ca3a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ca22:	4b24      	ldr	r3, [pc, #144]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca28:	2201      	movs	r2, #1
 800ca2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2e:	43da      	mvns	r2, r3
 800ca30:	4b21      	ldr	r3, [pc, #132]	; (800cab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4013      	ands	r3, r2
 800ca36:	4a20      	ldr	r2, [pc, #128]	; (800cab8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ca38:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca40:	d10a      	bne.n	800ca58 <prvAddCurrentTaskToDelayedList+0x58>
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d007      	beq.n	800ca58 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca48:	4b1a      	ldr	r3, [pc, #104]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	3304      	adds	r3, #4
 800ca4e:	4619      	mov	r1, r3
 800ca50:	481a      	ldr	r0, [pc, #104]	; (800cabc <prvAddCurrentTaskToDelayedList+0xbc>)
 800ca52:	f7fd ff5c 	bl	800a90e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca56:	e026      	b.n	800caa6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ca60:	4b14      	ldr	r3, [pc, #80]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68ba      	ldr	r2, [r7, #8]
 800ca66:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	429a      	cmp	r2, r3
 800ca6e:	d209      	bcs.n	800ca84 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca70:	4b13      	ldr	r3, [pc, #76]	; (800cac0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	4b0f      	ldr	r3, [pc, #60]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4619      	mov	r1, r3
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	f7fd ff6a 	bl	800a956 <vListInsert>
}
 800ca82:	e010      	b.n	800caa6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca84:	4b0f      	ldr	r3, [pc, #60]	; (800cac4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800ca86:	681a      	ldr	r2, [r3, #0]
 800ca88:	4b0a      	ldr	r3, [pc, #40]	; (800cab4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	4619      	mov	r1, r3
 800ca90:	4610      	mov	r0, r2
 800ca92:	f7fd ff60 	bl	800a956 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ca96:	4b0c      	ldr	r3, [pc, #48]	; (800cac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	429a      	cmp	r2, r3
 800ca9e:	d202      	bcs.n	800caa6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800caa0:	4a09      	ldr	r2, [pc, #36]	; (800cac8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800caa2:	68bb      	ldr	r3, [r7, #8]
 800caa4:	6013      	str	r3, [r2, #0]
}
 800caa6:	bf00      	nop
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}
 800caae:	bf00      	nop
 800cab0:	200025d0 	.word	0x200025d0
 800cab4:	200024cc 	.word	0x200024cc
 800cab8:	200025d4 	.word	0x200025d4
 800cabc:	200025b8 	.word	0x200025b8
 800cac0:	20002588 	.word	0x20002588
 800cac4:	20002584 	.word	0x20002584
 800cac8:	200025ec 	.word	0x200025ec

0800cacc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cacc:	b480      	push	{r7}
 800cace:	b085      	sub	sp, #20
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	3b04      	subs	r3, #4
 800cadc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cae4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	3b04      	subs	r3, #4
 800caea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800caec:	68bb      	ldr	r3, [r7, #8]
 800caee:	f023 0201 	bic.w	r2, r3, #1
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	3b04      	subs	r3, #4
 800cafa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cafc:	4a0c      	ldr	r2, [pc, #48]	; (800cb30 <pxPortInitialiseStack+0x64>)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	3b14      	subs	r3, #20
 800cb06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb08:	687a      	ldr	r2, [r7, #4]
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3b04      	subs	r3, #4
 800cb12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	f06f 0202 	mvn.w	r2, #2
 800cb1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3b20      	subs	r3, #32
 800cb20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb22:	68fb      	ldr	r3, [r7, #12]
}
 800cb24:	4618      	mov	r0, r3
 800cb26:	3714      	adds	r7, #20
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr
 800cb30:	0800cb35 	.word	0x0800cb35

0800cb34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b085      	sub	sp, #20
 800cb38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb3e:	4b11      	ldr	r3, [pc, #68]	; (800cb84 <prvTaskExitError+0x50>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb46:	d009      	beq.n	800cb5c <prvTaskExitError+0x28>
	__asm volatile
 800cb48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb4c:	f383 8811 	msr	BASEPRI, r3
 800cb50:	f3bf 8f6f 	isb	sy
 800cb54:	f3bf 8f4f 	dsb	sy
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	e7fe      	b.n	800cb5a <prvTaskExitError+0x26>
 800cb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb60:	f383 8811 	msr	BASEPRI, r3
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	f3bf 8f4f 	dsb	sy
 800cb6c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb6e:	bf00      	nop
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d0fc      	beq.n	800cb70 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb76:	bf00      	nop
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	2000000c 	.word	0x2000000c
	...

0800cb90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <pxCurrentTCBConst2>)
 800cb92:	6819      	ldr	r1, [r3, #0]
 800cb94:	6808      	ldr	r0, [r1, #0]
 800cb96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb9a:	f380 8809 	msr	PSP, r0
 800cb9e:	f3bf 8f6f 	isb	sy
 800cba2:	f04f 0000 	mov.w	r0, #0
 800cba6:	f380 8811 	msr	BASEPRI, r0
 800cbaa:	4770      	bx	lr
 800cbac:	f3af 8000 	nop.w

0800cbb0 <pxCurrentTCBConst2>:
 800cbb0:	200024cc 	.word	0x200024cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbb4:	bf00      	nop
 800cbb6:	bf00      	nop

0800cbb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbb8:	4808      	ldr	r0, [pc, #32]	; (800cbdc <prvPortStartFirstTask+0x24>)
 800cbba:	6800      	ldr	r0, [r0, #0]
 800cbbc:	6800      	ldr	r0, [r0, #0]
 800cbbe:	f380 8808 	msr	MSP, r0
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8814 	msr	CONTROL, r0
 800cbca:	b662      	cpsie	i
 800cbcc:	b661      	cpsie	f
 800cbce:	f3bf 8f4f 	dsb	sy
 800cbd2:	f3bf 8f6f 	isb	sy
 800cbd6:	df00      	svc	0
 800cbd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbda:	bf00      	nop
 800cbdc:	e000ed08 	.word	0xe000ed08

0800cbe0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b086      	sub	sp, #24
 800cbe4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cbe6:	4b44      	ldr	r3, [pc, #272]	; (800ccf8 <xPortStartScheduler+0x118>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a44      	ldr	r2, [pc, #272]	; (800ccfc <xPortStartScheduler+0x11c>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d109      	bne.n	800cc04 <xPortStartScheduler+0x24>
 800cbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf4:	f383 8811 	msr	BASEPRI, r3
 800cbf8:	f3bf 8f6f 	isb	sy
 800cbfc:	f3bf 8f4f 	dsb	sy
 800cc00:	613b      	str	r3, [r7, #16]
 800cc02:	e7fe      	b.n	800cc02 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc04:	4b3c      	ldr	r3, [pc, #240]	; (800ccf8 <xPortStartScheduler+0x118>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a3d      	ldr	r2, [pc, #244]	; (800cd00 <xPortStartScheduler+0x120>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d109      	bne.n	800cc22 <xPortStartScheduler+0x42>
 800cc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	60fb      	str	r3, [r7, #12]
 800cc20:	e7fe      	b.n	800cc20 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc22:	4b38      	ldr	r3, [pc, #224]	; (800cd04 <xPortStartScheduler+0x124>)
 800cc24:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	22ff      	movs	r2, #255	; 0xff
 800cc32:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	b2db      	uxtb	r3, r3
 800cc3a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc3c:	78fb      	ldrb	r3, [r7, #3]
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cc44:	b2da      	uxtb	r2, r3
 800cc46:	4b30      	ldr	r3, [pc, #192]	; (800cd08 <xPortStartScheduler+0x128>)
 800cc48:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc4a:	4b30      	ldr	r3, [pc, #192]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc4c:	2207      	movs	r2, #7
 800cc4e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc50:	e009      	b.n	800cc66 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800cc52:	4b2e      	ldr	r3, [pc, #184]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	3b01      	subs	r3, #1
 800cc58:	4a2c      	ldr	r2, [pc, #176]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc5a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc5c:	78fb      	ldrb	r3, [r7, #3]
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc66:	78fb      	ldrb	r3, [r7, #3]
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc6e:	2b80      	cmp	r3, #128	; 0x80
 800cc70:	d0ef      	beq.n	800cc52 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc72:	4b26      	ldr	r3, [pc, #152]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f1c3 0307 	rsb	r3, r3, #7
 800cc7a:	2b04      	cmp	r3, #4
 800cc7c:	d009      	beq.n	800cc92 <xPortStartScheduler+0xb2>
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	60bb      	str	r3, [r7, #8]
 800cc90:	e7fe      	b.n	800cc90 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc92:	4b1e      	ldr	r3, [pc, #120]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	021b      	lsls	r3, r3, #8
 800cc98:	4a1c      	ldr	r2, [pc, #112]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc9a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc9c:	4b1b      	ldr	r3, [pc, #108]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cca4:	4a19      	ldr	r2, [pc, #100]	; (800cd0c <xPortStartScheduler+0x12c>)
 800cca6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccb0:	4b17      	ldr	r3, [pc, #92]	; (800cd10 <xPortStartScheduler+0x130>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a16      	ldr	r2, [pc, #88]	; (800cd10 <xPortStartScheduler+0x130>)
 800ccb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ccba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ccbc:	4b14      	ldr	r3, [pc, #80]	; (800cd10 <xPortStartScheduler+0x130>)
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	4a13      	ldr	r2, [pc, #76]	; (800cd10 <xPortStartScheduler+0x130>)
 800ccc2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ccc6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccc8:	f000 f8d6 	bl	800ce78 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cccc:	4b11      	ldr	r3, [pc, #68]	; (800cd14 <xPortStartScheduler+0x134>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccd2:	f000 f8f5 	bl	800cec0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ccd6:	4b10      	ldr	r3, [pc, #64]	; (800cd18 <xPortStartScheduler+0x138>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a0f      	ldr	r2, [pc, #60]	; (800cd18 <xPortStartScheduler+0x138>)
 800ccdc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cce0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cce2:	f7ff ff69 	bl	800cbb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cce6:	f7ff f9b3 	bl	800c050 <vTaskSwitchContext>
	prvTaskExitError();
 800ccea:	f7ff ff23 	bl	800cb34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3718      	adds	r7, #24
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	e000ed00 	.word	0xe000ed00
 800ccfc:	410fc271 	.word	0x410fc271
 800cd00:	410fc270 	.word	0x410fc270
 800cd04:	e000e400 	.word	0xe000e400
 800cd08:	200025f8 	.word	0x200025f8
 800cd0c:	200025fc 	.word	0x200025fc
 800cd10:	e000ed20 	.word	0xe000ed20
 800cd14:	2000000c 	.word	0x2000000c
 800cd18:	e000ef34 	.word	0xe000ef34

0800cd1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b083      	sub	sp, #12
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd26:	f383 8811 	msr	BASEPRI, r3
 800cd2a:	f3bf 8f6f 	isb	sy
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd34:	4b0e      	ldr	r3, [pc, #56]	; (800cd70 <vPortEnterCritical+0x54>)
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	4a0d      	ldr	r2, [pc, #52]	; (800cd70 <vPortEnterCritical+0x54>)
 800cd3c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd3e:	4b0c      	ldr	r3, [pc, #48]	; (800cd70 <vPortEnterCritical+0x54>)
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	2b01      	cmp	r3, #1
 800cd44:	d10e      	bne.n	800cd64 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd46:	4b0b      	ldr	r3, [pc, #44]	; (800cd74 <vPortEnterCritical+0x58>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d009      	beq.n	800cd64 <vPortEnterCritical+0x48>
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	603b      	str	r3, [r7, #0]
 800cd62:	e7fe      	b.n	800cd62 <vPortEnterCritical+0x46>
	}
}
 800cd64:	bf00      	nop
 800cd66:	370c      	adds	r7, #12
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr
 800cd70:	2000000c 	.word	0x2000000c
 800cd74:	e000ed04 	.word	0xe000ed04

0800cd78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd7e:	4b11      	ldr	r3, [pc, #68]	; (800cdc4 <vPortExitCritical+0x4c>)
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d109      	bne.n	800cd9a <vPortExitCritical+0x22>
 800cd86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	607b      	str	r3, [r7, #4]
 800cd98:	e7fe      	b.n	800cd98 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800cd9a:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <vPortExitCritical+0x4c>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	4a08      	ldr	r2, [pc, #32]	; (800cdc4 <vPortExitCritical+0x4c>)
 800cda2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cda4:	4b07      	ldr	r3, [pc, #28]	; (800cdc4 <vPortExitCritical+0x4c>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d104      	bne.n	800cdb6 <vPortExitCritical+0x3e>
 800cdac:	2300      	movs	r3, #0
 800cdae:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdb6:	bf00      	nop
 800cdb8:	370c      	adds	r7, #12
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	2000000c 	.word	0x2000000c
	...

0800cdd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cdd0:	f3ef 8009 	mrs	r0, PSP
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	4b15      	ldr	r3, [pc, #84]	; (800ce30 <pxCurrentTCBConst>)
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	f01e 0f10 	tst.w	lr, #16
 800cde0:	bf08      	it	eq
 800cde2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cde6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdea:	6010      	str	r0, [r2, #0]
 800cdec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cdf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cdf4:	f380 8811 	msr	BASEPRI, r0
 800cdf8:	f3bf 8f4f 	dsb	sy
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f7ff f926 	bl	800c050 <vTaskSwitchContext>
 800ce04:	f04f 0000 	mov.w	r0, #0
 800ce08:	f380 8811 	msr	BASEPRI, r0
 800ce0c:	bc09      	pop	{r0, r3}
 800ce0e:	6819      	ldr	r1, [r3, #0]
 800ce10:	6808      	ldr	r0, [r1, #0]
 800ce12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce16:	f01e 0f10 	tst.w	lr, #16
 800ce1a:	bf08      	it	eq
 800ce1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce20:	f380 8809 	msr	PSP, r0
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	4770      	bx	lr
 800ce2a:	bf00      	nop
 800ce2c:	f3af 8000 	nop.w

0800ce30 <pxCurrentTCBConst>:
 800ce30:	200024cc 	.word	0x200024cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce34:	bf00      	nop
 800ce36:	bf00      	nop

0800ce38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce42:	f383 8811 	msr	BASEPRI, r3
 800ce46:	f3bf 8f6f 	isb	sy
 800ce4a:	f3bf 8f4f 	dsb	sy
 800ce4e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce50:	f7ff f846 	bl	800bee0 <xTaskIncrementTick>
 800ce54:	4603      	mov	r3, r0
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce5a:	4b06      	ldr	r3, [pc, #24]	; (800ce74 <SysTick_Handler+0x3c>)
 800ce5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce60:	601a      	str	r2, [r3, #0]
 800ce62:	2300      	movs	r3, #0
 800ce64:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce66:	683b      	ldr	r3, [r7, #0]
 800ce68:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce6c:	bf00      	nop
 800ce6e:	3708      	adds	r7, #8
 800ce70:	46bd      	mov	sp, r7
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	e000ed04 	.word	0xe000ed04

0800ce78 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce78:	b480      	push	{r7}
 800ce7a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce7c:	4b0b      	ldr	r3, [pc, #44]	; (800ceac <vPortSetupTimerInterrupt+0x34>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce82:	4b0b      	ldr	r3, [pc, #44]	; (800ceb0 <vPortSetupTimerInterrupt+0x38>)
 800ce84:	2200      	movs	r2, #0
 800ce86:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce88:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <vPortSetupTimerInterrupt+0x3c>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	4a0a      	ldr	r2, [pc, #40]	; (800ceb8 <vPortSetupTimerInterrupt+0x40>)
 800ce8e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce92:	099b      	lsrs	r3, r3, #6
 800ce94:	4a09      	ldr	r2, [pc, #36]	; (800cebc <vPortSetupTimerInterrupt+0x44>)
 800ce96:	3b01      	subs	r3, #1
 800ce98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce9a:	4b04      	ldr	r3, [pc, #16]	; (800ceac <vPortSetupTimerInterrupt+0x34>)
 800ce9c:	2207      	movs	r2, #7
 800ce9e:	601a      	str	r2, [r3, #0]
}
 800cea0:	bf00      	nop
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	e000e010 	.word	0xe000e010
 800ceb0:	e000e018 	.word	0xe000e018
 800ceb4:	20000000 	.word	0x20000000
 800ceb8:	10624dd3 	.word	0x10624dd3
 800cebc:	e000e014 	.word	0xe000e014

0800cec0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cec0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ced0 <vPortEnableVFP+0x10>
 800cec4:	6801      	ldr	r1, [r0, #0]
 800cec6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ceca:	6001      	str	r1, [r0, #0]
 800cecc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cece:	bf00      	nop
 800ced0:	e000ed88 	.word	0xe000ed88

0800ced4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ceda:	f3ef 8305 	mrs	r3, IPSR
 800cede:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2b0f      	cmp	r3, #15
 800cee4:	d913      	bls.n	800cf0e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cee6:	4a16      	ldr	r2, [pc, #88]	; (800cf40 <vPortValidateInterruptPriority+0x6c>)
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	4413      	add	r3, r2
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cef0:	4b14      	ldr	r3, [pc, #80]	; (800cf44 <vPortValidateInterruptPriority+0x70>)
 800cef2:	781b      	ldrb	r3, [r3, #0]
 800cef4:	7afa      	ldrb	r2, [r7, #11]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d209      	bcs.n	800cf0e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800cefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	607b      	str	r3, [r7, #4]
 800cf0c:	e7fe      	b.n	800cf0c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf0e:	4b0e      	ldr	r3, [pc, #56]	; (800cf48 <vPortValidateInterruptPriority+0x74>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cf16:	4b0d      	ldr	r3, [pc, #52]	; (800cf4c <vPortValidateInterruptPriority+0x78>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	429a      	cmp	r2, r3
 800cf1c:	d909      	bls.n	800cf32 <vPortValidateInterruptPriority+0x5e>
 800cf1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf22:	f383 8811 	msr	BASEPRI, r3
 800cf26:	f3bf 8f6f 	isb	sy
 800cf2a:	f3bf 8f4f 	dsb	sy
 800cf2e:	603b      	str	r3, [r7, #0]
 800cf30:	e7fe      	b.n	800cf30 <vPortValidateInterruptPriority+0x5c>
	}
 800cf32:	bf00      	nop
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	e000e3f0 	.word	0xe000e3f0
 800cf44:	200025f8 	.word	0x200025f8
 800cf48:	e000ed0c 	.word	0xe000ed0c
 800cf4c:	200025fc 	.word	0x200025fc

0800cf50 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b08a      	sub	sp, #40	; 0x28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf5c:	f7fe fef4 	bl	800bd48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf60:	4b57      	ldr	r3, [pc, #348]	; (800d0c0 <pvPortMalloc+0x170>)
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf68:	f000 f90c 	bl	800d184 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf6c:	4b55      	ldr	r3, [pc, #340]	; (800d0c4 <pvPortMalloc+0x174>)
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	4013      	ands	r3, r2
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	f040 808c 	bne.w	800d092 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d01c      	beq.n	800cfba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800cf80:	2208      	movs	r2, #8
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	4413      	add	r3, r2
 800cf86:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	f003 0307 	and.w	r3, r3, #7
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d013      	beq.n	800cfba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	f023 0307 	bic.w	r3, r3, #7
 800cf98:	3308      	adds	r3, #8
 800cf9a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f003 0307 	and.w	r3, r3, #7
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d009      	beq.n	800cfba <pvPortMalloc+0x6a>
 800cfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	617b      	str	r3, [r7, #20]
 800cfb8:	e7fe      	b.n	800cfb8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d068      	beq.n	800d092 <pvPortMalloc+0x142>
 800cfc0:	4b41      	ldr	r3, [pc, #260]	; (800d0c8 <pvPortMalloc+0x178>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d863      	bhi.n	800d092 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cfca:	4b40      	ldr	r3, [pc, #256]	; (800d0cc <pvPortMalloc+0x17c>)
 800cfcc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cfce:	4b3f      	ldr	r3, [pc, #252]	; (800d0cc <pvPortMalloc+0x17c>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfd4:	e004      	b.n	800cfe0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800cfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d903      	bls.n	800cff2 <pvPortMalloc+0xa2>
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d1f1      	bne.n	800cfd6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cff2:	4b33      	ldr	r3, [pc, #204]	; (800d0c0 <pvPortMalloc+0x170>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d04a      	beq.n	800d092 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cffc:	6a3b      	ldr	r3, [r7, #32]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2208      	movs	r2, #8
 800d002:	4413      	add	r3, r2
 800d004:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	6a3b      	ldr	r3, [r7, #32]
 800d00c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	685a      	ldr	r2, [r3, #4]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	1ad2      	subs	r2, r2, r3
 800d016:	2308      	movs	r3, #8
 800d018:	005b      	lsls	r3, r3, #1
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d91e      	bls.n	800d05c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d01e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	4413      	add	r3, r2
 800d024:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d026:	69bb      	ldr	r3, [r7, #24]
 800d028:	f003 0307 	and.w	r3, r3, #7
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d009      	beq.n	800d044 <pvPortMalloc+0xf4>
 800d030:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d034:	f383 8811 	msr	BASEPRI, r3
 800d038:	f3bf 8f6f 	isb	sy
 800d03c:	f3bf 8f4f 	dsb	sy
 800d040:	613b      	str	r3, [r7, #16]
 800d042:	e7fe      	b.n	800d042 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	685a      	ldr	r2, [r3, #4]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	1ad2      	subs	r2, r2, r3
 800d04c:	69bb      	ldr	r3, [r7, #24]
 800d04e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d052:	687a      	ldr	r2, [r7, #4]
 800d054:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d056:	69b8      	ldr	r0, [r7, #24]
 800d058:	f000 f8f6 	bl	800d248 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d05c:	4b1a      	ldr	r3, [pc, #104]	; (800d0c8 <pvPortMalloc+0x178>)
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	4a18      	ldr	r2, [pc, #96]	; (800d0c8 <pvPortMalloc+0x178>)
 800d068:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d06a:	4b17      	ldr	r3, [pc, #92]	; (800d0c8 <pvPortMalloc+0x178>)
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	4b18      	ldr	r3, [pc, #96]	; (800d0d0 <pvPortMalloc+0x180>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	429a      	cmp	r2, r3
 800d074:	d203      	bcs.n	800d07e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d076:	4b14      	ldr	r3, [pc, #80]	; (800d0c8 <pvPortMalloc+0x178>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	4a15      	ldr	r2, [pc, #84]	; (800d0d0 <pvPortMalloc+0x180>)
 800d07c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d080:	685a      	ldr	r2, [r3, #4]
 800d082:	4b10      	ldr	r3, [pc, #64]	; (800d0c4 <pvPortMalloc+0x174>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	431a      	orrs	r2, r3
 800d088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d08e:	2200      	movs	r2, #0
 800d090:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d092:	f7fe fe67 	bl	800bd64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	f003 0307 	and.w	r3, r3, #7
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d009      	beq.n	800d0b4 <pvPortMalloc+0x164>
 800d0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a4:	f383 8811 	msr	BASEPRI, r3
 800d0a8:	f3bf 8f6f 	isb	sy
 800d0ac:	f3bf 8f4f 	dsb	sy
 800d0b0:	60fb      	str	r3, [r7, #12]
 800d0b2:	e7fe      	b.n	800d0b2 <pvPortMalloc+0x162>
	return pvReturn;
 800d0b4:	69fb      	ldr	r3, [r7, #28]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3728      	adds	r7, #40	; 0x28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20006208 	.word	0x20006208
 800d0c4:	20006214 	.word	0x20006214
 800d0c8:	2000620c 	.word	0x2000620c
 800d0cc:	20006200 	.word	0x20006200
 800d0d0:	20006210 	.word	0x20006210

0800d0d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b086      	sub	sp, #24
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d046      	beq.n	800d174 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0e6:	2308      	movs	r3, #8
 800d0e8:	425b      	negs	r3, r3
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d0f0:	697b      	ldr	r3, [r7, #20]
 800d0f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	685a      	ldr	r2, [r3, #4]
 800d0f8:	4b20      	ldr	r3, [pc, #128]	; (800d17c <vPortFree+0xa8>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	4013      	ands	r3, r2
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d109      	bne.n	800d116 <vPortFree+0x42>
 800d102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	60fb      	str	r3, [r7, #12]
 800d114:	e7fe      	b.n	800d114 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d116:	693b      	ldr	r3, [r7, #16]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d009      	beq.n	800d132 <vPortFree+0x5e>
 800d11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d122:	f383 8811 	msr	BASEPRI, r3
 800d126:	f3bf 8f6f 	isb	sy
 800d12a:	f3bf 8f4f 	dsb	sy
 800d12e:	60bb      	str	r3, [r7, #8]
 800d130:	e7fe      	b.n	800d130 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	685a      	ldr	r2, [r3, #4]
 800d136:	4b11      	ldr	r3, [pc, #68]	; (800d17c <vPortFree+0xa8>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4013      	ands	r3, r2
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d019      	beq.n	800d174 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d115      	bne.n	800d174 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	4b0b      	ldr	r3, [pc, #44]	; (800d17c <vPortFree+0xa8>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	43db      	mvns	r3, r3
 800d152:	401a      	ands	r2, r3
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d158:	f7fe fdf6 	bl	800bd48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d15c:	693b      	ldr	r3, [r7, #16]
 800d15e:	685a      	ldr	r2, [r3, #4]
 800d160:	4b07      	ldr	r3, [pc, #28]	; (800d180 <vPortFree+0xac>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4413      	add	r3, r2
 800d166:	4a06      	ldr	r2, [pc, #24]	; (800d180 <vPortFree+0xac>)
 800d168:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d16a:	6938      	ldr	r0, [r7, #16]
 800d16c:	f000 f86c 	bl	800d248 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800d170:	f7fe fdf8 	bl	800bd64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d174:	bf00      	nop
 800d176:	3718      	adds	r7, #24
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	20006214 	.word	0x20006214
 800d180:	2000620c 	.word	0x2000620c

0800d184 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d184:	b480      	push	{r7}
 800d186:	b085      	sub	sp, #20
 800d188:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d18a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d18e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d190:	4b27      	ldr	r3, [pc, #156]	; (800d230 <prvHeapInit+0xac>)
 800d192:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	f003 0307 	and.w	r3, r3, #7
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d00c      	beq.n	800d1b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3307      	adds	r3, #7
 800d1a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f023 0307 	bic.w	r3, r3, #7
 800d1aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d1ac:	68ba      	ldr	r2, [r7, #8]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	1ad3      	subs	r3, r2, r3
 800d1b2:	4a1f      	ldr	r2, [pc, #124]	; (800d230 <prvHeapInit+0xac>)
 800d1b4:	4413      	add	r3, r2
 800d1b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d1bc:	4a1d      	ldr	r2, [pc, #116]	; (800d234 <prvHeapInit+0xb0>)
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1c2:	4b1c      	ldr	r3, [pc, #112]	; (800d234 <prvHeapInit+0xb0>)
 800d1c4:	2200      	movs	r2, #0
 800d1c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	68ba      	ldr	r2, [r7, #8]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1d0:	2208      	movs	r2, #8
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	1a9b      	subs	r3, r3, r2
 800d1d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	f023 0307 	bic.w	r3, r3, #7
 800d1de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	4a15      	ldr	r2, [pc, #84]	; (800d238 <prvHeapInit+0xb4>)
 800d1e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1e6:	4b14      	ldr	r3, [pc, #80]	; (800d238 <prvHeapInit+0xb4>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1ee:	4b12      	ldr	r3, [pc, #72]	; (800d238 <prvHeapInit+0xb4>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	1ad2      	subs	r2, r2, r3
 800d200:	683b      	ldr	r3, [r7, #0]
 800d202:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d204:	4b0c      	ldr	r3, [pc, #48]	; (800d238 <prvHeapInit+0xb4>)
 800d206:	681a      	ldr	r2, [r3, #0]
 800d208:	683b      	ldr	r3, [r7, #0]
 800d20a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	685b      	ldr	r3, [r3, #4]
 800d210:	4a0a      	ldr	r2, [pc, #40]	; (800d23c <prvHeapInit+0xb8>)
 800d212:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	685b      	ldr	r3, [r3, #4]
 800d218:	4a09      	ldr	r2, [pc, #36]	; (800d240 <prvHeapInit+0xbc>)
 800d21a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d21c:	4b09      	ldr	r3, [pc, #36]	; (800d244 <prvHeapInit+0xc0>)
 800d21e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d222:	601a      	str	r2, [r3, #0]
}
 800d224:	bf00      	nop
 800d226:	3714      	adds	r7, #20
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr
 800d230:	20002600 	.word	0x20002600
 800d234:	20006200 	.word	0x20006200
 800d238:	20006208 	.word	0x20006208
 800d23c:	20006210 	.word	0x20006210
 800d240:	2000620c 	.word	0x2000620c
 800d244:	20006214 	.word	0x20006214

0800d248 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d250:	4b28      	ldr	r3, [pc, #160]	; (800d2f4 <prvInsertBlockIntoFreeList+0xac>)
 800d252:	60fb      	str	r3, [r7, #12]
 800d254:	e002      	b.n	800d25c <prvInsertBlockIntoFreeList+0x14>
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	60fb      	str	r3, [r7, #12]
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	687a      	ldr	r2, [r7, #4]
 800d262:	429a      	cmp	r2, r3
 800d264:	d8f7      	bhi.n	800d256 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	68ba      	ldr	r2, [r7, #8]
 800d270:	4413      	add	r3, r2
 800d272:	687a      	ldr	r2, [r7, #4]
 800d274:	429a      	cmp	r2, r3
 800d276:	d108      	bne.n	800d28a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	685a      	ldr	r2, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	441a      	add	r2, r3
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	685b      	ldr	r3, [r3, #4]
 800d292:	68ba      	ldr	r2, [r7, #8]
 800d294:	441a      	add	r2, r3
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	429a      	cmp	r2, r3
 800d29c:	d118      	bne.n	800d2d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	4b15      	ldr	r3, [pc, #84]	; (800d2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d00d      	beq.n	800d2c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	685b      	ldr	r3, [r3, #4]
 800d2b4:	441a      	add	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	601a      	str	r2, [r3, #0]
 800d2c4:	e008      	b.n	800d2d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2c6:	4b0c      	ldr	r3, [pc, #48]	; (800d2f8 <prvInsertBlockIntoFreeList+0xb0>)
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	e003      	b.n	800d2d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2d8:	68fa      	ldr	r2, [r7, #12]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	429a      	cmp	r2, r3
 800d2de:	d002      	beq.n	800d2e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	687a      	ldr	r2, [r7, #4]
 800d2e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2e6:	bf00      	nop
 800d2e8:	3714      	adds	r7, #20
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
 800d2f2:	bf00      	nop
 800d2f4:	20006200 	.word	0x20006200
 800d2f8:	20006208 	.word	0x20006208

0800d2fc <__libc_init_array>:
 800d2fc:	b570      	push	{r4, r5, r6, lr}
 800d2fe:	4e0d      	ldr	r6, [pc, #52]	; (800d334 <__libc_init_array+0x38>)
 800d300:	4c0d      	ldr	r4, [pc, #52]	; (800d338 <__libc_init_array+0x3c>)
 800d302:	1ba4      	subs	r4, r4, r6
 800d304:	10a4      	asrs	r4, r4, #2
 800d306:	2500      	movs	r5, #0
 800d308:	42a5      	cmp	r5, r4
 800d30a:	d109      	bne.n	800d320 <__libc_init_array+0x24>
 800d30c:	4e0b      	ldr	r6, [pc, #44]	; (800d33c <__libc_init_array+0x40>)
 800d30e:	4c0c      	ldr	r4, [pc, #48]	; (800d340 <__libc_init_array+0x44>)
 800d310:	f000 f82c 	bl	800d36c <_init>
 800d314:	1ba4      	subs	r4, r4, r6
 800d316:	10a4      	asrs	r4, r4, #2
 800d318:	2500      	movs	r5, #0
 800d31a:	42a5      	cmp	r5, r4
 800d31c:	d105      	bne.n	800d32a <__libc_init_array+0x2e>
 800d31e:	bd70      	pop	{r4, r5, r6, pc}
 800d320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d324:	4798      	blx	r3
 800d326:	3501      	adds	r5, #1
 800d328:	e7ee      	b.n	800d308 <__libc_init_array+0xc>
 800d32a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d32e:	4798      	blx	r3
 800d330:	3501      	adds	r5, #1
 800d332:	e7f2      	b.n	800d31a <__libc_init_array+0x1e>
 800d334:	0800d900 	.word	0x0800d900
 800d338:	0800d900 	.word	0x0800d900
 800d33c:	0800d900 	.word	0x0800d900
 800d340:	0800d904 	.word	0x0800d904

0800d344 <memcpy>:
 800d344:	b510      	push	{r4, lr}
 800d346:	1e43      	subs	r3, r0, #1
 800d348:	440a      	add	r2, r1
 800d34a:	4291      	cmp	r1, r2
 800d34c:	d100      	bne.n	800d350 <memcpy+0xc>
 800d34e:	bd10      	pop	{r4, pc}
 800d350:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d354:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d358:	e7f7      	b.n	800d34a <memcpy+0x6>

0800d35a <memset>:
 800d35a:	4402      	add	r2, r0
 800d35c:	4603      	mov	r3, r0
 800d35e:	4293      	cmp	r3, r2
 800d360:	d100      	bne.n	800d364 <memset+0xa>
 800d362:	4770      	bx	lr
 800d364:	f803 1b01 	strb.w	r1, [r3], #1
 800d368:	e7f9      	b.n	800d35e <memset+0x4>
	...

0800d36c <_init>:
 800d36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36e:	bf00      	nop
 800d370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d372:	bc08      	pop	{r3}
 800d374:	469e      	mov	lr, r3
 800d376:	4770      	bx	lr

0800d378 <_fini>:
 800d378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37a:	bf00      	nop
 800d37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d37e:	bc08      	pop	{r3}
 800d380:	469e      	mov	lr, r3
 800d382:	4770      	bx	lr
